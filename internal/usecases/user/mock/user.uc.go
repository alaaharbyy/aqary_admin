// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/users_uc.go
//
// Generated by this command:
//
//	mockgen -source=/Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/users_uc.go -destination=/Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/mock/user.uc.go -package=mock_user_usecase
//

// Package mock_user_usecase is a generated GoMock package.
package mock_user_usecase

import (
	domain "aqary_admin/internal/domain/requests/user"
	response "aqary_admin/internal/domain/responses/user"
	sqlc "aqary_admin/internal/domain/sqlc/sqlc"
	auth_usecase "aqary_admin/internal/usecases/user/auth"
	exceptions "aqary_admin/pkg/utils/exceptions"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserCompositeUseCase is a mock of UserCompositeUseCase interface.
type MockUserCompositeUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserCompositeUseCaseMockRecorder
}

// MockUserCompositeUseCaseMockRecorder is the mock recorder for MockUserCompositeUseCase.
type MockUserCompositeUseCaseMockRecorder struct {
	mock *MockUserCompositeUseCase
}

// NewMockUserCompositeUseCase creates a new mock instance.
func NewMockUserCompositeUseCase(ctrl *gomock.Controller) *MockUserCompositeUseCase {
	mock := &MockUserCompositeUseCase{ctrl: ctrl}
	mock.recorder = &MockUserCompositeUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCompositeUseCase) EXPECT() *MockUserCompositeUseCaseMockRecorder {
	return m.recorder
}

// AddCompanyAdminPermission mocks base method.
func (m *MockUserCompositeUseCase) AddCompanyAdminPermission(ctx *gin.Context, req domain.AddCompanyAdminPermissionRequest) (*sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCompanyAdminPermission", ctx, req)
	ret0, _ := ret[0].(*sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// AddCompanyAdminPermission indicates an expected call of AddCompanyAdminPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) AddCompanyAdminPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCompanyAdminPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).AddCompanyAdminPermission), ctx, req)
}

// CheckEmail mocks base method.
func (m *MockUserCompositeUseCase) CheckEmail(ctx *gin.Context, email string) (bool, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmail", ctx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CheckEmail indicates an expected call of CheckEmail.
func (mr *MockUserCompositeUseCaseMockRecorder) CheckEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmail", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CheckEmail), ctx, email)
}

// CheckUsername mocks base method.
func (m *MockUserCompositeUseCase) CheckUsername(ctx *gin.Context, username string) (bool, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsername", ctx, username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CheckUsername indicates an expected call of CheckUsername.
func (mr *MockUserCompositeUseCaseMockRecorder) CheckUsername(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsername", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CheckUsername), ctx, username)
}

// CreateCompanyUser mocks base method.
func (m *MockUserCompositeUseCase) CreateCompanyUser(c *gin.Context, req domain.CreateUserReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyUser", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateCompanyUser indicates an expected call of CreateCompanyUser.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateCompanyUser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateCompanyUser), c, req)
}

// CreateDepartment mocks base method.
func (m *MockUserCompositeUseCase) CreateDepartment(c *gin.Context, req domain.CreateDepartmentRequest) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", c, req)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateDepartment(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateDepartment), c, req)
}

// CreatePermission mocks base method.
func (m *MockUserCompositeUseCase) CreatePermission(ctx *gin.Context, req domain.CreatePermissionRequest) (*sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", ctx, req)
	ret0, _ := ret[0].(*sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) CreatePermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreatePermission), ctx, req)
}

// CreateProfile mocks base method.
func (m *MockUserCompositeUseCase) CreateProfile(ctx *gin.Context, req domain.CreateProfileRequest) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", ctx, req)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateProfile(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateProfile), ctx, req)
}

// CreateRole mocks base method.
func (m *MockUserCompositeUseCase) CreateRole(ctx *gin.Context, req domain.CreateRoleRequest) (*domain.RoleOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, req)
	ret0, _ := ret[0].(*domain.RoleOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateRole(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateRole), ctx, req)
}

// CreateRolePermission mocks base method.
func (m *MockUserCompositeUseCase) CreateRolePermission(ctx *gin.Context, req domain.CreateRolePermissionRequest) (*sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermission", ctx, req)
	ret0, _ := ret[0].(*sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateRolePermission indicates an expected call of CreateRolePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateRolePermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateRolePermission), ctx, req)
}

// CreateSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) CreateSectionPermission(ctx *gin.Context, req domain.CreateSectionPermissionRequest) (*response.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSectionPermission", ctx, req)
	ret0, _ := ret[0].(*response.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateSectionPermission indicates an expected call of CreateSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateSectionPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateSectionPermission), ctx, req)
}

// CreateSubSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) CreateSubSectionPermission(ctx *gin.Context, req domain.CreateSubSectionPermissionRequest) (*sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubSectionPermission", ctx, req)
	ret0, _ := ret[0].(*sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateSubSectionPermission indicates an expected call of CreateSubSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateSubSectionPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateSubSectionPermission), ctx, req)
}

// CreateUserLicenseVerification mocks base method.
func (m *MockUserCompositeUseCase) CreateUserLicenseVerification(c *gin.Context, req domain.CreateUserLicenseVerficiationReq) (*sqlc.CompanyVerification, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserLicenseVerification", c, req)
	ret0, _ := ret[0].(*sqlc.CompanyVerification)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUserLicenseVerification indicates an expected call of CreateUserLicenseVerification.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateUserLicenseVerification(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserLicenseVerification", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateUserLicenseVerification), c, req)
}

// CreateUserType mocks base method.
func (m *MockUserCompositeUseCase) CreateUserType(c *gin.Context, req domain.UserTypeRequest) (*sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserType", c, req)
	ret0, _ := ret[0].(*sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUserType indicates an expected call of CreateUserType.
func (mr *MockUserCompositeUseCaseMockRecorder) CreateUserType(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserType", reflect.TypeOf((*MockUserCompositeUseCase)(nil).CreateUserType), c, req)
}

// DashboardLogin mocks base method.
func (m *MockUserCompositeUseCase) DashboardLogin(c *gin.Context, req domain.LoginReq) (*response.DashboardResult, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DashboardLogin", c, req)
	ret0, _ := ret[0].(*response.DashboardResult)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DashboardLogin indicates an expected call of DashboardLogin.
func (mr *MockUserCompositeUseCaseMockRecorder) DashboardLogin(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DashboardLogin", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DashboardLogin), c, req)
}

// DeleteAllRolePermission mocks base method.
func (m *MockUserCompositeUseCase) DeleteAllRolePermission(ctx *gin.Context, id int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllRolePermission", ctx, id)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteAllRolePermission indicates an expected call of DeleteAllRolePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteAllRolePermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllRolePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteAllRolePermission), ctx, id)
}

// DeleteDepartment mocks base method.
func (m *MockUserCompositeUseCase) DeleteDepartment(ctx *gin.Context, req domain.GetDepartmentRequest) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepartment", ctx, req)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteDepartment indicates an expected call of DeleteDepartment.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteDepartment(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepartment", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteDepartment), ctx, req)
}

// DeleteOneRolePermission mocks base method.
func (m *MockUserCompositeUseCase) DeleteOneRolePermission(ctx *gin.Context, id int64, req domain.DeleteOneRolePermissionRequest) (*sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneRolePermission", ctx, id, req)
	ret0, _ := ret[0].(*sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteOneRolePermission indicates an expected call of DeleteOneRolePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteOneRolePermission(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneRolePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteOneRolePermission), ctx, id, req)
}

// DeletePendingUser mocks base method.
func (m *MockUserCompositeUseCase) DeletePendingUser(ctx *gin.Context, id int64) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePendingUser", ctx, id)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeletePendingUser indicates an expected call of DeletePendingUser.
func (mr *MockUserCompositeUseCaseMockRecorder) DeletePendingUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePendingUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeletePendingUser), ctx, id)
}

// DeletePermission mocks base method.
func (m *MockUserCompositeUseCase) DeletePermission(ctx *gin.Context, id int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", ctx, id)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) DeletePermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeletePermission), ctx, id)
}

// DeleteProfile mocks base method.
func (m *MockUserCompositeUseCase) DeleteProfile(ctx *gin.Context, id int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", ctx, id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteProfile), ctx, id)
}

// DeleteRole mocks base method.
func (m *MockUserCompositeUseCase) DeleteRole(ctx *gin.Context, req domain.DeleteRoleRequest) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, req)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteRole(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteRole), ctx, req)
}

// DeleteSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) DeleteSectionPermission(ctx *gin.Context, id int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSectionPermission", ctx, id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteSectionPermission indicates an expected call of DeleteSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteSectionPermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteSectionPermission), ctx, id)
}

// DeleteSubSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) DeleteSubSectionPermission(ctx *gin.Context, id int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubSectionPermission", ctx, id)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteSubSectionPermission indicates an expected call of DeleteSubSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteSubSectionPermission(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteSubSectionPermission), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockUserCompositeUseCase) DeleteUser(ctx *gin.Context, id int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteUser), ctx, id)
}

// DeleteUserType mocks base method.
func (m *MockUserCompositeUseCase) DeleteUserType(c *gin.Context, id int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserType", c, id)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteUserType indicates an expected call of DeleteUserType.
func (mr *MockUserCompositeUseCaseMockRecorder) DeleteUserType(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserType", reflect.TypeOf((*MockUserCompositeUseCase)(nil).DeleteUserType), c, id)
}

// ForgotPassword mocks base method.
func (m *MockUserCompositeUseCase) ForgotPassword(c *gin.Context, req domain.ForgotPasswordRequest) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", c, req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserCompositeUseCaseMockRecorder) ForgotPassword(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserCompositeUseCase)(nil).ForgotPassword), c, req)
}

// GetActiveUsersBySubscriberType mocks base method.
func (m *MockUserCompositeUseCase) GetActiveUsersBySubscriberType(c *gin.Context, typeId int64, req domain.GetActiveUsersByTypeRequest) (*[]sqlc.GetActiveUsersByTypeRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsersBySubscriberType", c, typeId, req)
	ret0, _ := ret[0].(*[]sqlc.GetActiveUsersByTypeRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetActiveUsersBySubscriberType indicates an expected call of GetActiveUsersBySubscriberType.
func (mr *MockUserCompositeUseCaseMockRecorder) GetActiveUsersBySubscriberType(c, typeId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsersBySubscriberType", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetActiveUsersBySubscriberType), c, typeId, req)
}

// GetAllAqaryUser mocks base method.
func (m *MockUserCompositeUseCase) GetAllAqaryUser(ctx *gin.Context, req domain.GetAllUserRequest) ([]response.AllUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryUser", ctx, req)
	ret0, _ := ret[0].([]response.AllUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllAqaryUser indicates an expected call of GetAllAqaryUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllAqaryUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllAqaryUser), ctx, req)
}

// GetAllAqaryUserByCountry mocks base method.
func (m *MockUserCompositeUseCase) GetAllAqaryUserByCountry(ctx *gin.Context, req domain.GetAllUserByCountryRequest) ([]response.AllUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryUserByCountry", ctx, req)
	ret0, _ := ret[0].([]response.AllUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllAqaryUserByCountry indicates an expected call of GetAllAqaryUserByCountry.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllAqaryUserByCountry(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryUserByCountry", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllAqaryUserByCountry), ctx, req)
}

// GetAllCompanyUser mocks base method.
func (m *MockUserCompositeUseCase) GetAllCompanyUser(c *gin.Context, req domain.GetCompanyUserReq) (any, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyUser", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllCompanyUser indicates an expected call of GetAllCompanyUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllCompanyUser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllCompanyUser), c, req)
}

// GetAllDeletedAqaryUser mocks base method.
func (m *MockUserCompositeUseCase) GetAllDeletedAqaryUser(ctx *gin.Context, req domain.AllDeletedUserRequests) ([]response.DeletedAqaryUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeletedAqaryUser", ctx, req)
	ret0, _ := ret[0].([]response.DeletedAqaryUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllDeletedAqaryUser indicates an expected call of GetAllDeletedAqaryUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllDeletedAqaryUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeletedAqaryUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllDeletedAqaryUser), ctx, req)
}

// GetAllDeletedAqaryUserWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllDeletedAqaryUserWithoutPagination(ctx *gin.Context) ([]response.DeletedAqaryUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDeletedAqaryUserWithoutPagination", ctx)
	ret0, _ := ret[0].([]response.DeletedAqaryUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllDeletedAqaryUserWithoutPagination indicates an expected call of GetAllDeletedAqaryUserWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllDeletedAqaryUserWithoutPagination(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDeletedAqaryUserWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllDeletedAqaryUserWithoutPagination), ctx)
}

// GetAllDepartments mocks base method.
func (m *MockUserCompositeUseCase) GetAllDepartments(ctx *gin.Context, req domain.GetAllDepartmentRequest) ([]sqlc.Department, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDepartments", ctx, req)
	ret0, _ := ret[0].([]sqlc.Department)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllDepartments indicates an expected call of GetAllDepartments.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllDepartments(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDepartments", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllDepartments), ctx, req)
}

// GetAllNestedSubSectionPermissionWithoutPermissionByID mocks base method.
func (m *MockUserCompositeUseCase) GetAllNestedSubSectionPermissionWithoutPermissionByID(ctx *gin.Context, id int64) ([]sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNestedSubSectionPermissionWithoutPermissionByID", ctx, id)
	ret0, _ := ret[0].([]sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllNestedSubSectionPermissionWithoutPermissionByID indicates an expected call of GetAllNestedSubSectionPermissionWithoutPermissionByID.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllNestedSubSectionPermissionWithoutPermissionByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNestedSubSectionPermissionWithoutPermissionByID", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllNestedSubSectionPermissionWithoutPermissionByID), ctx, id)
}

// GetAllOtherUser mocks base method.
func (m *MockUserCompositeUseCase) GetAllOtherUser(ctx *gin.Context, req domain.GetAllUserRequest) ([]*response.AllUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOtherUser", ctx, req)
	ret0, _ := ret[0].([]*response.AllUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllOtherUser indicates an expected call of GetAllOtherUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllOtherUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOtherUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllOtherUser), ctx, req)
}

// GetAllOtherUserByCountry mocks base method.
func (m *MockUserCompositeUseCase) GetAllOtherUserByCountry(ctx *gin.Context, req domain.GetAllOtherUserByCountryRequest) ([]*response.AllUserOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOtherUserByCountry", ctx, req)
	ret0, _ := ret[0].([]*response.AllUserOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllOtherUserByCountry indicates an expected call of GetAllOtherUserByCountry.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllOtherUserByCountry(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOtherUserByCountry", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllOtherUserByCountry), ctx, req)
}

// GetAllPendingUser mocks base method.
func (m *MockUserCompositeUseCase) GetAllPendingUser(ctx *gin.Context, req domain.GetAllUserRequest) ([]*response.AllPendingUserOutput, *int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPendingUser", ctx, req)
	ret0, _ := ret[0].([]*response.AllPendingUserOutput)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllPendingUser indicates an expected call of GetAllPendingUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllPendingUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPendingUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllPendingUser), ctx, req)
}

// GetAllPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllPermission(ctx *gin.Context, req domain.GetAllPermissionRequest) ([]response.CustomSectionPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomSectionPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllPermission indicates an expected call of GetAllPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllPermission), ctx, req)
}

// GetAllPermissionBySectionPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllPermissionBySectionPermission(ctx *gin.Context, sectionID int64) ([]response.PermissionOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionBySectionPermission", ctx, sectionID)
	ret0, _ := ret[0].([]response.PermissionOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermissionBySectionPermission indicates an expected call of GetAllPermissionBySectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllPermissionBySectionPermission(ctx, sectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionBySectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllPermissionBySectionPermission), ctx, sectionID)
}

// GetAllPermissionWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllPermissionWithoutPagination(ctx *gin.Context, req domain.GetAllPermissionWithoutPaginationRequest) ([]response.CustomSectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionWithoutPagination", ctx, req)
	ret0, _ := ret[0].([]response.CustomSectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermissionWithoutPagination indicates an expected call of GetAllPermissionWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllPermissionWithoutPagination(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllPermissionWithoutPagination), ctx, req)
}

// GetAllProfiles mocks base method.
func (m *MockUserCompositeUseCase) GetAllProfiles(ctx *gin.Context, limit int32) ([]*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfiles", ctx, limit)
	ret0, _ := ret[0].([]*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllProfiles indicates an expected call of GetAllProfiles.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllProfiles(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfiles", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllProfiles), ctx, limit)
}

// GetAllQuaternarySubSectionPermissionWithoutPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllQuaternarySubSectionPermissionWithoutPermission(ctx *gin.Context, req domain.GetAllPermissionRequest) ([]response.CustomAllSecondarySubSectionPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuaternarySubSectionPermissionWithoutPermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomAllSecondarySubSectionPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllQuaternarySubSectionPermissionWithoutPermission indicates an expected call of GetAllQuaternarySubSectionPermissionWithoutPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllQuaternarySubSectionPermissionWithoutPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuaternarySubSectionPermissionWithoutPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllQuaternarySubSectionPermissionWithoutPermission), ctx, req)
}

// GetAllQuinarySubSectionPermissionWithoutPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllQuinarySubSectionPermissionWithoutPermission(ctx *gin.Context, req domain.GetAllPermissionRequest) ([]response.CustomAllQuaternarySubSectionPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuinarySubSectionPermissionWithoutPermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomAllQuaternarySubSectionPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllQuinarySubSectionPermissionWithoutPermission indicates an expected call of GetAllQuinarySubSectionPermissionWithoutPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllQuinarySubSectionPermissionWithoutPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuinarySubSectionPermissionWithoutPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllQuinarySubSectionPermissionWithoutPermission), ctx, req)
}

// GetAllRolePermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllRolePermission(ctx *gin.Context, req domain.GetAllRolePermissionRequest) ([]response.CustomRolePermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolePermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomRolePermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllRolePermission indicates an expected call of GetAllRolePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllRolePermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllRolePermission), ctx, req)
}

// GetAllRolePermissionWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllRolePermissionWithoutPagination(ctx *gin.Context) ([]response.CustomRolePermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolePermissionWithoutPagination", ctx)
	ret0, _ := ret[0].([]response.CustomRolePermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRolePermissionWithoutPagination indicates an expected call of GetAllRolePermissionWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllRolePermissionWithoutPagination(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolePermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllRolePermissionWithoutPagination), ctx)
}

// GetAllRoles mocks base method.
func (m *MockUserCompositeUseCase) GetAllRoles(ctx *gin.Context, req domain.GetAllRolesRequest) ([]sqlc.Role, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx, req)
	ret0, _ := ret[0].([]sqlc.Role)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllRoles(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllRoles), ctx, req)
}

// GetAllRolesWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllRolesWithoutPagination(ctx *gin.Context, req domain.GetAllRolesRequest) ([]response.AllRolesOutput, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolesWithoutPagination", ctx, req)
	ret0, _ := ret[0].([]response.AllRolesOutput)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllRolesWithoutPagination indicates an expected call of GetAllRolesWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllRolesWithoutPagination(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolesWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllRolesWithoutPagination), ctx, req)
}

// GetAllSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllSectionPermission(ctx *gin.Context, req domain.GetAllSectionPermissionRequest) ([]response.SectionPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermission", ctx, req)
	ret0, _ := ret[0].([]response.SectionPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllSectionPermission indicates an expected call of GetAllSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllSectionPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllSectionPermission), ctx, req)
}

// GetAllSectionPermissionWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllSectionPermissionWithoutPagination(ctx *gin.Context) ([]response.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermissionWithoutPagination", ctx)
	ret0, _ := ret[0].([]response.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermissionWithoutPagination indicates an expected call of GetAllSectionPermissionWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllSectionPermissionWithoutPagination(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllSectionPermissionWithoutPagination), ctx)
}

// GetAllSubSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllSubSectionPermission(ctx *gin.Context, req domain.GetAllPermissionRequest) ([]response.CustomAlllPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomAlllPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllSubSectionPermission indicates an expected call of GetAllSubSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllSubSectionPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllSubSectionPermission), ctx, req)
}

// GetAllSubSectionPermissionByPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllSubSectionPermissionByPermission(ctx *gin.Context, permissionID int64) ([]response.SubSectionPermissionOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermissionByPermission", ctx, permissionID)
	ret0, _ := ret[0].([]response.SubSectionPermissionOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionPermissionByPermission indicates an expected call of GetAllSubSectionPermissionByPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllSubSectionPermissionByPermission(ctx, permissionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermissionByPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllSubSectionPermissionByPermission), ctx, permissionID)
}

// GetAllSubSectionPermissionWithoutPagination mocks base method.
func (m *MockUserCompositeUseCase) GetAllSubSectionPermissionWithoutPagination(ctx *gin.Context) ([]response.CustomAlllPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermissionWithoutPagination", ctx)
	ret0, _ := ret[0].([]response.CustomAlllPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllSubSectionPermissionWithoutPagination indicates an expected call of GetAllSubSectionPermissionWithoutPagination.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllSubSectionPermissionWithoutPagination(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllSubSectionPermissionWithoutPagination), ctx)
}

// GetAllTeamLeaders mocks base method.
func (m *MockUserCompositeUseCase) GetAllTeamLeaders(c *gin.Context) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeamLeaders", c)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllTeamLeaders indicates an expected call of GetAllTeamLeaders.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllTeamLeaders(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeamLeaders", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllTeamLeaders), c)
}

// GetAllTertiarySubSectionPermissionWithoutPermission mocks base method.
func (m *MockUserCompositeUseCase) GetAllTertiarySubSectionPermissionWithoutPermission(ctx *gin.Context, req domain.GetAllPermissionRequest) ([]response.CustomSubSectionSecondaryPermission, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTertiarySubSectionPermissionWithoutPermission", ctx, req)
	ret0, _ := ret[0].([]response.CustomSubSectionSecondaryPermission)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetAllTertiarySubSectionPermissionWithoutPermission indicates an expected call of GetAllTertiarySubSectionPermissionWithoutPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllTertiarySubSectionPermissionWithoutPermission(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTertiarySubSectionPermissionWithoutPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllTertiarySubSectionPermissionWithoutPermission), ctx, req)
}

// GetAllUserTypes mocks base method.
func (m *MockUserCompositeUseCase) GetAllUserTypes(c *gin.Context) ([]*response.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserTypes", c)
	ret0, _ := ret[0].([]*response.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllUserTypes indicates an expected call of GetAllUserTypes.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllUserTypes(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserTypes", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllUserTypes), c)
}

// GetAllUserTypesForWeb mocks base method.
func (m *MockUserCompositeUseCase) GetAllUserTypesForWeb(c *gin.Context) ([]*response.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserTypesForWeb", c)
	ret0, _ := ret[0].([]*response.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllUserTypesForWeb indicates an expected call of GetAllUserTypesForWeb.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAllUserTypesForWeb(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserTypesForWeb", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAllUserTypesForWeb), c)
}

// GetAqaryUser mocks base method.
func (m *MockUserCompositeUseCase) GetAqaryUser(ctx *gin.Context, id int64) (*response.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryUser", ctx, id)
	ret0, _ := ret[0].(*response.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryUser indicates an expected call of GetAqaryUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetAqaryUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetAqaryUser), ctx, id)
}

// GetCompanyOfUser mocks base method.
func (m *MockUserCompositeUseCase) GetCompanyOfUser(c *gin.Context, userID int64) (sqlc.CompanyUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyOfUser", c, userID)
	ret0, _ := ret[0].(sqlc.CompanyUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyOfUser indicates an expected call of GetCompanyOfUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCompanyOfUser(c, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyOfUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCompanyOfUser), c, userID)
}

// GetCompanyUser mocks base method.
func (m *MockUserCompositeUseCase) GetCompanyUser(c *gin.Context, req domain.GetASingleUserReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUser", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUser indicates an expected call of GetCompanyUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCompanyUser(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCompanyUser), c, req)
}

// GetCompanyUserPermission mocks base method.
func (m *MockUserCompositeUseCase) GetCompanyUserPermission(c *gin.Context, req domain.Request) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserPermission", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUserPermission indicates an expected call of GetCompanyUserPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCompanyUserPermission(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCompanyUserPermission), c, req)
}

// GetCompanyUsersByStatus mocks base method.
func (m *MockUserCompositeUseCase) GetCompanyUsersByStatus(c *gin.Context, req domain.GetUsersByStatusReq) ([]response.GetUsersByStatusResponse, int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUsersByStatus", c, req)
	ret0, _ := ret[0].([]response.GetUsersByStatusResponse)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(*exceptions.Exception)
	return ret0, ret1, ret2
}

// GetCompanyUsersByStatus indicates an expected call of GetCompanyUsersByStatus.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCompanyUsersByStatus(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUsersByStatus", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCompanyUsersByStatus), c, req)
}

// GetCountCompanyUsers mocks base method.
func (m *MockUserCompositeUseCase) GetCountCompanyUsers(ctx *gin.Context) (*response.UserCountOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCompanyUsers", ctx)
	ret0, _ := ret[0].(*response.UserCountOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountCompanyUsers indicates an expected call of GetCountCompanyUsers.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCountCompanyUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCompanyUsers", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCountCompanyUsers), ctx)
}

// GetCurrentSubscriptionQuota mocks base method.
func (m *MockUserCompositeUseCase) GetCurrentSubscriptionQuota(c *gin.Context, req domain.GetSingleUserReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSubscriptionQuota", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCurrentSubscriptionQuota indicates an expected call of GetCurrentSubscriptionQuota.
func (mr *MockUserCompositeUseCaseMockRecorder) GetCurrentSubscriptionQuota(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSubscriptionQuota", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetCurrentSubscriptionQuota), c, req)
}

// GetDepartment mocks base method.
func (m *MockUserCompositeUseCase) GetDepartment(ctx *gin.Context, req domain.GetDepartmentRequest) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", ctx, req)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockUserCompositeUseCaseMockRecorder) GetDepartment(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetDepartment), ctx, req)
}

// GetPermissionByRoleID mocks base method.
func (m *MockUserCompositeUseCase) GetPermissionByRoleID(ctx *gin.Context, roleID int64) (*response.CustomRolePermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByRoleID", ctx, roleID)
	ret0, _ := ret[0].(*response.CustomRolePermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPermissionByRoleID indicates an expected call of GetPermissionByRoleID.
func (mr *MockUserCompositeUseCaseMockRecorder) GetPermissionByRoleID(ctx, roleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByRoleID", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetPermissionByRoleID), ctx, roleID)
}

// GetProfile mocks base method.
func (m *MockUserCompositeUseCase) GetProfile(ctx *gin.Context, id int64) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, id)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserCompositeUseCaseMockRecorder) GetProfile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetProfile), ctx, id)
}

// GetRole mocks base method.
func (m *MockUserCompositeUseCase) GetRole(ctx *gin.Context, id int64) (*response.RoleOutout, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, id)
	ret0, _ := ret[0].(*response.RoleOutout)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserCompositeUseCaseMockRecorder) GetRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetRole), ctx, id)
}

// GetSingleAqaryUser mocks base method.
func (m *MockUserCompositeUseCase) GetSingleAqaryUser(ctx *gin.Context, id int64, req domain.GetSingleUserReq) (*response.UserOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleAqaryUser", ctx, id, req)
	ret0, _ := ret[0].(*response.UserOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSingleAqaryUser indicates an expected call of GetSingleAqaryUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetSingleAqaryUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleAqaryUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetSingleAqaryUser), ctx, id, req)
}

// GetSingleUser mocks base method.
func (m *MockUserCompositeUseCase) GetSingleUser(ctx *gin.Context, id int64, req domain.GetSingleUserReq) (*response.UserOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleUser", ctx, id, req)
	ret0, _ := ret[0].(*response.UserOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSingleUser indicates an expected call of GetSingleUser.
func (mr *MockUserCompositeUseCaseMockRecorder) GetSingleUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetSingleUser), ctx, id, req)
}

// GetSubscriptionOrderPackageDetailByUserID mocks base method.
func (m *MockUserCompositeUseCase) GetSubscriptionOrderPackageDetailByUserID(c *gin.Context, req domain.GetSubscriptionOrderPackageDetailByUserIDReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionOrderPackageDetailByUserID", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSubscriptionOrderPackageDetailByUserID indicates an expected call of GetSubscriptionOrderPackageDetailByUserID.
func (mr *MockUserCompositeUseCaseMockRecorder) GetSubscriptionOrderPackageDetailByUserID(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionOrderPackageDetailByUserID", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetSubscriptionOrderPackageDetailByUserID), c, req)
}

// GetUserLicenses mocks base method.
func (m *MockUserCompositeUseCase) GetUserLicenses(c *gin.Context, userID int64) ([]domain.UserLicenseOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLicenses", c, userID)
	ret0, _ := ret[0].([]domain.UserLicenseOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserLicenses indicates an expected call of GetUserLicenses.
func (mr *MockUserCompositeUseCaseMockRecorder) GetUserLicenses(c, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLicenses", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetUserLicenses), c, userID)
}

// GetUserPackage mocks base method.
func (m *MockUserCompositeUseCase) GetUserPackage(c *gin.Context, req domain.SetUserPackageReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPackage", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserPackage indicates an expected call of GetUserPackage.
func (mr *MockUserCompositeUseCaseMockRecorder) GetUserPackage(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPackage", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetUserPackage), c, req)
}

// GetUserPermission mocks base method.
func (m *MockUserCompositeUseCase) GetUserPermission(c *gin.Context, compId int64) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermission", c, compId)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserPermission indicates an expected call of GetUserPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) GetUserPermission(c, compId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetUserPermission), c, compId)
}

// GetUserType mocks base method.
func (m *MockUserCompositeUseCase) GetUserType(c *gin.Context, id int64) (*response.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserType", c, id)
	ret0, _ := ret[0].(*response.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserType indicates an expected call of GetUserType.
func (mr *MockUserCompositeUseCaseMockRecorder) GetUserType(c, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserType", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetUserType), c, id)
}

// GetUserTypeForCompanyUserPage mocks base method.
func (m *MockUserCompositeUseCase) GetUserTypeForCompanyUserPage(c *gin.Context) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTypeForCompanyUserPage", c)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserTypeForCompanyUserPage indicates an expected call of GetUserTypeForCompanyUserPage.
func (mr *MockUserCompositeUseCaseMockRecorder) GetUserTypeForCompanyUserPage(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTypeForCompanyUserPage", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetUserTypeForCompanyUserPage), c)
}

// GetVerifyContants mocks base method.
func (m *MockUserCompositeUseCase) GetVerifyContants(c *gin.Context) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVerifyContants", c)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetVerifyContants indicates an expected call of GetVerifyContants.
func (mr *MockUserCompositeUseCaseMockRecorder) GetVerifyContants(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVerifyContants", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GetVerifyContants), c)
}

// GoogleLogin mocks base method.
func (m *MockUserCompositeUseCase) GoogleLogin(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GoogleLogin", c)
}

// GoogleLogin indicates an expected call of GoogleLogin.
func (mr *MockUserCompositeUseCaseMockRecorder) GoogleLogin(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleLogin", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GoogleLogin), c)
}

// GrandPermissionToCompanyAdmin mocks base method.
func (m *MockUserCompositeUseCase) GrandPermissionToCompanyAdmin(ctx *gin.Context, req domain.Request) (*sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrandPermissionToCompanyAdmin", ctx, req)
	ret0, _ := ret[0].(*sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GrandPermissionToCompanyAdmin indicates an expected call of GrandPermissionToCompanyAdmin.
func (mr *MockUserCompositeUseCaseMockRecorder) GrandPermissionToCompanyAdmin(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrandPermissionToCompanyAdmin", reflect.TypeOf((*MockUserCompositeUseCase)(nil).GrandPermissionToCompanyAdmin), ctx, req)
}

// Register mocks base method.
func (m *MockUserCompositeUseCase) Register(c *gin.Context, req domain.RegisterRequest) (*auth_usecase.UserOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, req)
	ret0, _ := ret[0].(*auth_usecase.UserOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUserCompositeUseCaseMockRecorder) Register(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserCompositeUseCase)(nil).Register), c, req)
}

// ResetCompanyUserPassword mocks base method.
func (m *MockUserCompositeUseCase) ResetCompanyUserPassword(ctx *gin.Context, req domain.ResetReq) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetCompanyUserPassword", ctx, req)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// ResetCompanyUserPassword indicates an expected call of ResetCompanyUserPassword.
func (mr *MockUserCompositeUseCaseMockRecorder) ResetCompanyUserPassword(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCompanyUserPassword", reflect.TypeOf((*MockUserCompositeUseCase)(nil).ResetCompanyUserPassword), ctx, req)
}

// ResetPassword mocks base method.
func (m *MockUserCompositeUseCase) ResetPassword(c *gin.Context, id int64, req domain.ResetPasswordRequest) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", c, id, req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserCompositeUseCaseMockRecorder) ResetPassword(c, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserCompositeUseCase)(nil).ResetPassword), c, id, req)
}

// ResetPasswordWithoutOldPassword mocks base method.
func (m *MockUserCompositeUseCase) ResetPasswordWithoutOldPassword(c *gin.Context, id int64, req domain.ResetPasswordWithoutOldPasswordRequest) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPasswordWithoutOldPassword", c, id, req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// ResetPasswordWithoutOldPassword indicates an expected call of ResetPasswordWithoutOldPassword.
func (mr *MockUserCompositeUseCaseMockRecorder) ResetPasswordWithoutOldPassword(c, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPasswordWithoutOldPassword", reflect.TypeOf((*MockUserCompositeUseCase)(nil).ResetPasswordWithoutOldPassword), c, id, req)
}

// RestoreUser mocks base method.
func (m *MockUserCompositeUseCase) RestoreUser(ctx *gin.Context, id int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreUser", ctx, id)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// RestoreUser indicates an expected call of RestoreUser.
func (mr *MockUserCompositeUseCaseMockRecorder) RestoreUser(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).RestoreUser), ctx, id)
}

// SearchAllAgent mocks base method.
func (m *MockUserCompositeUseCase) SearchAllAgent(ctx *gin.Context, req domain.SearchAllAgentRequest) ([]sqlc.SearchAllAgentRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllAgent", ctx, req)
	ret0, _ := ret[0].([]sqlc.SearchAllAgentRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// SearchAllAgent indicates an expected call of SearchAllAgent.
func (mr *MockUserCompositeUseCaseMockRecorder) SearchAllAgent(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllAgent", reflect.TypeOf((*MockUserCompositeUseCase)(nil).SearchAllAgent), ctx, req)
}

// SetTeamLeader mocks base method.
func (m *MockUserCompositeUseCase) SetTeamLeader(c *gin.Context, req domain.SetTeamLeaderReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTeamLeader", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// SetTeamLeader indicates an expected call of SetTeamLeader.
func (mr *MockUserCompositeUseCaseMockRecorder) SetTeamLeader(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTeamLeader", reflect.TypeOf((*MockUserCompositeUseCase)(nil).SetTeamLeader), c, req)
}

// SetUserPackage mocks base method.
func (m *MockUserCompositeUseCase) SetUserPackage(c *gin.Context, req domain.SetUserPackageReq) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserPackage", c, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// SetUserPackage indicates an expected call of SetUserPackage.
func (mr *MockUserCompositeUseCaseMockRecorder) SetUserPackage(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPackage", reflect.TypeOf((*MockUserCompositeUseCase)(nil).SetUserPackage), c, req)
}

// UAEPassLogin mocks base method.
func (m *MockUserCompositeUseCase) UAEPassLogin(c *gin.Context, req domain.UAEPassLoginReq) (*response.DashboardResult, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UAEPassLogin", c, req)
	ret0, _ := ret[0].(*response.DashboardResult)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UAEPassLogin indicates an expected call of UAEPassLogin.
func (mr *MockUserCompositeUseCaseMockRecorder) UAEPassLogin(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UAEPassLogin", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UAEPassLogin), c, req)
}

// UpdateAqaryUser mocks base method.
func (m *MockUserCompositeUseCase) UpdateAqaryUser(ctx *gin.Context, id int64, req domain.UpdateUserRequest) (*response.UpdatedUserOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAqaryUser", ctx, id, req)
	ret0, _ := ret[0].(*response.UpdatedUserOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateAqaryUser indicates an expected call of UpdateAqaryUser.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateAqaryUser(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAqaryUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateAqaryUser), ctx, id, req)
}

// UpdateCompanyUser mocks base method.
func (m *MockUserCompositeUseCase) UpdateCompanyUser(ctx *gin.Context, req domain.UpdateCompanyUserRequest) (any, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyUser", ctx, req)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateCompanyUser indicates an expected call of UpdateCompanyUser.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateCompanyUser(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyUser", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateCompanyUser), ctx, req)
}

// UpdateCompanyUserByStatus mocks base method.
func (m *MockUserCompositeUseCase) UpdateCompanyUserByStatus(ctx *gin.Context, req domain.UpdateUserByStatusReq) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCompanyUserByStatus", ctx, req)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateCompanyUserByStatus indicates an expected call of UpdateCompanyUserByStatus.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateCompanyUserByStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompanyUserByStatus", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateCompanyUserByStatus), ctx, req)
}

// UpdateDepartment mocks base method.
func (m *MockUserCompositeUseCase) UpdateDepartment(ctx *gin.Context, req domain.UpdateDepartmentRequest) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDepartment", ctx, req)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateDepartment indicates an expected call of UpdateDepartment.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateDepartment(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDepartment", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateDepartment), ctx, req)
}

// UpdatePassword mocks base method.
func (m *MockUserCompositeUseCase) UpdatePassword(c *gin.Context, req domain.UpdatePasswordRequest) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", c, req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdatePassword(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdatePassword), c, req)
}

// UpdatePermission mocks base method.
func (m *MockUserCompositeUseCase) UpdatePermission(ctx *gin.Context, id int64, req domain.UpdatePermissionRequest) (*sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", ctx, id, req)
	ret0, _ := ret[0].(*sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdatePermission(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdatePermission), ctx, id, req)
}

// UpdateProfile mocks base method.
func (m *MockUserCompositeUseCase) UpdateProfile(ctx *gin.Context, id int64, req domain.UpdateProfileRequest) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", ctx, id, req)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateProfile(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateProfile), ctx, id, req)
}

// UpdateRole mocks base method.
func (m *MockUserCompositeUseCase) UpdateRole(ctx *gin.Context, id int64, req domain.UpdateRoleRequest) (*domain.RoleOutput, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, id, req)
	ret0, _ := ret[0].(*domain.RoleOutput)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateRole(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateRole), ctx, id, req)
}

// UpdateRolePermission mocks base method.
func (m *MockUserCompositeUseCase) UpdateRolePermission(ctx *gin.Context, id int64, req domain.UpdateRolePermissionRequest) (*sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRolePermission", ctx, id, req)
	ret0, _ := ret[0].(*sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateRolePermission indicates an expected call of UpdateRolePermission.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateRolePermission(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRolePermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateRolePermission), ctx, id, req)
}

// UpdateSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) UpdateSectionPermission(ctx *gin.Context, id int64, req domain.UpdateSectionPermissionRequest) (*response.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSectionPermission", ctx, id, req)
	ret0, _ := ret[0].(*response.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateSectionPermission indicates an expected call of UpdateSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateSectionPermission(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateSectionPermission), ctx, id, req)
}

// UpdateSubSectionPermission mocks base method.
func (m *MockUserCompositeUseCase) UpdateSubSectionPermission(ctx *gin.Context, id int64, req domain.UpdateSubSectionPermissionRequest) (*sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubSectionPermission", ctx, id, req)
	ret0, _ := ret[0].(*sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateSubSectionPermission indicates an expected call of UpdateSubSectionPermission.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateSubSectionPermission(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubSectionPermission", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateSubSectionPermission), ctx, id, req)
}

// UpdateUserStatusWithoutUpdateTime mocks base method.
func (m *MockUserCompositeUseCase) UpdateUserStatusWithoutUpdateTime(c *gin.Context, req domain.UserUpdateStatusReq) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatusWithoutUpdateTime", c, req)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserStatusWithoutUpdateTime indicates an expected call of UpdateUserStatusWithoutUpdateTime.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateUserStatusWithoutUpdateTime(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatusWithoutUpdateTime", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateUserStatusWithoutUpdateTime), c, req)
}

// UpdateUserType mocks base method.
func (m *MockUserCompositeUseCase) UpdateUserType(c *gin.Context, id int64, req domain.UserTypeRequest) (*sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserType", c, id, req)
	ret0, _ := ret[0].(*sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserType indicates an expected call of UpdateUserType.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateUserType(c, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserType", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateUserType), c, id, req)
}

// UpdateUserVerification mocks base method.
func (m *MockUserCompositeUseCase) UpdateUserVerification(c *gin.Context, req domain.UpdateUserVerificationReq) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserVerification", c, req)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserVerification indicates an expected call of UpdateUserVerification.
func (mr *MockUserCompositeUseCaseMockRecorder) UpdateUserVerification(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserVerification", reflect.TypeOf((*MockUserCompositeUseCase)(nil).UpdateUserVerification), c, req)
}

// VerifyOTP mocks base method.
func (m *MockUserCompositeUseCase) VerifyOTP(c *gin.Context, req domain.VerifyOTPRequest) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOTP", c, req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// VerifyOTP indicates an expected call of VerifyOTP.
func (mr *MockUserCompositeUseCaseMockRecorder) VerifyOTP(c, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOTP", reflect.TypeOf((*MockUserCompositeUseCase)(nil).VerifyOTP), c, req)
}
