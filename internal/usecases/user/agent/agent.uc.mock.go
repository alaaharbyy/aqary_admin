// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/agent/agent.uc.impl.go
//
// Generated by this command:
//
//	mockgen -source=/Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/agent/agent.uc.impl.go -destination=/Users/user/Desktop/work/official_aqary/aqary_admin/internal/usecases/user/agent/agent.uc.mock.go -package=agent_usecase
//

// Package agent_usecase is a generated GoMock package.
package agent_usecase

import (
	domain "aqary_admin/internal/domain/requests/user"
	sqlc "aqary_admin/internal/domain/sqlc/sqlc"
	exceptions "aqary_admin/pkg/utils/exceptions"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAgentUseCase is a mock of UserAgentUseCase interface.
type MockUserAgentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserAgentUseCaseMockRecorder
}

// MockUserAgentUseCaseMockRecorder is the mock recorder for MockUserAgentUseCase.
type MockUserAgentUseCaseMockRecorder struct {
	mock *MockUserAgentUseCase
}

// NewMockUserAgentUseCase creates a new mock instance.
func NewMockUserAgentUseCase(ctrl *gomock.Controller) *MockUserAgentUseCase {
	mock := &MockUserAgentUseCase{ctrl: ctrl}
	mock.recorder = &MockUserAgentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAgentUseCase) EXPECT() *MockUserAgentUseCaseMockRecorder {
	return m.recorder
}

// SearchAllAgent mocks base method.
func (m *MockUserAgentUseCase) SearchAllAgent(ctx *gin.Context, req domain.SearchAllAgentRequest) ([]sqlc.SearchAllAgentRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllAgent", ctx, req)
	ret0, _ := ret[0].([]sqlc.SearchAllAgentRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// SearchAllAgent indicates an expected call of SearchAllAgent.
func (mr *MockUserAgentUseCaseMockRecorder) SearchAllAgent(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllAgent", reflect.TypeOf((*MockUserAgentUseCase)(nil).SearchAllAgent), ctx, req)
}
