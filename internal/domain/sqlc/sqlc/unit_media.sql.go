// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_media.sql

package sqlc

import (
	"context"
	"time"
)

const createUnitMedia = `-- name: CreateUnitMedia :one
INSERT INTO unit_media (
    file_urls,
    gallery_type,
    media_type,
    units_id,
    created_at
)VALUES (
    $1, $2, $3,$4, $5
) RETURNING id, file_urls, gallery_type, media_type, units_id, created_at, updated_at
`

type CreateUnitMediaParams struct {
	FileUrls    []string  `json:"file_urls"`
	GalleryType string    `json:"gallery_type"`
	MediaType   int64     `json:"media_type"`
	UnitsID     int64     `json:"units_id"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateUnitMedia(ctx context.Context, arg CreateUnitMediaParams) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, createUnitMedia,
		arg.FileUrls,
		arg.GalleryType,
		arg.MediaType,
		arg.UnitsID,
		arg.CreatedAt,
	)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneUnitMediaFileByIdAndFile = `-- name: DeleteOneUnitMediaFileByIdAndFile :one
UPDATE unit_media
SET file_urls = array_remove(file_urls, $2::VARCHAR)
WHERE id = $1
RETURNING id, file_urls, gallery_type, media_type, units_id, created_at, updated_at
`

type DeleteOneUnitMediaFileByIdAndFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteOneUnitMediaFileByIdAndFile(ctx context.Context, arg DeleteOneUnitMediaFileByIdAndFileParams) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneUnitMediaFileByIdAndFile, arg.ID, arg.Fileurl)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUnitMedia = `-- name: DeleteUnitMedia :exec
DELETE FROM unit_media
WHERE id = $1
`

func (q *Queries) DeleteUnitMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUnitMedia, id)
	return err
}

const getAllUnitMediaByUnitId = `-- name: GetAllUnitMediaByUnitId :many
SELECT id, file_urls, gallery_type, media_type, units_id, created_at, updated_at,COUNT(id) OVER() AS total_count FROM  unit_media 
WHERE units_id = $3
LIMIT $1 OFFSET $2
`

type GetAllUnitMediaByUnitIdParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	UnitsID int64 `json:"units_id"`
}

type GetAllUnitMediaByUnitIdRow struct {
	ID          int64     `json:"id"`
	FileUrls    []string  `json:"file_urls"`
	GalleryType string    `json:"gallery_type"`
	MediaType   int64     `json:"media_type"`
	UnitsID     int64     `json:"units_id"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	TotalCount  int64     `json:"total_count"`
}

func (q *Queries) GetAllUnitMediaByUnitId(ctx context.Context, arg GetAllUnitMediaByUnitIdParams) ([]GetAllUnitMediaByUnitIdRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitMediaByUnitId, arg.Limit, arg.Offset, arg.UnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitMediaByUnitIdRow
	for rows.Next() {
		var i GetAllUnitMediaByUnitIdRow
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.UnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitMediaByUnitIdWithoutPagination = `-- name: GetAllUnitMediaByUnitIdWithoutPagination :many
SELECT id, file_urls, gallery_type, media_type, units_id, created_at, updated_at FROM  unit_media 
WHERE units_id = $1
`

func (q *Queries) GetAllUnitMediaByUnitIdWithoutPagination(ctx context.Context, unitsID int64) ([]UnitMedium, error) {
	rows, err := q.db.Query(ctx, getAllUnitMediaByUnitIdWithoutPagination, unitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitMedium
	for rows.Next() {
		var i UnitMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.UnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjProGalleryTypeByUnit = `-- name: GetProjProGalleryTypeByUnit :many






SELECT DISTINCT(gallery_type)
FROM properties_media
LEFT JOIN units ON units.properties_id = properties_media.properties_id AND units.property = 1
WHERE units.id = $1 AND properties_media.property = 1
`

// -- name: DeleteOneUnitMediaImages360ByIdAndFile :one
// UPDATE unit_media
// SET image360_url =
//
//	CASE
//	  WHEN array_remove(image360_url, @fileurl::VARCHAR) = '{}' THEN NULL
//	  ELSE array_remove(image360_url, @fileurl::VARCHAR)
//	END
//
// WHERE id = $1
// RETURNING *;
// -- name: DeleteOneUnitMediaVideoByIdAndFile :one
// UPDATE unit_media
// SET video_url =
//
//	CASE
//	  WHEN array_remove(video_url, @fileurl::VARCHAR) = '{}' THEN NULL
//	  ELSE array_remove(video_url, @fileurl::VARCHAR)
//	END
//
// WHERE id = $1
// RETURNING *;
// -- name: DeleteOneUnitMediaPanaromaByIdAndFile :one
// UPDATE unit_media
// SET panaroma_url =
//
//	CASE
//	  WHEN array_remove(panaroma_url, @fileurl::VARCHAR) = '{}' THEN NULL
//	  ELSE array_remove(panaroma_url, @fileurl::VARCHAR)
//	END
//
// WHERE id = $1
// RETURNING *;
func (q *Queries) GetProjProGalleryTypeByUnit(ctx context.Context, id int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getProjProGalleryTypeByUnit, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var gallery_type string
		if err := rows.Scan(&gallery_type); err != nil {
			return nil, err
		}
		items = append(items, gallery_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPropertyMediaByIdAndGallery = `-- name: GetProjectPropertyMediaByIdAndGallery :many
SELECT id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at FROM properties_media 
WHERE properties_id = $1 AND property = 1 AND gallery_type = $2 LIMIT 1
`

type GetProjectPropertyMediaByIdAndGalleryParams struct {
	PropertiesID int64  `json:"properties_id"`
	GalleryType  string `json:"gallery_type"`
}

func (q *Queries) GetProjectPropertyMediaByIdAndGallery(ctx context.Context, arg GetProjectPropertyMediaByIdAndGalleryParams) ([]PropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getProjectPropertyMediaByIdAndGallery, arg.PropertiesID, arg.GalleryType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertiesMedium
	for rows.Next() {
		var i PropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSumOfUnitMedia = `-- name: GetSumOfUnitMedia :one
SELECT
    COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
FROM
    global_media
WHERE
     entity_type_id = $1 AND entity_id = $2
`

type GetSumOfUnitMediaParams struct {
	EntityTypeID int64 `json:"entity_type_id"`
	EntityID     int64 `json:"entity_id"`
}

func (q *Queries) GetSumOfUnitMedia(ctx context.Context, arg GetSumOfUnitMediaParams) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfUnitMedia, arg.EntityTypeID, arg.EntityID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const getUnitMedia = `-- name: GetUnitMedia :one

SELECT id, file_urls, gallery_type, media_type, units_id, created_at, updated_at FROM unit_media 
WHERE id = $1 LIMIT 1
`

// -- name: GetCountAllUnitMediaByUnitId :one
// WITH x AS(
// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND image_url IS NOT NULL
// UNION ALL
// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND image360_url IS NOT NULL
// UNION ALL
// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND video_url IS NOT NULL
// UNION ALL
// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND panaroma_url IS NOT NULL
// ) SELECT COUNT(*) FROM x;
func (q *Queries) GetUnitMedia(ctx context.Context, id int64) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, getUnitMedia, id)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnitMediaByGalleryAndMediaType = `-- name: GetUnitMediaByGalleryAndMediaType :one

SELECT id, file_urls, gallery_type, media_type, units_id, created_at, updated_at FROM unit_media
WHERE units_id = $1 AND gallery_type = $2 AND media_type = $3
`

type GetUnitMediaByGalleryAndMediaTypeParams struct {
	UnitsID     int64  `json:"units_id"`
	GalleryType string `json:"gallery_type"`
	MediaType   int64  `json:"media_type"`
}

// SELECT
//
//	COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
//
// FROM
//
//	unit_media
//
// WHERE
//
//	units_id = $1;
func (q *Queries) GetUnitMediaByGalleryAndMediaType(ctx context.Context, arg GetUnitMediaByGalleryAndMediaTypeParams) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, getUnitMediaByGalleryAndMediaType, arg.UnitsID, arg.GalleryType, arg.MediaType)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnitMedia = `-- name: UpdateUnitMedia :one
UPDATE unit_media
SET file_urls = $2,
    gallery_type = $3,
    media_type = $4,
    units_id = $5,
    updated_at = $6
Where id = $1
RETURNING id, file_urls, gallery_type, media_type, units_id, created_at, updated_at
`

type UpdateUnitMediaParams struct {
	ID          int64     `json:"id"`
	FileUrls    []string  `json:"file_urls"`
	GalleryType string    `json:"gallery_type"`
	MediaType   int64     `json:"media_type"`
	UnitsID     int64     `json:"units_id"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUnitMedia(ctx context.Context, arg UpdateUnitMediaParams) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, updateUnitMedia,
		arg.ID,
		arg.FileUrls,
		arg.GalleryType,
		arg.MediaType,
		arg.UnitsID,
		arg.UpdatedAt,
	)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnitMediaFiles = `-- name: UpdateUnitMediaFiles :one
UPDATE unit_media
SET file_urls = $2,
    updated_at = $3
Where id = $1
RETURNING id, file_urls, gallery_type, media_type, units_id, created_at, updated_at
`

type UpdateUnitMediaFilesParams struct {
	ID        int64     `json:"id"`
	FileUrls  []string  `json:"file_urls"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUnitMediaFiles(ctx context.Context, arg UpdateUnitMediaFilesParams) (UnitMedium, error) {
	row := q.db.QueryRow(ctx, updateUnitMediaFiles, arg.ID, arg.FileUrls, arg.UpdatedAt)
	var i UnitMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
