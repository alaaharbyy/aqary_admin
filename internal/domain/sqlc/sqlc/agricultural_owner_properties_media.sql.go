// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_owner_properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalOwnerPropertyMedia = `-- name: CreateAgriculturalOwnerPropertyMedia :one
INSERT INTO agricultural_owner_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    agricultural_owner_properties_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch
`

type CreateAgriculturalOwnerPropertyMediaParams struct {
	ImageUrl                      []string    `json:"image_url"`
	Image360Url                   []string    `json:"image360_url"`
	VideoUrl                      []string    `json:"video_url"`
	PanaromaUrl                   []string    `json:"panaroma_url"`
	MainMediaSection              string      `json:"main_media_section"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalOwnerPropertyMedia(ctx context.Context, arg CreateAgriculturalOwnerPropertyMediaParams) (AgriculturalOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createAgriculturalOwnerPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalOwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalOwnerPropertyMedia = `-- name: DeleteAgriculturalOwnerPropertyMedia :exec
DELETE FROM agricultural_owner_properties_media
Where id = $1
`

func (q *Queries) DeleteAgriculturalOwnerPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalOwnerPropertyMedia, id)
	return err
}

const getAgriculturalOwnerPropertyMedia = `-- name: GetAgriculturalOwnerPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch FROM agricultural_owner_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalOwnerPropertyMedia(ctx context.Context, limit int32) (AgriculturalOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalOwnerPropertyMedia, limit)
	var i AgriculturalOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSection = `-- name: GetAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch FROM agricultural_owner_properties_media
WHERE agricultural_owner_properties_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSectionParams struct {
	AgriculturalOwnerPropertiesID int64  `json:"agricultural_owner_properties_id"`
	Lower                         string `json:"lower"`
}

func (q *Queries) GetAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSectionParams) (AgriculturalOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalOwnerPropertyMediaByPropertyIdAndMediaSection, arg.AgriculturalOwnerPropertiesID, arg.Lower)
	var i AgriculturalOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalOwnerPropertiesByMainMediaSectionAndId = `-- name: GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch FROM agricultural_owner_properties_media
 WHERE main_media_section = $2 AND agricultural_owner_properties_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch From x
`

type GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndIdParams struct {
	AgriculturalOwnerPropertiesID int64  `json:"agricultural_owner_properties_id"`
	MainMediaSection              string `json:"main_media_section"`
}

type GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndIdRow struct {
	ID                            int64       `json:"id"`
	ImageUrl                      []string    `json:"image_url"`
	Image360Url                   []string    `json:"image360_url"`
	VideoUrl                      []string    `json:"video_url"`
	PanaromaUrl                   []string    `json:"panaroma_url"`
	MainMediaSection              string      `json:"main_media_section"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndIdParams) (GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllAgriculturalOwnerPropertiesByMainMediaSectionAndId, arg.AgriculturalOwnerPropertiesID, arg.MainMediaSection)
	var i GetAllAgriculturalOwnerPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalOwnerPropertiesMainMediaSectionById = `-- name: GetAllAgriculturalOwnerPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM agricultural_owner_properties_media
 WHERE agricultural_owner_properties_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllAgriculturalOwnerPropertiesMainMediaSectionById(ctx context.Context, agriculturalOwnerPropertiesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalOwnerPropertiesMainMediaSectionById, agriculturalOwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalOwnerPropertyMedia = `-- name: GetAllAgriculturalOwnerPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch FROM agricultural_owner_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalOwnerPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalOwnerPropertyMedia(ctx context.Context, arg GetAllAgriculturalOwnerPropertyMediaParams) ([]AgriculturalOwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalOwnerPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalOwnerPropertiesMedium
	for rows.Next() {
		var i AgriculturalOwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalOwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalOwnerPropertyMediaByPropertyId = `-- name: GetAllAgriculturalOwnerPropertyMediaByPropertyId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch FROM agricultural_owner_properties_media
WHERE agricultural_owner_properties_id = $1 ORDER BY id
`

func (q *Queries) GetAllAgriculturalOwnerPropertyMediaByPropertyId(ctx context.Context, agriculturalOwnerPropertiesID int64) ([]AgriculturalOwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalOwnerPropertyMediaByPropertyId, agriculturalOwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalOwnerPropertiesMedium
	for rows.Next() {
		var i AgriculturalOwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalOwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalOwnerPropertyMedia = `-- name: UpdateAgriculturalOwnerPropertyMedia :one
UPDATE agricultural_owner_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    agricultural_owner_properties_id = $7,
    created_at = $8,
    updated_at = $9,
    is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_owner_properties_id, created_at, updated_at, is_branch
`

type UpdateAgriculturalOwnerPropertyMediaParams struct {
	ID                            int64       `json:"id"`
	ImageUrl                      []string    `json:"image_url"`
	Image360Url                   []string    `json:"image360_url"`
	VideoUrl                      []string    `json:"video_url"`
	PanaromaUrl                   []string    `json:"panaroma_url"`
	MainMediaSection              string      `json:"main_media_section"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalOwnerPropertyMedia(ctx context.Context, arg UpdateAgriculturalOwnerPropertyMediaParams) (AgriculturalOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalOwnerPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalOwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
