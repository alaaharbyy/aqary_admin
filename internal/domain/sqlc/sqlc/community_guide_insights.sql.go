// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: community_guide_insights.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommunityGuidelineInsight = `-- name: CreateCommunityGuidelineInsight :one
INSERT INTO community_guidelines_insight (
  insight_name,
  insight_name_ar,
  icon,
  description_text,
  status,
  created_at,
  update_at

) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, insight_name, insight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type CreateCommunityGuidelineInsightParams struct {
	InsightName     string      `json:"insight_name"`
	InsightNameAr   string      `json:"insight_name_ar"`
	Icon            string      `json:"icon"`
	DescriptionText pgtype.Text `json:"description_text"`
	Status          int64       `json:"status"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdateAt        time.Time   `json:"update_at"`
}

func (q *Queries) CreateCommunityGuidelineInsight(ctx context.Context, arg CreateCommunityGuidelineInsightParams) (CommunityGuidelinesInsight, error) {
	row := q.db.QueryRow(ctx, createCommunityGuidelineInsight,
		arg.InsightName,
		arg.InsightNameAr,
		arg.Icon,
		arg.DescriptionText,
		arg.Status,
		arg.CreatedAt,
		arg.UpdateAt,
	)
	var i CommunityGuidelinesInsight
	err := row.Scan(
		&i.ID,
		&i.InsightName,
		&i.InsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCommunityGuideLineInsight = `-- name: GetCommunityGuideLineInsight :one
SELECT 
community_guidelines_insight.id, community_guidelines_insight.insight_name, community_guidelines_insight.insight_name_ar, community_guidelines_insight.icon, community_guidelines_insight.description_text, community_guidelines_insight.status, community_guidelines_insight.created_at, community_guidelines_insight.update_at, community_guidelines_insight.deleted_at
FROM community_guidelines_insight
WHERE id=$1
`

type GetCommunityGuideLineInsightRow struct {
	CommunityGuidelinesInsight CommunityGuidelinesInsight `json:"community_guidelines_insight"`
}

func (q *Queries) GetCommunityGuideLineInsight(ctx context.Context, id int64) (GetCommunityGuideLineInsightRow, error) {
	row := q.db.QueryRow(ctx, getCommunityGuideLineInsight, id)
	var i GetCommunityGuideLineInsightRow
	err := row.Scan(
		&i.CommunityGuidelinesInsight.ID,
		&i.CommunityGuidelinesInsight.InsightName,
		&i.CommunityGuidelinesInsight.InsightNameAr,
		&i.CommunityGuidelinesInsight.Icon,
		&i.CommunityGuidelinesInsight.DescriptionText,
		&i.CommunityGuidelinesInsight.Status,
		&i.CommunityGuidelinesInsight.CreatedAt,
		&i.CommunityGuidelinesInsight.UpdateAt,
		&i.CommunityGuidelinesInsight.DeletedAt,
	)
	return i, err
}

const getCommunityGuideLineInsights = `-- name: GetCommunityGuideLineInsights :many
SELECT 
 id, insight_name, insight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
FROM community_guidelines_insight 
WHERE  community_guidelines_insight.status not in (5,6)
LIMIT $2
OFFSET $1
`

type GetCommunityGuideLineInsightsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetCommunityGuideLineInsights(ctx context.Context, arg GetCommunityGuideLineInsightsParams) ([]CommunityGuidelinesInsight, error) {
	rows, err := q.db.Query(ctx, getCommunityGuideLineInsights, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommunityGuidelinesInsight
	for rows.Next() {
		var i CommunityGuidelinesInsight
		if err := rows.Scan(
			&i.ID,
			&i.InsightName,
			&i.InsightNameAr,
			&i.Icon,
			&i.DescriptionText,
			&i.Status,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommunityGuideLineInsightsCount = `-- name: GetCommunityGuideLineInsightsCount :one
SELECT 
 count(community_guidelines_insight)
FROM community_guidelines_insight  
WHERE  community_guidelines_insight.status not in (5,6)
`

func (q *Queries) GetCommunityGuideLineInsightsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCommunityGuideLineInsightsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeletedCommunityGuideLineInsights = `-- name: GetDeletedCommunityGuideLineInsights :many
SELECT 
 id, insight_name, insight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
FROM community_guidelines_insight  
WHERE community_guidelines_insight.status=6
LIMIT $2
OFFSET $1
`

type GetDeletedCommunityGuideLineInsightsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetDeletedCommunityGuideLineInsights(ctx context.Context, arg GetDeletedCommunityGuideLineInsightsParams) ([]CommunityGuidelinesInsight, error) {
	rows, err := q.db.Query(ctx, getDeletedCommunityGuideLineInsights, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommunityGuidelinesInsight
	for rows.Next() {
		var i CommunityGuidelinesInsight
		if err := rows.Scan(
			&i.ID,
			&i.InsightName,
			&i.InsightNameAr,
			&i.Icon,
			&i.DescriptionText,
			&i.Status,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedCommunityGuideLineInsightsCount = `-- name: GetDeletedCommunityGuideLineInsightsCount :one
SELECT 
 count(community_guidelines_insight) 
FROM community_guidelines_insight 
WHERE community_guidelines_insight.status=6
`

func (q *Queries) GetDeletedCommunityGuideLineInsightsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getDeletedCommunityGuideLineInsightsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCommunityGuideLineInsightStatus = `-- name: UpdateCommunityGuideLineInsightStatus :one
UPDATE community_guidelines_insight
SET 
    status=$1,
    update_at=$2,
    deleted_at=$3
WHERE id=$4
RETURNING id, insight_name, insight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type UpdateCommunityGuideLineInsightStatusParams struct {
	Status    int64              `json:"status"`
	UpdateAt  time.Time          `json:"update_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateCommunityGuideLineInsightStatus(ctx context.Context, arg UpdateCommunityGuideLineInsightStatusParams) (CommunityGuidelinesInsight, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuideLineInsightStatus,
		arg.Status,
		arg.UpdateAt,
		arg.DeletedAt,
		arg.ID,
	)
	var i CommunityGuidelinesInsight
	err := row.Scan(
		&i.ID,
		&i.InsightName,
		&i.InsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCommunityGuidelineInsight = `-- name: UpdateCommunityGuidelineInsight :one
UPDATE community_guidelines_insight
SET 
  insight_name=$1,
  insight_name_ar=$2,
  icon=$3,
  description_text=$4,
  update_at=$5
WHERE id=$6
RETURNING id, insight_name, insight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type UpdateCommunityGuidelineInsightParams struct {
	InsightName     string      `json:"insight_name"`
	InsightNameAr   string      `json:"insight_name_ar"`
	Icon            string      `json:"icon"`
	DescriptionText pgtype.Text `json:"description_text"`
	UpdateAt        time.Time   `json:"update_at"`
	ID              int64       `json:"id"`
}

func (q *Queries) UpdateCommunityGuidelineInsight(ctx context.Context, arg UpdateCommunityGuidelineInsightParams) (CommunityGuidelinesInsight, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuidelineInsight,
		arg.InsightName,
		arg.InsightNameAr,
		arg.Icon,
		arg.DescriptionText,
		arg.UpdateAt,
		arg.ID,
	)
	var i CommunityGuidelinesInsight
	err := row.Scan(
		&i.ID,
		&i.InsightName,
		&i.InsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}
