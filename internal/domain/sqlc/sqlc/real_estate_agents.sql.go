// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: real_estate_agents.sql

package sqlc

import (
	"context"
	"time"
)

const createRealEstateAgents = `-- name: CreateRealEstateAgents :one
INSERT INTO real_estate_agents (entity_type_id, entity_id, agent_id, note, assignment_date)
VALUES ($1, $2, $3, $4, $5) RETURNING id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at
`

type CreateRealEstateAgentsParams struct {
	EntityTypeID   int64     `json:"entity_type_id"`
	EntityID       int64     `json:"entity_id"`
	AgentID        int64     `json:"agent_id"`
	Note           string    `json:"note"`
	AssignmentDate time.Time `json:"assignment_date"`
}

func (q *Queries) CreateRealEstateAgents(ctx context.Context, arg CreateRealEstateAgentsParams) (RealEstateAgent, error) {
	row := q.db.QueryRow(ctx, createRealEstateAgents,
		arg.EntityTypeID,
		arg.EntityID,
		arg.AgentID,
		arg.Note,
		arg.AssignmentDate,
	)
	var i RealEstateAgent
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.AgentID,
		&i.Note,
		&i.AssignmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRealEstateAgent = `-- name: DeleteRealEstateAgent :exec
DELETE FROM real_estate_agents
Where id = $1
`

func (q *Queries) DeleteRealEstateAgent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRealEstateAgent, id)
	return err
}

const getAllRealEstateAgents = `-- name: GetAllRealEstateAgents :many
SELECT id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at FROM real_estate_agents
`

func (q *Queries) GetAllRealEstateAgents(ctx context.Context) ([]RealEstateAgent, error) {
	rows, err := q.db.Query(ctx, getAllRealEstateAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RealEstateAgent
	for rows.Next() {
		var i RealEstateAgent
		if err := rows.Scan(
			&i.ID,
			&i.EntityTypeID,
			&i.EntityID,
			&i.AgentID,
			&i.Note,
			&i.AssignmentDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRealEstateAgentByEntityType = `-- name: GetRealEstateAgentByEntityType :one
SELECT id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at FROM real_estate_agents where entity_type_id = $1
`

func (q *Queries) GetRealEstateAgentByEntityType(ctx context.Context, entityTypeID int64) (RealEstateAgent, error) {
	row := q.db.QueryRow(ctx, getRealEstateAgentByEntityType, entityTypeID)
	var i RealEstateAgent
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.AgentID,
		&i.Note,
		&i.AssignmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRealEstateAgentByEntityTypeEntityId = `-- name: GetRealEstateAgentByEntityTypeEntityId :many
SELECT id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at FROM real_estate_agents where entity_type_id = $1
and entity_id = $2
`

type GetRealEstateAgentByEntityTypeEntityIdParams struct {
	EntityTypeID int64 `json:"entity_type_id"`
	EntityID     int64 `json:"entity_id"`
}

func (q *Queries) GetRealEstateAgentByEntityTypeEntityId(ctx context.Context, arg GetRealEstateAgentByEntityTypeEntityIdParams) ([]RealEstateAgent, error) {
	rows, err := q.db.Query(ctx, getRealEstateAgentByEntityTypeEntityId, arg.EntityTypeID, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RealEstateAgent
	for rows.Next() {
		var i RealEstateAgent
		if err := rows.Scan(
			&i.ID,
			&i.EntityTypeID,
			&i.EntityID,
			&i.AgentID,
			&i.Note,
			&i.AssignmentDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRealEstateAgentById = `-- name: GetRealEstateAgentById :one
SELECT id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at FROM real_estate_agents where id=$1
`

func (q *Queries) GetRealEstateAgentById(ctx context.Context, id int64) (RealEstateAgent, error) {
	row := q.db.QueryRow(ctx, getRealEstateAgentById, id)
	var i RealEstateAgent
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.AgentID,
		&i.Note,
		&i.AssignmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRealEstateAgent = `-- name: UpdateRealEstateAgent :one
UPDATE real_estate_agents
SET note = $1, 
agent_id = $2,
assignment_date = $3,
updated_at =$4,
entity_type_id = $5,
entity_id = $6
WHERE id = $7
RETURNING id, entity_type_id, entity_id, agent_id, note, assignment_date, created_at, updated_at
`

type UpdateRealEstateAgentParams struct {
	Note           string    `json:"note"`
	AgentID        int64     `json:"agent_id"`
	AssignmentDate time.Time `json:"assignment_date"`
	UpdatedAt      time.Time `json:"updated_at"`
	EntityTypeID   int64     `json:"entity_type_id"`
	EntityID       int64     `json:"entity_id"`
	ID             int64     `json:"id"`
}

func (q *Queries) UpdateRealEstateAgent(ctx context.Context, arg UpdateRealEstateAgentParams) (RealEstateAgent, error) {
	row := q.db.QueryRow(ctx, updateRealEstateAgent,
		arg.Note,
		arg.AgentID,
		arg.AssignmentDate,
		arg.UpdatedAt,
		arg.EntityTypeID,
		arg.EntityID,
		arg.ID,
	)
	var i RealEstateAgent
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.AgentID,
		&i.Note,
		&i.AssignmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
