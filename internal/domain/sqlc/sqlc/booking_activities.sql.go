// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking_activities.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBookingActivity = `-- name: CreateBookingActivity :one
INSERT INTO booking_activities
(company_types_id, companies_id, is_branch, booking_type, activity_type, activity_date, ref_activity_id, module_name, file_url, portal_url, users_id)
VALUES 
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, company_types_id, companies_id, is_branch, booking_type, activity_type, activity_date, ref_activity_id, module_name, file_url, portal_url, users_id
`

type CreateBookingActivityParams struct {
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	BookingType    int64       `json:"booking_type"`
	ActivityType   int64       `json:"activity_type"`
	ActivityDate   time.Time   `json:"activity_date"`
	RefActivityID  int64       `json:"ref_activity_id"`
	ModuleName     pgtype.Text `json:"module_name"`
	FileUrl        pgtype.Text `json:"file_url"`
	PortalUrl      pgtype.Text `json:"portal_url"`
	UsersID        int64       `json:"users_id"`
}

func (q *Queries) CreateBookingActivity(ctx context.Context, arg CreateBookingActivityParams) (BookingActivity, error) {
	row := q.db.QueryRow(ctx, createBookingActivity,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.BookingType,
		arg.ActivityType,
		arg.ActivityDate,
		arg.RefActivityID,
		arg.ModuleName,
		arg.FileUrl,
		arg.PortalUrl,
		arg.UsersID,
	)
	var i BookingActivity
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.BookingType,
		&i.ActivityType,
		&i.ActivityDate,
		&i.RefActivityID,
		&i.ModuleName,
		&i.FileUrl,
		&i.PortalUrl,
		&i.UsersID,
	)
	return i, err
}

const getBookingActivityByRefIdAndModuleName = `-- name: GetBookingActivityByRefIdAndModuleName :one
SELECT
id, company_types_id, companies_id, is_branch, booking_type, activity_type, activity_date, ref_activity_id, module_name, file_url, portal_url, users_id
FROM
    booking_activities
WHERE
     ref_activity_id = $1 and module_name=$2
`

type GetBookingActivityByRefIdAndModuleNameParams struct {
	RefActivityID int64       `json:"ref_activity_id"`
	ModuleName    pgtype.Text `json:"module_name"`
}

func (q *Queries) GetBookingActivityByRefIdAndModuleName(ctx context.Context, arg GetBookingActivityByRefIdAndModuleNameParams) (BookingActivity, error) {
	row := q.db.QueryRow(ctx, getBookingActivityByRefIdAndModuleName, arg.RefActivityID, arg.ModuleName)
	var i BookingActivity
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.BookingType,
		&i.ActivityType,
		&i.ActivityDate,
		&i.RefActivityID,
		&i.ModuleName,
		&i.FileUrl,
		&i.PortalUrl,
		&i.UsersID,
	)
	return i, err
}

const getBookingCategoryActivityId = `-- name: GetBookingCategoryActivityId :one
SELECT id
FROM 
	booking_activities 
WHERE 
	ref_activity_id = $1 AND module_name = 'Hotel Booking Category'
`

func (q *Queries) GetBookingCategoryActivityId(ctx context.Context, refActivityID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getBookingCategoryActivityId, refActivityID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateBookingActivity = `-- name: UpdateBookingActivity :one
UPDATE booking_activities
SET
    company_types_id = $2,
    companies_id = $3,
    is_branch = $4,
    booking_type = $5,
    activity_type = $6,
    activity_date = $7,
    ref_activity_id = $8,
    module_name = $9,
    file_url = $10,
    portal_url = $11,
    users_id = $12
WHERE
    id = $1
RETURNING id, company_types_id, companies_id, is_branch, booking_type, activity_type, activity_date, ref_activity_id, module_name, file_url, portal_url, users_id
`

type UpdateBookingActivityParams struct {
	ID             int64       `json:"id"`
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	BookingType    int64       `json:"booking_type"`
	ActivityType   int64       `json:"activity_type"`
	ActivityDate   time.Time   `json:"activity_date"`
	RefActivityID  int64       `json:"ref_activity_id"`
	ModuleName     pgtype.Text `json:"module_name"`
	FileUrl        pgtype.Text `json:"file_url"`
	PortalUrl      pgtype.Text `json:"portal_url"`
	UsersID        int64       `json:"users_id"`
}

func (q *Queries) UpdateBookingActivity(ctx context.Context, arg UpdateBookingActivityParams) (BookingActivity, error) {
	row := q.db.QueryRow(ctx, updateBookingActivity,
		arg.ID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.BookingType,
		arg.ActivityType,
		arg.ActivityDate,
		arg.RefActivityID,
		arg.ModuleName,
		arg.FileUrl,
		arg.PortalUrl,
		arg.UsersID,
	)
	var i BookingActivity
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.BookingType,
		&i.ActivityType,
		&i.ActivityDate,
		&i.RefActivityID,
		&i.ModuleName,
		&i.FileUrl,
		&i.PortalUrl,
		&i.UsersID,
	)
	return i, err
}
