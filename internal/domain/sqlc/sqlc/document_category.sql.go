// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: document_category.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocumentCategory = `-- name: CreateDocumentCategory :exec
INSERT INTO
    documents_category (category,category_ar, created_at, updated_at, status)
VALUES($1, $2, $3, $4,$5)
`

type CreateDocumentCategoryParams struct {
	Category   string      `json:"category"`
	CategoryAr pgtype.Text `json:"category_ar"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
	Status     int64       `json:"status"`
}

func (q *Queries) CreateDocumentCategory(ctx context.Context, arg CreateDocumentCategoryParams) error {
	_, err := q.db.Exec(ctx, createDocumentCategory,
		arg.Category,
		arg.CategoryAr,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
	)
	return err
}

const deleteRestoreDocumentCategory = `-- name: DeleteRestoreDocumentCategory :one
UPDATE 
	documents_category
SET 
	status=$2, 
	updated_at=$3
WHERE 
	id=$1 RETURNING id
`

type DeleteRestoreDocumentCategoryParams struct {
	ID        int64     `json:"id"`
	Status    int64     `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) DeleteRestoreDocumentCategory(ctx context.Context, arg DeleteRestoreDocumentCategoryParams) (int64, error) {
	row := q.db.QueryRow(ctx, deleteRestoreDocumentCategory, arg.ID, arg.Status, arg.UpdatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllDocumentCategories = `-- name: GetAllDocumentCategories :many
SELECT id,category,category_ar,updated_at
FROM 
	documents_category
WHERE 
	status=$1 
ORDER BY updated_at DESC 
LIMIT $3 OFFSET $2
`

type GetAllDocumentCategoriesParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetAllDocumentCategoriesRow struct {
	ID         int64       `json:"id"`
	Category   string      `json:"category"`
	CategoryAr pgtype.Text `json:"category_ar"`
	UpdatedAt  time.Time   `json:"updated_at"`
}

func (q *Queries) GetAllDocumentCategories(ctx context.Context, arg GetAllDocumentCategoriesParams) ([]GetAllDocumentCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getAllDocumentCategories, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDocumentCategoriesRow
	for rows.Next() {
		var i GetAllDocumentCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.CategoryAr,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentCategry = `-- name: GetDocumentCategry :one
SELECT id,category,category_ar
FROM 
	documents_category
WHERE 
	id=$1 AND status!=6
`

type GetDocumentCategryRow struct {
	ID         int64       `json:"id"`
	Category   string      `json:"category"`
	CategoryAr pgtype.Text `json:"category_ar"`
}

func (q *Queries) GetDocumentCategry(ctx context.Context, id int64) (GetDocumentCategryRow, error) {
	row := q.db.QueryRow(ctx, getDocumentCategry, id)
	var i GetDocumentCategryRow
	err := row.Scan(&i.ID, &i.Category, &i.CategoryAr)
	return i, err
}

const getNumberOFCategories = `-- name: GetNumberOFCategories :one
SELECT COUNT(*) 
FROM 
	documents_category
WHERE 
	status=$1
`

func (q *Queries) GetNumberOFCategories(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOFCategories, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateDocumentCategory = `-- name: UpdateDocumentCategory :exec
UPDATE
    documents_category
SET
    category = $2,
    updated_at = $3,
	category_ar=$4
WHERE
    id = $1
    AND status != 6
`

type UpdateDocumentCategoryParams struct {
	ID         int64       `json:"id"`
	Category   string      `json:"category"`
	UpdatedAt  time.Time   `json:"updated_at"`
	CategoryAr pgtype.Text `json:"category_ar"`
}

func (q *Queries) UpdateDocumentCategory(ctx context.Context, arg UpdateDocumentCategoryParams) error {
	_, err := q.db.Exec(ctx, updateDocumentCategory,
		arg.ID,
		arg.Category,
		arg.UpdatedAt,
		arg.CategoryAr,
	)
	return err
}
