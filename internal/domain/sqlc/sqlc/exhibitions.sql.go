// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibitions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const doesExhibitionExist = `-- name: DoesExhibitionExist :one
SELECT id FROM exhibitions WHERE id = $1 AND event_status !=5
`

func (q *Queries) DoesExhibitionExist(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, doesExhibitionExist, id)
	err := row.Scan(&id)
	return id, err
}

const getAllExhibitionCountries = `-- name: GetAllExhibitionCountries :many
SELECT COUNT(exhibitions.id) , countries.id,countries.country
FROM exhibitions 
INNER JOIN countries 
	ON exhibitions.countries_id = countries.id 
WHERE exhibitions.event_status=2 OR exhibitions.event_status=3
GROUP BY countries.id
`

type GetAllExhibitionCountriesRow struct {
	Count   int64  `json:"count"`
	ID      int64  `json:"id"`
	Country string `json:"country"`
}

func (q *Queries) GetAllExhibitionCountries(ctx context.Context) ([]GetAllExhibitionCountriesRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionCountriesRow
	for rows.Next() {
		var i GetAllExhibitionCountriesRow
		if err := rows.Scan(&i.Count, &i.ID, &i.Country); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllExhibitionsWithoutPagination = `-- name: GetAllExhibitionsWithoutPagination :many
SELECT id,ref_no,title,event_logo_url,is_verified,exhibition_type,exhibition_category,updated_at
FROM 
	exhibitions
WHERE 
	event_status !=5
ORDER BY updated_at DESC
`

type GetAllExhibitionsWithoutPaginationRow struct {
	ID                 int64       `json:"id"`
	RefNo              string      `json:"ref_no"`
	Title              string      `json:"title"`
	EventLogoUrl       string      `json:"event_logo_url"`
	IsVerified         pgtype.Bool `json:"is_verified"`
	ExhibitionType     int64       `json:"exhibition_type"`
	ExhibitionCategory int64       `json:"exhibition_category"`
	UpdatedAt          time.Time   `json:"updated_at"`
}

func (q *Queries) GetAllExhibitionsWithoutPagination(ctx context.Context) ([]GetAllExhibitionsWithoutPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionsWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionsWithoutPaginationRow
	for rows.Next() {
		var i GetAllExhibitionsWithoutPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Title,
			&i.EventLogoUrl,
			&i.IsVerified,
			&i.ExhibitionType,
			&i.ExhibitionCategory,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfAllInternationalExhibitions = `-- name: GetNumberOfAllInternationalExhibitions :one
SELECT 
	COUNT(id) 
FROM 
	exhibitions  
WHERE 
	event_status!=5 AND countries_id != 1
`

func (q *Queries) GetNumberOfAllInternationalExhibitions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAllInternationalExhibitions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfAllLocalExhibitions = `-- name: GetNumberOfAllLocalExhibitions :one
SELECT 
	COUNT(id) 
FROM 
	exhibitions  
WHERE 
	event_status!=5 AND countries_id = 1
`

func (q *Queries) GetNumberOfAllLocalExhibitions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAllLocalExhibitions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfExhibitionsAfterFiltration = `-- name: GetNumberOfExhibitionsAfterFiltration :one
SELECT COUNT(id) FROM exhibitions WHERE countries_id =$1 AND (event_status=$2 OR event_status =$3)
`

type GetNumberOfExhibitionsAfterFiltrationParams struct {
	CountriesID   int64 `json:"countries_id"`
	EventStatus   int64 `json:"event_status"`
	EventStatus_2 int64 `json:"event_status_2"`
}

func (q *Queries) GetNumberOfExhibitionsAfterFiltration(ctx context.Context, arg GetNumberOfExhibitionsAfterFiltrationParams) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfExhibitionsAfterFiltration, arg.CountriesID, arg.EventStatus, arg.EventStatus_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleExhibition = `-- name: GetSingleExhibition :one
SELECT id, ref_no, is_verified, self_hosted, hosted_by_id, is_host_branch, exhibition_type, exhibition_category, title, start_date, end_date, countries_id, states_id, cities_id, community_id, specific_address, mobile, email, whatsapp, registration_link, registration_fees, event_banner_url, event_logo_url, promotion_video, description, description_ar, event_status, created_by, created_at, updated_at, hosted_company_type, facilities, no_of_booths, sub_communities_id, no_of_floors, location_url, addresses_id FROM exhibitions WHERE id = $1 AND event_status !=5
`

func (q *Queries) GetSingleExhibition(ctx context.Context, id int64) (Exhibition, error) {
	row := q.db.QueryRow(ctx, getSingleExhibition, id)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.IsVerified,
		&i.SelfHosted,
		&i.HostedByID,
		&i.IsHostBranch,
		&i.ExhibitionType,
		&i.ExhibitionCategory,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SpecificAddress,
		&i.Mobile,
		&i.Email,
		&i.Whatsapp,
		&i.RegistrationLink,
		&i.RegistrationFees,
		&i.EventBannerUrl,
		&i.EventLogoUrl,
		&i.PromotionVideo,
		&i.Description,
		&i.DescriptionAr,
		&i.EventStatus,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HostedCompanyType,
		&i.Facilities,
		&i.NoOfBooths,
		&i.SubCommunitiesID,
		&i.NoOfFloors,
		&i.LocationUrl,
		&i.AddressesID,
	)
	return i, err
}
