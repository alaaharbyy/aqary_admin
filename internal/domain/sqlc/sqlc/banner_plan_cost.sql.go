// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banner_plan_cost.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBannerPlanCosts = `-- name: CountBannerPlanCosts :one
SELECT COUNT(*)
FROM banner_plan_cost
WHERE banner_plan_cost.status !=6
`

func (q *Queries) CountBannerPlanCosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countBannerPlanCosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBannerPlanCost = `-- name: CreateBannerPlanCost :one
INSERT INTO banner_plan_cost (
    country_id, 
    company_type,
    plan_package_id, 
    platform, 
    price, 
    status,
    created_at,
    updated_at
)
SELECT 
    $1, $2, $3, $4, $5, $6, $7, $8
FROM banner_plan_package
WHERE banner_plan_package.id = $3 AND banner_plan_package.status !=6
RETURNING id
`

type CreateBannerPlanCostParams struct {
	CountryID     int64     `json:"country_id"`
	CompanyType   int64     `json:"company_type"`
	PlanPackageID int64     `json:"plan_package_id"`
	Platform      int64     `json:"platform"`
	Price         float64   `json:"price"`
	Status        int64     `json:"status"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateBannerPlanCost(ctx context.Context, arg CreateBannerPlanCostParams) (int64, error) {
	row := q.db.QueryRow(ctx, createBannerPlanCost,
		arg.CountryID,
		arg.CompanyType,
		arg.PlanPackageID,
		arg.Platform,
		arg.Price,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteBannerPlanCost = `-- name: DeleteBannerPlanCost :exec
DELETE FROM banner_plan_cost
WHERE id = $1
`

func (q *Queries) DeleteBannerPlanCost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBannerPlanCost, id)
	return err
}

const getAllBannerPlanCostByID = `-- name: GetAllBannerPlanCostByID :one
SELECT banner_plan_cost.id, country_id, company_type, plan_package_id, platform, price, banner_plan_cost.status, banner_plan_cost.created_at, banner_plan_cost.updated_at, countries.id, country, flag, countries.created_at, countries.updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, countries.status, deleted_at, updated_by, country_ar, banner_plan_package.id, package_name, plan_type, plan_package_name, quantity, counts_per_banner, icon, description, banner_plan_package.status, banner_plan_package.created_at, banner_plan_package.updated_at, company_types.id, title, image_url, company_types.created_at, company_types.updated_at, title_ar
FROM banner_plan_cost
INNER join countries on countries.id = banner_plan_cost.country_id
inner join banner_plan_package on banner_plan_package.id = banner_plan_cost.plan_package_id
LEFT JOIN company_types on company_types.id = banner_plan_cost.company_type
WHERE banner_plan_cost.id = $1
`

type GetAllBannerPlanCostByIDRow struct {
	ID              int64              `json:"id"`
	CountryID       int64              `json:"country_id"`
	CompanyType     int64              `json:"company_type"`
	PlanPackageID   int64              `json:"plan_package_id"`
	Platform        int64              `json:"platform"`
	Price           float64            `json:"price"`
	Status          int64              `json:"status"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	ID_2            int64              `json:"id_2"`
	Country         string             `json:"country"`
	Flag            string             `json:"flag"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt_2     time.Time          `json:"updated_at_2"`
	Alpha2Code      pgtype.Text        `json:"alpha2_code"`
	Alpha3Code      pgtype.Text        `json:"alpha3_code"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	Lat             pgtype.Float8      `json:"lat"`
	Lng             pgtype.Float8      `json:"lng"`
	Name            string             `json:"name"`
	Numcode         pgtype.Int8        `json:"numcode"`
	DefaultSettings []byte             `json:"default_settings"`
	Status_2        int64              `json:"status_2"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
	UpdatedBy       int64              `json:"updated_by"`
	CountryAr       pgtype.Text        `json:"country_ar"`
	ID_3            int64              `json:"id_3"`
	PackageName     int64              `json:"package_name"`
	PlanType        int64              `json:"plan_type"`
	PlanPackageName string             `json:"plan_package_name"`
	Quantity        int64              `json:"quantity"`
	CountsPerBanner int64              `json:"counts_per_banner"`
	Icon            string             `json:"icon"`
	Description     pgtype.Text        `json:"description"`
	Status_3        int64              `json:"status_3"`
	CreatedAt_3     time.Time          `json:"created_at_3"`
	UpdatedAt_3     time.Time          `json:"updated_at_3"`
	ID_4            pgtype.Int8        `json:"id_4"`
	Title           pgtype.Text        `json:"title"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	CreatedAt_4     pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4     pgtype.Timestamptz `json:"updated_at_4"`
	TitleAr         pgtype.Text        `json:"title_ar"`
}

func (q *Queries) GetAllBannerPlanCostByID(ctx context.Context, id int64) (GetAllBannerPlanCostByIDRow, error) {
	row := q.db.QueryRow(ctx, getAllBannerPlanCostByID, id)
	var i GetAllBannerPlanCostByIDRow
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.CompanyType,
		&i.PlanPackageID,
		&i.Platform,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Country,
		&i.Flag,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status_2,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
		&i.ID_3,
		&i.PackageName,
		&i.PlanType,
		&i.PlanPackageName,
		&i.Quantity,
		&i.CountsPerBanner,
		&i.Icon,
		&i.Description,
		&i.Status_3,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
		&i.ID_4,
		&i.Title,
		&i.ImageUrl,
		&i.CreatedAt_4,
		&i.UpdatedAt_4,
		&i.TitleAr,
	)
	return i, err
}

const getBannerPlanCostByID = `-- name: GetBannerPlanCostByID :one
SELECT banner_plan_cost.id, country_id, company_type, plan_package_id, platform, price, banner_plan_cost.status, banner_plan_cost.created_at, banner_plan_cost.updated_at, countries.id, country, flag, countries.created_at, countries.updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, countries.status, deleted_at, updated_by, country_ar, banner_plan_package.id, package_name, plan_type, plan_package_name, quantity, counts_per_banner, icon, description, banner_plan_package.status, banner_plan_package.created_at, banner_plan_package.updated_at, company_types.id, title, image_url, company_types.created_at, company_types.updated_at, title_ar
FROM banner_plan_cost
INNER join countries on countries.id = banner_plan_cost.country_id
inner join banner_plan_package on banner_plan_package.id = banner_plan_cost.plan_package_id
LEFT JOIN company_types on company_types.id = banner_plan_cost.company_type
WHERE banner_plan_cost.id = $1 and banner_plan_cost.status != 6
`

type GetBannerPlanCostByIDRow struct {
	ID              int64              `json:"id"`
	CountryID       int64              `json:"country_id"`
	CompanyType     int64              `json:"company_type"`
	PlanPackageID   int64              `json:"plan_package_id"`
	Platform        int64              `json:"platform"`
	Price           float64            `json:"price"`
	Status          int64              `json:"status"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	ID_2            int64              `json:"id_2"`
	Country         string             `json:"country"`
	Flag            string             `json:"flag"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt_2     time.Time          `json:"updated_at_2"`
	Alpha2Code      pgtype.Text        `json:"alpha2_code"`
	Alpha3Code      pgtype.Text        `json:"alpha3_code"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	Lat             pgtype.Float8      `json:"lat"`
	Lng             pgtype.Float8      `json:"lng"`
	Name            string             `json:"name"`
	Numcode         pgtype.Int8        `json:"numcode"`
	DefaultSettings []byte             `json:"default_settings"`
	Status_2        int64              `json:"status_2"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
	UpdatedBy       int64              `json:"updated_by"`
	CountryAr       pgtype.Text        `json:"country_ar"`
	ID_3            int64              `json:"id_3"`
	PackageName     int64              `json:"package_name"`
	PlanType        int64              `json:"plan_type"`
	PlanPackageName string             `json:"plan_package_name"`
	Quantity        int64              `json:"quantity"`
	CountsPerBanner int64              `json:"counts_per_banner"`
	Icon            string             `json:"icon"`
	Description     pgtype.Text        `json:"description"`
	Status_3        int64              `json:"status_3"`
	CreatedAt_3     time.Time          `json:"created_at_3"`
	UpdatedAt_3     time.Time          `json:"updated_at_3"`
	ID_4            pgtype.Int8        `json:"id_4"`
	Title           pgtype.Text        `json:"title"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	CreatedAt_4     pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4     pgtype.Timestamptz `json:"updated_at_4"`
	TitleAr         pgtype.Text        `json:"title_ar"`
}

func (q *Queries) GetBannerPlanCostByID(ctx context.Context, id int64) (GetBannerPlanCostByIDRow, error) {
	row := q.db.QueryRow(ctx, getBannerPlanCostByID, id)
	var i GetBannerPlanCostByIDRow
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.CompanyType,
		&i.PlanPackageID,
		&i.Platform,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ID_2,
		&i.Country,
		&i.Flag,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status_2,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
		&i.ID_3,
		&i.PackageName,
		&i.PlanType,
		&i.PlanPackageName,
		&i.Quantity,
		&i.CountsPerBanner,
		&i.Icon,
		&i.Description,
		&i.Status_3,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
		&i.ID_4,
		&i.Title,
		&i.ImageUrl,
		&i.CreatedAt_4,
		&i.UpdatedAt_4,
		&i.TitleAr,
	)
	return i, err
}

const getBannerPlanCostByPlanPkgID = `-- name: GetBannerPlanCostByPlanPkgID :one
SELECT id, country_id, company_type, plan_package_id, platform, price, status, created_at, updated_at
FROM banner_plan_cost
WHERE plan_package_id = $1
`

func (q *Queries) GetBannerPlanCostByPlanPkgID(ctx context.Context, planPackageID int64) (BannerPlanCost, error) {
	row := q.db.QueryRow(ctx, getBannerPlanCostByPlanPkgID, planPackageID)
	var i BannerPlanCost
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.CompanyType,
		&i.PlanPackageID,
		&i.Platform,
		&i.Price,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBannerPlanCosts = `-- name: ListBannerPlanCosts :many
SELECT banner_plan_cost.id, country_id, company_type, plan_package_id, platform, price, banner_plan_cost.status, banner_plan_cost.created_at, banner_plan_cost.updated_at, countries.id, country, flag, countries.created_at, countries.updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, countries.status, deleted_at, updated_by, country_ar, banner_plan_package.id, package_name, plan_type, plan_package_name, quantity, counts_per_banner, icon, description, banner_plan_package.status, banner_plan_package.created_at, banner_plan_package.updated_at, company_types.id, title, image_url, company_types.created_at, company_types.updated_at, title_ar
FROM banner_plan_cost
INNER join countries on countries.id = banner_plan_cost.country_id
inner join banner_plan_package on banner_plan_package.id = banner_plan_cost.plan_package_id
LEFT JOIN company_types on company_types.id = banner_plan_cost.company_type
where banner_plan_cost.status = $1
ORDER BY banner_plan_cost.updated_at DESC
LIMIT $3 
OFFSET $2
`

type ListBannerPlanCostsParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type ListBannerPlanCostsRow struct {
	ID              int64              `json:"id"`
	CountryID       int64              `json:"country_id"`
	CompanyType     int64              `json:"company_type"`
	PlanPackageID   int64              `json:"plan_package_id"`
	Platform        int64              `json:"platform"`
	Price           float64            `json:"price"`
	Status          int64              `json:"status"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	ID_2            int64              `json:"id_2"`
	Country         string             `json:"country"`
	Flag            string             `json:"flag"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt_2     time.Time          `json:"updated_at_2"`
	Alpha2Code      pgtype.Text        `json:"alpha2_code"`
	Alpha3Code      pgtype.Text        `json:"alpha3_code"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	Lat             pgtype.Float8      `json:"lat"`
	Lng             pgtype.Float8      `json:"lng"`
	Name            string             `json:"name"`
	Numcode         pgtype.Int8        `json:"numcode"`
	DefaultSettings []byte             `json:"default_settings"`
	Status_2        int64              `json:"status_2"`
	DeletedAt       pgtype.Timestamptz `json:"deleted_at"`
	UpdatedBy       int64              `json:"updated_by"`
	CountryAr       pgtype.Text        `json:"country_ar"`
	ID_3            int64              `json:"id_3"`
	PackageName     int64              `json:"package_name"`
	PlanType        int64              `json:"plan_type"`
	PlanPackageName string             `json:"plan_package_name"`
	Quantity        int64              `json:"quantity"`
	CountsPerBanner int64              `json:"counts_per_banner"`
	Icon            string             `json:"icon"`
	Description     pgtype.Text        `json:"description"`
	Status_3        int64              `json:"status_3"`
	CreatedAt_3     time.Time          `json:"created_at_3"`
	UpdatedAt_3     time.Time          `json:"updated_at_3"`
	ID_4            pgtype.Int8        `json:"id_4"`
	Title           pgtype.Text        `json:"title"`
	ImageUrl        pgtype.Text        `json:"image_url"`
	CreatedAt_4     pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4     pgtype.Timestamptz `json:"updated_at_4"`
	TitleAr         pgtype.Text        `json:"title_ar"`
}

func (q *Queries) ListBannerPlanCosts(ctx context.Context, arg ListBannerPlanCostsParams) ([]ListBannerPlanCostsRow, error) {
	rows, err := q.db.Query(ctx, listBannerPlanCosts, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBannerPlanCostsRow
	for rows.Next() {
		var i ListBannerPlanCostsRow
		if err := rows.Scan(
			&i.ID,
			&i.CountryID,
			&i.CompanyType,
			&i.PlanPackageID,
			&i.Platform,
			&i.Price,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Country,
			&i.Flag,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Alpha2Code,
			&i.Alpha3Code,
			&i.CountryCode,
			&i.Lat,
			&i.Lng,
			&i.Name,
			&i.Numcode,
			&i.DefaultSettings,
			&i.Status_2,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CountryAr,
			&i.ID_3,
			&i.PackageName,
			&i.PlanType,
			&i.PlanPackageName,
			&i.Quantity,
			&i.CountsPerBanner,
			&i.Icon,
			&i.Description,
			&i.Status_3,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.ID_4,
			&i.Title,
			&i.ImageUrl,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBannerPlanCost = `-- name: UpdateBannerPlanCost :one
UPDATE 
    banner_plan_cost
SET 
    country_id      = COALESCE($3, country_id),
    company_type    = COALESCE($4, company_type),
    plan_package_id = COALESCE($5::BIGINT, plan_package_id),
    platform        = COALESCE($6, platform),
    price           = COALESCE($7, price),
    updated_at      = $2
WHERE banner_plan_cost.id = $1
  AND status = $8::BIGINT
  AND (
 $5::BIGINT IS NULL 
    OR EXISTS (SELECT 1 FROM banner_plan_package WHERE id = $5::BIGINT and status != 6)
)
RETURNING banner_plan_cost.id
`

type UpdateBannerPlanCostParams struct {
	ID            int64         `json:"id"`
	UpdatedAt     time.Time     `json:"updated_at"`
	CountryID     pgtype.Int8   `json:"country_id"`
	CompanyType   pgtype.Int8   `json:"company_type"`
	PlanPackageID pgtype.Int8   `json:"plan_package_id"`
	Platform      pgtype.Int8   `json:"platform"`
	Price         pgtype.Float8 `json:"price"`
	ActiveStatus  int64         `json:"active_status"`
}

func (q *Queries) UpdateBannerPlanCost(ctx context.Context, arg UpdateBannerPlanCostParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateBannerPlanCost,
		arg.ID,
		arg.UpdatedAt,
		arg.CountryID,
		arg.CompanyType,
		arg.PlanPackageID,
		arg.Platform,
		arg.Price,
		arg.ActiveStatus,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateBannerPlanCostStatus = `-- name: UpdateBannerPlanCostStatus :one
UPDATE banner_plan_cost
SET 
    status = $2,
    updated_at = $3
WHERE id = $1
RETURNING id
`

type UpdateBannerPlanCostStatusParams struct {
	ID        int64     `json:"id"`
	Status    int64     `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBannerPlanCostStatus(ctx context.Context, arg UpdateBannerPlanCostStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateBannerPlanCostStatus, arg.ID, arg.Status, arg.UpdatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}
