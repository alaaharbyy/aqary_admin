// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: all_languages.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLanguage = `-- name: CreateLanguage :one
INSERT INTO all_languages (
    language,
    created_at,
    updated_at,
    code,
    flag
)VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, language, created_at, updated_at, code, flag
`

type CreateLanguageParams struct {
	Language  string      `json:"language"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Code      pgtype.Text `json:"code"`
	Flag      pgtype.Text `json:"flag"`
}

func (q *Queries) CreateLanguage(ctx context.Context, arg CreateLanguageParams) (AllLanguage, error) {
	row := q.db.QueryRow(ctx, createLanguage,
		arg.Language,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Code,
		arg.Flag,
	)
	var i AllLanguage
	err := row.Scan(
		&i.ID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Flag,
	)
	return i, err
}

const deleteLanguage = `-- name: DeleteLanguage :exec
DELETE FROM all_languages
Where id = $1
`

func (q *Queries) DeleteLanguage(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLanguage, id)
	return err
}

const getAllLanguage = `-- name: GetAllLanguage :many
SELECT id, language, created_at, updated_at, code, flag FROM all_languages
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllLanguageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllLanguage(ctx context.Context, arg GetAllLanguageParams) ([]AllLanguage, error) {
	rows, err := q.db.Query(ctx, getAllLanguage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllLanguage
	for rows.Next() {
		var i AllLanguage
		if err := rows.Scan(
			&i.ID,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Code,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLanguageWithoutPagination = `-- name: GetAllLanguageWithoutPagination :many
SELECT id, language, created_at, updated_at, code, flag FROM all_languages
ORDER BY id
`

func (q *Queries) GetAllLanguageWithoutPagination(ctx context.Context) ([]AllLanguage, error) {
	rows, err := q.db.Query(ctx, getAllLanguageWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllLanguage
	for rows.Next() {
		var i AllLanguage
		if err := rows.Scan(
			&i.ID,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Code,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLanguagesByIds = `-- name: GetAllLanguagesByIds :many
SELECT id, language, created_at, updated_at, code, flag FROM all_languages WHERE all_languages.id = ANY($1::bigint[])
`

func (q *Queries) GetAllLanguagesByIds(ctx context.Context, dollar_1 []int64) ([]AllLanguage, error) {
	rows, err := q.db.Query(ctx, getAllLanguagesByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllLanguage
	for rows.Next() {
		var i AllLanguage
		if err := rows.Scan(
			&i.ID,
			&i.Language,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Code,
			&i.Flag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLanguage = `-- name: GetLanguage :one
SELECT id, language, created_at, updated_at, code, flag FROM all_languages 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetLanguage(ctx context.Context, limit int32) (AllLanguage, error) {
	row := q.db.QueryRow(ctx, getLanguage, limit)
	var i AllLanguage
	err := row.Scan(
		&i.ID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Flag,
	)
	return i, err
}

const getLanguageByLanguage = `-- name: GetLanguageByLanguage :one
SELECT id, language, created_at, updated_at, code, flag FROM all_languages
Where language ILIKE $1
`

func (q *Queries) GetLanguageByLanguage(ctx context.Context, language string) (AllLanguage, error) {
	row := q.db.QueryRow(ctx, getLanguageByLanguage, language)
	var i AllLanguage
	err := row.Scan(
		&i.ID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Flag,
	)
	return i, err
}

const getLanguageNameById = `-- name: GetLanguageNameById :one
SELECT
    id AS language_id,
    language
FROM
    all_languages
WHERE
    id = $1
`

type GetLanguageNameByIdRow struct {
	LanguageID int64  `json:"language_id"`
	Language   string `json:"language"`
}

func (q *Queries) GetLanguageNameById(ctx context.Context, id int64) (GetLanguageNameByIdRow, error) {
	row := q.db.QueryRow(ctx, getLanguageNameById, id)
	var i GetLanguageNameByIdRow
	err := row.Scan(&i.LanguageID, &i.Language)
	return i, err
}

const updateLanguage = `-- name: UpdateLanguage :one
UPDATE all_languages
SET language = $2,
    created_at = $3,
    updated_at = $4,
    code = $5,
    flag = $6
Where id = $1
RETURNING id, language, created_at, updated_at, code, flag
`

type UpdateLanguageParams struct {
	ID        int64       `json:"id"`
	Language  string      `json:"language"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Code      pgtype.Text `json:"code"`
	Flag      pgtype.Text `json:"flag"`
}

func (q *Queries) UpdateLanguage(ctx context.Context, arg UpdateLanguageParams) (AllLanguage, error) {
	row := q.db.QueryRow(ctx, updateLanguage,
		arg.ID,
		arg.Language,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Code,
		arg.Flag,
	)
	var i AllLanguage
	err := row.Scan(
		&i.ID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Code,
		&i.Flag,
	)
	return i, err
}
