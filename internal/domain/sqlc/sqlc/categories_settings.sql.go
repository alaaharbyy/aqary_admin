// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories_settings.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfFacilitiesAmenitiesHasCategoryID = `-- name: CheckIfFacilitiesAmenitiesHasCategoryID :one
SELECT 1
FROM 
	facilities_amenities 
WHERE categories=$1
`

func (q *Queries) CheckIfFacilitiesAmenitiesHasCategoryID(ctx context.Context, categories int64) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, checkIfFacilitiesAmenitiesHasCategoryID, categories)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const createCategorySettings = `-- name: CreateCategorySettings :exec
INSERT INTO
    categories(
        category,
        created_at,
        updated_at,
        updated_by,
        "type"
    )
VALUES($1,$2,$3,$4,$5)
`

type CreateCategorySettingsParams struct {
	Category  string    `json:"category"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UpdatedBy int64     `json:"updated_by"`
	Type      int64     `json:"type"`
}

func (q *Queries) CreateCategorySettings(ctx context.Context, arg CreateCategorySettingsParams) error {
	_, err := q.db.Exec(ctx, createCategorySettings,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Type,
	)
	return err
}

const deleteCategorySettingsByID = `-- name: DeleteCategorySettingsByID :one
DELETE FROM
    categories
WHERE
    id = $1 RETURNING 1
`

func (q *Queries) DeleteCategorySettingsByID(ctx context.Context, id int64) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, deleteCategorySettingsByID, id)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const getAllCategoriesSettings = `-- name: GetAllCategoriesSettings :many
SELECT id,category,"type"
FROM 
	categories
WHERE
	$1::BIGINT =0 OR categories.type= $1::BIGINT
ORDER BY updated_at DESC 
LIMIT $3 OFFSET $2
`

type GetAllCategoriesSettingsParams struct {
	Type   int64       `json:"type"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetAllCategoriesSettingsRow struct {
	ID       int64  `json:"id"`
	Category string `json:"category"`
	Type     int64  `json:"type"`
}

func (q *Queries) GetAllCategoriesSettings(ctx context.Context, arg GetAllCategoriesSettingsParams) ([]GetAllCategoriesSettingsRow, error) {
	rows, err := q.db.Query(ctx, getAllCategoriesSettings, arg.Type, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCategoriesSettingsRow
	for rows.Next() {
		var i GetAllCategoriesSettingsRow
		if err := rows.Scan(&i.ID, &i.Category, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategorySettingsByID = `-- name: GetCategorySettingsByID :one
SELECT id,category,"type"
FROM 
	categories
WHERE 
	id=$1
`

type GetCategorySettingsByIDRow struct {
	ID       int64  `json:"id"`
	Category string `json:"category"`
	Type     int64  `json:"type"`
}

func (q *Queries) GetCategorySettingsByID(ctx context.Context, id int64) (GetCategorySettingsByIDRow, error) {
	row := q.db.QueryRow(ctx, getCategorySettingsByID, id)
	var i GetCategorySettingsByIDRow
	err := row.Scan(&i.ID, &i.Category, &i.Type)
	return i, err
}

const getNumberOfCategoriesSettings = `-- name: GetNumberOfCategoriesSettings :one
SELECT COUNT(*) 
FROM 
	categories
WHERE 
	$1::BIGINT =0 OR categories.type= $1::BIGINT
`

func (q *Queries) GetNumberOfCategoriesSettings(ctx context.Context, type_ int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfCategoriesSettings, type_)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCategorySettings = `-- name: UpdateCategorySettings :exec
UPDATE 
	categories
SET 
	category=$2, 
	updated_at=$3, 
	updated_by=$4, 
	"type"=$5
WHERE 
	id=$1
`

type UpdateCategorySettingsParams struct {
	ID        int64     `json:"id"`
	Category  string    `json:"category"`
	UpdatedAt time.Time `json:"updated_at"`
	UpdatedBy int64     `json:"updated_by"`
	Type      int64     `json:"type"`
}

func (q *Queries) UpdateCategorySettings(ctx context.Context, arg UpdateCategorySettingsParams) error {
	_, err := q.db.Exec(ctx, updateCategorySettings,
		arg.ID,
		arg.Category,
		arg.UpdatedAt,
		arg.UpdatedBy,
		arg.Type,
	)
	return err
}
