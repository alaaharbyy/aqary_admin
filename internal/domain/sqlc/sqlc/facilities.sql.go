// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: facilities.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllFacilitiesById = `-- name: GetAllFacilitiesById :many










SELECT facilities_amenities.title,facilities_amenities.title_ar,facilities_amenities.icon_url, facilities_amenities.categories, categories.category FROM facilities_amenities  
INNER JOIN categories ON categories.id = facilities_amenities.categories
INNER JOIN facilities_amenities_entity ON facilities_amenities_entity.facility_amenity_id = facilities_amenities.id
WHERE facilities_amenities_entity.entity_id = $1 AND facilities_amenities_entity.entity_type_id = $2 AND facilities_amenities.type = 1
`

type GetAllFacilitiesByIdParams struct {
	EntityID     int64 `json:"entity_id"`
	EntityTypeID int64 `json:"entity_type_id"`
}

type GetAllFacilitiesByIdRow struct {
	Title      string      `json:"title"`
	TitleAr    pgtype.Text `json:"title_ar"`
	IconUrl    string      `json:"icon_url"`
	Categories int64       `json:"categories"`
	Category   string      `json:"category"`
}

// -- name: CreateFacilities :one
// INSERT INTO facilities (
//
//	icon_url,
//	title,
//	created_at,
//	updated_at,
//	category_id
//
// )VALUES (
//
//	$1 ,$2, $3, $4, $5
//
// ) RETURNING *;
// -- name: GetFacilities :one
// SELECT * FROM facilities
// WHERE id = $1 LIMIT 1;
// -- name: GetFacilitiesByCategory :many
// SELECT * FROM facilities
// WHERE category_id = $3 LIMIT $1 OFFSET $2;
// -- name: GetAllFacilitiesByCategory :many
// SELECT facilities.*,facilities_amenities_categories.category FROM facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
// ORDER BY category_id
// LIMIT $1
// OFFSET $2;
// -- name: GetAllFacilitiesByCategoryWithoutPagination :many
// SELECT facilities.*,facilities_amenities_categories.category FROM facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
// ORDER BY category_id;
// -- name: UpdateFacilities :one
// UPDATE facilities
// SET   icon_url = $2,
//
//	title = $3,
//	created_at = $4,
//	updated_at = $5,
//	category_id = $6
//
// Where id = $1
// RETURNING *;
// -- name: DeleteFacilities :exec
// DELETE FROM facilities
// Where id = $1;
// -- name: GetAllFacilitiesByIds :many
// SELECT facilities.*,facilities_amenities_categories.category, facilities_amenities_categories.status From facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
// WHERE facilities.id = ANY($1::bigint[]);
func (q *Queries) GetAllFacilitiesById(ctx context.Context, arg GetAllFacilitiesByIdParams) ([]GetAllFacilitiesByIdRow, error) {
	rows, err := q.db.Query(ctx, getAllFacilitiesById, arg.EntityID, arg.EntityTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFacilitiesByIdRow
	for rows.Next() {
		var i GetAllFacilitiesByIdRow
		if err := rows.Scan(
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Categories,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
