// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_broker_agent_properties_branch.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialBrokerAgentPropertyBranch = `-- name: CreateIndustrialBrokerAgentPropertyBranch :one
INSERT INTO industrial_broker_agent_properties_branch (
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    status,
    created_at,
    updated_at,
    facilities_id,
    amenities_id,
    broker_companies_branches_id,
    broker_company_branches_agents,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    developer_company_name,
    sub_developer_company_name,
    is_branch,
    category,
    investment,
    contract_start_datetime,
    contract_end_datetime,
    amount,
    unit_types,
    users_id,
    property_name,
    from_xml,
    owner_users_id
)VALUES (
     $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33
) RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id
`

type CreateIndustrialBrokerAgentPropertyBranchParams struct {
	PropertyTitle               string             `json:"property_title"`
	PropertyTitleArabic         string             `json:"property_title_arabic"`
	Description                 string             `json:"description"`
	DescriptionArabic           string             `json:"description_arabic"`
	IsVerified                  pgtype.Bool        `json:"is_verified"`
	PropertyRank                int64              `json:"property_rank"`
	AddressesID                 int64              `json:"addresses_id"`
	LocationsID                 int64              `json:"locations_id"`
	PropertyTypesID             int64              `json:"property_types_id"`
	Status                      int64              `json:"status"`
	CreatedAt                   time.Time          `json:"created_at"`
	UpdatedAt                   time.Time          `json:"updated_at"`
	FacilitiesID                []int64            `json:"facilities_id"`
	AmenitiesID                 []int64            `json:"amenities_id"`
	BrokerCompaniesBranchesID   int64              `json:"broker_companies_branches_id"`
	BrokerCompanyBranchesAgents int64              `json:"broker_company_branches_agents"`
	IsShowOwnerInfo             pgtype.Bool        `json:"is_show_owner_info"`
	Property                    int64              `json:"property"`
	CountriesID                 int64              `json:"countries_id"`
	RefNo                       string             `json:"ref_no"`
	DeveloperCompanyName        pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName     pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                    pgtype.Bool        `json:"is_branch"`
	Category                    string             `json:"category"`
	Investment                  pgtype.Bool        `json:"investment"`
	ContractStartDatetime       pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime         pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                      int64              `json:"amount"`
	UnitTypes                   []int64            `json:"unit_types"`
	UsersID                     int64              `json:"users_id"`
	PropertyName                string             `json:"property_name"`
	FromXml                     pgtype.Bool        `json:"from_xml"`
	OwnerUsersID                pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) CreateIndustrialBrokerAgentPropertyBranch(ctx context.Context, arg CreateIndustrialBrokerAgentPropertyBranchParams) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, createIndustrialBrokerAgentPropertyBranch,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.BrokerCompaniesBranchesID,
		arg.BrokerCompanyBranchesAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.FromXml,
		arg.OwnerUsersID,
	)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}

const deleteIndustrialBrokerAgentPropertyBranch = `-- name: DeleteIndustrialBrokerAgentPropertyBranch :exec
DELETE FROM industrial_broker_agent_properties_branch
Where id = $1
`

func (q *Queries) DeleteIndustrialBrokerAgentPropertyBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialBrokerAgentPropertyBranch, id)
	return err
}

const getAllIndustrialBrokerAgentPropertyBranch = `-- name: GetAllIndustrialBrokerAgentPropertyBranch :many
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id FROM industrial_broker_agent_properties_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialBrokerAgentPropertyBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyBranch(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyBranchParams) ([]IndustrialBrokerAgentPropertiesBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesBranch
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesBranch
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.BrokerCompaniesBranchesID,
			&i.BrokerCompanyBranchesAgents,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.IsBranch,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.FromXml,
			&i.OwnerUsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrialBrokerAgentPropertyBranch = `-- name: GetIndustrialBrokerAgentPropertyBranch :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id FROM industrial_broker_agent_properties_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialBrokerAgentPropertyBranch(ctx context.Context, limit int32) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyBranch, limit)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranch = `-- name: UpdateIndustrialBrokerAgentPropertyBranch :one
UPDATE industrial_broker_agent_properties_branch
SET   property_title = $2,
    property_title_arabic = $3,
    description = $4,
    description_arabic = $5,
    is_verified = $6,
    property_rank = $7,
    addresses_id = $8,
    locations_id = $9,
    property_types_id = $10,
    status = $11,
    created_at = $12,
    updated_at = $13,
    facilities_id = $14,
    amenities_id = $15,
    broker_companies_branches_id = $16,
    broker_company_branches_agents = $17,
    is_show_owner_info = $18,
    property = $19,
    countries_id = $20,
    ref_no = $21,
    developer_company_name = $22,
    sub_developer_company_name = $23,
    is_branch = $24,
    category = $25,
    investment = $26,
    contract_start_datetime = $27,
    contract_end_datetime = $28,
    amount = $29,
    unit_types = $30,
    users_id = $31,
    property_name = $32,
    from_xml = $33,
    owner_users_id = $34
Where id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id
`

type UpdateIndustrialBrokerAgentPropertyBranchParams struct {
	ID                          int64              `json:"id"`
	PropertyTitle               string             `json:"property_title"`
	PropertyTitleArabic         string             `json:"property_title_arabic"`
	Description                 string             `json:"description"`
	DescriptionArabic           string             `json:"description_arabic"`
	IsVerified                  pgtype.Bool        `json:"is_verified"`
	PropertyRank                int64              `json:"property_rank"`
	AddressesID                 int64              `json:"addresses_id"`
	LocationsID                 int64              `json:"locations_id"`
	PropertyTypesID             int64              `json:"property_types_id"`
	Status                      int64              `json:"status"`
	CreatedAt                   time.Time          `json:"created_at"`
	UpdatedAt                   time.Time          `json:"updated_at"`
	FacilitiesID                []int64            `json:"facilities_id"`
	AmenitiesID                 []int64            `json:"amenities_id"`
	BrokerCompaniesBranchesID   int64              `json:"broker_companies_branches_id"`
	BrokerCompanyBranchesAgents int64              `json:"broker_company_branches_agents"`
	IsShowOwnerInfo             pgtype.Bool        `json:"is_show_owner_info"`
	Property                    int64              `json:"property"`
	CountriesID                 int64              `json:"countries_id"`
	RefNo                       string             `json:"ref_no"`
	DeveloperCompanyName        pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName     pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                    pgtype.Bool        `json:"is_branch"`
	Category                    string             `json:"category"`
	Investment                  pgtype.Bool        `json:"investment"`
	ContractStartDatetime       pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime         pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                      int64              `json:"amount"`
	UnitTypes                   []int64            `json:"unit_types"`
	UsersID                     int64              `json:"users_id"`
	PropertyName                string             `json:"property_name"`
	FromXml                     pgtype.Bool        `json:"from_xml"`
	OwnerUsersID                pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranch(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchParams) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranch,
		arg.ID,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.BrokerCompaniesBranchesID,
		arg.BrokerCompanyBranchesAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.FromXml,
		arg.OwnerUsersID,
	)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranchRank = `-- name: UpdateIndustrialBrokerAgentPropertyBranchRank :one
UPDATE industrial_broker_agent_properties_branch SET property_rank = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id
`

type UpdateIndustrialBrokerAgentPropertyBranchRankParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranchRank(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchRankParams) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranchRank, arg.ID, arg.PropertyRank)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranchStatus = `-- name: UpdateIndustrialBrokerAgentPropertyBranchStatus :one
 UPDATE industrial_broker_agent_properties_branch SET status = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id
`

type UpdateIndustrialBrokerAgentPropertyBranchStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranchStatus(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchStatusParams) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranchStatus, arg.ID, arg.Status)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranchVerifyStatus = `-- name: UpdateIndustrialBrokerAgentPropertyBranchVerifyStatus :one
UPDATE industrial_broker_agent_properties_branch SET is_verified = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, owner_users_id
`

type UpdateIndustrialBrokerAgentPropertyBranchVerifyStatusParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranchVerifyStatus(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchVerifyStatusParams) (IndustrialBrokerAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranchVerifyStatus, arg.ID, arg.IsVerified)
	var i IndustrialBrokerAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.OwnerUsersID,
	)
	return i, err
}
