// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_comments.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayHomeComments = `-- name: CreateHolidayHomeComments :one
INSERT INTO holiday_home_comments (
    parent_comment,
    holiday_home_id,
    users_id,
    comment_date,
    comment,
    reaction_type_id,
    reacted_by,
    status
)VALUES (
      $1 ,$2, $3, $4, $5, $6, $7, $8
) RETURNING id, parent_comment, holiday_home_id, users_id, comment_date, comment, reaction_type_id, reacted_by, status
`

type CreateHolidayHomeCommentsParams struct {
	ParentComment  pgtype.Int8 `json:"parent_comment"`
	HolidayHomeID  int64       `json:"holiday_home_id"`
	UsersID        int64       `json:"users_id"`
	CommentDate    time.Time   `json:"comment_date"`
	Comment        string      `json:"comment"`
	ReactionTypeID []int64     `json:"reaction_type_id"`
	ReactedBy      []int64     `json:"reacted_by"`
	Status         int64       `json:"status"`
}

func (q *Queries) CreateHolidayHomeComments(ctx context.Context, arg CreateHolidayHomeCommentsParams) (HolidayHomeComment, error) {
	row := q.db.QueryRow(ctx, createHolidayHomeComments,
		arg.ParentComment,
		arg.HolidayHomeID,
		arg.UsersID,
		arg.CommentDate,
		arg.Comment,
		arg.ReactionTypeID,
		arg.ReactedBy,
		arg.Status,
	)
	var i HolidayHomeComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.HolidayHomeID,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}

const deleteHolidayHomeComments = `-- name: DeleteHolidayHomeComments :exec
DELETE FROM holiday_home_comments
Where id = $1
`

func (q *Queries) DeleteHolidayHomeComments(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomeComments, id)
	return err
}

const getAllCountHolidayHomeComments = `-- name: GetAllCountHolidayHomeComments :one
SELECT COUNT(*) FROM holiday_home_comments Where status != 6
`

func (q *Queries) GetAllCountHolidayHomeComments(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomeComments)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllHolidayHomeComments = `-- name: GetAllHolidayHomeComments :many
SELECT id, parent_comment, holiday_home_id, users_id, comment_date, comment, reaction_type_id, reacted_by, status FROM holiday_home_comments WHERE status != 6
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllHolidayHomeCommentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomeComments(ctx context.Context, arg GetAllHolidayHomeCommentsParams) ([]HolidayHomeComment, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeComments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeComment
	for rows.Next() {
		var i HolidayHomeComment
		if err := rows.Scan(
			&i.ID,
			&i.ParentComment,
			&i.HolidayHomeID,
			&i.UsersID,
			&i.CommentDate,
			&i.Comment,
			&i.ReactionTypeID,
			&i.ReactedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomeComments = `-- name: GetHolidayHomeComments :one
SELECT id, parent_comment, holiday_home_id, users_id, comment_date, comment, reaction_type_id, reacted_by, status FROM holiday_home_comments
WHERE id = $1 and status != 6 LIMIT 1
`

func (q *Queries) GetHolidayHomeComments(ctx context.Context, id int64) (HolidayHomeComment, error) {
	row := q.db.QueryRow(ctx, getHolidayHomeComments, id)
	var i HolidayHomeComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.HolidayHomeID,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}

const updateHolidayHomeComments = `-- name: UpdateHolidayHomeComments :one
UPDATE holiday_home_comments
SET  parent_comment = $2,
     holiday_home_id = $3,
     users_id = $4,
     comment_date = $5,
     comment = $6,
     reaction_type_id = $7,
     reacted_by = $8,
     status= $9
WHERE id = $1
RETURNING id, parent_comment, holiday_home_id, users_id, comment_date, comment, reaction_type_id, reacted_by, status
`

type UpdateHolidayHomeCommentsParams struct {
	ID             int64       `json:"id"`
	ParentComment  pgtype.Int8 `json:"parent_comment"`
	HolidayHomeID  int64       `json:"holiday_home_id"`
	UsersID        int64       `json:"users_id"`
	CommentDate    time.Time   `json:"comment_date"`
	Comment        string      `json:"comment"`
	ReactionTypeID []int64     `json:"reaction_type_id"`
	ReactedBy      []int64     `json:"reacted_by"`
	Status         int64       `json:"status"`
}

func (q *Queries) UpdateHolidayHomeComments(ctx context.Context, arg UpdateHolidayHomeCommentsParams) (HolidayHomeComment, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomeComments,
		arg.ID,
		arg.ParentComment,
		arg.HolidayHomeID,
		arg.UsersID,
		arg.CommentDate,
		arg.Comment,
		arg.ReactionTypeID,
		arg.ReactedBy,
		arg.Status,
	)
	var i HolidayHomeComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.HolidayHomeID,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}
