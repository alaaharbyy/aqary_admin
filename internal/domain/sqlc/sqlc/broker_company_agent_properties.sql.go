// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agent_properties.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyAgentProperty = `-- name: CreateBrokerCompanyAgentProperty :one
INSERT INTO broker_company_agent_properties (
  property_title,
  property_title_arabic,
  description,
  description_arabic,
  is_verified,
  property_rank,
  addresses_id,
  locations_id, 
  property_types_id,
  profiles_id,
  facilities_id,
  amenities_id,
  status,
  created_at,
  updated_at,
  broker_companies_id,
  broker_company_agents,
  is_show_owner_info,
  property,
  -- facts_values,
  countries_id,
  ref_no,
  developer_company_name,
  sub_developer_company_name,
  is_branch,
  category,
  investment,
  contract_start_datetime,
  contract_end_datetime,
  amount,
  -- ask_price,
  unit_types,
  users_id,
  from_xml,
  property_name,
  list_of_date,
  list_of_notes,
  list_of_agent,
  owner_users_id
)VALUES (
    $1 ,$2,$3, $4,$5,$6,$7,$8,$9,$10, $11, $12, $13, $14,  $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37
) RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type CreateBrokerCompanyAgentPropertyParams struct {
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	ProfilesID              int64              `json:"profiles_id"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	BrokerCompaniesID       int64              `json:"broker_companies_id"`
	BrokerCompanyAgents     int64              `json:"broker_company_agents"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                pgtype.Bool        `json:"is_branch"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  float64            `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	FromXml                 pgtype.Bool        `json:"from_xml"`
	PropertyName            string             `json:"property_name"`
	ListOfDate              []time.Time        `json:"list_of_date"`
	ListOfNotes             []string           `json:"list_of_notes"`
	ListOfAgent             []int64            `json:"list_of_agent"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) CreateBrokerCompanyAgentProperty(ctx context.Context, arg CreateBrokerCompanyAgentPropertyParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyAgentProperty,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompaniesID,
		arg.BrokerCompanyAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.FromXml,
		arg.PropertyName,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const deleteBrokerCompanyAgentProperty = `-- name: DeleteBrokerCompanyAgentProperty :exec
DELETE FROM broker_company_agent_properties
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyAgentProperty(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyAgentProperty, id)
	return err
}

const getAllBrokerCompanyAgentProperty = `-- name: GetAllBrokerCompanyAgentProperty :many
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM broker_company_agent_properties
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyAgentPropertyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyAgentProperty(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyParams) ([]BrokerCompanyAgentProperty, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentProperty, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentProperty
	for rows.Next() {
		var i BrokerCompanyAgentProperty
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.ProfilesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.BrokerCompaniesID,
			&i.BrokerCompanyAgents,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.IsBranch,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.FromXml,
			&i.ListOfDate,
			&i.ListOfNotes,
			&i.ListOfAgent,
			&i.OwnerUsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAmenitiesIdByBrokerCompanyAgentPropertyId = `-- name: GetAmenitiesIdByBrokerCompanyAgentPropertyId :one
SELECT broker_company_agent_properties.amenities_id FROM broker_company_agent_properties WHERE id = $1
`

func (q *Queries) GetAmenitiesIdByBrokerCompanyAgentPropertyId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAmenitiesIdByBrokerCompanyAgentPropertyId, id)
	var amenities_id []int64
	err := row.Scan(&amenities_id)
	return amenities_id, err
}

const getBrokerAgentPropertiesByBrokerAgentId = `-- name: GetBrokerAgentPropertiesByBrokerAgentId :many
WITH x AS (
  SELECT
    broker_company_agent_properties.id,

    broker_company_agent_properties.property_title,

    broker_company_agent_properties.is_branch,

    broker_company_agent_properties.property

  FROM

    broker_company_agent_properties

  LEFT JOIN

    broker_company_agents

  ON

    broker_company_agents.id = broker_company_agent_properties.broker_company_agents

  where

    broker_company_agent_properties.category = 'rent' and

    broker_company_agents.users_id = $1 

    AND broker_company_agent_properties.from_xml = false

  UNION ALL

  SELECT

    broker_company_agent_properties_branch.id,

    broker_company_agent_properties_branch.property_title,

    broker_company_agent_properties_branch.is_branch,

    broker_company_agent_properties_branch.property

  FROM

    broker_company_agent_properties_branch

  LEFT JOIN

    broker_company_branches_agents

  ON

    broker_company_branches_agents.id = broker_company_agent_properties_branch.broker_company_branches_agents

  where

    broker_company_agent_properties_branch.category = 'rent' and

    broker_company_branches_agents.users_id = $1

    AND broker_company_agent_properties_branch.from_xml = false

)

SELECT

  id,

  property_title,

  is_branch,

  property

FROM x
`

type GetBrokerAgentPropertiesByBrokerAgentIdRow struct {
	ID            int64       `json:"id"`
	PropertyTitle string      `json:"property_title"`
	IsBranch      pgtype.Bool `json:"is_branch"`
	Property      int64       `json:"property"`
}

func (q *Queries) GetBrokerAgentPropertiesByBrokerAgentId(ctx context.Context, usersID int64) ([]GetBrokerAgentPropertiesByBrokerAgentIdRow, error) {
	rows, err := q.db.Query(ctx, getBrokerAgentPropertiesByBrokerAgentId, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrokerAgentPropertiesByBrokerAgentIdRow
	for rows.Next() {
		var i GetBrokerAgentPropertiesByBrokerAgentIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.IsBranch,
			&i.Property,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerAgentPropertiesByBrokerCompaniesId = `-- name: GetBrokerAgentPropertiesByBrokerCompaniesId :many
 select id, property_title, property , is_branch
from broker_company_agent_properties bcap  where bcap.broker_companies_id = $1 and bcap.category = 'rent' and bcap.from_xml = false
`

type GetBrokerAgentPropertiesByBrokerCompaniesIdRow struct {
	ID            int64       `json:"id"`
	PropertyTitle string      `json:"property_title"`
	Property      int64       `json:"property"`
	IsBranch      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetBrokerAgentPropertiesByBrokerCompaniesId(ctx context.Context, brokerCompaniesID int64) ([]GetBrokerAgentPropertiesByBrokerCompaniesIdRow, error) {
	rows, err := q.db.Query(ctx, getBrokerAgentPropertiesByBrokerCompaniesId, brokerCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrokerAgentPropertiesByBrokerCompaniesIdRow
	for rows.Next() {
		var i GetBrokerAgentPropertiesByBrokerCompaniesIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.Property,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyAgentPropertiesByRefrenceNumber = `-- name: GetBrokerCompanyAgentPropertiesByRefrenceNumber :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM broker_company_agent_properties WHERE ref_no = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyAgentPropertiesByRefrenceNumber(ctx context.Context, refNo string) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertiesByRefrenceNumber, refNo)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentProperty = `-- name: GetBrokerCompanyAgentProperty :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM broker_company_agent_properties 
WHERE id = $1
`

func (q *Queries) GetBrokerCompanyAgentProperty(ctx context.Context, id int64) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentProperty, id)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyByName = `-- name: GetBrokerCompanyAgentPropertyByName :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM broker_company_agent_properties 
WHERE property_title = $1
`

func (q *Queries) GetBrokerCompanyAgentPropertyByName(ctx context.Context, propertyTitle string) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyByName, propertyTitle)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyWithValidation = `-- name: GetBrokerCompanyAgentPropertyWithValidation :one
SELECT
    id,
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    profiles_id,
    status,
    created_at,
    updated_at,
    facilities_id,
    amenities_id,
    broker_companies_id,
    broker_company_agents,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    developer_company_name,
    sub_developer_company_name,
    is_branch,
    category,
    investment,
    contract_start_datetime,
    contract_end_datetime,
    amount,
    unit_types,
    users_id,
    property_name,
    from_xml,
    list_of_date,
    list_of_notes,
    list_of_agent,
    owner_users_id
from
    broker_company_agent_properties fp
WHERE
    CASE
        WHEN $1 :: bigint = 0 THEN true
        WHEN $1 :: bigint = 1 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
        )
        WHEN $1 :: bigint = 2 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
        )
        WHEN $1 :: bigint = 3 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
        )
        WHEN $1 :: bigint = 4 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
                AND addresses.locations_id = $5
        )
    END
    AND (
        status != 5
        AND status != 6
    )
    AND fp.id = $6
LIMIT
    1
`

type GetBrokerCompanyAgentPropertyWithValidationParams struct {
	Column1     int64       `json:"column_1"`
	CitiesID    pgtype.Int8 `json:"cities_id"`
	Column3     []int64     `json:"column_3"`
	Column4     []int64     `json:"column_4"`
	LocationsID pgtype.Int8 `json:"locations_id"`
	ID          int64       `json:"id"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyWithValidation(ctx context.Context, arg GetBrokerCompanyAgentPropertyWithValidationParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyWithValidation,
		arg.Column1,
		arg.CitiesID,
		arg.Column3,
		arg.Column4,
		arg.LocationsID,
		arg.ID,
	)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getFacilitiesIdByBrokerCompanyAgentPropertyId = `-- name: GetFacilitiesIdByBrokerCompanyAgentPropertyId :one
SELECT broker_company_agent_properties.facilities_id FROM broker_company_agent_properties WHERE id = $1
`

func (q *Queries) GetFacilitiesIdByBrokerCompanyAgentPropertyId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getFacilitiesIdByBrokerCompanyAgentPropertyId, id)
	var facilities_id []int64
	err := row.Scan(&facilities_id)
	return facilities_id, err
}

const updateBrokerCompanyAgentProperty = `-- name: UpdateBrokerCompanyAgentProperty :one
UPDATE broker_company_agent_properties
SET   property_title = $2,
  property_title_arabic = $3,
  description = $4,
  description_arabic = $5,
  is_verified = $6,
  property_rank = $7,
  addresses_id = $8,
  locations_id = $9, 
  property_types_id = $10,
  profiles_id = $11,
  facilities_id = $12,
  amenities_id = $13,
  status = $14,
   created_at = $15,
  updated_at = $16,
  broker_companies_id = $17,
  broker_company_agents = $18,
  is_show_owner_info = $19,
  property = $20,
  -- facts_values = $21,
  countries_id = $21,
  ref_no = $22,
  developer_company_name = $23,
  sub_developer_company_name = $24,
  is_branch = $25,
  category = $26,
  investment = $27,
  contract_start_datetime = $28,
  contract_end_datetime = $29,
  amount = $30,
  -- ask_price = $32,
  unit_types = $31,
  users_id = $32,
  from_xml = $33,
  property_name = $34,
        list_of_date = $35,
  list_of_notes = $36,
  list_of_agent = $37,
  owner_users_id = $38
Where id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyParams struct {
	ID                      int64              `json:"id"`
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	ProfilesID              int64              `json:"profiles_id"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	BrokerCompaniesID       int64              `json:"broker_companies_id"`
	BrokerCompanyAgents     int64              `json:"broker_company_agents"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                pgtype.Bool        `json:"is_branch"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  float64            `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	FromXml                 pgtype.Bool        `json:"from_xml"`
	PropertyName            string             `json:"property_name"`
	ListOfDate              []time.Time        `json:"list_of_date"`
	ListOfNotes             []string           `json:"list_of_notes"`
	ListOfAgent             []int64            `json:"list_of_agent"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) UpdateBrokerCompanyAgentProperty(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentProperty,
		arg.ID,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompaniesID,
		arg.BrokerCompanyAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.FromXml,
		arg.PropertyName,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyRankById = `-- name: UpdateBrokerCompanyAgentPropertyRankById :one
UPDATE broker_company_agent_properties 
SET property_rank = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyRankByIdParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyRankById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyRankByIdParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyRankById, arg.ID, arg.PropertyRank)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyStatusById = `-- name: UpdateBrokerCompanyAgentPropertyStatusById :one
UPDATE broker_company_agent_properties 
SET status = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyStatusByIdParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyStatusById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyStatusByIdParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyStatusById, arg.ID, arg.Status)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyVerificationById = `-- name: UpdateBrokerCompanyAgentPropertyVerificationById :one
UPDATE broker_company_agent_properties 
SET is_verified = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyVerificationByIdParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyVerificationById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyVerificationByIdParams) (BrokerCompanyAgentProperty, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyVerificationById, arg.ID, arg.IsVerified)
	var i BrokerCompanyAgentProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesID,
		&i.BrokerCompanyAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}
