// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: documents_subcategory.sql

package sqlc

import (
	"context"
	"time"
)

const createDocumentsSubCategory = `-- name: CreateDocumentsSubCategory :one
INSERT INTO documents_subcategory (
    sub_category,
     created_at, 
    updated_at,
    documents_category_id,
    status
)VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar
`

type CreateDocumentsSubCategoryParams struct {
	SubCategory         string    `json:"sub_category"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
	DocumentsCategoryID int64     `json:"documents_category_id"`
	Status              int64     `json:"status"`
}

func (q *Queries) CreateDocumentsSubCategory(ctx context.Context, arg CreateDocumentsSubCategoryParams) (DocumentsSubcategory, error) {
	row := q.db.QueryRow(ctx, createDocumentsSubCategory,
		arg.SubCategory,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DocumentsCategoryID,
		arg.Status,
	)
	var i DocumentsSubcategory
	err := row.Scan(
		&i.ID,
		&i.SubCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentsCategoryID,
		&i.Status,
		&i.SubCategoryAr,
	)
	return i, err
}

const deleteDocumentsSubCategory = `-- name: DeleteDocumentsSubCategory :exec
DELETE FROM documents_subcategory
Where id = $1
`

func (q *Queries) DeleteDocumentsSubCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDocumentsSubCategory, id)
	return err
}

const getAllDocumentsSubCategory = `-- name: GetAllDocumentsSubCategory :many
SELECT id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar FROM documents_subcategory
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDocumentsSubCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDocumentsSubCategory(ctx context.Context, arg GetAllDocumentsSubCategoryParams) ([]DocumentsSubcategory, error) {
	rows, err := q.db.Query(ctx, getAllDocumentsSubCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocumentsSubcategory
	for rows.Next() {
		var i DocumentsSubcategory
		if err := rows.Scan(
			&i.ID,
			&i.SubCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DocumentsCategoryID,
			&i.Status,
			&i.SubCategoryAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDocumentsSubCategoryByDocId = `-- name: GetAllDocumentsSubCategoryByDocId :many
SELECT  id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar FROM documents_subcategory
WHERE documents_category_id = $1
`

func (q *Queries) GetAllDocumentsSubCategoryByDocId(ctx context.Context, documentsCategoryID int64) ([]DocumentsSubcategory, error) {
	rows, err := q.db.Query(ctx, getAllDocumentsSubCategoryByDocId, documentsCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocumentsSubcategory
	for rows.Next() {
		var i DocumentsSubcategory
		if err := rows.Scan(
			&i.ID,
			&i.SubCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DocumentsCategoryID,
			&i.Status,
			&i.SubCategoryAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSubCategoryBySubCatId = `-- name: GetAllSubCategoryBySubCatId :many
SELECT documents_subcategory.id, documents_subcategory.sub_category, documents_subcategory.created_at, documents_subcategory.updated_at, documents_subcategory.documents_category_id, documents_subcategory.status, documents_subcategory.sub_category_ar FROM documents_subcategory 
WHERE id = ANY($1::int[])
`

func (q *Queries) GetAllSubCategoryBySubCatId(ctx context.Context, dollar_1 []int32) ([]DocumentsSubcategory, error) {
	rows, err := q.db.Query(ctx, getAllSubCategoryBySubCatId, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocumentsSubcategory
	for rows.Next() {
		var i DocumentsSubcategory
		if err := rows.Scan(
			&i.ID,
			&i.SubCategory,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DocumentsCategoryID,
			&i.Status,
			&i.SubCategoryAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountDocumentSubCategory = `-- name: GetCountDocumentSubCategory :one
SELECT count(*) FROM documents_subcategory
`

func (q *Queries) GetCountDocumentSubCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountDocumentSubCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDocumentsSubCategory = `-- name: GetDocumentsSubCategory :one
SELECT id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar FROM documents_subcategory
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocumentsSubCategory(ctx context.Context, id int64) (DocumentsSubcategory, error) {
	row := q.db.QueryRow(ctx, getDocumentsSubCategory, id)
	var i DocumentsSubcategory
	err := row.Scan(
		&i.ID,
		&i.SubCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentsCategoryID,
		&i.Status,
		&i.SubCategoryAr,
	)
	return i, err
}

const getDocumentsSubCategoryBySubCategory = `-- name: GetDocumentsSubCategoryBySubCategory :one
SELECT id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar FROM documents_subcategory
WHERE sub_category = $1
`

func (q *Queries) GetDocumentsSubCategoryBySubCategory(ctx context.Context, subCategory string) (DocumentsSubcategory, error) {
	row := q.db.QueryRow(ctx, getDocumentsSubCategoryBySubCategory, subCategory)
	var i DocumentsSubcategory
	err := row.Scan(
		&i.ID,
		&i.SubCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentsCategoryID,
		&i.Status,
		&i.SubCategoryAr,
	)
	return i, err
}

const updateDocumentsSubCategory = `-- name: UpdateDocumentsSubCategory :one
UPDATE documents_subcategory
SET sub_category = $2,
    created_at = $3, 
    updated_at = $4,
    documents_category_id = $5,
    status = $6
Where id = $1
RETURNING id, sub_category, created_at, updated_at, documents_category_id, status, sub_category_ar
`

type UpdateDocumentsSubCategoryParams struct {
	ID                  int64     `json:"id"`
	SubCategory         string    `json:"sub_category"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
	DocumentsCategoryID int64     `json:"documents_category_id"`
	Status              int64     `json:"status"`
}

func (q *Queries) UpdateDocumentsSubCategory(ctx context.Context, arg UpdateDocumentsSubCategoryParams) (DocumentsSubcategory, error) {
	row := q.db.QueryRow(ctx, updateDocumentsSubCategory,
		arg.ID,
		arg.SubCategory,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DocumentsCategoryID,
		arg.Status,
	)
	var i DocumentsSubcategory
	err := row.Scan(
		&i.ID,
		&i.SubCategory,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentsCategoryID,
		&i.Status,
		&i.SubCategoryAr,
	)
	return i, err
}
