// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition_queries.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteExhibitionQueryByID = `-- name: DeleteExhibitionQueryByID :exec
DELETE FROM exhibition_queries
WHERE id = $1
`

func (q *Queries) DeleteExhibitionQueryByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExhibitionQueryByID, id)
	return err
}

const getAllExhibitionQueries = `-- name: GetAllExhibitionQueries :many
SELECT id, ref_no, exhibitions_id, firstname, lastname, mobile, email, subject, description, response, responded_by, created_at
FROM exhibition_queries
ORDER BY id DESC 
LIMIT $1 
OFFSET $2
`

type GetAllExhibitionQueriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllExhibitionQueriesRow struct {
	ID            int64       `json:"id"`
	RefNo         string      `json:"ref_no"`
	ExhibitionsID int64       `json:"exhibitions_id"`
	Firstname     string      `json:"firstname"`
	Lastname      string      `json:"lastname"`
	Mobile        string      `json:"mobile"`
	Email         string      `json:"email"`
	Subject       string      `json:"subject"`
	Description   string      `json:"description"`
	Response      pgtype.Text `json:"response"`
	RespondedBy   pgtype.Int8 `json:"responded_by"`
	CreatedAt     time.Time   `json:"created_at"`
}

func (q *Queries) GetAllExhibitionQueries(ctx context.Context, arg GetAllExhibitionQueriesParams) ([]GetAllExhibitionQueriesRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionQueries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionQueriesRow
	for rows.Next() {
		var i GetAllExhibitionQueriesRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.ExhibitionsID,
			&i.Firstname,
			&i.Lastname,
			&i.Mobile,
			&i.Email,
			&i.Subject,
			&i.Description,
			&i.Response,
			&i.RespondedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfExhibitionQueries = `-- name: GetNumberOfExhibitionQueries :one
SELECT COUNT(id) 
FROM exhibition_queries
`

func (q *Queries) GetNumberOfExhibitionQueries(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfExhibitionQueries)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateExhibitionQueryByID = `-- name: UpdateExhibitionQueryByID :one
UPDATE exhibition_queries
SET 
    response = $2,
    responded_by = $3
WHERE
    id = $1 RETURNING id, ref_no, exhibitions_id, firstname, lastname, mobile, email, subject, description, response, responded_by, created_at, updated_at
`

type UpdateExhibitionQueryByIDParams struct {
	ID          int64       `json:"id"`
	Response    pgtype.Text `json:"response"`
	RespondedBy pgtype.Int8 `json:"responded_by"`
}

func (q *Queries) UpdateExhibitionQueryByID(ctx context.Context, arg UpdateExhibitionQueryByIDParams) (ExhibitionQuery, error) {
	row := q.db.QueryRow(ctx, updateExhibitionQueryByID, arg.ID, arg.Response, arg.RespondedBy)
	var i ExhibitionQuery
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.ExhibitionsID,
		&i.Firstname,
		&i.Lastname,
		&i.Mobile,
		&i.Email,
		&i.Subject,
		&i.Description,
		&i.Response,
		&i.RespondedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
