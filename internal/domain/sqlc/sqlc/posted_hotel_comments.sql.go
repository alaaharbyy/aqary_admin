// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posted_hotel_comments.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostedHotelComment = `-- name: CreatePostedHotelComment :one
INSERT INTO posted_hotel_comments(parent_comment, posted_hotel_booking, users_id, comment_date, comment, reaction_type_id, reacted_by)
VALUES($1, $2, $3, $4, $5, $6, $7) RETURNING id, parent_comment, posted_hotel_booking, users_id, comment_date, comment, reaction_type_id, reacted_by, status
`

type CreatePostedHotelCommentParams struct {
	ParentComment      pgtype.Int8 `json:"parent_comment"`
	PostedHotelBooking int64       `json:"posted_hotel_booking"`
	UsersID            int64       `json:"users_id"`
	CommentDate        time.Time   `json:"comment_date"`
	Comment            string      `json:"comment"`
	ReactionTypeID     []int64     `json:"reaction_type_id"`
	ReactedBy          []int64     `json:"reacted_by"`
}

func (q *Queries) CreatePostedHotelComment(ctx context.Context, arg CreatePostedHotelCommentParams) (PostedHotelComment, error) {
	row := q.db.QueryRow(ctx, createPostedHotelComment,
		arg.ParentComment,
		arg.PostedHotelBooking,
		arg.UsersID,
		arg.CommentDate,
		arg.Comment,
		arg.ReactionTypeID,
		arg.ReactedBy,
	)
	var i PostedHotelComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.PostedHotelBooking,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}

const getAllPostedHotelComments = `-- name: GetAllPostedHotelComments :many
SELECT id, parent_comment, posted_hotel_booking, users_id, comment_date, comment, reaction_type_id, reacted_by, status FROM posted_hotel_comments
`

func (q *Queries) GetAllPostedHotelComments(ctx context.Context) ([]PostedHotelComment, error) {
	rows, err := q.db.Query(ctx, getAllPostedHotelComments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostedHotelComment
	for rows.Next() {
		var i PostedHotelComment
		if err := rows.Scan(
			&i.ID,
			&i.ParentComment,
			&i.PostedHotelBooking,
			&i.UsersID,
			&i.CommentDate,
			&i.Comment,
			&i.ReactionTypeID,
			&i.ReactedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostedHotelCommentByID = `-- name: GetPostedHotelCommentByID :one
SELECT id, parent_comment, posted_hotel_booking, users_id, comment_date, comment, reaction_type_id, reacted_by, status FROM posted_hotel_comments WHERE id=$1
`

func (q *Queries) GetPostedHotelCommentByID(ctx context.Context, id int64) (PostedHotelComment, error) {
	row := q.db.QueryRow(ctx, getPostedHotelCommentByID, id)
	var i PostedHotelComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.PostedHotelBooking,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}

const updatePostedHotelComment = `-- name: UpdatePostedHotelComment :one
 
UPDATE posted_hotel_comments
SET parent_comment = $2,
    posted_hotel_booking = $3,
    users_id = $4,
    comment_date = $5,
    comment = $6,
    reaction_type_id = $7,
    reacted_by = $8
WHERE id = $1 RETURNING id, parent_comment, posted_hotel_booking, users_id, comment_date, comment, reaction_type_id, reacted_by, status
`

type UpdatePostedHotelCommentParams struct {
	ID                 int64       `json:"id"`
	ParentComment      pgtype.Int8 `json:"parent_comment"`
	PostedHotelBooking int64       `json:"posted_hotel_booking"`
	UsersID            int64       `json:"users_id"`
	CommentDate        time.Time   `json:"comment_date"`
	Comment            string      `json:"comment"`
	ReactionTypeID     []int64     `json:"reaction_type_id"`
	ReactedBy          []int64     `json:"reacted_by"`
}

func (q *Queries) UpdatePostedHotelComment(ctx context.Context, arg UpdatePostedHotelCommentParams) (PostedHotelComment, error) {
	row := q.db.QueryRow(ctx, updatePostedHotelComment,
		arg.ID,
		arg.ParentComment,
		arg.PostedHotelBooking,
		arg.UsersID,
		arg.CommentDate,
		arg.Comment,
		arg.ReactionTypeID,
		arg.ReactedBy,
	)
	var i PostedHotelComment
	err := row.Scan(
		&i.ID,
		&i.ParentComment,
		&i.PostedHotelBooking,
		&i.UsersID,
		&i.CommentDate,
		&i.Comment,
		&i.ReactionTypeID,
		&i.ReactedBy,
		&i.Status,
	)
	return i, err
}
