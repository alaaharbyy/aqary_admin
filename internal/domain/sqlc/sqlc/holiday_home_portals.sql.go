// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_portals.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayHomePortals = `-- name: CreateHolidayHomePortals :one
INSERT INTO holiday_home_portals (
    ref_no,
    holiday_home_id,
    booking_portals_id,
    listing_url,
    price,
    created_at,
    updated_at
)VALUES (
      $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status
`

type CreateHolidayHomePortalsParams struct {
	RefNo            string             `json:"ref_no"`
	HolidayHomeID    int64              `json:"holiday_home_id"`
	BookingPortalsID int64              `json:"booking_portals_id"`
	ListingUrl       string             `json:"listing_url"`
	Price            float64            `json:"price"`
	CreatedAt        time.Time          `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateHolidayHomePortals(ctx context.Context, arg CreateHolidayHomePortalsParams) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, createHolidayHomePortals,
		arg.RefNo,
		arg.HolidayHomeID,
		arg.BookingPortalsID,
		arg.ListingUrl,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const deleteHolidayHomePortals = `-- name: DeleteHolidayHomePortals :exec
DELETE FROM holiday_home_portals
Where id = $1
`

func (q *Queries) DeleteHolidayHomePortals(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomePortals, id)
	return err
}

const deleteHolidayHomePortalsByHolidayId = `-- name: DeleteHolidayHomePortalsByHolidayId :exec
DELETE FROM holiday_home_portals
Where holiday_home_id= $1
`

func (q *Queries) DeleteHolidayHomePortalsByHolidayId(ctx context.Context, holidayHomeID int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomePortalsByHolidayId, holidayHomeID)
	return err
}

const getAllCountHolidayHomePortal = `-- name: GetAllCountHolidayHomePortal :one
SELECT COUNT(*) FROM holiday_home_portals WHERE holiday_home_id =$1 and status !=6
`

func (q *Queries) GetAllCountHolidayHomePortal(ctx context.Context, holidayHomeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomePortal, holidayHomeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllCountHolidayHomePortals = `-- name: GetAllCountHolidayHomePortals :one
SELECT COUNT(*) FROM holiday_home_portals WHERE status !=6
`

func (q *Queries) GetAllCountHolidayHomePortals(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomePortals)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllHolidayHomePortalByHolidayId = `-- name: GetAllHolidayHomePortalByHolidayId :many
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE holiday_home_id= $1 and status !=6 ORDER BY updated_at DESC
`

func (q *Queries) GetAllHolidayHomePortalByHolidayId(ctx context.Context, holidayHomeID int64) ([]HolidayHomePortal, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomePortalByHolidayId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePortal
	for rows.Next() {
		var i HolidayHomePortal
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalsID,
			&i.ListingUrl,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomePortals = `-- name: GetAllHolidayHomePortals :many
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
ORDER BY id  and status !=6
LIMIT $1
OFFSET $2
`

type GetAllHolidayHomePortalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomePortals(ctx context.Context, arg GetAllHolidayHomePortalsParams) ([]HolidayHomePortal, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomePortals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePortal
	for rows.Next() {
		var i HolidayHomePortal
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalsID,
			&i.ListingUrl,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomePortalsByHolidayId = `-- name: GetAllHolidayHomePortalsByHolidayId :many
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE holiday_home_id= $1 and status !=6
LIMIT $2
OFFSET $3
`

type GetAllHolidayHomePortalsByHolidayIdParams struct {
	HolidayHomeID int64 `json:"holiday_home_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomePortalsByHolidayId(ctx context.Context, arg GetAllHolidayHomePortalsByHolidayIdParams) ([]HolidayHomePortal, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomePortalsByHolidayId, arg.HolidayHomeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePortal
	for rows.Next() {
		var i HolidayHomePortal
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalsID,
			&i.ListingUrl,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomePortals = `-- name: GetHolidayHomePortals :one
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE id = $1 and status !=6 LIMIT 1
`

func (q *Queries) GetHolidayHomePortals(ctx context.Context, id int64) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, getHolidayHomePortals, id)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getHolidayHomePortalsByHolidayId = `-- name: GetHolidayHomePortalsByHolidayId :one
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE holiday_home_id = $1 and status !=6 LIMIT 1
`

func (q *Queries) GetHolidayHomePortalsByHolidayId(ctx context.Context, holidayHomeID int64) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, getHolidayHomePortalsByHolidayId, holidayHomeID)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getHolidayHomePortalsByRefNo = `-- name: GetHolidayHomePortalsByRefNo :one
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE ref_no like $1 and status !=6
`

func (q *Queries) GetHolidayHomePortalsByRefNo(ctx context.Context, refNo string) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, getHolidayHomePortalsByRefNo, refNo)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getHolidayHomePortalsbByBkId = `-- name: GetHolidayHomePortalsbByBkId :many
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE booking_portals_id = $1 and status !=6
`

func (q *Queries) GetHolidayHomePortalsbByBkId(ctx context.Context, bookingPortalsID int64) ([]HolidayHomePortal, error) {
	rows, err := q.db.Query(ctx, getHolidayHomePortalsbByBkId, bookingPortalsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePortal
	for rows.Next() {
		var i HolidayHomePortal
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalsID,
			&i.ListingUrl,
			&i.Price,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomePortalsbByBkPorId = `-- name: GetHolidayHomePortalsbByBkPorId :one
SELECT id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status FROM holiday_home_portals
WHERE booking_portals_id = $1 AND
holiday_home_id = $2 and status !=6
`

type GetHolidayHomePortalsbByBkPorIdParams struct {
	BookingPortalsID int64 `json:"booking_portals_id"`
	HolidayHomeID    int64 `json:"holiday_home_id"`
}

func (q *Queries) GetHolidayHomePortalsbByBkPorId(ctx context.Context, arg GetHolidayHomePortalsbByBkPorIdParams) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, getHolidayHomePortalsbByBkPorId, arg.BookingPortalsID, arg.HolidayHomeID)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHolidayHomePortals = `-- name: UpdateHolidayHomePortals :one
UPDATE holiday_home_portals
SET  ref_no = $2,
     holiday_home_id = $3,
     booking_portals_id = $4,
     listing_url = $5,
     price = $6,
     created_at = $7,
     updated_at = $8
WHERE id = $1
RETURNING id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status
`

type UpdateHolidayHomePortalsParams struct {
	ID               int64              `json:"id"`
	RefNo            string             `json:"ref_no"`
	HolidayHomeID    int64              `json:"holiday_home_id"`
	BookingPortalsID int64              `json:"booking_portals_id"`
	ListingUrl       string             `json:"listing_url"`
	Price            float64            `json:"price"`
	CreatedAt        time.Time          `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateHolidayHomePortals(ctx context.Context, arg UpdateHolidayHomePortalsParams) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomePortals,
		arg.ID,
		arg.RefNo,
		arg.HolidayHomeID,
		arg.BookingPortalsID,
		arg.ListingUrl,
		arg.Price,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHolidayHomePortalsStaus = `-- name: UpdateHolidayHomePortalsStaus :one
UPDATE holiday_home_portals
SET updated_at = $3,
     status = $2
WHERE id = $1
RETURNING id, ref_no, holiday_home_id, booking_portals_id, listing_url, price, created_at, updated_at, status
`

type UpdateHolidayHomePortalsStausParams struct {
	ID        int64              `json:"id"`
	Status    int64              `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateHolidayHomePortalsStaus(ctx context.Context, arg UpdateHolidayHomePortalsStausParams) (HolidayHomePortal, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomePortalsStaus, arg.ID, arg.Status, arg.UpdatedAt)
	var i HolidayHomePortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
