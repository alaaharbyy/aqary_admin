// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers_companies.sql

package sqlc

import (
	"context"
	"time"
)

const createFreelancerCompanies = `-- name: CreateFreelancerCompanies :one
INSERT INTO freelancers_companies (
    company_name,
    commercial_license_no,
    commercial_license_file,
    commercial_license_issue_date,
    commercial_license_expiry_date,
    status,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5,$6,$7,$8
) RETURNING id, company_name, commercial_license_no, commercial_license_file, commercial_license_issue_date, commercial_license_expiry_date, status, created_at, updated_at
`

type CreateFreelancerCompaniesParams struct {
	CompanyName                 string    `json:"company_name"`
	CommercialLicenseNo         string    `json:"commercial_license_no"`
	CommercialLicenseFile       string    `json:"commercial_license_file"`
	CommercialLicenseIssueDate  time.Time `json:"commercial_license_issue_date"`
	CommercialLicenseExpiryDate time.Time `json:"commercial_license_expiry_date"`
	Status                      int64     `json:"status"`
	CreatedAt                   time.Time `json:"created_at"`
	UpdatedAt                   time.Time `json:"updated_at"`
}

func (q *Queries) CreateFreelancerCompanies(ctx context.Context, arg CreateFreelancerCompaniesParams) (FreelancersCompany, error) {
	row := q.db.QueryRow(ctx, createFreelancerCompanies,
		arg.CompanyName,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFile,
		arg.CommercialLicenseIssueDate,
		arg.CommercialLicenseExpiryDate,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FreelancersCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFile,
		&i.CommercialLicenseIssueDate,
		&i.CommercialLicenseExpiryDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFreelancerCompanies = `-- name: DeleteFreelancerCompanies :exec
DELETE FROM freelancers_companies
Where id = $1
`

func (q *Queries) DeleteFreelancerCompanies(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancerCompanies, id)
	return err
}

const getAllFreelancerCompanies = `-- name: GetAllFreelancerCompanies :many
SELECT id, company_name, commercial_license_no, commercial_license_file, commercial_license_issue_date, commercial_license_expiry_date, status, created_at, updated_at FROM freelancers_companies
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllFreelancerCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancerCompanies(ctx context.Context, arg GetAllFreelancerCompaniesParams) ([]FreelancersCompany, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersCompany
	for rows.Next() {
		var i FreelancersCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFile,
			&i.CommercialLicenseIssueDate,
			&i.CommercialLicenseExpiryDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancerCompaniess = `-- name: GetFreelancerCompaniess :one
SELECT id, company_name, commercial_license_no, commercial_license_file, commercial_license_issue_date, commercial_license_expiry_date, status, created_at, updated_at FROM freelancers_companies 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetFreelancerCompaniess(ctx context.Context, limit int32) (FreelancersCompany, error) {
	row := q.db.QueryRow(ctx, getFreelancerCompaniess, limit)
	var i FreelancersCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFile,
		&i.CommercialLicenseIssueDate,
		&i.CommercialLicenseExpiryDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFreelancerCompanies = `-- name: UpdateFreelancerCompanies :one
UPDATE freelancers_companies
SET   
    company_name = $2,
    commercial_license_no = $3,
    commercial_license_file = $4,
    commercial_license_issue_date = $5,
    commercial_license_expiry_date = $6,
    status = $7,
    created_at = $8,
    updated_at = $9
Where id = $1
RETURNING id, company_name, commercial_license_no, commercial_license_file, commercial_license_issue_date, commercial_license_expiry_date, status, created_at, updated_at
`

type UpdateFreelancerCompaniesParams struct {
	ID                          int64     `json:"id"`
	CompanyName                 string    `json:"company_name"`
	CommercialLicenseNo         string    `json:"commercial_license_no"`
	CommercialLicenseFile       string    `json:"commercial_license_file"`
	CommercialLicenseIssueDate  time.Time `json:"commercial_license_issue_date"`
	CommercialLicenseExpiryDate time.Time `json:"commercial_license_expiry_date"`
	Status                      int64     `json:"status"`
	CreatedAt                   time.Time `json:"created_at"`
	UpdatedAt                   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateFreelancerCompanies(ctx context.Context, arg UpdateFreelancerCompaniesParams) (FreelancersCompany, error) {
	row := q.db.QueryRow(ctx, updateFreelancerCompanies,
		arg.ID,
		arg.CompanyName,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFile,
		arg.CommercialLicenseIssueDate,
		arg.CommercialLicenseExpiryDate,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FreelancersCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFile,
		&i.CommercialLicenseIssueDate,
		&i.CommercialLicenseExpiryDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
