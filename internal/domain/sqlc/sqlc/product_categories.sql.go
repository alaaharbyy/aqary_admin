// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_categories.sql

package sqlc

import (
	"context"
	"time"
)

const createProductCategory = `-- name: CreateProductCategory :one
INSERT INTO product_categories (
    parent_categories_id,
    category_name,
    description,
    icon_url,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, parent_categories_id, category_name, description, icon_url, created_at
`

type CreateProductCategoryParams struct {
	ParentCategoriesID int64     `json:"parent_categories_id"`
	CategoryName       string    `json:"category_name"`
	Description        string    `json:"description"`
	IconUrl            string    `json:"icon_url"`
	CreatedAt          time.Time `json:"created_at"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, createProductCategory,
		arg.ParentCategoriesID,
		arg.CategoryName,
		arg.Description,
		arg.IconUrl,
		arg.CreatedAt,
	)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoriesID,
		&i.CategoryName,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM product_categories
WHERE id = $1
`

func (q *Queries) DeleteProductCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductCategory, id)
	return err
}

const getAllProductCategories = `-- name: GetAllProductCategories :many
SELECT id, parent_categories_id, category_name, description, icon_url, created_at FROM product_categories
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllProductCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProductCategories(ctx context.Context, arg GetAllProductCategoriesParams) ([]ProductCategory, error) {
	rows, err := q.db.Query(ctx, getAllProductCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductCategory
	for rows.Next() {
		var i ProductCategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentCategoriesID,
			&i.CategoryName,
			&i.Description,
			&i.IconUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountProductCategories = `-- name: GetCountProductCategories :one
SELECT COUNT(*) FROM product_categories
`

func (q *Queries) GetCountProductCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProductCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProductCategoryByID = `-- name: GetProductCategoryByID :one
SELECT id, parent_categories_id, category_name, description, icon_url, created_at FROM product_categories 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductCategoryByID(ctx context.Context, id int64) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, getProductCategoryByID, id)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoriesID,
		&i.CategoryName,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductCategory = `-- name: UpdateProductCategory :one
UPDATE product_categories
SET  
    parent_categories_id = $2,
    category_name = $3,
    description = $4,
    icon_url = $5,
    created_at = $6
WHERE id = $1
RETURNING id, parent_categories_id, category_name, description, icon_url, created_at
`

type UpdateProductCategoryParams struct {
	ID                 int64     `json:"id"`
	ParentCategoriesID int64     `json:"parent_categories_id"`
	CategoryName       string    `json:"category_name"`
	Description        string    `json:"description"`
	IconUrl            string    `json:"icon_url"`
	CreatedAt          time.Time `json:"created_at"`
}

func (q *Queries) UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRow(ctx, updateProductCategory,
		arg.ID,
		arg.ParentCategoriesID,
		arg.CategoryName,
		arg.Description,
		arg.IconUrl,
		arg.CreatedAt,
	)
	var i ProductCategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoriesID,
		&i.CategoryName,
		&i.Description,
		&i.IconUrl,
		&i.CreatedAt,
	)
	return i, err
}
