// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rent_property_unit_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createRentPropertyUnitPlan = `-- name: CreateRentPropertyUnitPlan :one
INSERT INTO rent_property_unit_plans (
    img_url,
    title,
rent_property_units_id,
created_at,
updated_at
)VALUES (
    $1 ,$2, $3, $4, $5
) RETURNING id, img_url, title, rent_property_units_id, created_at, updated_at
`

type CreateRentPropertyUnitPlanParams struct {
	ImgUrl              []string  `json:"img_url"`
	Title               string    `json:"title"`
	RentPropertyUnitsID int64     `json:"rent_property_units_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
}

func (q *Queries) CreateRentPropertyUnitPlan(ctx context.Context, arg CreateRentPropertyUnitPlanParams) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, createRentPropertyUnitPlan,
		arg.ImgUrl,
		arg.Title,
		arg.RentPropertyUnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRentPropertyUnitPlan = `-- name: DeleteRentPropertyUnitPlan :exec
DELETE FROM rent_property_unit_plans
Where id = $1
`

func (q *Queries) DeleteRentPropertyUnitPlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRentPropertyUnitPlan, id)
	return err
}

const deleteRentPropertyUnitPlanSingleFile = `-- name: DeleteRentPropertyUnitPlanSingleFile :one
UPDATE rent_property_unit_plans
SET img_url = array_remove(img_url, $2::VARCHAR)
WHERE id = $1
RETURNING id, img_url, title, rent_property_units_id, created_at, updated_at
`

type DeleteRentPropertyUnitPlanSingleFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteRentPropertyUnitPlanSingleFile(ctx context.Context, arg DeleteRentPropertyUnitPlanSingleFileParams) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, deleteRentPropertyUnitPlanSingleFile, arg.ID, arg.Fileurl)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllRentPropertyUnitPlan = `-- name: GetAllRentPropertyUnitPlan :many
SELECT id, img_url, title, rent_property_units_id, created_at, updated_at FROM rent_property_unit_plans
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllRentPropertyUnitPlanParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllRentPropertyUnitPlan(ctx context.Context, arg GetAllRentPropertyUnitPlanParams) ([]RentPropertyUnitPlan, error) {
	rows, err := q.db.Query(ctx, getAllRentPropertyUnitPlan, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentPropertyUnitPlan
	for rows.Next() {
		var i RentPropertyUnitPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.RentPropertyUnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRentPropertyUnitPlanByUnit = `-- name: GetAllRentPropertyUnitPlanByUnit :many
SELECT id, img_url, title, rent_property_units_id, created_at, updated_at FROM rent_property_unit_plans
WHERE rent_property_units_id = $3
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllRentPropertyUnitPlanByUnitParams struct {
	Limit               int32 `json:"limit"`
	Offset              int32 `json:"offset"`
	RentPropertyUnitsID int64 `json:"rent_property_units_id"`
}

func (q *Queries) GetAllRentPropertyUnitPlanByUnit(ctx context.Context, arg GetAllRentPropertyUnitPlanByUnitParams) ([]RentPropertyUnitPlan, error) {
	rows, err := q.db.Query(ctx, getAllRentPropertyUnitPlanByUnit, arg.Limit, arg.Offset, arg.RentPropertyUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentPropertyUnitPlan
	for rows.Next() {
		var i RentPropertyUnitPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.RentPropertyUnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllRentPropertyUnitPlanByUnit = `-- name: GetCountAllRentPropertyUnitPlanByUnit :one
SELECT COUNT(*) FROM rent_property_unit_plans
WHERE rent_property_units_id = $1
`

func (q *Queries) GetCountAllRentPropertyUnitPlanByUnit(ctx context.Context, rentPropertyUnitsID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllRentPropertyUnitPlanByUnit, rentPropertyUnitsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRentPropertyUnitPlan = `-- name: GetRentPropertyUnitPlan :one
SELECT id, img_url, title, rent_property_units_id, created_at, updated_at FROM rent_property_unit_plans 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRentPropertyUnitPlan(ctx context.Context, id int64) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, getRentPropertyUnitPlan, id)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRentPropertyUnitPlanByTitleAndUnitId = `-- name: GetRentPropertyUnitPlanByTitleAndUnitId :one
SELECT id, img_url, title, rent_property_units_id, created_at, updated_at FROM rent_property_unit_plans 
WHERE title ILIKE $1 AND rent_property_units_id = $2
`

type GetRentPropertyUnitPlanByTitleAndUnitIdParams struct {
	Title               string `json:"title"`
	RentPropertyUnitsID int64  `json:"rent_property_units_id"`
}

func (q *Queries) GetRentPropertyUnitPlanByTitleAndUnitId(ctx context.Context, arg GetRentPropertyUnitPlanByTitleAndUnitIdParams) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, getRentPropertyUnitPlanByTitleAndUnitId, arg.Title, arg.RentPropertyUnitsID)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRentPropertyUnitPlan = `-- name: UpdateRentPropertyUnitPlan :one
UPDATE rent_property_unit_plans
SET img_url = $2,
title = $3,
rent_property_units_id = $4,
created_at = $5,
updated_at = $6
Where id = $1
RETURNING id, img_url, title, rent_property_units_id, created_at, updated_at
`

type UpdateRentPropertyUnitPlanParams struct {
	ID                  int64     `json:"id"`
	ImgUrl              []string  `json:"img_url"`
	Title               string    `json:"title"`
	RentPropertyUnitsID int64     `json:"rent_property_units_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
}

func (q *Queries) UpdateRentPropertyUnitPlan(ctx context.Context, arg UpdateRentPropertyUnitPlanParams) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, updateRentPropertyUnitPlan,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.RentPropertyUnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRentPropertyUnitPlanUrls = `-- name: UpdateRentPropertyUnitPlanUrls :one
UPDATE rent_property_unit_plans
SET img_url = $2,
updated_at = $3
Where id = $1
RETURNING id, img_url, title, rent_property_units_id, created_at, updated_at
`

type UpdateRentPropertyUnitPlanUrlsParams struct {
	ID        int64     `json:"id"`
	ImgUrl    []string  `json:"img_url"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateRentPropertyUnitPlanUrls(ctx context.Context, arg UpdateRentPropertyUnitPlanUrlsParams) (RentPropertyUnitPlan, error) {
	row := q.db.QueryRow(ctx, updateRentPropertyUnitPlanUrls, arg.ID, arg.ImgUrl, arg.UpdatedAt)
	var i RentPropertyUnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.RentPropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
