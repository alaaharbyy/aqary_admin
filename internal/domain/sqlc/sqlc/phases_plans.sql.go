// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: phases_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createPhasesPlans = `-- name: CreatePhasesPlans :one
INSERT INTO phases_plans (
    "phases_id",
    "title",
    "plan_url",
    "created_at",
    "updated_at",
    "uploaded_by",
    "updated_by"
    )
VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
`

type CreatePhasesPlansParams struct {
	PhasesID   int64     `json:"phases_id"`
	Title      string    `json:"title"`
	PlanUrl    []string  `json:"plan_url"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	UploadedBy int64     `json:"uploaded_by"`
	UpdatedBy  int64     `json:"updated_by"`
}

func (q *Queries) CreatePhasesPlans(ctx context.Context, arg CreatePhasesPlansParams) (PhasesPlan, error) {
	row := q.db.QueryRow(ctx, createPhasesPlans,
		arg.PhasesID,
		arg.Title,
		arg.PlanUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UploadedBy,
		arg.UpdatedBy,
	)
	var i PhasesPlan
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deletePhasesPlans = `-- name: DeletePhasesPlans :exec
DELETE FROM phases_plans
WHERE id = $1
`

func (q *Queries) DeletePhasesPlans(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePhasesPlans, id)
	return err
}

const getAllPhasesPlans = `-- name: GetAllPhasesPlans :many
SELECT id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM phases_plans WHERE phases_id= $3
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetAllPhasesPlansParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	PhasesID int64 `json:"phases_id"`
}

func (q *Queries) GetAllPhasesPlans(ctx context.Context, arg GetAllPhasesPlansParams) ([]PhasesPlan, error) {
	rows, err := q.db.Query(ctx, getAllPhasesPlans, arg.Limit, arg.Offset, arg.PhasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhasesPlan
	for rows.Next() {
		var i PhasesPlan
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhasesPlansByPhasesId = `-- name: GetAllPhasesPlansByPhasesId :many
SELECT id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM phases_plans 
WHERE phases_id = $1
`

func (q *Queries) GetAllPhasesPlansByPhasesId(ctx context.Context, phasesID int64) ([]PhasesPlan, error) {
	rows, err := q.db.Query(ctx, getAllPhasesPlansByPhasesId, phasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhasesPlan
	for rows.Next() {
		var i PhasesPlan
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhasesPlansWithoutPagination = `-- name: GetAllPhasesPlansWithoutPagination :many
SELECT id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM phases_plans WHERE phases_id= $1
ORDER BY id
`

func (q *Queries) GetAllPhasesPlansWithoutPagination(ctx context.Context, phasesID int64) ([]PhasesPlan, error) {
	rows, err := q.db.Query(ctx, getAllPhasesPlansWithoutPagination, phasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhasesPlan
	for rows.Next() {
		var i PhasesPlan
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPhasesPlans = `-- name: GetCountAllPhasesPlans :one
SELECT COUNT(id) FROM phases_plans WHERE phases_id = $1
`

func (q *Queries) GetCountAllPhasesPlans(ctx context.Context, phasesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPhasesPlans, phasesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPhasesPlans = `-- name: GetPhasesPlans :one
SELECT phases_plans.id, phases_plans.phases_id, phases_plans.title, phases_plans.plan_url, phases_plans.created_at, phases_plans.updated_at, phases_plans.uploaded_by, phases_plans.updated_by,phases.phase_name 
FROM phases_plans 
INNER JOIN phases ON phases.id = phases_plans.phases_id
WHERE phases_plans.id = $1
`

type GetPhasesPlansRow struct {
	ID         int64     `json:"id"`
	PhasesID   int64     `json:"phases_id"`
	Title      string    `json:"title"`
	PlanUrl    []string  `json:"plan_url"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	UploadedBy int64     `json:"uploaded_by"`
	UpdatedBy  int64     `json:"updated_by"`
	PhaseName  string    `json:"phase_name"`
}

func (q *Queries) GetPhasesPlans(ctx context.Context, id int64) (GetPhasesPlansRow, error) {
	row := q.db.QueryRow(ctx, getPhasesPlans, id)
	var i GetPhasesPlansRow
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
		&i.PhaseName,
	)
	return i, err
}

const getPhasesPlansByTitle = `-- name: GetPhasesPlansByTitle :one
SELECT id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM phases_plans 
WHERE title ILIKE $1 AND phases_id = $2
`

type GetPhasesPlansByTitleParams struct {
	Title    string `json:"title"`
	PhasesID int64  `json:"phases_id"`
}

func (q *Queries) GetPhasesPlansByTitle(ctx context.Context, arg GetPhasesPlansByTitleParams) (PhasesPlan, error) {
	row := q.db.QueryRow(ctx, getPhasesPlansByTitle, arg.Title, arg.PhasesID)
	var i PhasesPlan
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updatePhasesPlans = `-- name: UpdatePhasesPlans :one
UPDATE phases_plans SET
    "phases_id" = $2,
    "title" = $3,
    "plan_url" = $4,
    "created_at" = $5,
    "updated_at" = $6,
    "uploaded_by" = $7,
    "updated_by" = $8
WHERE id = $1 RETURNING id, phases_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
`

type UpdatePhasesPlansParams struct {
	ID         int64     `json:"id"`
	PhasesID   int64     `json:"phases_id"`
	Title      string    `json:"title"`
	PlanUrl    []string  `json:"plan_url"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	UploadedBy int64     `json:"uploaded_by"`
	UpdatedBy  int64     `json:"updated_by"`
}

func (q *Queries) UpdatePhasesPlans(ctx context.Context, arg UpdatePhasesPlansParams) (PhasesPlan, error) {
	row := q.db.QueryRow(ctx, updatePhasesPlans,
		arg.ID,
		arg.PhasesID,
		arg.Title,
		arg.PlanUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UploadedBy,
		arg.UpdatedBy,
	)
	var i PhasesPlan
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}
