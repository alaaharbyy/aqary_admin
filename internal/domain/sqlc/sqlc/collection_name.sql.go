// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: collection_name.sql

package sqlc

import (
	"context"
	"time"
)

const createCollectionName = `-- name: CreateCollectionName :one
INSERT INTO collection_name (
    name,
    image_url,
    access_type,
    access_granted_users,
    users_id,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at
`

type CreateCollectionNameParams struct {
	Name               string    `json:"name"`
	ImageUrl           string    `json:"image_url"`
	AccessType         int64     `json:"access_type"`
	AccessGrantedUsers []int64   `json:"access_granted_users"`
	UsersID            int64     `json:"users_id"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
}

func (q *Queries) CreateCollectionName(ctx context.Context, arg CreateCollectionNameParams) (CollectionName, error) {
	row := q.db.QueryRow(ctx, createCollectionName,
		arg.Name,
		arg.ImageUrl,
		arg.AccessType,
		arg.AccessGrantedUsers,
		arg.UsersID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CollectionName
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.AccessType,
		&i.AccessGrantedUsers,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCollectionName = `-- name: DeleteCollectionName :exec
DELETE FROM collection_name
Where id = $1
`

func (q *Queries) DeleteCollectionName(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCollectionName, id)
	return err
}

const getAllCollectionName = `-- name: GetAllCollectionName :many
SELECT id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at FROM collection_name
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllCollectionNameParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCollectionName(ctx context.Context, arg GetAllCollectionNameParams) ([]CollectionName, error) {
	rows, err := q.db.Query(ctx, getAllCollectionName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionName
	for rows.Next() {
		var i CollectionName
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.AccessType,
			&i.AccessGrantedUsers,
			&i.UsersID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCollectionNameWithoutPagination = `-- name: GetAllCollectionNameWithoutPagination :many
SELECT id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at FROM collection_name
Where users_id = $1
ORDER BY name
`

func (q *Queries) GetAllCollectionNameWithoutPagination(ctx context.Context, usersID int64) ([]CollectionName, error) {
	rows, err := q.db.Query(ctx, getAllCollectionNameWithoutPagination, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CollectionName
	for rows.Next() {
		var i CollectionName
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.AccessType,
			&i.AccessGrantedUsers,
			&i.UsersID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCollectionName = `-- name: GetCollectionName :one
SELECT id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at FROM collection_name 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCollectionName(ctx context.Context, id int64) (CollectionName, error) {
	row := q.db.QueryRow(ctx, getCollectionName, id)
	var i CollectionName
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.AccessType,
		&i.AccessGrantedUsers,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCollectionNameByName = `-- name: GetCollectionNameByName :one
SELECT id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at FROM collection_name 
WHERE name = $1 AND users_id = $2 LIMIT 1
`

type GetCollectionNameByNameParams struct {
	Name    string `json:"name"`
	UsersID int64  `json:"users_id"`
}

func (q *Queries) GetCollectionNameByName(ctx context.Context, arg GetCollectionNameByNameParams) (CollectionName, error) {
	row := q.db.QueryRow(ctx, getCollectionNameByName, arg.Name, arg.UsersID)
	var i CollectionName
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.AccessType,
		&i.AccessGrantedUsers,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCollectionName = `-- name: UpdateCollectionName :one
UPDATE collection_name
SET  
    name = $2,
    image_url = $3,
    access_type = $4,
    access_granted_users = $5,
    users_id = $6,
    created_at = $7,
    updated_at = $8
Where id = $1
RETURNING id, name, image_url, access_type, access_granted_users, users_id, created_at, updated_at
`

type UpdateCollectionNameParams struct {
	ID                 int64     `json:"id"`
	Name               string    `json:"name"`
	ImageUrl           string    `json:"image_url"`
	AccessType         int64     `json:"access_type"`
	AccessGrantedUsers []int64   `json:"access_granted_users"`
	UsersID            int64     `json:"users_id"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCollectionName(ctx context.Context, arg UpdateCollectionNameParams) (CollectionName, error) {
	row := q.db.QueryRow(ctx, updateCollectionName,
		arg.ID,
		arg.Name,
		arg.ImageUrl,
		arg.AccessType,
		arg.AccessGrantedUsers,
		arg.UsersID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CollectionName
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.AccessType,
		&i.AccessGrantedUsers,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
