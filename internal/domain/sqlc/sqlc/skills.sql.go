// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: skills.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (
    skill_type,
    title,
    title_ar
 ) VALUES (
    $1, $2, $3
) RETURNING id, skill_type, title, title_ar
`

type CreateSkillParams struct {
	SkillType string      `json:"skill_type"`
	Title     string      `json:"title"`
	TitleAr   pgtype.Text `json:"title_ar"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRow(ctx, createSkill, arg.SkillType, arg.Title, arg.TitleAr)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.SkillType,
		&i.Title,
		&i.TitleAr,
	)
	return i, err
}

const getAllSkills = `-- name: GetAllSkills :many
SELECT id, skill_type, title, title_ar FROM skills
`

func (q *Queries) GetAllSkills(ctx context.Context) ([]Skill, error) {
	rows, err := q.db.Query(ctx, getAllSkills)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Skill
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.SkillType,
			&i.Title,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSkillByID = `-- name: GetSkillByID :one
SELECT id, skill_type, title, title_ar FROM skills where id=$1
`

func (q *Queries) GetSkillByID(ctx context.Context, id int64) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByID, id)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.SkillType,
		&i.Title,
		&i.TitleAr,
	)
	return i, err
}

const getSkillByTitle = `-- name: GetSkillByTitle :one
SELECT id, skill_type, title, title_ar FROM skills WHERE title=$1
`

func (q *Queries) GetSkillByTitle(ctx context.Context, title string) (Skill, error) {
	row := q.db.QueryRow(ctx, getSkillByTitle, title)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.SkillType,
		&i.Title,
		&i.TitleAr,
	)
	return i, err
}
