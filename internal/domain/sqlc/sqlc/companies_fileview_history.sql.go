// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: companies_fileview_history.sql

package sqlc

import (
	"context"
	"time"
)

const createCompaniesFileViewHistory = `-- name: CreateCompaniesFileViewHistory :one
INSERT INTO companies_fileview_history(
    title,
    activity,
    file_url,
    created_by,
    activity_date
) VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, title, activity, file_url, created_by, activity_date
`

type CreateCompaniesFileViewHistoryParams struct {
	Title        string    `json:"title"`
	Activity     string    `json:"activity"`
	FileUrl      string    `json:"file_url"`
	CreatedBy    int64     `json:"created_by"`
	ActivityDate time.Time `json:"activity_date"`
}

func (q *Queries) CreateCompaniesFileViewHistory(ctx context.Context, arg CreateCompaniesFileViewHistoryParams) (CompaniesFileviewHistory, error) {
	row := q.db.QueryRow(ctx, createCompaniesFileViewHistory,
		arg.Title,
		arg.Activity,
		arg.FileUrl,
		arg.CreatedBy,
		arg.ActivityDate,
	)
	var i CompaniesFileviewHistory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Activity,
		&i.FileUrl,
		&i.CreatedBy,
		&i.ActivityDate,
	)
	return i, err
}

const getAllCompaniesFileViewHistory = `-- name: GetAllCompaniesFileViewHistory :many
SELECT COUNT(companies_fileview_history.id) OVER() AS total_count, companies_fileview_history.id, companies_fileview_history.title, companies_fileview_history.activity, companies_fileview_history.file_url, companies_fileview_history.created_by, companies_fileview_history.activity_date,(profiles.first_name ||' '|| profiles.last_name)::VARCHAR AS user FROM companies_fileview_history
INNER JOIN users ON users.id = companies_fileview_history.created_by
INNER JOIN profiles ON profiles.users_id = users.id
LIMIT $1 OFFSET $2
`

type GetAllCompaniesFileViewHistoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllCompaniesFileViewHistoryRow struct {
	TotalCount   int64     `json:"total_count"`
	ID           int64     `json:"id"`
	Title        string    `json:"title"`
	Activity     string    `json:"activity"`
	FileUrl      string    `json:"file_url"`
	CreatedBy    int64     `json:"created_by"`
	ActivityDate time.Time `json:"activity_date"`
	User         string    `json:"user"`
}

func (q *Queries) GetAllCompaniesFileViewHistory(ctx context.Context, arg GetAllCompaniesFileViewHistoryParams) ([]GetAllCompaniesFileViewHistoryRow, error) {
	rows, err := q.db.Query(ctx, getAllCompaniesFileViewHistory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCompaniesFileViewHistoryRow
	for rows.Next() {
		var i GetAllCompaniesFileViewHistoryRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.Title,
			&i.Activity,
			&i.FileUrl,
			&i.CreatedBy,
			&i.ActivityDate,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
