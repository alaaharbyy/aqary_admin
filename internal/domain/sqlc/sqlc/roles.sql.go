// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    role,
    department_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4
) RETURNING id, role, created_at, updated_at, department_id, role_ar
`

type CreateRoleParams struct {
	Role         string      `json:"role"`
	DepartmentID pgtype.Int8 `json:"department_id"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.Role,
		arg.DepartmentID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
Where id = $1 AND department_id = $2
`

type DeleteRoleParams struct {
	ID           int64       `json:"id"`
	DepartmentID pgtype.Int8 `json:"department_id"`
}

func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) error {
	_, err := q.db.Exec(ctx, deleteRole, arg.ID, arg.DepartmentID)
	return err
}

const getAllRole = `-- name: GetAllRole :many
SELECT id, role, created_at, updated_at, department_id, role_ar FROM roles
WHERE 
( $3='%%'
  OR roles."role" ILIKE  $3)
AND department_id = $4
ORDER BY updated_at DESC 
LIMIT $1
OFFSET $2
`

type GetAllRoleParams struct {
	Limit        int32       `json:"limit"`
	Offset       int32       `json:"offset"`
	Search       interface{} `json:"search"`
	DepartmentID pgtype.Int8 `json:"department_id"`
}

func (q *Queries) GetAllRole(ctx context.Context, arg GetAllRoleParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRole,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.DepartmentID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DepartmentID,
			&i.RoleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRoleWithRolePermissionChecked = `-- name: GetAllRoleWithRolePermissionChecked :many
SELECT 
    r.role, r.id,
    CASE 
        WHEN rp.roles_id IS NOT NULL THEN true
        ELSE false
    END as IsAvailableInRolesPermissions
FROM 
    roles r
LEFT JOIN 
    roles_permissions rp ON r.id = rp.roles_id
   
WHERE r."role" NOT ILIKE '%super admin%' ORDER BY role ASC
`

type GetAllRoleWithRolePermissionCheckedRow struct {
	Role                          string      `json:"role"`
	ID                            int64       `json:"id"`
	Isavailableinrolespermissions pgtype.Bool `json:"isavailableinrolespermissions"`
}

func (q *Queries) GetAllRoleWithRolePermissionChecked(ctx context.Context) ([]GetAllRoleWithRolePermissionCheckedRow, error) {
	rows, err := q.db.Query(ctx, getAllRoleWithRolePermissionChecked)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRoleWithRolePermissionCheckedRow
	for rows.Next() {
		var i GetAllRoleWithRolePermissionCheckedRow
		if err := rows.Scan(&i.Role, &i.ID, &i.Isavailableinrolespermissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRoleWithoutPagination = `-- name: GetAllRoleWithoutPagination :many
SELECT id, role, created_at, updated_at, department_id, role_ar FROM roles
WHERE LOWER(role) !=  'super admin'
ORDER BY id
`

func (q *Queries) GetAllRoleWithoutPagination(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoleWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DepartmentID,
			&i.RoleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllRoles = `-- name: GetCountAllRoles :one
SELECT COUNT(*) FROM roles
WHERE department_id = $1
`

func (q *Queries) GetCountAllRoles(ctx context.Context, departmentID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllRoles, departmentID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRole = `-- name: GetRole :one
SELECT id, role, created_at, updated_at, department_id, role_ar FROM roles 
WHERE id = $1
`

func (q *Queries) GetRole(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}

const getRoleByDepartment = `-- name: GetRoleByDepartment :one
SELECT id, role, created_at, updated_at, department_id, role_ar FROM roles 
WHERE id = $1 AND department_id = $2
`

type GetRoleByDepartmentParams struct {
	ID           int64       `json:"id"`
	DepartmentID pgtype.Int8 `json:"department_id"`
}

func (q *Queries) GetRoleByDepartment(ctx context.Context, arg GetRoleByDepartmentParams) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByDepartment, arg.ID, arg.DepartmentID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}

const getRoleByRole = `-- name: GetRoleByRole :one
SELECT id, role, created_at, updated_at, department_id, role_ar FROM roles 
WHERE LOWER(role) = LOWER($1) AND department_id = $2
`

type GetRoleByRoleParams struct {
	Role         string      `json:"role"`
	DepartmentID pgtype.Int8 `json:"department_id"`
}

func (q *Queries) GetRoleByRole(ctx context.Context, arg GetRoleByRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByRole, arg.Role, arg.DepartmentID)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}

const getRoleByUserId = `-- name: GetRoleByUserId :one
SELECT roles.id, roles.role, roles.created_at, roles.updated_at, roles.department_id, roles.role_ar FROM users
INNER JOIN roles ON roles.id = users.roles_id WHERE users.id = $1
`

func (q *Queries) GetRoleByUserId(ctx context.Context, id int64) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByUserId, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET role = $3,
  updated_at = $4
Where id = $1 AND department_id = $2
RETURNING id, role, created_at, updated_at, department_id, role_ar
`

type UpdateRoleParams struct {
	ID           int64       `json:"id"`
	DepartmentID pgtype.Int8 `json:"department_id"`
	Role         string      `json:"role"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.ID,
		arg.DepartmentID,
		arg.Role,
		arg.UpdatedAt,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DepartmentID,
		&i.RoleAr,
	)
	return i, err
}
