// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibitions_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExhibitionsMedia = `-- name: CreateExhibitionsMedia :one
INSERT INTO exhibitions_media (
	exhibitions_id, 
	gallery_type, 
	media_type, 
	media_url, 
	created_at, 
	updated_at)
VALUES(
	$1, 
	$2, 
	$3, 
	$4, 
	$5, 
	$6) RETURNING id, exhibitions_id, gallery_type, media_type, media_url, created_at, updated_at
`

type CreateExhibitionsMediaParams struct {
	ExhibitionsID int64              `json:"exhibitions_id"`
	GalleryType   int64              `json:"gallery_type"`
	MediaType     int64              `json:"media_type"`
	MediaUrl      []string           `json:"media_url"`
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateExhibitionsMedia(ctx context.Context, arg CreateExhibitionsMediaParams) (ExhibitionsMedium, error) {
	row := q.db.QueryRow(ctx, createExhibitionsMedia,
		arg.ExhibitionsID,
		arg.GalleryType,
		arg.MediaType,
		arg.MediaUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ExhibitionsMedium
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.GalleryType,
		&i.MediaType,
		&i.MediaUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExhibitionMediaByExhibitionIdMediaGalleryType = `-- name: DeleteExhibitionMediaByExhibitionIdMediaGalleryType :one
DELETE FROM exhibitions_media 
WHERE exhibitions_media.id=$1 AND (SELECT event_status FROM exhibitions WHERE id=exhibitions_media.exhibitions_id)!=5 RETURNING id, exhibitions_id, gallery_type, media_type, media_url, created_at, updated_at
`

func (q *Queries) DeleteExhibitionMediaByExhibitionIdMediaGalleryType(ctx context.Context, id int64) (ExhibitionsMedium, error) {
	row := q.db.QueryRow(ctx, deleteExhibitionMediaByExhibitionIdMediaGalleryType, id)
	var i ExhibitionsMedium
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.GalleryType,
		&i.MediaType,
		&i.MediaUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllGalleryTypesForMediaTypeExhibitionGraph = `-- name: GetAllGalleryTypesForMediaTypeExhibitionGraph :many
SELECT 
	id,gallery_type,cardinality(media_url) as "counter",CAST(media_url[1] AS VARCHAR) as "media_url"
FROM 
	exhibitions_media 
WHERE 
	exhibitions_id=$1 AND media_type=$2
`

type GetAllGalleryTypesForMediaTypeExhibitionGraphParams struct {
	ExhibitionsID int64 `json:"exhibitions_id"`
	MediaType     int64 `json:"media_type"`
}

type GetAllGalleryTypesForMediaTypeExhibitionGraphRow struct {
	ID          int64  `json:"id"`
	GalleryType int64  `json:"gallery_type"`
	Counter     int32  `json:"counter"`
	MediaUrl    string `json:"media_url"`
}

func (q *Queries) GetAllGalleryTypesForMediaTypeExhibitionGraph(ctx context.Context, arg GetAllGalleryTypesForMediaTypeExhibitionGraphParams) ([]GetAllGalleryTypesForMediaTypeExhibitionGraphRow, error) {
	rows, err := q.db.Query(ctx, getAllGalleryTypesForMediaTypeExhibitionGraph, arg.ExhibitionsID, arg.MediaType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllGalleryTypesForMediaTypeExhibitionGraphRow
	for rows.Next() {
		var i GetAllGalleryTypesForMediaTypeExhibitionGraphRow
		if err := rows.Scan(
			&i.ID,
			&i.GalleryType,
			&i.Counter,
			&i.MediaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionMediaByID = `-- name: GetExhibitionMediaByID :one
	SELECT id, exhibitions_id, gallery_type, media_type, media_url, created_at, updated_at 
	FROM exhibitions_media 
	WHERE id=$1
`

func (q *Queries) GetExhibitionMediaByID(ctx context.Context, id int64) (ExhibitionsMedium, error) {
	row := q.db.QueryRow(ctx, getExhibitionMediaByID, id)
	var i ExhibitionsMedium
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.GalleryType,
		&i.MediaType,
		&i.MediaUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getExhibitionsMediaByExhibitionID = `-- name: GetExhibitionsMediaByExhibitionID :many
SELECT exhibitions_media.id, exhibitions_media.exhibitions_id, exhibitions_media.gallery_type, exhibitions_media.media_type, exhibitions_media.media_url, exhibitions_media.created_at, exhibitions_media.updated_at
FROM
    exhibitions_media 
INNER JOIN exhibitions 
	ON exhibitions.id=exhibitions_media.exhibitions_id AND exhibitions.event_status!=5
WHERE exhibitions_id=$1
ORDER BY exhibitions_media.updated_at DESC
LIMIT $2
OFFSET $3
`

type GetExhibitionsMediaByExhibitionIDParams struct {
	ExhibitionsID int64 `json:"exhibitions_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetExhibitionsMediaByExhibitionID(ctx context.Context, arg GetExhibitionsMediaByExhibitionIDParams) ([]ExhibitionsMedium, error) {
	rows, err := q.db.Query(ctx, getExhibitionsMediaByExhibitionID, arg.ExhibitionsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExhibitionsMedium
	for rows.Next() {
		var i ExhibitionsMedium
		if err := rows.Scan(
			&i.ID,
			&i.ExhibitionsID,
			&i.GalleryType,
			&i.MediaType,
			&i.MediaUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionsMediaByExhibitionIDAndGalleryAndMediaType = `-- name: GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaType :one
SELECT exhibitions_media.id,exhibitions_media.media_url
FROM
    exhibitions_media 
INNER JOIN exhibitions 
	ON   exhibitions.id=exhibitions_media.exhibitions_id AND exhibitions.event_status!=5
WHERE exhibitions_media.exhibitions_id=$1 AND exhibitions_media.gallery_type=$2 AND exhibitions_media.media_type=$3
`

type GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeParams struct {
	ExhibitionsID int64 `json:"exhibitions_id"`
	GalleryType   int64 `json:"gallery_type"`
	MediaType     int64 `json:"media_type"`
}

type GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeRow struct {
	ID       int64    `json:"id"`
	MediaUrl []string `json:"media_url"`
}

func (q *Queries) GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaType(ctx context.Context, arg GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeParams) (GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeRow, error) {
	row := q.db.QueryRow(ctx, getExhibitionsMediaByExhibitionIDAndGalleryAndMediaType, arg.ExhibitionsID, arg.GalleryType, arg.MediaType)
	var i GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeRow
	err := row.Scan(&i.ID, &i.MediaUrl)
	return i, err
}

const getNumberOfMediaForExhibition = `-- name: GetNumberOfMediaForExhibition :one
SELECT COUNT(id) FROM exhibitions_media WHERE exhibitions_id=$1
`

func (q *Queries) GetNumberOfMediaForExhibition(ctx context.Context, exhibitionsID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfMediaForExhibition, exhibitionsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
