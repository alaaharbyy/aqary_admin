// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banners.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO "banners" (
    "company_id",
    "banner_name",
    "target_url",
    "plan_package_id",
    "duration",
    "banner_direction",
    "banner_position",
    "media_type",
    "file_url",
    "description",
    "created_by",
    "updated_by",
    "created_at",
    "updated_at",
    "status",
    "banner_order_id",
    "banner_cost_id",
    "no_of_impressions"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8,
    $9, $10, $11, $12, $13, $14, $15, $16, $17,$18
)
RETURNING id, company_id, banner_order_id, banner_name, status, target_url, plan_package_id, duration, banner_direction, banner_position, media_type, file_url, description, created_by, updated_by, created_at, updated_at, banner_cost_id, no_of_impressions
`

type CreateBannerParams struct {
	CompanyID       int64       `json:"company_id"`
	BannerName      string      `json:"banner_name"`
	TargetUrl       string      `json:"target_url"`
	PlanPackageID   int64       `json:"plan_package_id"`
	Duration        int64       `json:"duration"`
	BannerDirection int64       `json:"banner_direction"`
	BannerPosition  int64       `json:"banner_position"`
	MediaType       int64       `json:"media_type"`
	FileUrl         string      `json:"file_url"`
	Description     pgtype.Text `json:"description"`
	CreatedBy       int64       `json:"created_by"`
	UpdatedBy       pgtype.Int8 `json:"updated_by"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Status          int64       `json:"status"`
	BannerOrderID   int64       `json:"banner_order_id"`
	BannerCostID    int64       `json:"banner_cost_id"`
	NoOfImpressions pgtype.Int8 `json:"no_of_impressions"`
}

func (q *Queries) CreateBanner(ctx context.Context, arg CreateBannerParams) (Banner, error) {
	row := q.db.QueryRow(ctx, createBanner,
		arg.CompanyID,
		arg.BannerName,
		arg.TargetUrl,
		arg.PlanPackageID,
		arg.Duration,
		arg.BannerDirection,
		arg.BannerPosition,
		arg.MediaType,
		arg.FileUrl,
		arg.Description,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.BannerOrderID,
		arg.BannerCostID,
		arg.NoOfImpressions,
	)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.BannerOrderID,
		&i.BannerName,
		&i.Status,
		&i.TargetUrl,
		&i.PlanPackageID,
		&i.Duration,
		&i.BannerDirection,
		&i.BannerPosition,
		&i.MediaType,
		&i.FileUrl,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BannerCostID,
		&i.NoOfImpressions,
	)
	return i, err
}

const deleteBanner = `-- name: DeleteBanner :exec
DELETE FROM "banners"
WHERE "id" = $1
`

func (q *Queries) DeleteBanner(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBanner, id)
	return err
}

const getApprovedBannerIDs = `-- name: GetApprovedBannerIDs :many
SELECT id FROM banners WHERE status=3
`

func (q *Queries) GetApprovedBannerIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getApprovedBannerIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBanner = `-- name: GetBanner :one
SELECT id, company_id, banner_order_id, banner_name, status, target_url, plan_package_id, duration, banner_direction, banner_position, media_type, file_url, description, created_by, updated_by, created_at, updated_at, banner_cost_id, no_of_impressions FROM "banners"
WHERE "id" = $1
`

func (q *Queries) GetBanner(ctx context.Context, id int64) (Banner, error) {
	row := q.db.QueryRow(ctx, getBanner, id)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.BannerOrderID,
		&i.BannerName,
		&i.Status,
		&i.TargetUrl,
		&i.PlanPackageID,
		&i.Duration,
		&i.BannerDirection,
		&i.BannerPosition,
		&i.MediaType,
		&i.FileUrl,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BannerCostID,
		&i.NoOfImpressions,
	)
	return i, err
}

const getBannerOrderByCompanyIDAndPlanID = `-- name: GetBannerOrderByCompanyIDAndPlanID :one
SELECT id, ref_no, company_id, plan_packages, total_price, start_date, end_date, created_by, updated_by, created_at, updated_at, status, company_type, country_id, note
FROM banner_order
WHERE company_id = $1
  AND jsonb_path_exists(
    plan_packages,
    '$[*] ? (@.plan_package_id == $target_id && @.plan_package_cost_id == $target_id2 )',
    jsonb_build_object('target_id', $2::bigint, 'target_id2', $3::bigint)
  )  AND id = $4
`

type GetBannerOrderByCompanyIDAndPlanIDParams struct {
	CompanyID int64 `json:"company_id"`
	Column2   int64 `json:"column_2"`
	Column3   int64 `json:"column_3"`
	ID        int64 `json:"id"`
}

func (q *Queries) GetBannerOrderByCompanyIDAndPlanID(ctx context.Context, arg GetBannerOrderByCompanyIDAndPlanIDParams) (BannerOrder, error) {
	row := q.db.QueryRow(ctx, getBannerOrderByCompanyIDAndPlanID,
		arg.CompanyID,
		arg.Column2,
		arg.Column3,
		arg.ID,
	)
	var i BannerOrder
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyID,
		&i.PlanPackages,
		&i.TotalPrice,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CompanyType,
		&i.CountryID,
		&i.Note,
	)
	return i, err
}

const getBannerOrderPlanPackages = `-- name: GetBannerOrderPlanPackages :many
SELECT banner_order.id,plan_packages
FROM	
	banner_order 
INNER JOIN companies ON companies.id=banner_order.company_id 
INNER JOIN addresses ON addresses.id=companies.addresses_id
WHERE 
	banner_order.company_id= $1::BIGINT AND banner_order.status= $2::BIGINT AND banner_order.country_id=addresses.countries_id
`

type GetBannerOrderPlanPackagesParams struct {
	CompanyID int64 `json:"company_id"`
	Status    int64 `json:"status"`
}

type GetBannerOrderPlanPackagesRow struct {
	ID           int64  `json:"id"`
	PlanPackages []byte `json:"plan_packages"`
}

func (q *Queries) GetBannerOrderPlanPackages(ctx context.Context, arg GetBannerOrderPlanPackagesParams) ([]GetBannerOrderPlanPackagesRow, error) {
	rows, err := q.db.Query(ctx, getBannerOrderPlanPackages, arg.CompanyID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBannerOrderPlanPackagesRow
	for rows.Next() {
		var i GetBannerOrderPlanPackagesRow
		if err := rows.Scan(&i.ID, &i.PlanPackages); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannerOrderPlanPackagesByID = `-- name: GetBannerOrderPlanPackagesByID :one
SELECT plan_packages 
FROM 
  banner_order 
WHERE 
    id=$1
`

func (q *Queries) GetBannerOrderPlanPackagesByID(ctx context.Context, id int64) ([]byte, error) {
	row := q.db.QueryRow(ctx, getBannerOrderPlanPackagesByID, id)
	var plan_packages []byte
	err := row.Scan(&plan_packages)
	return plan_packages, err
}

const getBannersDetails = `-- name: GetBannersDetails :one
SELECT b.id, b.company_id, banner_order_id, banner_name, b.status, target_url, plan_package_id, duration, banner_direction, banner_position, media_type, file_url, b.description, b.created_by, b.updated_by, b.created_at, b.updated_at, banner_cost_id, no_of_impressions, bo.id, ref_no, bo.company_id, plan_packages, total_price, start_date, end_date, bo.created_by, bo.updated_by, bo.created_at, bo.updated_at, bo.status, company_type, country_id, note, bp.id, package_name, plan_type, plan_package_name, quantity, counts_per_banner, icon, bp.description, bp.status, bp.created_at, bp.updated_at FROM "banners" as b
INNER JOIN "banner_order" as bo ON bo.id = b.banner_order_id
INNER JOIN "banner_plan_package" bp ON bp.id = b.plan_package_id
WHERE b.id = $1
`

type GetBannersDetailsRow struct {
	ID              int64       `json:"id"`
	CompanyID       int64       `json:"company_id"`
	BannerOrderID   int64       `json:"banner_order_id"`
	BannerName      string      `json:"banner_name"`
	Status          int64       `json:"status"`
	TargetUrl       string      `json:"target_url"`
	PlanPackageID   int64       `json:"plan_package_id"`
	Duration        int64       `json:"duration"`
	BannerDirection int64       `json:"banner_direction"`
	BannerPosition  int64       `json:"banner_position"`
	MediaType       int64       `json:"media_type"`
	FileUrl         string      `json:"file_url"`
	Description     pgtype.Text `json:"description"`
	CreatedBy       int64       `json:"created_by"`
	UpdatedBy       pgtype.Int8 `json:"updated_by"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	BannerCostID    int64       `json:"banner_cost_id"`
	NoOfImpressions pgtype.Int8 `json:"no_of_impressions"`
	ID_2            int64       `json:"id_2"`
	RefNo           string      `json:"ref_no"`
	CompanyID_2     int64       `json:"company_id_2"`
	PlanPackages    []byte      `json:"plan_packages"`
	TotalPrice      float64     `json:"total_price"`
	StartDate       time.Time   `json:"start_date"`
	EndDate         time.Time   `json:"end_date"`
	CreatedBy_2     int64       `json:"created_by_2"`
	UpdatedBy_2     pgtype.Int8 `json:"updated_by_2"`
	CreatedAt_2     time.Time   `json:"created_at_2"`
	UpdatedAt_2     time.Time   `json:"updated_at_2"`
	Status_2        int64       `json:"status_2"`
	CompanyType     int64       `json:"company_type"`
	CountryID       int64       `json:"country_id"`
	Note            pgtype.Text `json:"note"`
	ID_3            int64       `json:"id_3"`
	PackageName     int64       `json:"package_name"`
	PlanType        int64       `json:"plan_type"`
	PlanPackageName string      `json:"plan_package_name"`
	Quantity        int64       `json:"quantity"`
	CountsPerBanner int64       `json:"counts_per_banner"`
	Icon            string      `json:"icon"`
	Description_2   pgtype.Text `json:"description_2"`
	Status_3        int64       `json:"status_3"`
	CreatedAt_3     time.Time   `json:"created_at_3"`
	UpdatedAt_3     time.Time   `json:"updated_at_3"`
}

func (q *Queries) GetBannersDetails(ctx context.Context, id int64) (GetBannersDetailsRow, error) {
	row := q.db.QueryRow(ctx, getBannersDetails, id)
	var i GetBannersDetailsRow
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.BannerOrderID,
		&i.BannerName,
		&i.Status,
		&i.TargetUrl,
		&i.PlanPackageID,
		&i.Duration,
		&i.BannerDirection,
		&i.BannerPosition,
		&i.MediaType,
		&i.FileUrl,
		&i.Description,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BannerCostID,
		&i.NoOfImpressions,
		&i.ID_2,
		&i.RefNo,
		&i.CompanyID_2,
		&i.PlanPackages,
		&i.TotalPrice,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedBy_2,
		&i.UpdatedBy_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.Status_2,
		&i.CompanyType,
		&i.CountryID,
		&i.Note,
		&i.ID_3,
		&i.PackageName,
		&i.PlanType,
		&i.PlanPackageName,
		&i.Quantity,
		&i.CountsPerBanner,
		&i.Icon,
		&i.Description_2,
		&i.Status_3,
		&i.CreatedAt_3,
		&i.UpdatedAt_3,
	)
	return i, err
}

const getPlanPackagePlanType = `-- name: GetPlanPackagePlanType :one
SELECT plan_type FROM banner_plan_package WHERE id=$1
`

func (q *Queries) GetPlanPackagePlanType(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getPlanPackagePlanType, id)
	var plan_type int64
	err := row.Scan(&plan_type)
	return plan_type, err
}

const getPlanPackages = `-- name: GetPlanPackages :many
SELECT id,plan_package_name
FROM
	banner_plan_package 
WHERE 
	id=ANY($1::BIGINT[])
`

type GetPlanPackagesRow struct {
	ID              int64  `json:"id"`
	PlanPackageName string `json:"plan_package_name"`
}

func (q *Queries) GetPlanPackages(ctx context.Context, planPackageIds []int64) ([]GetPlanPackagesRow, error) {
	rows, err := q.db.Query(ctx, getPlanPackages, planPackageIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlanPackagesRow
	for rows.Next() {
		var i GetPlanPackagesRow
		if err := rows.Scan(&i.ID, &i.PlanPackageName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBanners = `-- name: ListBanners :many
SELECT banners.id, banners.company_id, banners.banner_order_id, banners.banner_name, banners.status, banners.target_url, banners.plan_package_id, banners.duration, banners.banner_direction, banners.banner_position, banners.media_type, banners.file_url, banners.description, banners.created_by, banners.updated_by, banners.created_at, banners.updated_at, banners.banner_cost_id, banners.no_of_impressions, companies.company_name, bp.plan_type
FROM banners
LEFT JOIN companies on companies.id = banners.company_id
INNER JOIN banner_plan_package bp ON bp.id = banners.plan_package_id
WHERE banners.status = ANY($3::BIGINT[])
ORDER BY "created_at" DESC
LIMIT $1 OFFSET $2
`

type ListBannersParams struct {
	Limit    int32   `json:"limit"`
	Offset   int32   `json:"offset"`
	Statuses []int64 `json:"statuses"`
}

type ListBannersRow struct {
	ID              int64       `json:"id"`
	CompanyID       int64       `json:"company_id"`
	BannerOrderID   int64       `json:"banner_order_id"`
	BannerName      string      `json:"banner_name"`
	Status          int64       `json:"status"`
	TargetUrl       string      `json:"target_url"`
	PlanPackageID   int64       `json:"plan_package_id"`
	Duration        int64       `json:"duration"`
	BannerDirection int64       `json:"banner_direction"`
	BannerPosition  int64       `json:"banner_position"`
	MediaType       int64       `json:"media_type"`
	FileUrl         string      `json:"file_url"`
	Description     pgtype.Text `json:"description"`
	CreatedBy       int64       `json:"created_by"`
	UpdatedBy       pgtype.Int8 `json:"updated_by"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	BannerCostID    int64       `json:"banner_cost_id"`
	NoOfImpressions pgtype.Int8 `json:"no_of_impressions"`
	CompanyName     pgtype.Text `json:"company_name"`
	PlanType        int64       `json:"plan_type"`
}

func (q *Queries) ListBanners(ctx context.Context, arg ListBannersParams) ([]ListBannersRow, error) {
	rows, err := q.db.Query(ctx, listBanners, arg.Limit, arg.Offset, arg.Statuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBannersRow
	for rows.Next() {
		var i ListBannersRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.BannerOrderID,
			&i.BannerName,
			&i.Status,
			&i.TargetUrl,
			&i.PlanPackageID,
			&i.Duration,
			&i.BannerDirection,
			&i.BannerPosition,
			&i.MediaType,
			&i.FileUrl,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BannerCostID,
			&i.NoOfImpressions,
			&i.CompanyName,
			&i.PlanType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBannersCount = `-- name: ListBannersCount :one
SELECT count(*) FROM "banners" where status=ANY($1::BIGINT[])
`

func (q *Queries) ListBannersCount(ctx context.Context, statuses []int64) (int64, error) {
	row := q.db.QueryRow(ctx, listBannersCount, statuses)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBanner = `-- name: UpdateBanner :exec
UPDATE "banners"
SET
    "company_id" = $2,
    "banner_name" = $3,
    "target_url" = $4,
    "plan_package_id" = $5,
    "duration" = $6,
    "banner_direction" = $7,
    "banner_position" = $8,
    "media_type" = $9,
    "file_url" = $10,
    "description" = $11,
    "created_by" = $12,
    "updated_by" = $13,
    "created_at" = $14,
    "updated_at" = $15,
    "status" = $16
WHERE "id" = $1
`

type UpdateBannerParams struct {
	ID              int64       `json:"id"`
	CompanyID       int64       `json:"company_id"`
	BannerName      string      `json:"banner_name"`
	TargetUrl       string      `json:"target_url"`
	PlanPackageID   int64       `json:"plan_package_id"`
	Duration        int64       `json:"duration"`
	BannerDirection int64       `json:"banner_direction"`
	BannerPosition  int64       `json:"banner_position"`
	MediaType       int64       `json:"media_type"`
	FileUrl         string      `json:"file_url"`
	Description     pgtype.Text `json:"description"`
	CreatedBy       int64       `json:"created_by"`
	UpdatedBy       pgtype.Int8 `json:"updated_by"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Status          int64       `json:"status"`
}

func (q *Queries) UpdateBanner(ctx context.Context, arg UpdateBannerParams) error {
	_, err := q.db.Exec(ctx, updateBanner,
		arg.ID,
		arg.CompanyID,
		arg.BannerName,
		arg.TargetUrl,
		arg.PlanPackageID,
		arg.Duration,
		arg.BannerDirection,
		arg.BannerPosition,
		arg.MediaType,
		arg.FileUrl,
		arg.Description,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
	)
	return err
}

const updateBannerNumberOfImpressions = `-- name: UpdateBannerNumberOfImpressions :one
UPDATE 
	banners 
SET 
	no_of_impressions= no_of_impressions - $2
WHERE 
	id=$1
RETURNING 1
`

type UpdateBannerNumberOfImpressionsParams struct {
	ID              int64       `json:"id"`
	NoOfImpressions pgtype.Int8 `json:"no_of_impressions"`
}

func (q *Queries) UpdateBannerNumberOfImpressions(ctx context.Context, arg UpdateBannerNumberOfImpressionsParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, updateBannerNumberOfImpressions, arg.ID, arg.NoOfImpressions)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const updateBannerPlanPackages = `-- name: UpdateBannerPlanPackages :exec
UPDATE 
  banner_order
SET 
  plan_packages=$2 
WHERE 
  id=$1
`

type UpdateBannerPlanPackagesParams struct {
	ID           int64  `json:"id"`
	PlanPackages []byte `json:"plan_packages"`
}

func (q *Queries) UpdateBannerPlanPackages(ctx context.Context, arg UpdateBannerPlanPackagesParams) error {
	_, err := q.db.Exec(ctx, updateBannerPlanPackages, arg.ID, arg.PlanPackages)
	return err
}

const updateBannerStatus = `-- name: UpdateBannerStatus :exec
UPDATE "banners"
SET
    "updated_by" = $2,
    "updated_at" = $3,
    "status" = $4
WHERE "id" = $1
`

type UpdateBannerStatusParams struct {
	ID        int64       `json:"id"`
	UpdatedBy pgtype.Int8 `json:"updated_by"`
	UpdatedAt time.Time   `json:"updated_at"`
	Status    int64       `json:"status"`
}

func (q *Queries) UpdateBannerStatus(ctx context.Context, arg UpdateBannerStatusParams) error {
	_, err := q.db.Exec(ctx, updateBannerStatus,
		arg.ID,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.Status,
	)
	return err
}

const verifyBanner = `-- name: VerifyBanner :one
UPDATE banners
SET 
  banner_name= COALESCE($2,banner_name), 
  target_url= COALESCE($3,target_url), 
  banner_direction= COALESCE($4,banner_direction), 
  banner_position = COALESCE($5,banner_position), 
  media_type= COALESCE($6,media_type), 
  file_url = COALESCE($7,file_url), 
  description= COALESCE($8,description),
	status= $9::BIGINT 
WHERE 
	id=$1
RETURNING banner_order_id,plan_package_id,banner_cost_id
`

type VerifyBannerParams struct {
	ID              int64       `json:"id"`
	BannerName      pgtype.Text `json:"banner_name"`
	TargetUrl       pgtype.Text `json:"target_url"`
	BannerDirection pgtype.Int8 `json:"banner_direction"`
	BannerPosition  pgtype.Int8 `json:"banner_position"`
	MediaType       pgtype.Int8 `json:"media_type"`
	FileUrl         pgtype.Text `json:"file_url"`
	Description     pgtype.Text `json:"description"`
	Status          int64       `json:"status"`
}

type VerifyBannerRow struct {
	BannerOrderID int64 `json:"banner_order_id"`
	PlanPackageID int64 `json:"plan_package_id"`
	BannerCostID  int64 `json:"banner_cost_id"`
}

func (q *Queries) VerifyBanner(ctx context.Context, arg VerifyBannerParams) (VerifyBannerRow, error) {
	row := q.db.QueryRow(ctx, verifyBanner,
		arg.ID,
		arg.BannerName,
		arg.TargetUrl,
		arg.BannerDirection,
		arg.BannerPosition,
		arg.MediaType,
		arg.FileUrl,
		arg.Description,
		arg.Status,
	)
	var i VerifyBannerRow
	err := row.Scan(&i.BannerOrderID, &i.PlanPackageID, &i.BannerCostID)
	return i, err
}
