// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_videos.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompanyVideo = `-- name: CreateCompanyVideo :one
INSERT INTO company_videos
(ref_no,company_types,is_branch,companies_id,video_url,is_deleted,created_by,created_at,title)VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING id, ref_no, company_types, is_branch, companies_id, video_url, is_deleted, created_by, created_at, title
`

type CreateCompanyVideoParams struct {
	RefNo        string      `json:"ref_no"`
	CompanyTypes pgtype.Int8 `json:"company_types"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	CompaniesID  int64       `json:"companies_id"`
	VideoUrl     string      `json:"video_url"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedBy    int64       `json:"created_by"`
	CreatedAt    time.Time   `json:"created_at"`
	Title        string      `json:"title"`
}

func (q *Queries) CreateCompanyVideo(ctx context.Context, arg CreateCompanyVideoParams) (CompanyVideo, error) {
	row := q.db.QueryRow(ctx, createCompanyVideo,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.VideoUrl,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.Title,
	)
	var i CompanyVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Title,
	)
	return i, err
}

const deleteCompanyVideo = `-- name: DeleteCompanyVideo :one
UPDATE company_videos
SET 
is_deleted=TRUE
WHERE id=$1 RETURNING id, ref_no, company_types, is_branch, companies_id, video_url, is_deleted, created_by, created_at, title
`

func (q *Queries) DeleteCompanyVideo(ctx context.Context, id int64) (CompanyVideo, error) {
	row := q.db.QueryRow(ctx, deleteCompanyVideo, id)
	var i CompanyVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Title,
	)
	return i, err
}

const getAllCompanyVideos = `-- name: GetAllCompanyVideos :many
 
SELECT id, ref_no, company_types, is_branch, companies_id, video_url, is_deleted, created_by, created_at, title FROM company_videos
WHERE is_deleted!=TRUE
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type GetAllCompanyVideosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCompanyVideos(ctx context.Context, arg GetAllCompanyVideosParams) ([]CompanyVideo, error) {
	rows, err := q.db.Query(ctx, getAllCompanyVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyVideo
	for rows.Next() {
		var i CompanyVideo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypes,
			&i.IsBranch,
			&i.CompaniesID,
			&i.VideoUrl,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountCompanyVideos = `-- name: GetCountCompanyVideos :one
 
SELECT COUNT(*) FROM company_videos
WHERE is_deleted!=TRUE
`

func (q *Queries) GetCountCompanyVideos(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCompanyVideos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleCompanyVideo = `-- name: GetSingleCompanyVideo :one
 
SELECT id, ref_no, company_types, is_branch, companies_id, video_url, is_deleted, created_by, created_at, title FROM company_videos WHERE id=$1
`

func (q *Queries) GetSingleCompanyVideo(ctx context.Context, id int64) (CompanyVideo, error) {
	row := q.db.QueryRow(ctx, getSingleCompanyVideo, id)
	var i CompanyVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Title,
	)
	return i, err
}
