// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lead_general_requests.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewLeadGeneralRequest = `-- name: CreateNewLeadGeneralRequest :one
INSERT INTO lead_general_requests (
    ref_no,
    contact_id,
    lead_id,
    request_type,
    view_appointment_id,
    request_date,
    request_status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, ref_no, contact_id, lead_id, request_type, view_appointment_id, request_date, request_status
`

type CreateNewLeadGeneralRequestParams struct {
	RefNo             string      `json:"ref_no"`
	ContactID         int64       `json:"contact_id"`
	LeadID            int64       `json:"lead_id"`
	RequestType       int64       `json:"request_type"`
	ViewAppointmentID pgtype.Int8 `json:"view_appointment_id"`
	RequestDate       time.Time   `json:"request_date"`
	RequestStatus     int64       `json:"request_status"`
}

func (q *Queries) CreateNewLeadGeneralRequest(ctx context.Context, arg CreateNewLeadGeneralRequestParams) (LeadGeneralRequest, error) {
	row := q.db.QueryRow(ctx, createNewLeadGeneralRequest,
		arg.RefNo,
		arg.ContactID,
		arg.LeadID,
		arg.RequestType,
		arg.ViewAppointmentID,
		arg.RequestDate,
		arg.RequestStatus,
	)
	var i LeadGeneralRequest
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.ContactID,
		&i.LeadID,
		&i.RequestType,
		&i.ViewAppointmentID,
		&i.RequestDate,
		&i.RequestStatus,
	)
	return i, err
}

const getCountAllGeneralRequests = `-- name: GetCountAllGeneralRequests :one

SELECT count(*)
FROM lead_general_requests lgr JOIN leads l ON lgr.lead_id = l.id
JOIN contacts c ON lgr.contact_id = c.id WHERE request_type = $1
`

// -- name: GetAllGeneralRequests :many
// SELECT lgr.ref_no AS lead_general_request_ref_no,
//
//	c.name AS contact_name,
//	scd.mobile AS mobile,
//	scd.email AS email,
//	l.ref_no AS lead_ref_no,
//	lgr.request_status
//
// FROM lead_general_requests lgr
// JOIN leads l ON lgr.lead_id = l.id
// JOIN contacts c ON lgr.contact_id = c.id
// JOIN shareable_contact_details scd ON c.id = scd.contacts_id
// WHERE lgr.request_type = $1
// ORDER BY lgr.id
// LIMIT $2
// OFFSET $3;
func (q *Queries) GetCountAllGeneralRequests(ctx context.Context, requestType int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllGeneralRequests, requestType)
	var count int64
	err := row.Scan(&count)
	return count, err
}
