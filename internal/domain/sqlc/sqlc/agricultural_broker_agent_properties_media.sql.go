// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_broker_agent_properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalBrokerAgentPropertyMedia = `-- name: CreateAgriculturalBrokerAgentPropertyMedia :one
INSERT INTO agricultural_broker_agent_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    agricultural_broker_agent_properties_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch
`

type CreateAgriculturalBrokerAgentPropertyMediaParams struct {
	ImageUrl                            []string    `json:"image_url"`
	Image360Url                         []string    `json:"image360_url"`
	VideoUrl                            []string    `json:"video_url"`
	PanaromaUrl                         []string    `json:"panaroma_url"`
	MainMediaSection                    string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalBrokerAgentPropertyMedia(ctx context.Context, arg CreateAgriculturalBrokerAgentPropertyMediaParams) (AgriculturalBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createAgriculturalBrokerAgentPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalBrokerAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalBrokerAgentPropertyMedia = `-- name: DeleteAgriculturalBrokerAgentPropertyMedia :exec
DELETE FROM agricultural_broker_agent_properties_media
Where id = $1
`

func (q *Queries) DeleteAgriculturalBrokerAgentPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalBrokerAgentPropertyMedia, id)
	return err
}

const getAgriculturalBrokerAgentPropertyMedia = `-- name: GetAgriculturalBrokerAgentPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalBrokerAgentPropertyMedia(ctx context.Context, limit int32) (AgriculturalBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyMedia, limit)
	var i AgriculturalBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSection = `-- name: GetAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_media
WHERE agricultural_broker_agent_properties_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSectionParams struct {
	AgriculturalBrokerAgentPropertiesID int64  `json:"agricultural_broker_agent_properties_id"`
	Lower                               string `json:"lower"`
}

func (q *Queries) GetAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSectionParams) (AgriculturalBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyMediaByPropertyIdAndMediaSection, arg.AgriculturalBrokerAgentPropertiesID, arg.Lower)
	var i AgriculturalBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerAgentPropertyMedia = `-- name: GetAllAgriculturalBrokerAgentPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalBrokerAgentPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyMedia(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyMediaParams) ([]AgriculturalBrokerAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesMedium
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalBrokerAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalBrokerAgentPropertyMediaByPropertyId = `-- name: GetAllAgriculturalBrokerAgentPropertyMediaByPropertyId :many
Select id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch from agricultural_broker_agent_properties_media
WHERE agricultural_broker_agent_properties_id = $1 ORDER BY id
`

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyMediaByPropertyId(ctx context.Context, agriculturalBrokerAgentPropertiesID int64) ([]AgriculturalBrokerAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyMediaByPropertyId, agriculturalBrokerAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesMedium
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalBrokerAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndId = `-- name: GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_media
 WHERE main_media_section = $2 AND agricultural_broker_agent_properties_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch From x
`

type GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndIdParams struct {
	AgriculturalBrokerAgentPropertiesID int64  `json:"agricultural_broker_agent_properties_id"`
	MainMediaSection                    string `json:"main_media_section"`
}

type GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndIdRow struct {
	ID                                  int64       `json:"id"`
	ImageUrl                            []string    `json:"image_url"`
	Image360Url                         []string    `json:"image360_url"`
	VideoUrl                            []string    `json:"video_url"`
	PanaromaUrl                         []string    `json:"panaroma_url"`
	MainMediaSection                    string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndIdParams) (GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndId, arg.AgriculturalBrokerAgentPropertiesID, arg.MainMediaSection)
	var i GetAllAgriculturalBrokerCompanyPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerCompanyPropertiesMainMediaSectionById = `-- name: GetAllAgriculturalBrokerCompanyPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM agricultural_broker_agent_properties_media
 WHERE agricultural_broker_agent_properties_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllAgriculturalBrokerCompanyPropertiesMainMediaSectionById(ctx context.Context, agriculturalBrokerAgentPropertiesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerCompanyPropertiesMainMediaSectionById, agriculturalBrokerAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalBrokerAgentPropertyMedia = `-- name: UpdateAgriculturalBrokerAgentPropertyMedia :one
UPDATE agricultural_broker_agent_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    agricultural_broker_agent_properties_id = $7,
    created_at = $8,
    updated_at = $9,
     is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_id, created_at, updated_at, is_branch
`

type UpdateAgriculturalBrokerAgentPropertyMediaParams struct {
	ID                                  int64       `json:"id"`
	ImageUrl                            []string    `json:"image_url"`
	Image360Url                         []string    `json:"image360_url"`
	VideoUrl                            []string    `json:"video_url"`
	PanaromaUrl                         []string    `json:"panaroma_url"`
	MainMediaSection                    string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalBrokerAgentPropertyMedia(ctx context.Context, arg UpdateAgriculturalBrokerAgentPropertyMediaParams) (AgriculturalBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalBrokerAgentPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalBrokerAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
