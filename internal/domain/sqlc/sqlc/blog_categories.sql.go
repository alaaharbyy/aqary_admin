// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blog_categories.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlogCategory = `-- name: CreateBlogCategory :one
INSERT INTO blog_categories (
    category_title,
    category_title_ar,
    description,
    description_ar,
    status,    
    created_at,
    updated_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)RETURNING id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
`

type CreateBlogCategoryParams struct {
	CategoryTitle   string      `json:"category_title"`
	CategoryTitleAr pgtype.Text `json:"category_title_ar"`
	Description     pgtype.Text `json:"description"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

func (q *Queries) CreateBlogCategory(ctx context.Context, arg CreateBlogCategoryParams) (BlogCategory, error) {
	row := q.db.QueryRow(ctx, createBlogCategory,
		arg.CategoryTitle,
		arg.CategoryTitleAr,
		arg.Description,
		arg.DescriptionAr,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BlogCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryTitle,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.CategoryTitleAr,
		&i.DescriptionAr,
	)
	return i, err
}

const deleteBlogCategoryByID = `-- name: DeleteBlogCategoryByID :exec
DELETE FROM blog_categories
WHERE id = $1 AND blog_categories.status!=6
`

func (q *Queries) DeleteBlogCategoryByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBlogCategoryByID, id)
	return err
}

const getAllBlogCategories = `-- name: GetAllBlogCategories :many

SELECT id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar FROM blog_categories
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBlogCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: CreateBlogCategories :one
// INSERT INTO blog_categories (
//
//	category_title,
//	category_title_ar,
//	description,
//	description_ar,
//	status
//
// )VALUES (
//
//	$1, $2 ,$3,$4,$5
//
// ) RETURNING *;
func (q *Queries) GetAllBlogCategories(ctx context.Context, arg GetAllBlogCategoriesParams) ([]BlogCategory, error) {
	rows, err := q.db.Query(ctx, getAllBlogCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogCategory
	for rows.Next() {
		var i BlogCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryTitle,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.CategoryTitleAr,
			&i.DescriptionAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogCategories = `-- name: GetBlogCategories :many
SELECT id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
FROM blog_categories
WHERE blog_categories.status=$1
ORDER BY
	blog_categories.id
LIMIT $2 
OFFSET $3
`

type GetBlogCategoriesParams struct {
	Status int64 `json:"status"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBlogCategories(ctx context.Context, arg GetBlogCategoriesParams) ([]BlogCategory, error) {
	rows, err := q.db.Query(ctx, getBlogCategories, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogCategory
	for rows.Next() {
		var i BlogCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryTitle,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.CategoryTitleAr,
			&i.DescriptionAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogCategoriesWithoutPagination = `-- name: GetBlogCategoriesWithoutPagination :many



SELECT id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
FROM blog_categories
WHERE blog_categories.status=$1
`

// -- name: UpdateBlogCategories :one
// UPDATE blog_categories
// SET
//
//	category_title = $2,
//	category_title_ar=$3,
//	description=$4,
//	description_ar=$5,
//	status =$6
//
// Where id = $1
// RETURNING *;
// -- name: DeleteBlogCategories :exec
// DELETE FROM blog_categories
// Where id = $1;
func (q *Queries) GetBlogCategoriesWithoutPagination(ctx context.Context, status int64) ([]BlogCategory, error) {
	rows, err := q.db.Query(ctx, getBlogCategoriesWithoutPagination, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlogCategory
	for rows.Next() {
		var i BlogCategory
		if err := rows.Scan(
			&i.ID,
			&i.CategoryTitle,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.CategoryTitleAr,
			&i.DescriptionAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogCategoryByID = `-- name: GetBlogCategoryByID :one
SELECT id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
FROM blog_categories 
WHERE id=$1 AND status=$2
`

type GetBlogCategoryByIDParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) GetBlogCategoryByID(ctx context.Context, arg GetBlogCategoryByIDParams) (BlogCategory, error) {
	row := q.db.QueryRow(ctx, getBlogCategoryByID, arg.ID, arg.Status)
	var i BlogCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryTitle,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.CategoryTitleAr,
		&i.DescriptionAr,
	)
	return i, err
}

const getNumberOfBlogCategories = `-- name: GetNumberOfBlogCategories :one
SELECT COUNT(id)
FROM blog_categories
WHERE status=$1
`

func (q *Queries) GetNumberOfBlogCategories(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfBlogCategories, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const restoreBlogCategoryByID = `-- name: RestoreBlogCategoryByID :one
UPDATE blog_categories
SET
	status=1
WHERE id =$1 AND status!=1 RETURNING id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
`

func (q *Queries) RestoreBlogCategoryByID(ctx context.Context, id int64) (BlogCategory, error) {
	row := q.db.QueryRow(ctx, restoreBlogCategoryByID, id)
	var i BlogCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryTitle,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.CategoryTitleAr,
		&i.DescriptionAr,
	)
	return i, err
}

const updateBlogCategoryByID = `-- name: UpdateBlogCategoryByID :one
UPDATE blog_categories
SET 
    category_title = $2,
    category_title_ar=$3,
    description=$4,
    description_ar=$5,
    updated_at = $6
WHERE
    id = $1 AND blog_categories.status!=6
RETURNING id, category_title, status, created_at, updated_at, description, category_title_ar, description_ar
`

type UpdateBlogCategoryByIDParams struct {
	ID              int64       `json:"id"`
	CategoryTitle   string      `json:"category_title"`
	CategoryTitleAr pgtype.Text `json:"category_title_ar"`
	Description     pgtype.Text `json:"description"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	UpdatedAt       time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateBlogCategoryByID(ctx context.Context, arg UpdateBlogCategoryByIDParams) (BlogCategory, error) {
	row := q.db.QueryRow(ctx, updateBlogCategoryByID,
		arg.ID,
		arg.CategoryTitle,
		arg.CategoryTitleAr,
		arg.Description,
		arg.DescriptionAr,
		arg.UpdatedAt,
	)
	var i BlogCategory
	err := row.Scan(
		&i.ID,
		&i.CategoryTitle,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.CategoryTitleAr,
		&i.DescriptionAr,
	)
	return i, err
}
