// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: properties_common.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllPropertiesReferences = `-- name: GetAllPropertiesReferences :many
with x as (
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM freelancers_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM broker_company_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM broker_company_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
) Select id, ref_no, property_name, property_types_id, property_type, status, category, properties_id, property, is_branch from x ORDER BY id
`

type GetAllPropertiesReferencesRow struct {
	ID              int64       `json:"id"`
	RefNo           string      `json:"ref_no"`
	PropertyName    string      `json:"property_name"`
	PropertyTypesID int64       `json:"property_types_id"`
	PropertyType    string      `json:"property_type"`
	Status          int64       `json:"status"`
	Category        string      `json:"category"`
	PropertiesID    pgtype.Int8 `json:"properties_id"`
	Property        pgtype.Int8 `json:"property"`
	IsBranch        pgtype.Bool `json:"is_branch"`
}

// PROPERTIES
// AGRICULTURAL
// INDUSTRIAL
func (q *Queries) GetAllPropertiesReferences(ctx context.Context) ([]GetAllPropertiesReferencesRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertiesReferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertiesReferencesRow
	for rows.Next() {
		var i GetAllPropertiesReferencesRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.PropertyName,
			&i.PropertyTypesID,
			&i.PropertyType,
			&i.Status,
			&i.Category,
			&i.PropertiesID,
			&i.Property,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPropertiesReferences = `-- name: GetCountAllPropertiesReferences :one
with x as (
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM freelancers_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM broker_company_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM broker_company_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM agricultural_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status, fp.category,  pf.properties_id, pf.property,
pf.is_branch FROM industrial_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id 
) Select count(*) from x
`

func (q *Queries) GetCountAllPropertiesReferences(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPropertiesReferences)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPropertiesInfoFromRefNo = `-- name: GetPropertiesInfoFromRefNo :many
with x as (
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_freelancer_properties where agricultural_freelancer_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_broker_agent_properties where agricultural_broker_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, true as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_broker_agent_properties_branch where agricultural_broker_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_owner_properties where agricultural_owner_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_freelancer_properties where industrial_freelancer_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_broker_agent_properties where industrial_broker_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, true as is_branch , property, addresses_id, users_id, unit_types FROM industrial_broker_agent_properties_branch where industrial_broker_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_owner_properties where industrial_owner_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM freelancers_properties where freelancers_properties.ref_no ILIKE $1  
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM broker_company_agent_properties where broker_company_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM broker_company_agent_properties_branch where broker_company_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM owner_properties where owner_properties.ref_no ILIKE $1 ) select id, status, property_name, category, section, is_branch, property, addresses_id, users_id, unit_types from x
`

type GetPropertiesInfoFromRefNoRow struct {
	ID           int64       `json:"id"`
	Status       int64       `json:"status"`
	PropertyName string      `json:"property_name"`
	Category     string      `json:"category"`
	Section      string      `json:"section"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	Property     int64       `json:"property"`
	AddressesID  int64       `json:"addresses_id"`
	UsersID      int64       `json:"users_id"`
	UnitTypes    []int64     `json:"unit_types"`
}

func (q *Queries) GetPropertiesInfoFromRefNo(ctx context.Context, refNo string) ([]GetPropertiesInfoFromRefNoRow, error) {
	rows, err := q.db.Query(ctx, getPropertiesInfoFromRefNo, refNo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPropertiesInfoFromRefNoRow
	for rows.Next() {
		var i GetPropertiesInfoFromRefNoRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.PropertyName,
			&i.Category,
			&i.Section,
			&i.IsBranch,
			&i.Property,
			&i.AddressesID,
			&i.UsersID,
			&i.UnitTypes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyInfo = `-- name: GetPropertyInfo :one
with x as (
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_freelancer_properties where agricultural_freelancer_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_broker_agent_properties where agricultural_broker_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, true as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_broker_agent_properties_branch where agricultural_broker_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'agricultural' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM agricultural_owner_properties where agricultural_owner_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_freelancer_properties where industrial_freelancer_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_broker_agent_properties where industrial_broker_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, true as is_branch , property, addresses_id, users_id, unit_types FROM industrial_broker_agent_properties_branch where industrial_broker_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'industrial' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM industrial_owner_properties where industrial_owner_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM freelancers_properties where freelancers_properties.ref_no ILIKE $1  
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM broker_company_agent_properties where broker_company_agent_properties.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM broker_company_agent_properties_branch where broker_company_agent_properties_branch.ref_no ILIKE $1
UNION ALL
SELECT id, status,  property_name, category,'property_hub' AS section, false as is_branch , property, addresses_id, users_id, unit_types FROM owner_properties where owner_properties.ref_no ILIKE $1 ) select id, status, property_name, category, section, is_branch, property, addresses_id, users_id, unit_types from x limit 1
`

type GetPropertyInfoRow struct {
	ID           int64       `json:"id"`
	Status       int64       `json:"status"`
	PropertyName string      `json:"property_name"`
	Category     string      `json:"category"`
	Section      string      `json:"section"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	Property     int64       `json:"property"`
	AddressesID  int64       `json:"addresses_id"`
	UsersID      int64       `json:"users_id"`
	UnitTypes    []int64     `json:"unit_types"`
}

func (q *Queries) GetPropertyInfo(ctx context.Context, refNo string) (GetPropertyInfoRow, error) {
	row := q.db.QueryRow(ctx, getPropertyInfo, refNo)
	var i GetPropertyInfoRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.PropertyName,
		&i.Category,
		&i.Section,
		&i.IsBranch,
		&i.Property,
		&i.AddressesID,
		&i.UsersID,
		&i.UnitTypes,
	)
	return i, err
}

const getSinglePropertyRefNo = `-- name: GetSinglePropertyRefNo :one
with x as (
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM project_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'prop' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM freelancers_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'prop' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM broker_company_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'prop' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM broker_company_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND true = $3 AND 'prop' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'prop' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM agricultural_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'agr' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM agricultural_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'agr' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM agricultural_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND true = $3 AND 'agr' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM agricultural_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'agr' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM industrial_freelancer_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'ind' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM industrial_broker_agent_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'ind' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM industrial_broker_agent_properties_branch fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND true = $3 AND 'ind' = $4
UNION
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type" FROM industrial_owner_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id WHERE fp.id = $1 AND fp.property = $2 AND false = $3 AND 'ind' = $4
) Select id, ref_no, property_name, property_types_id, property_type from x LIMIT 1
`

type GetSinglePropertyRefNoParams struct {
	ID       int64       `json:"id"`
	Property int64       `json:"property"`
	Column3  interface{} `json:"column_3"`
	Column4  interface{} `json:"column_4"`
}

type GetSinglePropertyRefNoRow struct {
	ID              int64   `json:"id"`
	RefNo           string  `json:"ref_no"`
	PropertyName    string  `json:"property_name"`
	PropertyTypesID []int64 `json:"property_types_id"`
	PropertyType    string  `json:"property_type"`
}

// PROPERTY HUB
// AGRICULTURAL
// INDUSTRIAL
func (q *Queries) GetSinglePropertyRefNo(ctx context.Context, arg GetSinglePropertyRefNoParams) (GetSinglePropertyRefNoRow, error) {
	row := q.db.QueryRow(ctx, getSinglePropertyRefNo,
		arg.ID,
		arg.Property,
		arg.Column3,
		arg.Column4,
	)
	var i GetSinglePropertyRefNoRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PropertyName,
		&i.PropertyTypesID,
		&i.PropertyType,
	)
	return i, err
}
