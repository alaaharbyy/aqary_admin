// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_property_post_media.sql

package sqlc

import (
	"context"
	"time"
)

const createPropertyPostMedia = `-- name: CreatePropertyPostMedia :one
INSERT INTO aqary_property_post_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    aqary_property_posts_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_property_posts_id, created_at, updated_at
`

type CreatePropertyPostMediaParams struct {
	ImageUrl             []string  `json:"image_url"`
	Image360Url          []string  `json:"image360_url"`
	VideoUrl             []string  `json:"video_url"`
	PanaromaUrl          []string  `json:"panaroma_url"`
	MainMediaSection     string    `json:"main_media_section"`
	AqaryPropertyPostsID int64     `json:"aqary_property_posts_id"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) CreatePropertyPostMedia(ctx context.Context, arg CreatePropertyPostMediaParams) (AqaryPropertyPostMedium, error) {
	row := q.db.QueryRow(ctx, createPropertyPostMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AqaryPropertyPostsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AqaryPropertyPostMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AqaryPropertyPostsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAqaryPropertyPostMediaByPostID = `-- name: DeleteAqaryPropertyPostMediaByPostID :many
DELETE FROM aqary_property_post_media WHERE aqary_property_posts_id = $1 RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_property_posts_id, created_at, updated_at
`

func (q *Queries) DeleteAqaryPropertyPostMediaByPostID(ctx context.Context, aqaryPropertyPostsID int64) ([]AqaryPropertyPostMedium, error) {
	rows, err := q.db.Query(ctx, deleteAqaryPropertyPostMediaByPostID, aqaryPropertyPostsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryPropertyPostMedium
	for rows.Next() {
		var i AqaryPropertyPostMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AqaryPropertyPostsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteAqaryPropertyPostMediaByPostId = `-- name: DeleteAqaryPropertyPostMediaByPostId :one
DELETE FROM aqary_property_post_media WHERE id = $1 RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_property_posts_id, created_at, updated_at
`

func (q *Queries) DeleteAqaryPropertyPostMediaByPostId(ctx context.Context, id int64) (AqaryPropertyPostMedium, error) {
	row := q.db.QueryRow(ctx, deleteAqaryPropertyPostMediaByPostId, id)
	var i AqaryPropertyPostMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AqaryPropertyPostsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAqaryPropertyPostMediaByPostId = `-- name: GetAllAqaryPropertyPostMediaByPostId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_property_posts_id, created_at, updated_at FROM aqary_property_post_media WHERE aqary_property_posts_id = $3 LIMIT $1 OFFSET $2
`

type GetAllAqaryPropertyPostMediaByPostIdParams struct {
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
	AqaryPropertyPostsID int64 `json:"aqary_property_posts_id"`
}

func (q *Queries) GetAllAqaryPropertyPostMediaByPostId(ctx context.Context, arg GetAllAqaryPropertyPostMediaByPostIdParams) ([]AqaryPropertyPostMedium, error) {
	rows, err := q.db.Query(ctx, getAllAqaryPropertyPostMediaByPostId, arg.Limit, arg.Offset, arg.AqaryPropertyPostsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryPropertyPostMedium
	for rows.Next() {
		var i AqaryPropertyPostMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AqaryPropertyPostsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
