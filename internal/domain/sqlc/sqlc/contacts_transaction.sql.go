// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_transaction.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllContactTransaction = `-- name: GetAllContactTransaction :many
SELECT ct.id, ct.contacts_id, ct.leads_id, ct.contact_type, ct.category, ct.property_ref_no, ct.unit_ref_no, ct.transaction_date, l.ref_no, l.lead_type FROM contacts_transaction ct JOIN leads l ON l.id = ct.leads_id WHERE ct.contacts_id = $1 ORDER BY ct.id DESC LIMIT $2 OFFSET $3
`

type GetAllContactTransactionParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

type GetAllContactTransactionRow struct {
	ID              int64       `json:"id"`
	ContactsID      pgtype.Int8 `json:"contacts_id"`
	LeadsID         int64       `json:"leads_id"`
	ContactType     int64       `json:"contact_type"`
	Category        string      `json:"category"`
	PropertyRefNo   string      `json:"property_ref_no"`
	UnitRefNo       string      `json:"unit_ref_no"`
	TransactionDate time.Time   `json:"transaction_date"`
	RefNo           string      `json:"ref_no"`
	LeadType        int64       `json:"lead_type"`
}

func (q *Queries) GetAllContactTransaction(ctx context.Context, arg GetAllContactTransactionParams) ([]GetAllContactTransactionRow, error) {
	rows, err := q.db.Query(ctx, getAllContactTransaction, arg.ContactsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllContactTransactionRow
	for rows.Next() {
		var i GetAllContactTransactionRow
		if err := rows.Scan(
			&i.ID,
			&i.ContactsID,
			&i.LeadsID,
			&i.ContactType,
			&i.Category,
			&i.PropertyRefNo,
			&i.UnitRefNo,
			&i.TransactionDate,
			&i.RefNo,
			&i.LeadType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllContactTransaction = `-- name: GetCountAllContactTransaction :one
SELECT count(*) FROM contacts_transaction WHERE contacts_id = $1
`

func (q *Queries) GetCountAllContactTransaction(ctx context.Context, contactsID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllContactTransaction, contactsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleTransaction = `-- name: GetSingleTransaction :one
SELECT id, contacts_id, leads_id, contact_type, category, property_ref_no, unit_ref_no, transaction_date FROM contacts_transaction WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSingleTransaction(ctx context.Context, id int64) (ContactsTransaction, error) {
	row := q.db.QueryRow(ctx, getSingleTransaction, id)
	var i ContactsTransaction
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.LeadsID,
		&i.ContactType,
		&i.Category,
		&i.PropertyRefNo,
		&i.UnitRefNo,
		&i.TransactionDate,
	)
	return i, err
}

const updateMultipleContactsTransactionID = `-- name: UpdateMultipleContactsTransactionID :one
UPDATE contacts_transaction SET contacts_id= $1 WHERE id = ANY($2::bigint[]) RETURNING id, contacts_id, leads_id, contact_type, category, property_ref_no, unit_ref_no, transaction_date
`

type UpdateMultipleContactsTransactionIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	Column2    []int64     `json:"column_2"`
}

func (q *Queries) UpdateMultipleContactsTransactionID(ctx context.Context, arg UpdateMultipleContactsTransactionIDParams) (ContactsTransaction, error) {
	row := q.db.QueryRow(ctx, updateMultipleContactsTransactionID, arg.ContactsID, arg.Column2)
	var i ContactsTransaction
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.LeadsID,
		&i.ContactType,
		&i.Category,
		&i.PropertyRefNo,
		&i.UnitRefNo,
		&i.TransactionDate,
	)
	return i, err
}

const updateSingleContactsTransactionID = `-- name: UpdateSingleContactsTransactionID :one
UPDATE contacts_transaction SET contacts_id= $1 WHERE id = $2 RETURNING id, contacts_id, leads_id, contact_type, category, property_ref_no, unit_ref_no, transaction_date
`

type UpdateSingleContactsTransactionIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateSingleContactsTransactionID(ctx context.Context, arg UpdateSingleContactsTransactionIDParams) (ContactsTransaction, error) {
	row := q.db.QueryRow(ctx, updateSingleContactsTransactionID, arg.ContactsID, arg.ID)
	var i ContactsTransaction
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.LeadsID,
		&i.ContactType,
		&i.Category,
		&i.PropertyRefNo,
		&i.UnitRefNo,
		&i.TransactionDate,
	)
	return i, err
}
