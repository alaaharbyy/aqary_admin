// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: propertyhub_listing.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const filterCountPropertyHub = `-- name: FilterCountPropertyHub :many
With x As(
 SELECT freelancers_properties.id, freelancers_properties.property_title,freelancers_properties.property_name, freelancers_properties.property_title_arabic, freelancers_properties.description, freelancers_properties.description_arabic, freelancers_properties.is_verified, freelancers_properties.property_rank, freelancers_properties.addresses_id, freelancers_properties.locations_id, freelancers_properties.property_types_id, freelancers_properties.profiles_id, freelancers_properties.facilities_id, freelancers_properties.amenities_id, freelancers_properties.status, freelancers_properties.created_at AS created_time, freelancers_properties.updated_at, freelancers_properties.is_show_owner_info, freelancers_properties.property, freelancers_properties.countries_id, freelancers_properties.ref_no,freelancers_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from freelancers_properties
 LEFT JOIN addresses ON freelancers_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON freelancers_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON freelancers_properties.id = properties_facts.properties_id and properties_facts.property = 2
 LEFT JOIN freelancers_properties_media ON freelancers_properties.id = freelancers_properties_media.id
 WHERE 
        addresses.countries_id = $1::bigint
	--         -- city
	AND cities.city ILIKE $2::varchar
	--         -- section
	AND LOWER(freelancers_properties.category)
	ILIKE $3::varchar
	--         -- category or type
	AND property_types.type ILIKE $4::varchar
		--  reference number
    AND ($5::varchar = '%%'
		OR  freelancers_properties.ref_no ILIKE $5::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $6::bigint
		AND $7::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($8::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($8::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($9::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($9::bigint []))
	--      	-- completion status
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $10::bigint
	END
	--  ownership
	AND CASE WHEN $11::bigint IS NULL THEN
		TRUE
	WHEN $11::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $11::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $12::float
		END
		-- max plot area
		AND CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $13::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $14::float
		END
		-- max builup area
		AND CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $15::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $16::bigint IS NULL THEN
		TRUE
	WHEN $16::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $16::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($17::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($17::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $18::bigint
		END
		-- max service charges
		AND CASE WHEN $19::bigint IS NULL THEN
			TRUE
		WHEN $19::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $19::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $20::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($21::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $21::bigint []
		END)
	-- media
	AND($22::bigint = 0
		OR(array_length(freelancers_properties_media.image_url,
				$23) IS NOT NULL)
		OR(array_length(freelancers_properties_media.image360_url,
				$24) IS NOT NULL)
		OR(array_length(freelancers_properties_media.video_url,
				$25) IS NOT NULL)
		OR(array_length(freelancers_properties_media.panaroma_url,
				$26) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($27::bigint [],
			1) IS NULL
		OR freelancers_properties.property_rank = ANY ($27::bigint []))
	AND(communities.community ILIKE $28::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $29::varchar
		OR sub_communities.sub_community IS NULL)
	AND($30::bool IS NULL
		OR freelancers_properties.is_verified = $30::bool)
	--  search purpose
	AND(
		CASE WHEN $31::varchar IS NULL THEN
			TRUE
		ELSE
			freelancers_properties.property_title ILIKE $31::varchar
			OR freelancers_properties.property_title_arabic ILIKE $31::varchar
			OR property_types.type ILIKE $31::varchar
			OR cities.city ILIKE $31::varchar
			OR communities.community ILIKE $31::varchar
			OR sub_communities.sub_community ILIKE $31::varchar
		END)
	--  removing the blocked and deleted units only
	AND freelancers_properties.status != 5
	AND freelancers_properties.status != 6
           UNION ALL
 SELECT owner_properties.id, owner_properties.property_title,owner_properties.property_name, owner_properties.property_title_arabic, owner_properties.description, owner_properties.description_arabic, owner_properties.is_verified, owner_properties.property_rank, owner_properties.addresses_id, owner_properties.locations_id, owner_properties.property_types_id, owner_properties.profiles_id, owner_properties.facilities_id, owner_properties.amenities_id, owner_properties.status, owner_properties.created_at AS created_time, owner_properties.updated_at, owner_properties.is_show_owner_info, owner_properties.property, owner_properties.countries_id, owner_properties.ref_no,owner_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from owner_properties
 LEFT JOIN addresses ON owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON owner_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON owner_properties.id = properties_facts.properties_id and properties_facts.property = 4
 LEFT JOIN owner_properties_media ON owner_properties.id = owner_properties_media.id
 WHERE 
        addresses.countries_id = $1::bigint
	--         -- city
	AND cities.city ILIKE $2::varchar
	--         -- section
	AND LOWER(owner_properties.category)
	ILIKE $3::varchar
	--         -- category or type
	AND property_types.type ILIKE $4::varchar
		--  reference number
    AND ($5::varchar = '%%'
		OR  owner_properties.ref_no ILIKE $5::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $6::bigint
		AND $7::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($8::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($8::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($9::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($9::bigint []))
	--      	-- completion status
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $10::bigint
	END
	--  ownership
	AND CASE WHEN $11::bigint IS NULL THEN
		TRUE
	WHEN $11::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $11::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $12::float
		END
		-- max plot area
		AND CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $13::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $14::float
		END
		-- max builup area
		AND CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $15::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $16::bigint IS NULL THEN
		TRUE
	WHEN $16::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $16::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($17::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($17::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $18::bigint
		END
		-- max service charges
		AND CASE WHEN $19::bigint IS NULL THEN
			TRUE
		WHEN $19::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $19::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $20::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($21::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $21::bigint []
		END)
	-- media
	AND($22::bigint = 0
		OR(array_length(owner_properties_media.image_url,
				$23) IS NOT NULL)
		OR(array_length(owner_properties_media.image360_url,
				$24) IS NOT NULL)
		OR(array_length(owner_properties_media.video_url,
				$25) IS NOT NULL)
		OR(array_length(owner_properties_media.panaroma_url,
				$26) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($27::bigint [],
			1) IS NULL
		OR owner_properties.property_rank = ANY ($27::bigint []))
	AND(communities.community ILIKE $28::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $29::varchar
		OR sub_communities.sub_community IS NULL)
	AND($30::bool IS NULL
		OR owner_properties.is_verified = $30::bool)
	--  search purpose
	AND(
		CASE WHEN $31::varchar IS NULL THEN
			TRUE
		ELSE
			owner_properties.property_title ILIKE $31::varchar
			OR owner_properties.property_title_arabic ILIKE $31::varchar
			OR property_types.type ILIKE $31::varchar
			OR cities.city ILIKE $31::varchar
			OR communities.community ILIKE $31::varchar
			OR sub_communities.sub_community ILIKE $31::varchar
		END)
	--  removing the blocked and deleted units only
	AND owner_properties.status != 5
	AND owner_properties.status != 6
                   UNION ALL 
 SELECT broker_company_agent_properties.id, broker_company_agent_properties.property_title,broker_company_agent_properties.property_name, broker_company_agent_properties.property_title_arabic, broker_company_agent_properties.description, broker_company_agent_properties.description_arabic, broker_company_agent_properties.is_verified, broker_company_agent_properties.property_rank, broker_company_agent_properties.addresses_id, broker_company_agent_properties.locations_id, broker_company_agent_properties.property_types_id, broker_company_agent_properties.profiles_id, broker_company_agent_properties.facilities_id, broker_company_agent_properties.amenities_id, broker_company_agent_properties.status, broker_company_agent_properties.created_at AS created_time, broker_company_agent_properties.updated_at, broker_company_agent_properties.is_show_owner_info, broker_company_agent_properties.property, broker_company_agent_properties.countries_id, broker_company_agent_properties.ref_no,broker_company_agent_properties.users_id, broker_company_agent_properties.is_branch, broker_company_agents, broker_company_agent_properties.broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties
 LEFT JOIN addresses ON broker_company_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_agents ON broker_company_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON broker_company_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
    addresses.countries_id = $1::bigint
	--         -- city
	AND cities.city ILIKE $2::varchar
	--         -- section
	AND LOWER(broker_company_agent_properties.category)
	ILIKE $3::varchar
	--         -- category or type
	AND property_types.type ILIKE $4::varchar
		--  reference number
    AND ($5::varchar = '%%'
		OR  broker_company_agent_properties.ref_no ILIKE $5::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $6::bigint
		AND $7::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($8::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($8::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($9::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($9::bigint []))
	--      	-- completion status
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $10::bigint
	END
	--  ownership
	AND CASE WHEN $11::bigint IS NULL THEN
		TRUE
	WHEN $11::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $11::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $12::float
		END
		-- max plot area
		AND CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $13::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $14::float
		END
		-- max builup area
		AND CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $15::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $16::bigint IS NULL THEN
		TRUE
	WHEN $16::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $16::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($17::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($17::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $18::bigint
		END
		-- max service charges
		AND CASE WHEN $19::bigint IS NULL THEN
			TRUE
		WHEN $19::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $19::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $20::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($21::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $21::bigint []
		END)
	-- media
	AND($22::bigint = 0
		OR(array_length(broker_company_agent_properties_media.image_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.image360_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.video_url,
				$25) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.panaroma_url,
				$26) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($32::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($32::varchar))
	OR($32::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($32::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($27::bigint [],
			1) IS NULL
		OR broker_company_agent_properties.property_rank = ANY ($27::bigint []))
	AND(communities.community ILIKE $28::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $29::varchar
		OR sub_communities.sub_community IS NULL)
	AND($30::bool IS NULL
		OR broker_company_agent_properties.is_verified = $30::bool)
	--  search purpose
	AND(
		CASE WHEN $31::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties.property_title ILIKE $31::varchar
			OR broker_company_agent_properties.property_title_arabic ILIKE $31::varchar
			OR property_types.type ILIKE $31::varchar
			OR cities.city ILIKE $31::varchar
			OR communities.community ILIKE $31::varchar
			OR sub_communities.sub_community ILIKE $31::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties.status != 5
	AND broker_company_agent_properties.status != 6
        UNION ALL 
 SELECT broker_company_agent_properties_branch.id, broker_company_agent_properties_branch.property_title,broker_company_agent_properties_branch.property_name, broker_company_agent_properties_branch.property_title_arabic, broker_company_agent_properties_branch.description, broker_company_agent_properties_branch.description_arabic, broker_company_agent_properties_branch.is_verified, broker_company_agent_properties_branch.property_rank, broker_company_agent_properties_branch.addresses_id, broker_company_agent_properties_branch.locations_id, broker_company_agent_properties_branch.property_types_id, broker_company_agent_properties_branch.profiles_id, broker_company_agent_properties_branch.facilities_id, broker_company_agent_properties_branch.amenities_id, broker_company_agent_properties_branch.status, broker_company_agent_properties_branch.created_at AS created_time, broker_company_agent_properties_branch.updated_at, broker_company_agent_properties_branch.is_show_owner_info, broker_company_agent_properties_branch.property, broker_company_agent_properties_branch.countries_id, broker_company_agent_properties_branch.ref_no,broker_company_agent_properties_branch.users_id, broker_company_agent_properties_branch.is_branch,broker_company_agent_properties_branch.broker_company_branches_agents AS broker_company_agents, broker_company_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties_branch 
 LEFT JOIN addresses ON broker_company_agent_properties_branch.addresses_id = addresses.id
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties_branch.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_branches_agents ON broker_company_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON broker_company_agent_properties_branch.id = broker_company_agent_properties_media_branch.id

 WHERE 
    addresses.countries_id = $1::bigint
	--         -- city
	AND cities.city ILIKE $2::varchar
	--         -- section
	AND LOWER(broker_company_agent_properties_branch.category)
	ILIKE $3::varchar
	--         -- category or type
	AND property_types.type ILIKE $4::varchar
		--  reference number
    AND ($5::varchar = '%%'
		OR  broker_company_agent_properties_branch.ref_no ILIKE $5::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $6::bigint
		AND $7::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($8::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($8::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($9::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($9::bigint []))
	--      	-- completion status
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $10::bigint
	END
	--  ownership
	AND CASE WHEN $11::bigint IS NULL THEN
		TRUE
	WHEN $11::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $11::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $12::float
		END
		-- max plot area
		AND CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $13::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $14::float
		END
		-- max builup area
		AND CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $15::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $16::bigint IS NULL THEN
		TRUE
	WHEN $16::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $16::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($17::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($17::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $18::bigint
		END
		-- max service charges
		AND CASE WHEN $19::bigint IS NULL THEN
			TRUE
		WHEN $19::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $19::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $20::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($21::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $21::bigint []
		END)
	-- media
	AND($22::bigint = 0
		OR(array_length(broker_company_agent_properties_media_branch.image_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.image360_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.video_url,
				$25) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.panaroma_url,
				$26) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($32::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($32::varchar))
	OR($32::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($32::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($27::bigint [],
			1) IS NULL
		OR broker_company_agent_properties_branch.property_rank = ANY ($27::bigint []))
	AND(communities.community ILIKE $28::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $29::varchar
		OR sub_communities.sub_community IS NULL)
	AND($30::bool IS NULL
		OR broker_company_agent_properties_branch.is_verified = $30::bool)
	--  search purpose
	AND(
		CASE WHEN $31::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties_branch.property_title ILIKE $31::varchar
			OR broker_company_agent_properties_branch.property_title_arabic ILIKE $31::varchar
			OR property_types.type ILIKE $31::varchar
			OR cities.city ILIKE $31::varchar
			OR communities.community ILIKE $31::varchar
			OR sub_communities.sub_community ILIKE $31::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties_branch.status != 5
	AND broker_company_agent_properties_branch.status != 6
) SELECT count(*) FROM x
`

type FilterCountPropertyHubParams struct {
	CountryID         int64       `json:"country_id"`
	City              string      `json:"city"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

func (q *Queries) FilterCountPropertyHub(ctx context.Context, arg FilterCountPropertyHubParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, filterCountPropertyHub,
		arg.CountryID,
		arg.City,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterPropertyHub = `-- name: FilterPropertyHub :many
With x As(
 SELECT freelancers_properties.id, freelancers_properties.property_title,freelancers_properties.property_name, freelancers_properties.property_title_arabic, freelancers_properties.description, freelancers_properties.description_arabic, freelancers_properties.is_verified, freelancers_properties.property_rank, freelancers_properties.addresses_id, freelancers_properties.locations_id, freelancers_properties.property_types_id, freelancers_properties.profiles_id, freelancers_properties.facilities_id, freelancers_properties.amenities_id, freelancers_properties.status, freelancers_properties.created_at AS created_time, freelancers_properties.updated_at, freelancers_properties.is_show_owner_info, freelancers_properties.property, freelancers_properties.countries_id, freelancers_properties.ref_no,freelancers_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from freelancers_properties
 LEFT JOIN addresses ON freelancers_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON freelancers_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON freelancers_properties.id = properties_facts.properties_id and properties_facts.property = 2
 LEFT JOIN freelancers_properties_media ON freelancers_properties.id = freelancers_properties_media.id
 WHERE 
        addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	
	AND LOWER(freelancers_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  freelancers_properties.ref_no ILIKE $8::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(freelancers_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(freelancers_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(freelancers_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(freelancers_properties_media.panaroma_url,
				$29) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR freelancers_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR freelancers_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			freelancers_properties.property_title ILIKE $34::varchar
			OR freelancers_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND freelancers_properties.status != 5
	AND freelancers_properties.status != 6
           UNION ALL
 SELECT owner_properties.id, owner_properties.property_title,owner_properties.property_name, owner_properties.property_title_arabic, owner_properties.description, owner_properties.description_arabic, owner_properties.is_verified, owner_properties.property_rank, owner_properties.addresses_id, owner_properties.locations_id, owner_properties.property_types_id, owner_properties.profiles_id, owner_properties.facilities_id, owner_properties.amenities_id, owner_properties.status, owner_properties.created_at AS created_time, owner_properties.updated_at, owner_properties.is_show_owner_info, owner_properties.property, owner_properties.countries_id, owner_properties.ref_no,owner_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from owner_properties
 LEFT JOIN addresses ON owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON owner_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON owner_properties.id = properties_facts.properties_id and properties_facts.property = 4
 LEFT JOIN owner_properties_media ON owner_properties.id = owner_properties_media.id
 WHERE 
        addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	--         -- section
	AND LOWER(owner_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  owner_properties.ref_no ILIKE $8::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(owner_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(owner_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(owner_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(owner_properties_media.panaroma_url,
				$29) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR owner_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR owner_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			owner_properties.property_title ILIKE $34::varchar
			OR owner_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND owner_properties.status != 5
	AND owner_properties.status != 6
                   UNION ALL 
 SELECT broker_company_agent_properties.id, broker_company_agent_properties.property_title,broker_company_agent_properties.property_name, broker_company_agent_properties.property_title_arabic, broker_company_agent_properties.description, broker_company_agent_properties.description_arabic, broker_company_agent_properties.is_verified, broker_company_agent_properties.property_rank, broker_company_agent_properties.addresses_id, broker_company_agent_properties.locations_id, broker_company_agent_properties.property_types_id, broker_company_agent_properties.profiles_id, broker_company_agent_properties.facilities_id, broker_company_agent_properties.amenities_id, broker_company_agent_properties.status, broker_company_agent_properties.created_at AS created_time, broker_company_agent_properties.updated_at, broker_company_agent_properties.is_show_owner_info, broker_company_agent_properties.property, broker_company_agent_properties.countries_id, broker_company_agent_properties.ref_no,broker_company_agent_properties.users_id, broker_company_agent_properties.is_branch, broker_company_agents, broker_company_agent_properties.broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties
 LEFT JOIN addresses ON broker_company_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_agents ON broker_company_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON broker_company_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
    addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	--         -- section
	AND LOWER(broker_company_agent_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  broker_company_agent_properties.ref_no ILIKE $8::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(broker_company_agent_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.panaroma_url,
				$29) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($35::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($35::varchar))
	OR($35::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($35::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR broker_company_agent_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR broker_company_agent_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties.property_title ILIKE $34::varchar
			OR broker_company_agent_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties.status != 5
	AND broker_company_agent_properties.status != 6
        UNION ALL 
 SELECT broker_company_agent_properties_branch.id, broker_company_agent_properties_branch.property_title,broker_company_agent_properties_branch.property_name, broker_company_agent_properties_branch.property_title_arabic, broker_company_agent_properties_branch.description, broker_company_agent_properties_branch.description_arabic, broker_company_agent_properties_branch.is_verified, broker_company_agent_properties_branch.property_rank, broker_company_agent_properties_branch.addresses_id, broker_company_agent_properties_branch.locations_id, broker_company_agent_properties_branch.property_types_id, broker_company_agent_properties_branch.profiles_id, broker_company_agent_properties_branch.facilities_id, broker_company_agent_properties_branch.amenities_id, broker_company_agent_properties_branch.status, broker_company_agent_properties_branch.created_at AS created_time, broker_company_agent_properties_branch.updated_at, broker_company_agent_properties_branch.is_show_owner_info, broker_company_agent_properties_branch.property, broker_company_agent_properties_branch.countries_id, broker_company_agent_properties_branch.ref_no,broker_company_agent_properties_branch.users_id, broker_company_agent_properties_branch.is_branch,broker_company_agent_properties_branch.broker_company_branches_agents AS broker_company_agents, broker_company_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties_branch 
 LEFT JOIN addresses ON broker_company_agent_properties_branch.addresses_id = addresses.id
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties_branch.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_branches_agents ON broker_company_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON broker_company_agent_properties_branch.id = broker_company_agent_properties_media_branch.id

 WHERE 
    addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	--         -- section
	AND LOWER(broker_company_agent_properties_branch.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  broker_company_agent_properties_branch.ref_no ILIKE $8::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(broker_company_agent_properties_media_branch.image_url,
				$26) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.image360_url,
				$27) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.video_url,
				$28) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.panaroma_url,
				$29) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($35::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($35::varchar))
	OR($35::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($35::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR broker_company_agent_properties_branch.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR broker_company_agent_properties_branch.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties_branch.property_title ILIKE $34::varchar
			OR broker_company_agent_properties_branch.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties_branch.status != 5
	AND broker_company_agent_properties_branch.status != 6
) SELECT id,property_title,property_name,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_time,updated_at,is_show_owner_info,property, countries_id,ref_no,users_id ,is_branch,broker_company_agents, broker_companies_id FROM x ORDER BY
   CASE WHEN $3::bigint = 5 THEN
		unit_bedroom
	END DESC NULLS LAST,
	CASE WHEN $3::bigint = 4 THEN
		unit_bedroom
	END,
	CASE WHEN $3::bigint = 3 THEN
		unit_price
	END DESC,
	CASE WHEN $3::bigint = 2 THEN
		unit_price
	END,
	CASE WHEN $3::bigint = 1 THEN
		created_time
	END DESC,
	property_rank DESC,
	is_verified DESC,
	RANDOM()
LIMIT $1 OFFSET $2
`

type FilterPropertyHubParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	Rank              int64       `json:"rank"`
	CountryID         int64       `json:"country_id"`
	City              string      `json:"city"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

type FilterPropertyHubRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyName        string      `json:"property_name"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	ProfilesID          int64       `json:"profiles_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedTime         time.Time   `json:"created_time"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	UsersID             int64       `json:"users_id"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	BrokerCompanyAgents pgtype.Int8 `json:"broker_company_agents"`
	BrokerCompaniesID   pgtype.Int8 `json:"broker_companies_id"`
}

func (q *Queries) FilterPropertyHub(ctx context.Context, arg FilterPropertyHubParams) ([]FilterPropertyHubRow, error) {
	rows, err := q.db.Query(ctx, filterPropertyHub,
		arg.Limit,
		arg.Offset,
		arg.Rank,
		arg.CountryID,
		arg.City,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterPropertyHubRow
	for rows.Next() {
		var i FilterPropertyHubRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyName,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.ProfilesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedTime,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.UsersID,
			&i.IsBranch,
			&i.BrokerCompanyAgents,
			&i.BrokerCompaniesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAddressesByCities = `-- name: GetAllAddressesByCities :many
select id from addresses where cities_id = $1
`

func (q *Queries) GetAllAddressesByCities(ctx context.Context, citiesID pgtype.Int8) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllAddressesByCities, citiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAddressesByCommunities = `-- name: GetAllAddressesByCommunities :many
select id from addresses where communities_id = $1
`

func (q *Queries) GetAllAddressesByCommunities(ctx context.Context, communitiesID pgtype.Int8) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllAddressesByCommunities, communitiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAddressesByState = `-- name: GetAllAddressesByState :many
select id from addresses where states_id = $1
`

func (q *Queries) GetAllAddressesByState(ctx context.Context, statesID pgtype.Int8) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllAddressesByState, statesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAddressesBySubCommunities = `-- name: GetAllAddressesBySubCommunities :many
select id from addresses where sub_communities_id = $1
`

func (q *Queries) GetAllAddressesBySubCommunities(ctx context.Context, subCommunitiesID pgtype.Int8) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllAddressesBySubCommunities, subCommunitiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPropertyHubCount = `-- name: GetAllPropertyHubCount :one
WITH x AS(
SELECT id, property_rank FROM freelancers_properties 
 Where  status != 5 AND status != 6 
 UNION ALL
 SELECT id, property_rank FROM owner_properties 
 Where  status != 5 AND status != 6 
 UNION ALL
select id, property_rank FROM broker_company_agent_properties 
 Where  status != 5 AND status != 6 
 UNION ALL
 SELECT id, property_rank FROM broker_company_agent_properties_branch 
 Where  status != 5 AND status != 6 
 )
SELECT COUNT(id) AS total_count FROM x
`

func (q *Queries) GetAllPropertyHubCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllPropertyHubCount)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const getAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey = `-- name: GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey :many
SELECT id FROM property_unit_saved 
WHERE property_unit_id = $1 And which_property_unit = $2 AND is_branch = $3 AND users_id = $4 and  which_propertyhub_key= $5 AND is_saved=TRUE
`

type GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams struct {
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	IsBranch            bool        `json:"is_branch"`
	UsersID             int64       `json:"users_id"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
}

func (q *Queries) GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.IsBranch,
		arg.UsersID,
		arg.WhichPropertyhubKey,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPropertyHubByFacts = `-- name: GetCountAllPropertyHubByFacts :one
 WITH x AS( 
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id 
 FROM freelancers_properties
 WHERE freelancers_properties.property_rank = 4 AND(status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM freelancers_properties
 WHERE freelancers_properties.property_rank = 3 AND(status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM freelancers_properties
 WHERE freelancers_properties.property_rank = 2 AND(status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM freelancers_properties
 WHERE freelancers_properties.property_rank = 1 AND(status!= 5 AND status!= 6)
 UNION all
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM owner_properties
 WHERE owner_properties.property_rank = 4 AND(status!= 5 AND status!= 6)
 UNION all
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM owner_properties
 WHERE owner_properties.property_rank = 3 AND(status!= 5 AND status!= 6)
 UNION all 
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM owner_properties
 WHERE owner_properties.property_rank = 2 AND(status!= 5 AND status!= 6)
 UNION all
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,FALSE AS is_branch, 0 as broker_companies_id
 FROM owner_properties
 WHERE owner_properties.property_rank = 1 AND(status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_id FROM broker_company_agent_properties
 WHERE broker_company_agent_properties.property_rank = 4 and (status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_id FROM broker_company_agent_properties
 WHERE broker_company_agent_properties.property_rank = 3 and (status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_id FROM broker_company_agent_properties
 WHERE broker_company_agent_properties.property_rank = 2 and (status!= 5 AND status!= 6)
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_id FROM broker_company_agent_properties
 WHERE broker_company_agent_properties.property_rank = 1  and (status!= 5 AND status!= 6)
 UNION ALL
  SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch
  WHERE broker_company_agent_properties_branch.property_rank = 4 and (status!= 5 AND status!= 6)
 -- premium
 UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch
 WHERE broker_company_agent_properties_branch.property_rank = 3 and (status!= 5 AND status!= 6)
 -- featured
  UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch
 WHERE broker_company_agent_properties_branch.property_rank = 2 and (status!= 5 AND status!= 6)
 -- standard
  UNION ALL
 SELECT id,property_title,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,profiles_id,facilities_id,amenities_id,status,created_at,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch,broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch
 WHERE broker_company_agent_properties_branch.property_rank = 1 and (status!= 5 AND status!= 6)
 )
   SELECT COUNT(*) AS total_count
FROM x
JOIN properties_facts pf ON x.id = pf.properties_id
`

func (q *Queries) GetCountAllPropertyHubByFacts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPropertyHubByFacts)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const getCountCommunityPropertyHub = `-- name: GetCountCommunityPropertyHub :one
With x As(
 SELECT freelancers_properties.id, freelancers_properties.property_title,freelancers_properties.property_name, freelancers_properties.property_title_arabic, freelancers_properties.description, freelancers_properties.description_arabic, freelancers_properties.is_verified, freelancers_properties.property_rank, freelancers_properties.addresses_id, freelancers_properties.locations_id, freelancers_properties.property_types_id, freelancers_properties.profiles_id, freelancers_properties.facilities_id, freelancers_properties.amenities_id, freelancers_properties.status, freelancers_properties.created_at AS created_time, freelancers_properties.updated_at, freelancers_properties.is_show_owner_info, freelancers_properties.property, freelancers_properties.countries_id, freelancers_properties.ref_no,freelancers_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from freelancers_properties
 LEFT JOIN addresses ON freelancers_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON freelancers_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON freelancers_properties.id = properties_facts.properties_id and properties_facts.property = 2
 LEFT JOIN freelancers_properties_media ON freelancers_properties.id = freelancers_properties_media.id
 WHERE 
    addresses.communities_id = $1::bigint
	--         -- section
	AND LOWER(freelancers_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  freelancers_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(freelancers_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(freelancers_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(freelancers_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(freelancers_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR freelancers_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR freelancers_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			freelancers_properties.property_title ILIKE $30::varchar
			OR freelancers_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND freelancers_properties.status != 5
	AND freelancers_properties.status != 6
           UNION ALL
 SELECT owner_properties.id, owner_properties.property_title,owner_properties.property_name, owner_properties.property_title_arabic, owner_properties.description, owner_properties.description_arabic, owner_properties.is_verified, owner_properties.property_rank, owner_properties.addresses_id, owner_properties.locations_id, owner_properties.property_types_id, owner_properties.profiles_id, owner_properties.facilities_id, owner_properties.amenities_id, owner_properties.status, owner_properties.created_at AS created_time, owner_properties.updated_at, owner_properties.is_show_owner_info, owner_properties.property, owner_properties.countries_id, owner_properties.ref_no,owner_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from owner_properties
 LEFT JOIN addresses ON owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON owner_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON owner_properties.id = properties_facts.properties_id and properties_facts.property = 4
 LEFT JOIN owner_properties_media ON owner_properties.id = owner_properties_media.id
 WHERE 
    addresses.communities_id = $1::bigint
	--         -- section
	AND LOWER(owner_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  owner_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::bigint [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::bigint []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(owner_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(owner_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(owner_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(owner_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR owner_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR owner_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			owner_properties.property_title ILIKE $30::varchar
			OR owner_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND owner_properties.status != 5
	AND owner_properties.status != 6
                   UNION ALL 
 SELECT broker_company_agent_properties.id, broker_company_agent_properties.property_title,broker_company_agent_properties.property_name, broker_company_agent_properties.property_title_arabic, broker_company_agent_properties.description, broker_company_agent_properties.description_arabic, broker_company_agent_properties.is_verified, broker_company_agent_properties.property_rank, broker_company_agent_properties.addresses_id, broker_company_agent_properties.locations_id, broker_company_agent_properties.property_types_id, broker_company_agent_properties.profiles_id, broker_company_agent_properties.facilities_id, broker_company_agent_properties.amenities_id, broker_company_agent_properties.status, broker_company_agent_properties.created_at AS created_time, broker_company_agent_properties.updated_at, broker_company_agent_properties.is_show_owner_info, broker_company_agent_properties.property, broker_company_agent_properties.countries_id, broker_company_agent_properties.ref_no,broker_company_agent_properties.users_id, broker_company_agent_properties.is_branch, broker_company_agents, broker_company_agent_properties.broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties
 LEFT JOIN addresses ON broker_company_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_agents ON broker_company_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON broker_company_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
    addresses.communities_id = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::bigint [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::bigint []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties.property_title ILIKE $30::varchar
			OR broker_company_agent_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties.status != 5
	AND broker_company_agent_properties.status != 6
        UNION ALL 
 SELECT broker_company_agent_properties_branch.id, broker_company_agent_properties_branch.property_title,broker_company_agent_properties_branch.property_name, broker_company_agent_properties_branch.property_title_arabic, broker_company_agent_properties_branch.description, broker_company_agent_properties_branch.description_arabic, broker_company_agent_properties_branch.is_verified, broker_company_agent_properties_branch.property_rank, broker_company_agent_properties_branch.addresses_id, broker_company_agent_properties_branch.locations_id, broker_company_agent_properties_branch.property_types_id, broker_company_agent_properties_branch.profiles_id, broker_company_agent_properties_branch.facilities_id, broker_company_agent_properties_branch.amenities_id, broker_company_agent_properties_branch.status, broker_company_agent_properties_branch.created_at AS created_time, broker_company_agent_properties_branch.updated_at, broker_company_agent_properties_branch.is_show_owner_info, broker_company_agent_properties_branch.property, broker_company_agent_properties_branch.countries_id, broker_company_agent_properties_branch.ref_no,broker_company_agent_properties_branch.users_id, broker_company_agent_properties_branch.is_branch,broker_company_agent_properties_branch.broker_company_branches_agents AS broker_company_agents, broker_company_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties_branch 
 LEFT JOIN addresses ON broker_company_agent_properties_branch.addresses_id = addresses.id
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties_branch.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_branches_agents ON broker_company_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON broker_company_agent_properties_branch.id = broker_company_agent_properties_media_branch.id

 WHERE 
    addresses.communities_id = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties_branch.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties_branch.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::bigint [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::bigint []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media_branch.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties_branch.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties_branch.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties_branch.property_title ILIKE $30::varchar
			OR broker_company_agent_properties_branch.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties_branch.status != 5
	AND broker_company_agent_properties_branch.status != 6
) SELECT count(*) FROM x
`

type GetCountCommunityPropertyHubParams struct {
	CommunitiesID     int64       `json:"communities_id"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

func (q *Queries) GetCountCommunityPropertyHub(ctx context.Context, arg GetCountCommunityPropertyHubParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCommunityPropertyHub,
		arg.CommunitiesID,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountStatePropertyHub = `-- name: GetCountStatePropertyHub :one
With x As(
 SELECT freelancers_properties.id, freelancers_properties.property_title,freelancers_properties.property_name, freelancers_properties.property_title_arabic, freelancers_properties.description, freelancers_properties.description_arabic, freelancers_properties.is_verified, freelancers_properties.property_rank, freelancers_properties.addresses_id, freelancers_properties.locations_id, freelancers_properties.property_types_id, freelancers_properties.profiles_id, freelancers_properties.facilities_id, freelancers_properties.amenities_id, freelancers_properties.status, freelancers_properties.created_at AS created_time, freelancers_properties.updated_at, freelancers_properties.is_show_owner_info, freelancers_properties.property, freelancers_properties.countries_id, freelancers_properties.ref_no,freelancers_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from freelancers_properties
 LEFT JOIN addresses ON freelancers_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON freelancers_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON freelancers_properties.id = properties_facts.properties_id and properties_facts.property = 2
 LEFT JOIN freelancers_properties_media ON freelancers_properties.id = freelancers_properties_media.id
 WHERE 
    addresses.cities_id = $1::bigint
	--         -- section
	AND LOWER(freelancers_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  freelancers_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(freelancers_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(freelancers_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(freelancers_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(freelancers_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR freelancers_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR freelancers_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			freelancers_properties.property_title ILIKE $30::varchar
			OR freelancers_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND freelancers_properties.status != 5
	AND freelancers_properties.status != 6
           UNION ALL
 SELECT owner_properties.id, owner_properties.property_title,owner_properties.property_name, owner_properties.property_title_arabic, owner_properties.description, owner_properties.description_arabic, owner_properties.is_verified, owner_properties.property_rank, owner_properties.addresses_id, owner_properties.locations_id, owner_properties.property_types_id, owner_properties.profiles_id, owner_properties.facilities_id, owner_properties.amenities_id, owner_properties.status, owner_properties.created_at AS created_time, owner_properties.updated_at, owner_properties.is_show_owner_info, owner_properties.property, owner_properties.countries_id, owner_properties.ref_no,owner_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from owner_properties
 LEFT JOIN addresses ON owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON owner_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON owner_properties.id = properties_facts.properties_id and properties_facts.property = 4
 LEFT JOIN owner_properties_media ON owner_properties.id = owner_properties_media.id
 WHERE 
    addresses.cities_id = $1::bigint
	--         -- section
	AND LOWER(owner_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  owner_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(owner_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(owner_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(owner_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(owner_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR owner_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR owner_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			owner_properties.property_title ILIKE $30::varchar
			OR owner_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND owner_properties.status != 5
	AND owner_properties.status != 6
                   UNION ALL 
 SELECT broker_company_agent_properties.id, broker_company_agent_properties.property_title,broker_company_agent_properties.property_name, broker_company_agent_properties.property_title_arabic, broker_company_agent_properties.description, broker_company_agent_properties.description_arabic, broker_company_agent_properties.is_verified, broker_company_agent_properties.property_rank, broker_company_agent_properties.addresses_id, broker_company_agent_properties.locations_id, broker_company_agent_properties.property_types_id, broker_company_agent_properties.profiles_id, broker_company_agent_properties.facilities_id, broker_company_agent_properties.amenities_id, broker_company_agent_properties.status, broker_company_agent_properties.created_at AS created_time, broker_company_agent_properties.updated_at, broker_company_agent_properties.is_show_owner_info, broker_company_agent_properties.property, broker_company_agent_properties.countries_id, broker_company_agent_properties.ref_no,broker_company_agent_properties.users_id, broker_company_agent_properties.is_branch, broker_company_agents, broker_company_agent_properties.broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties
 LEFT JOIN addresses ON broker_company_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_agents ON broker_company_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON broker_company_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
    addresses.cities_id = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties.property_title ILIKE $30::varchar
			OR broker_company_agent_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties.status != 5
	AND broker_company_agent_properties.status != 6
        UNION ALL 
 SELECT broker_company_agent_properties_branch.id, broker_company_agent_properties_branch.property_title,broker_company_agent_properties_branch.property_name, broker_company_agent_properties_branch.property_title_arabic, broker_company_agent_properties_branch.description, broker_company_agent_properties_branch.description_arabic, broker_company_agent_properties_branch.is_verified, broker_company_agent_properties_branch.property_rank, broker_company_agent_properties_branch.addresses_id, broker_company_agent_properties_branch.locations_id, broker_company_agent_properties_branch.property_types_id, broker_company_agent_properties_branch.profiles_id, broker_company_agent_properties_branch.facilities_id, broker_company_agent_properties_branch.amenities_id, broker_company_agent_properties_branch.status, broker_company_agent_properties_branch.created_at AS created_time, broker_company_agent_properties_branch.updated_at, broker_company_agent_properties_branch.is_show_owner_info, broker_company_agent_properties_branch.property, broker_company_agent_properties_branch.countries_id, broker_company_agent_properties_branch.ref_no,broker_company_agent_properties_branch.users_id, broker_company_agent_properties_branch.is_branch,broker_company_agent_properties_branch.broker_company_branches_agents AS broker_company_agents, broker_company_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties_branch 
 LEFT JOIN addresses ON broker_company_agent_properties_branch.addresses_id = addresses.id
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties_branch.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_branches_agents ON broker_company_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON broker_company_agent_properties_branch.id = broker_company_agent_properties_media_branch.id

 WHERE 
    addresses.cities_id = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties_branch.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties_branch.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media_branch.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties_branch.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties_branch.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties_branch.property_title ILIKE $30::varchar
			OR broker_company_agent_properties_branch.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties_branch.status != 5
	AND broker_company_agent_properties_branch.status != 6
) SELECT count(*) FROM x
`

type GetCountStatePropertyHubParams struct {
	CitiesID          int64       `json:"cities_id"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

func (q *Queries) GetCountStatePropertyHub(ctx context.Context, arg GetCountStatePropertyHubParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountStatePropertyHub,
		arg.CitiesID,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountSubCommunityPropertyHub = `-- name: GetCountSubCommunityPropertyHub :one
With x As(
 SELECT freelancers_properties.id, freelancers_properties.property_title,freelancers_properties.property_name, freelancers_properties.property_title_arabic, freelancers_properties.description, freelancers_properties.description_arabic, freelancers_properties.is_verified, freelancers_properties.property_rank, freelancers_properties.addresses_id, freelancers_properties.locations_id, freelancers_properties.property_types_id, freelancers_properties.profiles_id, freelancers_properties.facilities_id, freelancers_properties.amenities_id, freelancers_properties.status, freelancers_properties.created_at AS created_time, freelancers_properties.updated_at, freelancers_properties.is_show_owner_info, freelancers_properties.property, freelancers_properties.countries_id, freelancers_properties.ref_no,freelancers_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from freelancers_properties
 LEFT JOIN addresses ON freelancers_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON freelancers_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON freelancers_properties.id = properties_facts.properties_id and properties_facts.property = 2
 LEFT JOIN freelancers_properties_media ON freelancers_properties.id = freelancers_properties_media.id
 WHERE 
    addresses.sub_communities_id  = $1::bigint
	--         -- section
	AND LOWER(freelancers_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  freelancers_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(freelancers_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(freelancers_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(freelancers_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(freelancers_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR freelancers_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR freelancers_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			freelancers_properties.property_title ILIKE $30::varchar
			OR freelancers_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND freelancers_properties.status != 5
	AND freelancers_properties.status != 6
           UNION ALL
 SELECT owner_properties.id, owner_properties.property_title,owner_properties.property_name, owner_properties.property_title_arabic, owner_properties.description, owner_properties.description_arabic, owner_properties.is_verified, owner_properties.property_rank, owner_properties.addresses_id, owner_properties.locations_id, owner_properties.property_types_id, owner_properties.profiles_id, owner_properties.facilities_id, owner_properties.amenities_id, owner_properties.status, owner_properties.created_at AS created_time, owner_properties.updated_at, owner_properties.is_show_owner_info, owner_properties.property, owner_properties.countries_id, owner_properties.ref_no,owner_properties.users_id, FALSE AS is_branch,0 AS broker_company_agents, 0 AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from owner_properties
 LEFT JOIN addresses ON owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON owner_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON owner_properties.id = properties_facts.properties_id and properties_facts.property = 4
 LEFT JOIN owner_properties_media ON owner_properties.id = owner_properties_media.id
 WHERE 
     addresses.sub_communities_id  = $1::bigint
	--         -- section
	AND LOWER(owner_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  owner_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(owner_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(owner_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(owner_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(owner_properties_media.panaroma_url,
				$25) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR owner_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR owner_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			owner_properties.property_title ILIKE $30::varchar
			OR owner_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND owner_properties.status != 5
	AND owner_properties.status != 6
                   UNION ALL 
 SELECT broker_company_agent_properties.id, broker_company_agent_properties.property_title,broker_company_agent_properties.property_name, broker_company_agent_properties.property_title_arabic, broker_company_agent_properties.description, broker_company_agent_properties.description_arabic, broker_company_agent_properties.is_verified, broker_company_agent_properties.property_rank, broker_company_agent_properties.addresses_id, broker_company_agent_properties.locations_id, broker_company_agent_properties.property_types_id, broker_company_agent_properties.profiles_id, broker_company_agent_properties.facilities_id, broker_company_agent_properties.amenities_id, broker_company_agent_properties.status, broker_company_agent_properties.created_at AS created_time, broker_company_agent_properties.updated_at, broker_company_agent_properties.is_show_owner_info, broker_company_agent_properties.property, broker_company_agent_properties.countries_id, broker_company_agent_properties.ref_no,broker_company_agent_properties.users_id, broker_company_agent_properties.is_branch, broker_company_agents, broker_company_agent_properties.broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties
 LEFT JOIN addresses ON broker_company_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_agents ON broker_company_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON broker_company_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
     addresses.sub_communities_id  = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties.property_title ILIKE $30::varchar
			OR broker_company_agent_properties.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties.status != 5
	AND broker_company_agent_properties.status != 6
        UNION ALL 
 SELECT broker_company_agent_properties_branch.id, broker_company_agent_properties_branch.property_title,broker_company_agent_properties_branch.property_name, broker_company_agent_properties_branch.property_title_arabic, broker_company_agent_properties_branch.description, broker_company_agent_properties_branch.description_arabic, broker_company_agent_properties_branch.is_verified, broker_company_agent_properties_branch.property_rank, broker_company_agent_properties_branch.addresses_id, broker_company_agent_properties_branch.locations_id, broker_company_agent_properties_branch.property_types_id, broker_company_agent_properties_branch.profiles_id, broker_company_agent_properties_branch.facilities_id, broker_company_agent_properties_branch.amenities_id, broker_company_agent_properties_branch.status, broker_company_agent_properties_branch.created_at AS created_time, broker_company_agent_properties_branch.updated_at, broker_company_agent_properties_branch.is_show_owner_info, broker_company_agent_properties_branch.property, broker_company_agent_properties_branch.countries_id, broker_company_agent_properties_branch.ref_no,broker_company_agent_properties_branch.users_id, broker_company_agent_properties_branch.is_branch,broker_company_agent_properties_branch.broker_company_branches_agents AS broker_company_agents, broker_company_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 properties_facts.price AS unit_price,
 properties_facts.bedroom AS unit_bedroom 
 from broker_company_agent_properties_branch 
 LEFT JOIN addresses ON broker_company_agent_properties_branch.addresses_id = addresses.id
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON broker_company_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN properties_facts ON broker_company_agent_properties_branch.id = properties_facts.properties_id and properties_facts.property = 3
 LEFT JOIN broker_company_branches_agents ON broker_company_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON broker_company_agent_properties_branch.id = broker_company_agent_properties_media_branch.id

 WHERE 
    addresses.sub_communities_id  = $1::bigint
	--         -- section
	AND LOWER(broker_company_agent_properties_branch.category)
	ILIKE $2::varchar
	--         -- category or type
	AND property_types.type ILIKE $3::varchar
		--  reference number
    AND ($4::varchar = '%%'
		OR  broker_company_agent_properties_branch.ref_no ILIKE $4::varchar)

	--         -- price
	AND(properties_facts.price BETWEEN $5::bigint
		AND $6::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($7::varchar [],
			1) IS NULL
		OR properties_facts.bedroom = ANY ($7::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($8::bigint [],
			1) IS NULL
		OR properties_facts.bathroom = ANY ($8::bigint []))
	--      	-- completion status
	AND CASE WHEN $9::bigint IS NULL THEN
		TRUE
	WHEN $9::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.completion_status = $9::bigint
	END
	--  ownership
	AND CASE WHEN $10::bigint IS NULL THEN
		TRUE
	WHEN $10::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.ownership = $10::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $11::float IS NULL THEN
			TRUE
		WHEN $11::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area >= $11::float
		END
		-- max plot area
		AND CASE WHEN $12::float IS NULL THEN
			TRUE
		WHEN $12::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.plot_area <= $12::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $13::float IS NULL THEN
			TRUE
		WHEN $13::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area >= $13::float
		END
		-- max builup area
		AND CASE WHEN $14::float IS NULL THEN
			TRUE
		WHEN $14::float = 0.0 THEN
			TRUE
		ELSE
			properties_facts.built_up_area <= $14::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $15::bigint IS NULL THEN
		TRUE
	WHEN $15::bigint = 0 THEN
		TRUE
	ELSE
		properties_facts.furnished = $15::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($16::bigint [],
			1) IS NULL
		OR properties_facts.parking = ANY ($16::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $17::bigint IS NULL THEN
			TRUE
		WHEN $17::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge >= $17::bigint
		END
		-- max service charges
		AND CASE WHEN $18::bigint IS NULL THEN
			TRUE
		WHEN $18::bigint = 0 THEN
			TRUE
		ELSE
			properties_facts.service_charge <= $18::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($19::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $19::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($20::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			properties_facts. "view" && $20::bigint []
		END)
	-- media
	AND($21::bigint = 0
		OR(array_length(broker_company_agent_properties_media_branch.image_url,
				$22) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.image360_url,
				$23) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.video_url,
				$24) IS NOT NULL)
		OR(array_length(broker_company_agent_properties_media_branch.panaroma_url,
				$25) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($31::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($31::varchar))
	OR($31::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($31::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($26::bigint [],
			1) IS NULL
		OR broker_company_agent_properties_branch.property_rank = ANY ($26::bigint []))
	AND(communities.community ILIKE $27::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $28::varchar
		OR sub_communities.sub_community IS NULL)
	AND($29::bool IS NULL
		OR broker_company_agent_properties_branch.is_verified = $29::bool)
	--  search purpose
	AND(
		CASE WHEN $30::varchar IS NULL THEN
			TRUE
		ELSE
			broker_company_agent_properties_branch.property_title ILIKE $30::varchar
			OR broker_company_agent_properties_branch.property_title_arabic ILIKE $30::varchar
			OR property_types.type ILIKE $30::varchar
			OR cities.city ILIKE $30::varchar
			OR communities.community ILIKE $30::varchar
			OR sub_communities.sub_community ILIKE $30::varchar
		END)
	--  removing the blocked and deleted units only
	AND broker_company_agent_properties_branch.status != 5
	AND broker_company_agent_properties_branch.status != 6
) SELECT count(*) FROM x
`

type GetCountSubCommunityPropertyHubParams struct {
	SubCommunitiesID  int64       `json:"sub_communities_id"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

func (q *Queries) GetCountSubCommunityPropertyHub(ctx context.Context, arg GetCountSubCommunityPropertyHubParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountSubCommunityPropertyHub,
		arg.SubCommunitiesID,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOverallPropertyHubCountByCountryAndSectionId = `-- name: GetOverallPropertyHubCountByCountryAndSectionId :one
With x As(
 select count(*) from freelancers_properties where freelancers_properties.countries_id = $1 and freelancers_properties.category = $2 and freelancers_properties.status != 5 and freelancers_properties.status != 6 
 union all 
 select count(*) from owner_properties where owner_properties.countries_id = $1 and owner_properties.category = $2 and owner_properties.status != 5 and owner_properties.status != 6 
union all 
select count(*) from broker_company_agent_properties where broker_company_agent_properties.countries_id = $1 and broker_company_agent_properties.category = $2 and broker_company_agent_properties.status != 5 and broker_company_agent_properties.status != 6 
union all 
select count(*) from broker_company_agent_properties_branch where broker_company_agent_properties_branch.countries_id = $1 and broker_company_agent_properties_branch.category = $2 and broker_company_agent_properties_branch.status != 5 and broker_company_agent_properties_branch.status != 6 
) SELECT SUM(count) AS counts FROM x
`

type GetOverallPropertyHubCountByCountryAndSectionIdParams struct {
	CountriesID int64  `json:"countries_id"`
	Category    string `json:"category"`
}

func (q *Queries) GetOverallPropertyHubCountByCountryAndSectionId(ctx context.Context, arg GetOverallPropertyHubCountByCountryAndSectionIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getOverallPropertyHubCountByCountryAndSectionId, arg.CountriesID, arg.Category)
	var counts int64
	err := row.Scan(&counts)
	return counts, err
}

const getPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKey = `-- name: GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKey :one
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at FROM property_unit_likes 
WHERE  property_unit_id = $1 And which_property_unit = $2 AND is_branch = $3 and which_propertyhub_key = $4 AND users_id = $5  LIMIT 1
`

type GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKeyParams struct {
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	IsBranch            bool        `json:"is_branch"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	UsersID             int64       `json:"users_id"`
}

func (q *Queries) GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKeyParams) (PropertyUnitLike, error) {
	row := q.db.QueryRow(ctx, getPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKey,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.IsBranch,
		arg.WhichPropertyhubKey,
		arg.UsersID,
	)
	var i PropertyUnitLike
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsLiked,
		&i.LikeReactionID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey = `-- name: GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey :one
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_saved, collection_name_id, users_id, created_at, updated_at FROM property_unit_saved 
WHERE  property_unit_id = $1 And which_property_unit = $2 and which_propertyhub_key = $3 AND is_branch = $4 AND users_id = $5  LIMIT 1
`

type GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams struct {
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	IsBranch            bool        `json:"is_branch"`
	UsersID             int64       `json:"users_id"`
}

func (q *Queries) GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams) (PropertyUnitSaved, error) {
	row := q.db.QueryRow(ctx, getPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.WhichPropertyhubKey,
		arg.IsBranch,
		arg.UsersID,
	)
	var i PropertyUnitSaved
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsSaved,
		&i.CollectionNameID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchAllCities = `-- name: SearchAllCities :many
select  id, city  from cities 
where lower(city) ilike lower($1)
`

type SearchAllCitiesRow struct {
	ID   int64  `json:"id"`
	City string `json:"city"`
}

func (q *Queries) SearchAllCities(ctx context.Context, lower string) ([]SearchAllCitiesRow, error) {
	rows, err := q.db.Query(ctx, searchAllCities, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAllCitiesRow
	for rows.Next() {
		var i SearchAllCitiesRow
		if err := rows.Scan(&i.ID, &i.City); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAllCommunities = `-- name: SearchAllCommunities :many
select id, community from communities
where lower(community) ilike lower($1)
`

type SearchAllCommunitiesRow struct {
	ID        int64  `json:"id"`
	Community string `json:"community"`
}

func (q *Queries) SearchAllCommunities(ctx context.Context, lower string) ([]SearchAllCommunitiesRow, error) {
	rows, err := q.db.Query(ctx, searchAllCommunities, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAllCommunitiesRow
	for rows.Next() {
		var i SearchAllCommunitiesRow
		if err := rows.Scan(&i.ID, &i.Community); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAllState = `-- name: SearchAllState :many
select  id, state from states 
where lower(city) ilike lower($1)
`

type SearchAllStateRow struct {
	ID    int64  `json:"id"`
	State string `json:"state"`
}

func (q *Queries) SearchAllState(ctx context.Context, lower string) ([]SearchAllStateRow, error) {
	rows, err := q.db.Query(ctx, searchAllState, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAllStateRow
	for rows.Next() {
		var i SearchAllStateRow
		if err := rows.Scan(&i.ID, &i.State); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchAllSubCommunities = `-- name: SearchAllSubCommunities :many
select  id, sub_community from sub_communities
where lower(sub_community) ilike lower($1)
`

type SearchAllSubCommunitiesRow struct {
	ID           int64  `json:"id"`
	SubCommunity string `json:"sub_community"`
}

func (q *Queries) SearchAllSubCommunities(ctx context.Context, lower string) ([]SearchAllSubCommunitiesRow, error) {
	rows, err := q.db.Query(ctx, searchAllSubCommunities, lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAllSubCommunitiesRow
	for rows.Next() {
		var i SearchAllSubCommunitiesRow
		if err := rows.Scan(&i.ID, &i.SubCommunity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
