// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: location.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (
    lat,lng
)VALUES (
    $1 ,$2
) RETURNING id, lat, lng, created_at, updated_at
`

type CreateLocationParams struct {
	Lat string `json:"lat"`
	Lng string `json:"lng"`
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, arg.Lat, arg.Lng)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM locations
Where id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const deleteXMLBulkLocation = `-- name: DeleteXMLBulkLocation :exec
DELETE FROM locations
Where id = ANY($1::bigint[])
`

func (q *Queries) DeleteXMLBulkLocation(ctx context.Context, idsToDelete []int64) error {
	_, err := q.db.Exec(ctx, deleteXMLBulkLocation, idsToDelete)
	return err
}

const getAllLocation = `-- name: GetAllLocation :many
SELECT id, lat, lng, created_at, updated_at FROM locations
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllLocationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllLocation(ctx context.Context, arg GetAllLocationParams) ([]Location, error) {
	rows, err := q.db.Query(ctx, getAllLocation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Lat,
			&i.Lng,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocation = `-- name: GetLocation :one
SELECT id, lat, lng, created_at, updated_at FROM locations 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetLocation(ctx context.Context, limit int32) (Location, error) {
	row := q.db.QueryRow(ctx, getLocation, limit)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationByLatLng = `-- name: GetLocationByLatLng :one
SELECT id, lat, lng, created_at, updated_at FROM locations 
WHERE lat = $1 AND lng = $2
`

type GetLocationByLatLngParams struct {
	Lat string `json:"lat"`
	Lng string `json:"lng"`
}

func (q *Queries) GetLocationByLatLng(ctx context.Context, arg GetLocationByLatLngParams) (Location, error) {
	row := q.db.QueryRow(ctx, getLocationByLatLng, arg.Lat, arg.Lng)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocationFromViewByID = `-- name: GetLocationFromViewByID :one
SELECT country_id, state_id, city_id, community_id, sub_community_id FROM hierarchical_location_view
WHERE id = $1
`

type GetLocationFromViewByIDRow struct {
	CountryID      int64 `json:"country_id"`
	StateID        int64 `json:"state_id"`
	CityID         int64 `json:"city_id"`
	CommunityID    int64 `json:"community_id"`
	SubCommunityID int64 `json:"sub_community_id"`
}

func (q *Queries) GetLocationFromViewByID(ctx context.Context, id int64) (GetLocationFromViewByIDRow, error) {
	row := q.db.QueryRow(ctx, getLocationFromViewByID, id)
	var i GetLocationFromViewByIDRow
	err := row.Scan(
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.SubCommunityID,
	)
	return i, err
}

const getLocationsStringByText = `-- name: GetLocationsStringByText :many
SELECT id, location_string AS address_string,
country_id, state_id, city_id, community_id, sub_community_id, property_map_id, last_attribute, location_without
FROM hierarchical_location_view
WHERE search_vector @@ to_tsquery('simple', $1::text)
AND country_id = $2
LIMIT $4
OFFSET $3
`

type GetLocationsStringByTextParams struct {
	Searchtext string      `json:"searchtext"`
	Countryid  int64       `json:"countryid"`
	Offset     pgtype.Int4 `json:"offset"`
	Limit      pgtype.Int4 `json:"limit"`
}

type GetLocationsStringByTextRow struct {
	ID              int64  `json:"id"`
	AddressString   string `json:"address_string"`
	CountryID       int64  `json:"country_id"`
	StateID         int64  `json:"state_id"`
	CityID          int64  `json:"city_id"`
	CommunityID     int64  `json:"community_id"`
	SubCommunityID  int64  `json:"sub_community_id"`
	PropertyMapID   int64  `json:"property_map_id"`
	LastAttribute   string `json:"last_attribute"`
	LocationWithout string `json:"location_without"`
}

func (q *Queries) GetLocationsStringByText(ctx context.Context, arg GetLocationsStringByTextParams) ([]GetLocationsStringByTextRow, error) {
	rows, err := q.db.Query(ctx, getLocationsStringByText,
		arg.Searchtext,
		arg.Countryid,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocationsStringByTextRow
	for rows.Next() {
		var i GetLocationsStringByTextRow
		if err := rows.Scan(
			&i.ID,
			&i.AddressString,
			&i.CountryID,
			&i.StateID,
			&i.CityID,
			&i.CommunityID,
			&i.SubCommunityID,
			&i.PropertyMapID,
			&i.LastAttribute,
			&i.LocationWithout,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationsStringCountByText = `-- name: GetLocationsStringCountByText :one
SELECT COUNT(id) AS total
FROM hierarchical_location_view
WHERE search_vector @@ to_tsquery('simple', $1::text)
AND country_id = $2
`

type GetLocationsStringCountByTextParams struct {
	Searchtext string `json:"searchtext"`
	Countryid  int64  `json:"countryid"`
}

func (q *Queries) GetLocationsStringCountByText(ctx context.Context, arg GetLocationsStringCountByTextParams) (int64, error) {
	row := q.db.QueryRow(ctx, getLocationsStringCountByText, arg.Searchtext, arg.Countryid)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE locations
SET lat = $2, lng =  $3
 
Where id = $1
RETURNING id, lat, lng, created_at, updated_at
`

type UpdateLocationParams struct {
	ID  int64  `json:"id"`
	Lat string `json:"lat"`
	Lng string `json:"lng"`
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, updateLocation, arg.ID, arg.Lat, arg.Lng)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Lat,
		&i.Lng,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
