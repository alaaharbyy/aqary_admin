// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_booking_portal.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotelBookingPortal = `-- name: CreateHotelBookingPortal :one
INSERT INTO hotel_booking_portal(ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status)
VALUES($1, $2, $3, $4, $5, $6,$7,$8,$9) RETURNING id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status
`

type CreateHotelBookingPortalParams struct {
	RefNo               string             `json:"ref_no"`
	HotelRoomsID        int64              `json:"hotel_rooms_id"`
	BookingPortalsID    int64              `json:"booking_portals_id"`
	ListingUrl          string             `json:"listing_url"`
	PriceNight          float64            `json:"price_night"`
	HotelBookingPromoID int64              `json:"hotel_booking_promo_id"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	Status              int64              `json:"status"`
}

func (q *Queries) CreateHotelBookingPortal(ctx context.Context, arg CreateHotelBookingPortalParams) (HotelBookingPortal, error) {
	row := q.db.QueryRow(ctx, createHotelBookingPortal,
		arg.RefNo,
		arg.HotelRoomsID,
		arg.BookingPortalsID,
		arg.ListingUrl,
		arg.PriceNight,
		arg.HotelBookingPromoID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
	)
	var i HotelBookingPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HotelRoomsID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.PriceNight,
		&i.HotelBookingPromoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getAllHotelBookingPortals = `-- name: GetAllHotelBookingPortals :many
SELECT id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status FROM hotel_booking_portal
`

func (q *Queries) GetAllHotelBookingPortals(ctx context.Context) ([]HotelBookingPortal, error) {
	rows, err := q.db.Query(ctx, getAllHotelBookingPortals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HotelBookingPortal
	for rows.Next() {
		var i HotelBookingPortal
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HotelRoomsID,
			&i.BookingPortalsID,
			&i.ListingUrl,
			&i.PriceNight,
			&i.HotelBookingPromoID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingPortal = `-- name: GetHotelBookingPortal :many
SELECT 
	hotel_booking_portal.id,
        hotel_booking_portal.ref_no,
        hotel_booking_portal.hotel_rooms_id,
        hotel_booking_portal.listing_url,
        hotel_booking_portal.hotel_booking_promo_id,
	booking_portals.portal_name,
	booking_portals.portal_url,
	hotel_booking_portal.price_night,
	hotel_booking_portal.status
FROM 
	hotel_booking_portal
INNER JOIN 
		booking_portals ON hotel_booking_portal.booking_portals_id = booking_portals.id
WHERE 
	hotel_booking_portal.status!=6
ORDER BY 
	hotel_booking_portal.id	
LIMIT $1
OFFSET $2
`

type GetHotelBookingPortalParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetHotelBookingPortalRow struct {
	ID                  int64   `json:"id"`
	RefNo               string  `json:"ref_no"`
	HotelRoomsID        int64   `json:"hotel_rooms_id"`
	ListingUrl          string  `json:"listing_url"`
	HotelBookingPromoID int64   `json:"hotel_booking_promo_id"`
	PortalName          string  `json:"portal_name"`
	PortalUrl           string  `json:"portal_url"`
	PriceNight          float64 `json:"price_night"`
	Status              int64   `json:"status"`
}

func (q *Queries) GetHotelBookingPortal(ctx context.Context, arg GetHotelBookingPortalParams) ([]GetHotelBookingPortalRow, error) {
	rows, err := q.db.Query(ctx, getHotelBookingPortal, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHotelBookingPortalRow
	for rows.Next() {
		var i GetHotelBookingPortalRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HotelRoomsID,
			&i.ListingUrl,
			&i.HotelBookingPromoID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PriceNight,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingPortalActionButton = `-- name: GetHotelBookingPortalActionButton :many
SELECT 
	hbp.id,
	hbp.ref_no,
	bp.portal_logo,
	bp.portal_url,
	hbp.price_night
FROM	hotel_booking_portal AS hbp 
INNER JOIN
		  booking_portals AS bp ON hbp.booking_portals_id =  bp.id
WHERE 
	hbp.status!=6
ORDER BY 
		hbp.id 
LIMIT $1
OFFSET $2
`

type GetHotelBookingPortalActionButtonParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetHotelBookingPortalActionButtonRow struct {
	ID         int64   `json:"id"`
	RefNo      string  `json:"ref_no"`
	PortalLogo string  `json:"portal_logo"`
	PortalUrl  string  `json:"portal_url"`
	PriceNight float64 `json:"price_night"`
}

func (q *Queries) GetHotelBookingPortalActionButton(ctx context.Context, arg GetHotelBookingPortalActionButtonParams) ([]GetHotelBookingPortalActionButtonRow, error) {
	rows, err := q.db.Query(ctx, getHotelBookingPortalActionButton, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHotelBookingPortalActionButtonRow
	for rows.Next() {
		var i GetHotelBookingPortalActionButtonRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.PortalLogo,
			&i.PortalUrl,
			&i.PriceNight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingPortalById = `-- name: GetHotelBookingPortalById :one
SELECT id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status FROM hotel_booking_portal WHERE id = $1
`

func (q *Queries) GetHotelBookingPortalById(ctx context.Context, id int64) (HotelBookingPortal, error) {
	row := q.db.QueryRow(ctx, getHotelBookingPortalById, id)
	var i HotelBookingPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HotelRoomsID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.PriceNight,
		&i.HotelBookingPromoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getNumberOfHotelBookingPortal = `-- name: GetNumberOfHotelBookingPortal :one
SELECT count(id) 
FROM hotel_booking_portal
WHERE hotel_booking_portal.status!=6
`

func (q *Queries) GetNumberOfHotelBookingPortal(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfHotelBookingPortal)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateHotelBookingPortal = `-- name: UpdateHotelBookingPortal :one
UPDATE hotel_booking_portal
SET ref_no = $2,
    hotel_rooms_id = $3,
    booking_portals_id = $4,
    listing_url = $5,
    price_night = $6,
    hotel_booking_promo_id = $7,
    updated_at = $8,
    status = $9
WHERE id = $1
RETURNING id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status
`

type UpdateHotelBookingPortalParams struct {
	ID                  int64              `json:"id"`
	RefNo               string             `json:"ref_no"`
	HotelRoomsID        int64              `json:"hotel_rooms_id"`
	BookingPortalsID    int64              `json:"booking_portals_id"`
	ListingUrl          string             `json:"listing_url"`
	PriceNight          float64            `json:"price_night"`
	HotelBookingPromoID int64              `json:"hotel_booking_promo_id"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	Status              int64              `json:"status"`
}

func (q *Queries) UpdateHotelBookingPortal(ctx context.Context, arg UpdateHotelBookingPortalParams) (HotelBookingPortal, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingPortal,
		arg.ID,
		arg.RefNo,
		arg.HotelRoomsID,
		arg.BookingPortalsID,
		arg.ListingUrl,
		arg.PriceNight,
		arg.HotelBookingPromoID,
		arg.UpdatedAt,
		arg.Status,
	)
	var i HotelBookingPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HotelRoomsID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.PriceNight,
		&i.HotelBookingPromoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHotelBookingPortalPriceNight = `-- name: UpdateHotelBookingPortalPriceNight :one
UPDATE 
		hotel_booking_portal 
SET
	price_night =$2
WHERE 
	id=$1
RETURNING id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status
`

type UpdateHotelBookingPortalPriceNightParams struct {
	ID         int64   `json:"id"`
	PriceNight float64 `json:"price_night"`
}

func (q *Queries) UpdateHotelBookingPortalPriceNight(ctx context.Context, arg UpdateHotelBookingPortalPriceNightParams) (HotelBookingPortal, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingPortalPriceNight, arg.ID, arg.PriceNight)
	var i HotelBookingPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HotelRoomsID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.PriceNight,
		&i.HotelBookingPromoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHotelBookingPortalStatus = `-- name: UpdateHotelBookingPortalStatus :one
UPDATE hotel_booking_portal
SET status = $2
WHERE id = $1
RETURNING id, ref_no, hotel_rooms_id, booking_portals_id, listing_url, price_night, hotel_booking_promo_id, created_at, updated_at, status
`

type UpdateHotelBookingPortalStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateHotelBookingPortalStatus(ctx context.Context, arg UpdateHotelBookingPortalStatusParams) (HotelBookingPortal, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingPortalStatus, arg.ID, arg.Status)
	var i HotelBookingPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HotelRoomsID,
		&i.BookingPortalsID,
		&i.ListingUrl,
		&i.PriceNight,
		&i.HotelBookingPromoID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
