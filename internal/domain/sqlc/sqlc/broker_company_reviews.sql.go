// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyReview = `-- name: CreateBrokerCompanyReview :one
INSERT INTO broker_company_reviews (
    rating,
    review,
    profiles_id,
    status,
    broker_companies_id,
    created_at,
    updated_at,
    users_id

)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, rating, review, profiles_id, status, broker_companies_id, created_at, updated_at, users_id
`

type CreateBrokerCompanyReviewParams struct {
	Rating            string    `json:"rating"`
	Review            string    `json:"review"`
	ProfilesID        int64     `json:"profiles_id"`
	Status            int64     `json:"status"`
	BrokerCompaniesID int64     `json:"broker_companies_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	UsersID           int64     `json:"users_id"`
}

func (q *Queries) CreateBrokerCompanyReview(ctx context.Context, arg CreateBrokerCompanyReviewParams) (BrokerCompanyReview, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyReview,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.BrokerCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteBrokerCompanyReview = `-- name: DeleteBrokerCompanyReview :exec
DELETE FROM broker_company_reviews
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyReview, id)
	return err
}

const getAllBrokerCompanyReview = `-- name: GetAllBrokerCompanyReview :many
SELECT id, rating, review, profiles_id, status, broker_companies_id, created_at, updated_at, users_id FROM broker_company_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyReviewParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyReview(ctx context.Context, arg GetAllBrokerCompanyReviewParams) ([]BrokerCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyReview, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyReview
	for rows.Next() {
		var i BrokerCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.BrokerCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyReviewByCountry = `-- name: GetAllBrokerCompanyReviewByCountry :many
SELECT id, rating, review, profiles_id, status, broker_companies_id, created_at, updated_at, users_id FROM broker_company_reviews 
WHERE broker_companies_id = $3 LIMIT $1 OFFSET $2
`

type GetAllBrokerCompanyReviewByCountryParams struct {
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
	BrokerCompaniesID int64 `json:"broker_companies_id"`
}

func (q *Queries) GetAllBrokerCompanyReviewByCountry(ctx context.Context, arg GetAllBrokerCompanyReviewByCountryParams) ([]BrokerCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyReviewByCountry, arg.Limit, arg.Offset, arg.BrokerCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyReview
	for rows.Next() {
		var i BrokerCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.BrokerCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgBrokerCompanyReviews = `-- name: GetAvgBrokerCompanyReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1) FROM broker_company_reviews WHERE broker_companies_id = $1
`

func (q *Queries) GetAvgBrokerCompanyReviews(ctx context.Context, brokerCompaniesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgBrokerCompanyReviews, brokerCompaniesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getBrokerCompanyReview = `-- name: GetBrokerCompanyReview :one
SELECT id, rating, review, profiles_id, status, broker_companies_id, created_at, updated_at, users_id FROM broker_company_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompanyReview(ctx context.Context, limit int32) (BrokerCompanyReview, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyReview, limit)
	var i BrokerCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const updateBrokerCompanyReview = `-- name: UpdateBrokerCompanyReview :one
UPDATE broker_company_reviews
SET    rating = $2,
    review = $3,
    profiles_id = $4,
    status = $5,
    broker_companies_id = $6,
    created_at = $7,
    updated_at = $8,
    users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, broker_companies_id, created_at, updated_at, users_id
`

type UpdateBrokerCompanyReviewParams struct {
	ID                int64     `json:"id"`
	Rating            string    `json:"rating"`
	Review            string    `json:"review"`
	ProfilesID        int64     `json:"profiles_id"`
	Status            int64     `json:"status"`
	BrokerCompaniesID int64     `json:"broker_companies_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
	UsersID           int64     `json:"users_id"`
}

func (q *Queries) UpdateBrokerCompanyReview(ctx context.Context, arg UpdateBrokerCompanyReviewParams) (BrokerCompanyReview, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyReview,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.BrokerCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
