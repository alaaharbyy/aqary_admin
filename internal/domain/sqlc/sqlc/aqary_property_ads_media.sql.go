// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_property_ads_media.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const aqaryPropertyAdsMediaDeleteStatusUpdate = `-- name: AqaryPropertyAdsMediaDeleteStatusUpdate :one
UPDATE aqary_property_ads_media SET is_deleted = $2 WHERE id = $1 RETURNING id, aqary_property_ads, media_type, media_url, upload_date, is_deleted
`

type AqaryPropertyAdsMediaDeleteStatusUpdateParams struct {
	ID        int64       `json:"id"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) AqaryPropertyAdsMediaDeleteStatusUpdate(ctx context.Context, arg AqaryPropertyAdsMediaDeleteStatusUpdateParams) (AqaryPropertyAdsMedium, error) {
	row := q.db.QueryRow(ctx, aqaryPropertyAdsMediaDeleteStatusUpdate, arg.ID, arg.IsDeleted)
	var i AqaryPropertyAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryPropertyAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const createAqaryPropertyAdsMedia = `-- name: CreateAqaryPropertyAdsMedia :one
INSERT INTO aqary_property_ads_media (aqary_property_ads,media_type,media_url,is_deleted)
VALUES ($1,$2,$3,false) RETURNING id, aqary_property_ads, media_type, media_url, upload_date, is_deleted
`

type CreateAqaryPropertyAdsMediaParams struct {
	AqaryPropertyAds int64  `json:"aqary_property_ads"`
	MediaType        int64  `json:"media_type"`
	MediaUrl         string `json:"media_url"`
}

func (q *Queries) CreateAqaryPropertyAdsMedia(ctx context.Context, arg CreateAqaryPropertyAdsMediaParams) (AqaryPropertyAdsMedium, error) {
	row := q.db.QueryRow(ctx, createAqaryPropertyAdsMedia, arg.AqaryPropertyAds, arg.MediaType, arg.MediaUrl)
	var i AqaryPropertyAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryPropertyAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const deleteAqaryPropertyAdsMedia = `-- name: DeleteAqaryPropertyAdsMedia :one
DELETE FROM aqary_property_ads_media WHERE id = $1 RETURNING id, aqary_property_ads, media_type, media_url, upload_date, is_deleted
`

func (q *Queries) DeleteAqaryPropertyAdsMedia(ctx context.Context, id int64) (AqaryPropertyAdsMedium, error) {
	row := q.db.QueryRow(ctx, deleteAqaryPropertyAdsMedia, id)
	var i AqaryPropertyAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryPropertyAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const deleteAqaryPropertyAdsMediaByAdID = `-- name: DeleteAqaryPropertyAdsMediaByAdID :many
DELETE FROM aqary_property_ads_media WHERE aqary_property_ads = $1 RETURNING id, aqary_property_ads, media_type, media_url, upload_date, is_deleted
`

func (q *Queries) DeleteAqaryPropertyAdsMediaByAdID(ctx context.Context, aqaryPropertyAds int64) ([]AqaryPropertyAdsMedium, error) {
	rows, err := q.db.Query(ctx, deleteAqaryPropertyAdsMediaByAdID, aqaryPropertyAds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryPropertyAdsMedium
	for rows.Next() {
		var i AqaryPropertyAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryPropertyAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAqaryPropertyAdsMedia = `-- name: GetAllAqaryPropertyAdsMedia :many
SELECT id, aqary_property_ads, media_type, media_url, upload_date, is_deleted FROM aqary_property_ads_media WHERE is_deleted = $3 LIMIT $1 OFFSET $2
`

type GetAllAqaryPropertyAdsMediaParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAllAqaryPropertyAdsMedia(ctx context.Context, arg GetAllAqaryPropertyAdsMediaParams) ([]AqaryPropertyAdsMedium, error) {
	rows, err := q.db.Query(ctx, getAllAqaryPropertyAdsMedia, arg.Limit, arg.Offset, arg.IsDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryPropertyAdsMedium
	for rows.Next() {
		var i AqaryPropertyAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryPropertyAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryPropertyAdsMediaByAds = `-- name: GetAqaryPropertyAdsMediaByAds :many
SELECT id, aqary_property_ads, media_type, media_url, upload_date, is_deleted FROM aqary_property_ads_media WHERE aqary_property_ads = $3 AND is_deleted = $4 LIMIT $1 OFFSET $2
`

type GetAqaryPropertyAdsMediaByAdsParams struct {
	Limit            int32       `json:"limit"`
	Offset           int32       `json:"offset"`
	AqaryPropertyAds int64       `json:"aqary_property_ads"`
	IsDeleted        pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAqaryPropertyAdsMediaByAds(ctx context.Context, arg GetAqaryPropertyAdsMediaByAdsParams) ([]AqaryPropertyAdsMedium, error) {
	rows, err := q.db.Query(ctx, getAqaryPropertyAdsMediaByAds,
		arg.Limit,
		arg.Offset,
		arg.AqaryPropertyAds,
		arg.IsDeleted,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryPropertyAdsMedium
	for rows.Next() {
		var i AqaryPropertyAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryPropertyAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryPropertyAdsMediaByID = `-- name: GetAqaryPropertyAdsMediaByID :one
SELECT id, aqary_property_ads, media_type, media_url, upload_date, is_deleted FROM aqary_property_ads_media WHERE id = $1 AND is_deleted = $2
`

type GetAqaryPropertyAdsMediaByIDParams struct {
	ID        int64       `json:"id"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAqaryPropertyAdsMediaByID(ctx context.Context, arg GetAqaryPropertyAdsMediaByIDParams) (AqaryPropertyAdsMedium, error) {
	row := q.db.QueryRow(ctx, getAqaryPropertyAdsMediaByID, arg.ID, arg.IsDeleted)
	var i AqaryPropertyAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryPropertyAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const updateAqaryPropertyAdsMedia = `-- name: UpdateAqaryPropertyAdsMedia :one
UPDATE aqary_property_ads_media SET aqary_property_ads = $2, media_type = $3, media_url=$4, is_deleted = $5 WHERE id = $1 RETURNING id, aqary_property_ads, media_type, media_url, upload_date, is_deleted
`

type UpdateAqaryPropertyAdsMediaParams struct {
	ID               int64       `json:"id"`
	AqaryPropertyAds int64       `json:"aqary_property_ads"`
	MediaType        int64       `json:"media_type"`
	MediaUrl         string      `json:"media_url"`
	IsDeleted        pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) UpdateAqaryPropertyAdsMedia(ctx context.Context, arg UpdateAqaryPropertyAdsMediaParams) (AqaryPropertyAdsMedium, error) {
	row := q.db.QueryRow(ctx, updateAqaryPropertyAdsMedia,
		arg.ID,
		arg.AqaryPropertyAds,
		arg.MediaType,
		arg.MediaUrl,
		arg.IsDeleted,
	)
	var i AqaryPropertyAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryPropertyAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}
