// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_property_ads.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPropertyAd = `-- name: AddPropertyAd :one
INSERT INTO aqary_property_ads (
    company_types_id, companies_id, is_branch, title, property_unit_id,
     ads_category, created_by,is_property_unit_branch,
      ads_schema,ads_status,property_hub_category, is_public, is_verified,tags) VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,$12,$13, $14) RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags, is_property_unit_branch, property_hub_category
`

type AddPropertyAdParams struct {
	CompanyTypesID       int64       `json:"company_types_id"`
	CompaniesID          int64       `json:"companies_id"`
	IsBranch             pgtype.Bool `json:"is_branch"`
	Title                string      `json:"title"`
	PropertyUnitID       int64       `json:"property_unit_id"`
	AdsCategory          string      `json:"ads_category"`
	CreatedBy            int64       `json:"created_by"`
	IsPropertyUnitBranch pgtype.Bool `json:"is_property_unit_branch"`
	AdsSchema            string      `json:"ads_schema"`
	AdsStatus            int64       `json:"ads_status"`
	PropertyHubCategory  pgtype.Int8 `json:"property_hub_category"`
	IsPublic             pgtype.Bool `json:"is_public"`
	IsVerified           pgtype.Bool `json:"is_verified"`
	Tags                 []int64     `json:"tags"`
}

func (q *Queries) AddPropertyAd(ctx context.Context, arg AddPropertyAdParams) (AqaryPropertyAd, error) {
	row := q.db.QueryRow(ctx, addPropertyAd,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.PropertyUnitID,
		arg.AdsCategory,
		arg.CreatedBy,
		arg.IsPropertyUnitBranch,
		arg.AdsSchema,
		arg.AdsStatus,
		arg.PropertyHubCategory,
		arg.IsPublic,
		arg.IsVerified,
		arg.Tags,
	)
	var i AqaryPropertyAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.PropertyUnitID,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
		&i.IsPropertyUnitBranch,
		&i.PropertyHubCategory,
	)
	return i, err
}

const deletePropertyAd = `-- name: DeletePropertyAd :exec
DELETE FROM aqary_property_ads WHERE id = $1
`

func (q *Queries) DeletePropertyAd(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyAd, id)
	return err
}

const getAllPropertyAds = `-- name: GetAllPropertyAds :many
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, is_property_unit_branch, property_hub_category, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_ads app JOIN users u ON app.created_by = u.id LIMIT $1 OFFSET $2
`

type GetAllPropertyAdsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPropertyAdsRow struct {
	ID                   int64              `json:"id"`
	Title                string             `json:"title"`
	ProjectID            pgtype.Int8        `json:"project_id"`
	AdsCategory          string             `json:"ads_category"`
	CompanyTypesID       int64              `json:"company_types_id"`
	CompaniesID          int64              `json:"companies_id"`
	IsBranch             pgtype.Bool        `json:"is_branch"`
	IsProjectBranch      pgtype.Bool        `json:"is_project_branch"`
	IsProperty           pgtype.Bool        `json:"is_property"`
	IsPropertyBranch     pgtype.Bool        `json:"is_property_branch"`
	PropertyUnitID       int64              `json:"property_unit_id"`
	AdsStatus            int64              `json:"ads_status"`
	AdsSchema            string             `json:"ads_schema"`
	CreatedBy            int64              `json:"created_by"`
	CreatedAt            time.Time          `json:"created_at"`
	IsPublic             pgtype.Bool        `json:"is_public"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	Tags                 []int64            `json:"tags"`
	IsPropertyUnitBranch pgtype.Bool        `json:"is_property_unit_branch"`
	PropertyHubCategory  pgtype.Int8        `json:"property_hub_category"`
	ID_2                 int64              `json:"id_2"`
	Email                string             `json:"email"`
	Username             string             `json:"username"`
	Password             string             `json:"password"`
	Status               int64              `json:"status"`
	RolesID              pgtype.Int8        `json:"roles_id"`
	UserTypesID          int64              `json:"user_types_id"`
	SocialLogin          pgtype.Text        `json:"social_login"`
	ShowHideDetails      pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince      pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2         pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2          time.Time          `json:"created_at_2"`
	UpdatedAt            time.Time          `json:"updated_at"`
	PhoneNumber          pgtype.Text        `json:"phone_number"`
	IsPhoneVerified      pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified      pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany        pgtype.Int8        `json:"active_company"`
	CountryCode          pgtype.Int8        `json:"country_code"`
	ProfileViews         int64              `json:"profile_views"`
}

func (q *Queries) GetAllPropertyAds(ctx context.Context, arg GetAllPropertyAdsParams) ([]GetAllPropertyAdsRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyAds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyAdsRow
	for rows.Next() {
		var i GetAllPropertyAdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProjectID,
			&i.AdsCategory,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.IsProjectBranch,
			&i.IsProperty,
			&i.IsPropertyBranch,
			&i.PropertyUnitID,
			&i.AdsStatus,
			&i.AdsSchema,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.IsPublic,
			&i.IsVerified,
			&i.Tags,
			&i.IsPropertyUnitBranch,
			&i.PropertyHubCategory,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPropertyAdsByPostedBy = `-- name: GetAllPropertyAdsByPostedBy :many
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, is_property_unit_branch, property_hub_category, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_ads app JOIN users u ON app.created_by = u.id WHERE app.created_by = $3 LIMIT $1 OFFSET $2
`

type GetAllPropertyAdsByPostedByParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CreatedBy int64 `json:"created_by"`
}

type GetAllPropertyAdsByPostedByRow struct {
	ID                   int64              `json:"id"`
	Title                string             `json:"title"`
	ProjectID            pgtype.Int8        `json:"project_id"`
	AdsCategory          string             `json:"ads_category"`
	CompanyTypesID       int64              `json:"company_types_id"`
	CompaniesID          int64              `json:"companies_id"`
	IsBranch             pgtype.Bool        `json:"is_branch"`
	IsProjectBranch      pgtype.Bool        `json:"is_project_branch"`
	IsProperty           pgtype.Bool        `json:"is_property"`
	IsPropertyBranch     pgtype.Bool        `json:"is_property_branch"`
	PropertyUnitID       int64              `json:"property_unit_id"`
	AdsStatus            int64              `json:"ads_status"`
	AdsSchema            string             `json:"ads_schema"`
	CreatedBy            int64              `json:"created_by"`
	CreatedAt            time.Time          `json:"created_at"`
	IsPublic             pgtype.Bool        `json:"is_public"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	Tags                 []int64            `json:"tags"`
	IsPropertyUnitBranch pgtype.Bool        `json:"is_property_unit_branch"`
	PropertyHubCategory  pgtype.Int8        `json:"property_hub_category"`
	ID_2                 int64              `json:"id_2"`
	Email                string             `json:"email"`
	Username             string             `json:"username"`
	Password             string             `json:"password"`
	Status               int64              `json:"status"`
	RolesID              pgtype.Int8        `json:"roles_id"`
	UserTypesID          int64              `json:"user_types_id"`
	SocialLogin          pgtype.Text        `json:"social_login"`
	ShowHideDetails      pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince      pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2         pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2          time.Time          `json:"created_at_2"`
	UpdatedAt            time.Time          `json:"updated_at"`
	PhoneNumber          pgtype.Text        `json:"phone_number"`
	IsPhoneVerified      pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified      pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany        pgtype.Int8        `json:"active_company"`
	CountryCode          pgtype.Int8        `json:"country_code"`
	ProfileViews         int64              `json:"profile_views"`
}

func (q *Queries) GetAllPropertyAdsByPostedBy(ctx context.Context, arg GetAllPropertyAdsByPostedByParams) ([]GetAllPropertyAdsByPostedByRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyAdsByPostedBy, arg.Limit, arg.Offset, arg.CreatedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyAdsByPostedByRow
	for rows.Next() {
		var i GetAllPropertyAdsByPostedByRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProjectID,
			&i.AdsCategory,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.IsProjectBranch,
			&i.IsProperty,
			&i.IsPropertyBranch,
			&i.PropertyUnitID,
			&i.AdsStatus,
			&i.AdsSchema,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.IsPublic,
			&i.IsVerified,
			&i.Tags,
			&i.IsPropertyUnitBranch,
			&i.PropertyHubCategory,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyAdByID = `-- name: GetPropertyAdByID :one
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, is_property_unit_branch, property_hub_category, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_ads app JOIN users u ON app.created_by = u.id WHERE app.id = $1 LIMIT 1
`

type GetPropertyAdByIDRow struct {
	ID                   int64              `json:"id"`
	Title                string             `json:"title"`
	ProjectID            pgtype.Int8        `json:"project_id"`
	AdsCategory          string             `json:"ads_category"`
	CompanyTypesID       int64              `json:"company_types_id"`
	CompaniesID          int64              `json:"companies_id"`
	IsBranch             pgtype.Bool        `json:"is_branch"`
	IsProjectBranch      pgtype.Bool        `json:"is_project_branch"`
	IsProperty           pgtype.Bool        `json:"is_property"`
	IsPropertyBranch     pgtype.Bool        `json:"is_property_branch"`
	PropertyUnitID       int64              `json:"property_unit_id"`
	AdsStatus            int64              `json:"ads_status"`
	AdsSchema            string             `json:"ads_schema"`
	CreatedBy            int64              `json:"created_by"`
	CreatedAt            time.Time          `json:"created_at"`
	IsPublic             pgtype.Bool        `json:"is_public"`
	IsVerified           pgtype.Bool        `json:"is_verified"`
	Tags                 []int64            `json:"tags"`
	IsPropertyUnitBranch pgtype.Bool        `json:"is_property_unit_branch"`
	PropertyHubCategory  pgtype.Int8        `json:"property_hub_category"`
	ID_2                 int64              `json:"id_2"`
	Email                string             `json:"email"`
	Username             string             `json:"username"`
	Password             string             `json:"password"`
	Status               int64              `json:"status"`
	RolesID              pgtype.Int8        `json:"roles_id"`
	UserTypesID          int64              `json:"user_types_id"`
	SocialLogin          pgtype.Text        `json:"social_login"`
	ShowHideDetails      pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince      pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2         pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2          time.Time          `json:"created_at_2"`
	UpdatedAt            time.Time          `json:"updated_at"`
	PhoneNumber          pgtype.Text        `json:"phone_number"`
	IsPhoneVerified      pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified      pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany        pgtype.Int8        `json:"active_company"`
	CountryCode          pgtype.Int8        `json:"country_code"`
	ProfileViews         int64              `json:"profile_views"`
}

func (q *Queries) GetPropertyAdByID(ctx context.Context, id int64) (GetPropertyAdByIDRow, error) {
	row := q.db.QueryRow(ctx, getPropertyAdByID, id)
	var i GetPropertyAdByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.PropertyUnitID,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
		&i.IsPropertyUnitBranch,
		&i.PropertyHubCategory,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified_2,
		&i.CreatedAt_2,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const updatePropertyAd = `-- name: UpdatePropertyAd :one
UPDATE aqary_property_ads SET company_types_id = $2 ,companies_id=$3,is_branch=$4,title=$5,property_unit_id=$6,ads_category=$7,created_by=$8,is_property_unit_branch=$9,ads_schema=$10,ads_status=$11,property_hub_category=$12, tags=$13 WHERE id = $1 RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags, is_property_unit_branch, property_hub_category
`

type UpdatePropertyAdParams struct {
	ID                   int64       `json:"id"`
	CompanyTypesID       int64       `json:"company_types_id"`
	CompaniesID          int64       `json:"companies_id"`
	IsBranch             pgtype.Bool `json:"is_branch"`
	Title                string      `json:"title"`
	PropertyUnitID       int64       `json:"property_unit_id"`
	AdsCategory          string      `json:"ads_category"`
	CreatedBy            int64       `json:"created_by"`
	IsPropertyUnitBranch pgtype.Bool `json:"is_property_unit_branch"`
	AdsSchema            string      `json:"ads_schema"`
	AdsStatus            int64       `json:"ads_status"`
	PropertyHubCategory  pgtype.Int8 `json:"property_hub_category"`
	Tags                 []int64     `json:"tags"`
}

func (q *Queries) UpdatePropertyAd(ctx context.Context, arg UpdatePropertyAdParams) (AqaryPropertyAd, error) {
	row := q.db.QueryRow(ctx, updatePropertyAd,
		arg.ID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.PropertyUnitID,
		arg.AdsCategory,
		arg.CreatedBy,
		arg.IsPropertyUnitBranch,
		arg.AdsSchema,
		arg.AdsStatus,
		arg.PropertyHubCategory,
		arg.Tags,
	)
	var i AqaryPropertyAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.PropertyUnitID,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
		&i.IsPropertyUnitBranch,
		&i.PropertyHubCategory,
	)
	return i, err
}

const updatePropertyAdIsVerified = `-- name: UpdatePropertyAdIsVerified :one
UPDATE aqary_property_ads SET is_verified = $2 WHERE id = $1 RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, is_property, is_property_branch, property_unit_id, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags, is_property_unit_branch, property_hub_category
`

type UpdatePropertyAdIsVerifiedParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdatePropertyAdIsVerified(ctx context.Context, arg UpdatePropertyAdIsVerifiedParams) (AqaryPropertyAd, error) {
	row := q.db.QueryRow(ctx, updatePropertyAdIsVerified, arg.ID, arg.IsVerified)
	var i AqaryPropertyAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.PropertyUnitID,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
		&i.IsPropertyUnitBranch,
		&i.PropertyHubCategory,
	)
	return i, err
}
