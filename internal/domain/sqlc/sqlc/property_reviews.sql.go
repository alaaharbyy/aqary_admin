// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_reviews.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllPropertyReviews = `-- name: GetAllPropertyReviews :many
with x as (
SELECT fp.id,fp.category,pf.is_branch,fp.users_id AS usersid,fp.status,fp.property_name
FROM freelancers_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id
WHERE fp.users_id=$1 AND fp.status!=6
UNION
SELECT bcap.id,bcap.category,pf.is_branch,bcap.users_id AS usersid,bcap.status,bcap.property_name
FROM broker_company_agent_properties bcap
JOIN property_types pt ON bcap.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = bcap.id
WHERE bcap.users_id=$1 AND bcap.status!=6
UNION
SELECT bcapb.id,bcapb.category,pf.is_branch,bcapb.users_id AS usersid,bcapb.status,bcapb.property_name
FROM broker_company_agent_properties_branch bcapb
JOIN property_types pt ON bcapb.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = bcapb.id
WHERE bcapb.users_id=$1 AND bcapb.status!=6
UNION
SELECT op.id,op.category,pf.is_branch ,op.users_id AS usersid,op.status,op.property_name
FROM owner_properties op
JOIN property_types pt ON op.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = op.id
WHERE op.users_id=$1 AND op.status!=6
UNION
SELECT afp.id,afp.category, pf.is_branch,afp.users_id AS usersid,afp.status,afp.property_name
FROM agricultural_freelancer_properties afp
JOIN property_types pt ON afp.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = afp.id
WHERE afp.users_id=$1 AND afp.status!=6
UNION
SELECT abap.id,abap.category,pf.is_branch,abap.users_id AS usersid,abap.status,abap.property_name
FROM agricultural_broker_agent_properties abap
JOIN property_types pt ON abap.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = abap.id
WHERE abap.users_id=$1 AND abap.status!=6
UNION
SELECT abapb.id,abapb.category,pf.is_branch,abapb.users_id AS usersid,abapb.status,abapb.property_name
FROM agricultural_broker_agent_properties_branch abapb
JOIN property_types pt ON abapb.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = abapb.id
WHERE abapb.users_id=$1 AND abapb.status!=6
UNION
SELECT aop.id,aop.category, pf.is_branch,aop.users_id AS usersid,aop.status,aop.property_name
FROM agricultural_owner_properties aop
JOIN property_types pt ON aop.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = aop.id
WHERE aop.users_id=$1 AND aop.status!=6
UNION
SELECT ifp.id,ifp.category,pf.is_branch,ifp.users_id AS usersid,ifp.status,ifp.property_name
FROM industrial_freelancer_properties ifp
JOIN property_types pt ON ifp.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ifp.id
WHERE ifp.users_id=$1 AND ifp.status!=6
UNION
SELECT ibap.id,ibap.category,pf.is_branch,ibap.users_id AS usersid,ibap.status,ibap.property_name
FROM industrial_broker_agent_properties ibap
JOIN property_types pt ON ibap.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ibap.id
WHERE ibap.users_id=$1 AND ibap.status!=6
UNION
SELECT ibapb.id, ibapb.category,pf.is_branch,ibapb.users_id AS usersid,ibapb.status,ibapb.property_name
FROM industrial_broker_agent_properties_branch ibapb
JOIN property_types pt ON ibapb.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ibapb.id
WHERE ibapb.users_id=$1 AND ibapb.status!=6
UNION
SELECT iop.id,iop.category,pf.is_branch,iop.users_id AS usersid,iop.status,iop.property_name
FROM industrial_owner_properties iop
JOIN property_types pt ON iop.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = iop.id
WHERE iop.users_id=$1 AND iop.status!=6
)Select pr.id, pr.ref_no, pr.property_unit_category, pr.is_branch, pr.property_unit_id, pr.property_clean, pr.property_location, pr.property_facilities, pr.property_security, pr.review, pr.reviewer, x.id as property_id, x.property_name,usersid,u.email,u.username from x
join property_reviews pr on pr.property_unit_id=x.id and pr.property_unit_category=x.category and pr.is_branch=x.is_branch
join users u on pr.reviewer=u.id
LIMIT $2
OFFSET $3
`

type GetAllPropertyReviewsParams struct {
	UsersID int64 `json:"users_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetAllPropertyReviewsRow struct {
	ID                   int64       `json:"id"`
	RefNo                string      `json:"ref_no"`
	PropertyUnitCategory string      `json:"property_unit_category"`
	IsBranch             pgtype.Bool `json:"is_branch"`
	PropertyUnitID       int64       `json:"property_unit_id"`
	PropertyClean        int32       `json:"property_clean"`
	PropertyLocation     int32       `json:"property_location"`
	PropertyFacilities   int32       `json:"property_facilities"`
	PropertySecurity     int32       `json:"property_security"`
	Review               string      `json:"review"`
	Reviewer             int64       `json:"reviewer"`
	PropertyID           int64       `json:"property_id"`
	PropertyName         string      `json:"property_name"`
	Usersid              int64       `json:"usersid"`
	Email                string      `json:"email"`
	Username             string      `json:"username"`
}

// freelancers_properties
// broker_company_agent_properties
// broker_company_agent_properties_branch
// owner_properties
// agricultural_freelancer_properties
// agricultural_broker_agent_properties
// agricultural_broker_agent_properties_branch
// agricultural_owner_properties
// industrial_freelancer_properties
// industrial_broker_agent_properties
// industrial_broker_agent_properties_branch
// industrial_owner_properties
func (q *Queries) GetAllPropertyReviews(ctx context.Context, arg GetAllPropertyReviewsParams) ([]GetAllPropertyReviewsRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyReviews, arg.UsersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyReviewsRow
	for rows.Next() {
		var i GetAllPropertyReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.PropertyUnitCategory,
			&i.IsBranch,
			&i.PropertyUnitID,
			&i.PropertyClean,
			&i.PropertyLocation,
			&i.PropertyFacilities,
			&i.PropertySecurity,
			&i.Review,
			&i.Reviewer,
			&i.PropertyID,
			&i.PropertyName,
			&i.Usersid,
			&i.Email,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPropertyReviews = `-- name: GetCountAllPropertyReviews :one
with x as (
SELECT fp.id,fp.category,pf.is_branch,fp.users_id AS usersid,fp.status,fp.property_name
FROM freelancers_properties fp
JOIN property_types pt ON fp.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id
WHERE fp.users_id=$1 AND fp.status!=6
UNION
SELECT bcap.id,bcap.category,pf.is_branch,bcap.users_id AS usersid,bcap.status,bcap.property_name
FROM broker_company_agent_properties bcap
JOIN property_types pt ON bcap.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = bcap.id
WHERE bcap.users_id=$1 AND bcap.status!=6
UNION
SELECT bcapb.id,bcapb.category,pf.is_branch,bcapb.users_id AS usersid,bcapb.status,bcapb.property_name
FROM broker_company_agent_properties_branch bcapb
JOIN property_types pt ON bcapb.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = bcapb.id
WHERE bcapb.users_id=$1 AND bcapb.status!=6
UNION
SELECT op.id,op.category,pf.is_branch ,op.users_id AS usersid,op.status,op.property_name
FROM owner_properties op
JOIN property_types pt ON op.property_types_id = pt.id
LEFT JOIN properties_facts pf ON pf.properties_id = op.id
WHERE op.users_id=$1 AND op.status!=6
UNION
SELECT afp.id,afp.category, pf.is_branch,afp.users_id AS usersid,afp.status,afp.property_name
FROM agricultural_freelancer_properties afp
JOIN property_types pt ON afp.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = afp.id
WHERE afp.users_id=$1 AND afp.status!=6
UNION
SELECT abap.id,abap.category,pf.is_branch,abap.users_id AS usersid,abap.status,abap.property_name
FROM agricultural_broker_agent_properties abap
JOIN property_types pt ON abap.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = abap.id
WHERE abap.users_id=$1 AND abap.status!=6
UNION
SELECT abapb.id,abapb.category,pf.is_branch,abapb.users_id AS usersid,abapb.status,abapb.property_name
FROM agricultural_broker_agent_properties_branch abapb
JOIN property_types pt ON abapb.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = abapb.id
WHERE abapb.users_id=$1 AND abapb.status!=6
UNION
SELECT aop.id,aop.category, pf.is_branch,aop.users_id AS usersid,aop.status,aop.property_name
FROM agricultural_owner_properties aop
JOIN property_types pt ON aop.property_types_id = pt.id
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = aop.id
WHERE aop.users_id=$1 AND aop.status!=6
UNION
SELECT ifp.id,ifp.category,pf.is_branch,ifp.users_id AS usersid,ifp.status,ifp.property_name
FROM industrial_freelancer_properties ifp
JOIN property_types pt ON ifp.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ifp.id
WHERE ifp.users_id=$1 AND ifp.status!=6
UNION
SELECT ibap.id,ibap.category,pf.is_branch,ibap.users_id AS usersid,ibap.status,ibap.property_name
FROM industrial_broker_agent_properties ibap
JOIN property_types pt ON ibap.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ibap.id
WHERE ibap.users_id=$1 AND ibap.status!=6
UNION
SELECT ibapb.id, ibapb.category,pf.is_branch,ibapb.users_id AS usersid,ibapb.status,ibapb.property_name
FROM industrial_broker_agent_properties_branch ibapb
JOIN property_types pt ON ibapb.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = ibapb.id
WHERE ibapb.users_id=$1 AND ibapb.status!=6
UNION
SELECT iop.id,iop.category,pf.is_branch,iop.users_id AS usersid,iop.status,iop.property_name
FROM industrial_owner_properties iop
JOIN property_types pt ON iop.property_types_id = pt.id
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = iop.id
WHERE iop.users_id=$1 AND iop.status!=6
 
)Select count(*) from x
join property_reviews pr on pr.property_unit_id=x.id and pr.property_unit_category=x.category and pr.is_branch=x.is_branch
join users u on pr.reviewer=u.id
`

// freelancers_properties
// broker_company_agent_properties
// broker_company_agent_properties_branch
// owner_properties
// agricultural_freelancer_properties
// agricultural_broker_agent_properties
// agricultural_broker_agent_properties_branch
// agricultural_owner_properties
// industrial_freelancer_properties
// industrial_broker_agent_properties
// industrial_broker_agent_properties_branch
// industrial_owner_properties
func (q *Queries) GetCountAllPropertyReviews(ctx context.Context, usersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPropertyReviews, usersID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
