// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: entity_service_location.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntityServiceLocation = `-- name: CreateEntityServiceLocation :one
INSERT INTO entity_service_locations (
  entity_id,
  entity_type_id,
  country_id,
  state_id,
  city_id,
  community_id,
  sub_community_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, entity_id, entity_type_id, country_id, state_id, city_id, community_id, sub_community_id, created_at, updated_at
`

type CreateEntityServiceLocationParams struct {
	EntityID       int64       `json:"entity_id"`
	EntityTypeID   int64       `json:"entity_type_id"`
	CountryID      int64       `json:"country_id"`
	StateID        int64       `json:"state_id"`
	CityID         int64       `json:"city_id"`
	CommunityID    pgtype.Int8 `json:"community_id"`
	SubCommunityID pgtype.Int8 `json:"sub_community_id"`
}

func (q *Queries) CreateEntityServiceLocation(ctx context.Context, arg CreateEntityServiceLocationParams) (EntityServiceLocation, error) {
	row := q.db.QueryRow(ctx, createEntityServiceLocation,
		arg.EntityID,
		arg.EntityTypeID,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CommunityID,
		arg.SubCommunityID,
	)
	var i EntityServiceLocation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEntityServiceLocation = `-- name: DeleteEntityServiceLocation :exec
DELETE FROM entity_service_locations
WHERE id = $1
`

func (q *Queries) DeleteEntityServiceLocation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEntityServiceLocation, id)
	return err
}

const getCountEntityServiceLocation = `-- name: GetCountEntityServiceLocation :one
SELECT count(*) FROM entity_service_locations
WHERE
entity_id = $1 AND entity_type_id = $2
`

type GetCountEntityServiceLocationParams struct {
	EntityID     int64 `json:"entity_id"`
	EntityTypeID int64 `json:"entity_type_id"`
}

func (q *Queries) GetCountEntityServiceLocation(ctx context.Context, arg GetCountEntityServiceLocationParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountEntityServiceLocation, arg.EntityID, arg.EntityTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getEntityServiceLocation = `-- name: GetEntityServiceLocation :one
SELECT id, entity_id, entity_type_id, country_id, state_id, city_id, community_id, sub_community_id, created_at, updated_at FROM entity_service_locations
WHERE id = $1
`

func (q *Queries) GetEntityServiceLocation(ctx context.Context, id int64) (EntityServiceLocation, error) {
	row := q.db.QueryRow(ctx, getEntityServiceLocation, id)
	var i EntityServiceLocation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntityServiceLocations = `-- name: ListEntityServiceLocations :many
SELECT id, entity_id, entity_type_id, country_id, state_id, city_id, community_id, sub_community_id, created_at, updated_at FROM entity_service_locations
WHERE
entity_id = $1 AND entity_type_id = $2
ORDER BY id
LIMIT $3 OFFSET $4
`

type ListEntityServiceLocationsParams struct {
	EntityID     int64 `json:"entity_id"`
	EntityTypeID int64 `json:"entity_type_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListEntityServiceLocations(ctx context.Context, arg ListEntityServiceLocationsParams) ([]EntityServiceLocation, error) {
	rows, err := q.db.Query(ctx, listEntityServiceLocations,
		arg.EntityID,
		arg.EntityTypeID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EntityServiceLocation
	for rows.Next() {
		var i EntityServiceLocation
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.EntityTypeID,
			&i.CountryID,
			&i.StateID,
			&i.CityID,
			&i.CommunityID,
			&i.SubCommunityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntityServiceLocation = `-- name: UpdateEntityServiceLocation :one
UPDATE entity_service_locations
SET
  entity_id = $2,
  entity_type_id = $3,
  country_id = $4,
  state_id = $5,
  city_id = $6,
  community_id = $7,
  sub_community_id = $8,
  updated_at = now()
WHERE id = $1
RETURNING id, entity_id, entity_type_id, country_id, state_id, city_id, community_id, sub_community_id, created_at, updated_at
`

type UpdateEntityServiceLocationParams struct {
	ID             int64       `json:"id"`
	EntityID       int64       `json:"entity_id"`
	EntityTypeID   int64       `json:"entity_type_id"`
	CountryID      int64       `json:"country_id"`
	StateID        int64       `json:"state_id"`
	CityID         int64       `json:"city_id"`
	CommunityID    pgtype.Int8 `json:"community_id"`
	SubCommunityID pgtype.Int8 `json:"sub_community_id"`
}

func (q *Queries) UpdateEntityServiceLocation(ctx context.Context, arg UpdateEntityServiceLocationParams) (EntityServiceLocation, error) {
	row := q.db.QueryRow(ctx, updateEntityServiceLocation,
		arg.ID,
		arg.EntityID,
		arg.EntityTypeID,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CommunityID,
		arg.SubCommunityID,
	)
	var i EntityServiceLocation
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
