// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: services_companies.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServicesCompany = `-- name: CreateServicesCompany :one
INSERT INTO services_companies (
    company_name,
    description,
    logo_url,
    addresses_id,
    email,
    phone_number,
    whatsapp_number,
    commercial_license_no,
    commercial_license_file_url,
    commercial_license_expiry,
    is_verified, 
    website_url,
    cover_image_url,
    tag_line,
    vat_no,
    vat_status,
    vat_file_url,
    facebook_profile_url,
    instagram_profile_url,
    twitter_profile_url,
    no_of_employees,
    users_id,
    linkedin_profile_url,
    company_rank,
    status,
    country_id,
    company_type,
    is_branch,
    created_at,
    updated_at,
    ref_no,
    commercial_license_registration_date,
    commercial_license_issue_date,
    extra_license_nos,
    extra_license_files,
    extra_license_names,
    extra_license_issue_date,
    extra_license_expiry_date,
    license_dcci_no,
    register_no,
    other_social_media,
    youtube_profile_url,
    bank_account_details_id,
    created_by
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, 
    $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36 , $37, $38, $39, $40, $41, $42, $43, $44
) RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media
`

type CreateServicesCompanyParams struct {
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CreatedBy                         int64              `json:"created_by"`
}

func (q *Queries) CreateServicesCompany(ctx context.Context, arg CreateServicesCompanyParams) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, createServicesCompany,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.BankAccountDetailsID,
		arg.CreatedBy,
	)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const deleteServicesCompany = `-- name: DeleteServicesCompany :exec
DELETE FROM services_companies
Where id = $1
`

func (q *Queries) DeleteServicesCompany(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServicesCompany, id)
	return err
}

const getAllInternationalExhibitions = `-- name: GetAllInternationalExhibitions :many
SELECT 
	ex.id,
	ex.ref_no,
	ex.title,
	c.country, 
	states.state,
	cities.city, 
	communities.community, 
	sub_communities.sub_community,
	ex.specific_address AS "address",
	ex.start_date,
	ex.end_date, 
	ex.event_banner_url AS "banner",
	ex.event_logo_url,
	ex.event_status,
	CASE 
		WHEN ex.hosted_company_type=3 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	services_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
		 WHEN ex.hosted_company_type=3 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	service_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )
	    WHEN ex.hosted_company_type=2 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	developer_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
		 WHEN ex.hosted_company_type=2 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	developer_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	product_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	product_companies_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
	END AS "hosted by"
FROM 
	exhibitions ex 
INNER JOIN 
	countries c
			 ON c.id=ex.countries_id 
INNER JOIN 
    cities
    		ON cities.id = ex.cities_id
INNER JOIN 
	communities 
			ON communities.id = ex.community_id
INNER JOIN 
	sub_communities 
			ON sub_communities.id = ex.sub_communities_id 
INNER JOIN 
	states
		ON states.id = ex.states_id
WHERE ex.event_status !=5 AND c.id != 1
ORDER BY ex.updated_at DESC , ex.id DESC
LIMIT $1 
OFFSET $2
`

type GetAllInternationalExhibitionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllInternationalExhibitionsRow struct {
	ID           int64       `json:"id"`
	RefNo        string      `json:"ref_no"`
	Title        string      `json:"title"`
	Country      string      `json:"country"`
	State        string      `json:"state"`
	City         string      `json:"city"`
	Community    string      `json:"community"`
	SubCommunity string      `json:"sub_community"`
	Address      string      `json:"address"`
	StartDate    time.Time   `json:"start_date"`
	EndDate      time.Time   `json:"end_date"`
	Banner       string      `json:"banner"`
	EventLogoUrl string      `json:"event_logo_url"`
	EventStatus  int64       `json:"event_status"`
	HostedBy     interface{} `json:"hosted by"`
}

func (q *Queries) GetAllInternationalExhibitions(ctx context.Context, arg GetAllInternationalExhibitionsParams) ([]GetAllInternationalExhibitionsRow, error) {
	rows, err := q.db.Query(ctx, getAllInternationalExhibitions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllInternationalExhibitionsRow
	for rows.Next() {
		var i GetAllInternationalExhibitionsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Title,
			&i.Country,
			&i.State,
			&i.City,
			&i.Community,
			&i.SubCommunity,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Banner,
			&i.EventLogoUrl,
			&i.EventStatus,
			&i.HostedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLocalExhibitions = `-- name: GetAllLocalExhibitions :many
SELECT 
	ex.id,
	ex.ref_no,
	ex.title,
	c.country, 
	states.state,
	cities.city, 
	communities.community, 
	sub_communities.sub_community,
	ex.specific_address AS "address",
	ex.start_date,
	ex.end_date, 
	ex.event_banner_url AS "banner",
	ex.event_logo_url,
	ex.event_status,
	CASE 
		WHEN ex.hosted_company_type=3 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	services_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR  
		 WHEN ex.hosted_company_type=3 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	service_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR
	    WHEN ex.hosted_company_type=2 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	developer_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR  
		 WHEN ex.hosted_company_type=2 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	developer_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	product_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR  
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	product_companies_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )::VARCHAR  
	END AS "hosted by"
FROM 
	exhibitions ex 
INNER JOIN 
	countries c 
			 ON c.id=ex.countries_id 
INNER JOIN 
    cities
    		ON cities.id = ex.cities_id
INNER JOIN 
	communities 
			ON communities.id = ex.community_id
INNER JOIN 
	sub_communities 
			ON sub_communities.id = ex.sub_communities_id 
INNER JOIN 
	states
		ON states.id = ex.states_id
WHERE ex.event_status !=5 AND c.id = 1
ORDER BY ex.updated_at DESC, ex.id DESC
LIMIT $1 OFFSET $2
`

type GetAllLocalExhibitionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllLocalExhibitionsRow struct {
	ID           int64       `json:"id"`
	RefNo        string      `json:"ref_no"`
	Title        string      `json:"title"`
	Country      string      `json:"country"`
	State        string      `json:"state"`
	City         string      `json:"city"`
	Community    string      `json:"community"`
	SubCommunity string      `json:"sub_community"`
	Address      string      `json:"address"`
	StartDate    time.Time   `json:"start_date"`
	EndDate      time.Time   `json:"end_date"`
	Banner       string      `json:"banner"`
	EventLogoUrl string      `json:"event_logo_url"`
	EventStatus  int64       `json:"event_status"`
	HostedBy     interface{} `json:"hosted by"`
}

func (q *Queries) GetAllLocalExhibitions(ctx context.Context, arg GetAllLocalExhibitionsParams) ([]GetAllLocalExhibitionsRow, error) {
	rows, err := q.db.Query(ctx, getAllLocalExhibitions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllLocalExhibitionsRow
	for rows.Next() {
		var i GetAllLocalExhibitionsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Title,
			&i.Country,
			&i.State,
			&i.City,
			&i.Community,
			&i.SubCommunity,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Banner,
			&i.EventLogoUrl,
			&i.EventStatus,
			&i.HostedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServicesCompany = `-- name: GetAllServicesCompany :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllServicesCompanyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllServicesCompany(ctx context.Context, arg GetAllServicesCompanyParams) ([]ServicesCompany, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompany, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompany
	for rows.Next() {
		var i ServicesCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServicesCompanyByCountry = `-- name: GetAllServicesCompanyByCountry :many

SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies  
WHERE country_id = $3  AND status != 6   LIMIT $1 OFFSET $2
`

type GetAllServicesCompanyByCountryParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

// -- name: GetCountServicesCompanyByMainServiceId :one
// SELECT COUNT(*) FROM services_companies Where main_services_id = $1  LIMIT 1;
func (q *Queries) GetAllServicesCompanyByCountry(ctx context.Context, arg GetAllServicesCompanyByCountryParams) ([]ServicesCompany, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompanyByCountry, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompany
	for rows.Next() {
		var i ServicesCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServicesCompanyByCountryByNotEqual = `-- name: GetAllServicesCompanyByCountryByNotEqual :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies  
WHERE country_id != $3    LIMIT $1 OFFSET $2
`

type GetAllServicesCompanyByCountryByNotEqualParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

func (q *Queries) GetAllServicesCompanyByCountryByNotEqual(ctx context.Context, arg GetAllServicesCompanyByCountryByNotEqualParams) ([]ServicesCompany, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompanyByCountryByNotEqual, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompany
	for rows.Next() {
		var i ServicesCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServicesCompanyByRank = `-- name: GetAllServicesCompanyByRank :many

SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies  
WHERE company_rank = $3 LIMIT $1 OFFSET $2
`

type GetAllServicesCompanyByRankParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetAllServicesCompanyByMainServiceId :many
// SELECT * FROM services_companies
// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetAllServicesCompanyByRank(ctx context.Context, arg GetAllServicesCompanyByRankParams) ([]ServicesCompany, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompanyByRank, arg.Limit, arg.Offset, arg.CompanyRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompany
	for rows.Next() {
		var i ServicesCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServicesCompanyByStatus = `-- name: GetAllServicesCompanyByStatus :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies  
WHERE status = $3 LIMIT $1 OFFSET $2
`

type GetAllServicesCompanyByStatusParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Status int64 `json:"status"`
}

func (q *Queries) GetAllServicesCompanyByStatus(ctx context.Context, arg GetAllServicesCompanyByStatusParams) ([]ServicesCompany, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompanyByStatus, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompany
	for rows.Next() {
		var i ServicesCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountServicesCompany = `-- name: GetCountServicesCompany :one
SELECT COUNT(*) FROM services_companies LIMIT 1
`

func (q *Queries) GetCountServicesCompany(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountServicesCompany)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getServiceCompanyByCommercialLicNo = `-- name: GetServiceCompanyByCommercialLicNo :one
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies 
WHERE commercial_license_no ILIKE $1 LIMIT 1
`

func (q *Queries) GetServiceCompanyByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyByCommercialLicNo, commercialLicenseNo)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getServiceCompanyDocs = `-- name: GetServiceCompanyDocs :one







 




SELECT logo_url, commercial_license_file_url,
  cover_image_url, 
  vat_file_url 
FROM services_companies Where id = $1 LIMIT 1
`

type GetServiceCompanyDocsRow struct {
	LogoUrl                  string      `json:"logo_url"`
	CommercialLicenseFileUrl string      `json:"commercial_license_file_url"`
	CoverImageUrl            pgtype.Text `json:"cover_image_url"`
	VatFileUrl               pgtype.Text `json:"vat_file_url"`
}

// -- name: GetServiceCompanySubscriptionById :one
// SELECT services_subscription_id FROM services_companies
// WHERE id = $1;
func (q *Queries) GetServiceCompanyDocs(ctx context.Context, id int64) (GetServiceCompanyDocsRow, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyDocs, id)
	var i GetServiceCompanyDocsRow
	err := row.Scan(
		&i.LogoUrl,
		&i.CommercialLicenseFileUrl,
		&i.CoverImageUrl,
		&i.VatFileUrl,
	)
	return i, err
}

const getServiceCompanyForGraph = `-- name: GetServiceCompanyForGraph :one
SELECT id,
	company_name, 
	description, 
	logo_url, 
	cover_image_url, 
	is_verified, 
	commercial_license_no
FROM 
	services_companies 
WHERE 
	id=$1 
LIMIT 1
`

type GetServiceCompanyForGraphRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	Description         pgtype.Text `json:"description"`
	LogoUrl             string      `json:"logo_url"`
	CoverImageUrl       pgtype.Text `json:"cover_image_url"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
}

func (q *Queries) GetServiceCompanyForGraph(ctx context.Context, id int64) (GetServiceCompanyForGraphRow, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyForGraph, id)
	var i GetServiceCompanyForGraphRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.IsVerified,
		&i.CommercialLicenseNo,
	)
	return i, err
}

const getServicesCompany = `-- name: GetServicesCompany :one
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetServicesCompany(ctx context.Context, id int64) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, getServicesCompany, id)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getServicesCompanyByName = `-- name: GetServicesCompanyByName :one
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media FROM services_companies 
WHERE company_name ILIKE $1 LIMIT 1
`

func (q *Queries) GetServicesCompanyByName(ctx context.Context, companyName string) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, getServicesCompanyByName, companyName)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateServiceCompanyRank = `-- name: UpdateServiceCompanyRank :one



UPDATE services_companies 
SET company_rank=$2 
Where id =$1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media
`

type UpdateServiceCompanyRankParams struct {
	ID          int64 `json:"id"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetServiceCompanyByServiceSubscriptionId :one
// SELECT * from services_companies
// WHERE services_subscription_id = $1 LIMIT 1;
// -- name: UpdateServiceCompanyMainService :one
// UPDATE services_companies
// SET main_services_id = $2
// Where id = $1
// RETURNING *;
func (q *Queries) UpdateServiceCompanyRank(ctx context.Context, arg UpdateServiceCompanyRankParams) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, updateServiceCompanyRank, arg.ID, arg.CompanyRank)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateServiceCompanyStatus = `-- name: UpdateServiceCompanyStatus :one
UPDATE services_companies 
SET status=$2 
Where id =$1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media
`

type UpdateServiceCompanyStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateServiceCompanyStatus(ctx context.Context, arg UpdateServiceCompanyStatusParams) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, updateServiceCompanyStatus, arg.ID, arg.Status)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateServicesCompany = `-- name: UpdateServicesCompany :one
UPDATE services_companies
SET    company_name = $2,
    description =$3,
    logo_url =$4,
    addresses_id =$5,
    email =$6,
    phone_number =$7,
    whatsapp_number =$8,
    commercial_license_no =$9,
    commercial_license_file_url = $10,
    commercial_license_expiry = $11,
    is_verified =$12,
    website_url =$13,
    cover_image_url = $14,
    tag_line =$15,
    vat_no =$16,
    vat_status =$17,
    vat_file_url =$18,
    facebook_profile_url =$19,
    instagram_profile_url =$20,
    twitter_profile_url= $21,
    no_of_employees = $22,
    users_id = $23,
    linkedin_profile_url = $24,
    bank_account_details_id = $25,
    company_rank = $26,
    status = $27,
    country_id = $28,
    company_type = $29,
    is_branch = $30,
    created_at = $31,
    updated_at = $32,
    ref_no = $33,
    commercial_license_registration_date = $34,
    commercial_license_issue_date = $35,
    extra_license_nos = $36,
    extra_license_files = $37,
    extra_license_names = $38,
    extra_license_issue_date = $39,
    extra_license_expiry_date = $40,
    license_dcci_no = $41,
    register_no = $42,
    other_social_media = $43,
    youtube_profile_url = $44,
    created_by = $45
Where id = $1
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media
`

type UpdateServicesCompanyParams struct {
	ID                                int64              `json:"id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	CreatedBy                         int64              `json:"created_by"`
}

func (q *Queries) UpdateServicesCompany(ctx context.Context, arg UpdateServicesCompanyParams) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, updateServicesCompany,
		arg.ID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.BankAccountDetailsID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.CreatedBy,
	)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}
