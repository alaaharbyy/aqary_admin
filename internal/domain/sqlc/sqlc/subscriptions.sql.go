// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.sql

package sqlc

import (
	"context"
)

const countSubscriptionsPrice = `-- name: CountSubscriptionsPrice :one
SELECT COUNT(*) FROM subscriptions_price
`

func (q *Queries) CountSubscriptionsPrice(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSubscriptionsPrice)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSubscriptionPrice = `-- name: CreateSubscriptionPrice :one
INSERT INTO subscriptions_price (
    countries_id, subscription_name, price, created_by, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, NOW(), NOW()
) RETURNING id, countries_id, subscription_name, price, created_by, created_at, updated_at
`

type CreateSubscriptionPriceParams struct {
	CountriesID      int64   `json:"countries_id"`
	SubscriptionName string  `json:"subscription_name"`
	Price            float64 `json:"price"`
	CreatedBy        int64   `json:"created_by"`
}

func (q *Queries) CreateSubscriptionPrice(ctx context.Context, arg CreateSubscriptionPriceParams) (SubscriptionsPrice, error) {
	row := q.db.QueryRow(ctx, createSubscriptionPrice,
		arg.CountriesID,
		arg.SubscriptionName,
		arg.Price,
		arg.CreatedBy,
	)
	var i SubscriptionsPrice
	err := row.Scan(
		&i.ID,
		&i.CountriesID,
		&i.SubscriptionName,
		&i.Price,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscriptionPrice = `-- name: DeleteSubscriptionPrice :one
DELETE FROM subscriptions_price
WHERE id = $1 AND countries_id= $2
RETURNING id, countries_id, subscription_name, price, created_by, created_at, updated_at
`

type DeleteSubscriptionPriceParams struct {
	ID          int64 `json:"id"`
	CountriesID int64 `json:"countries_id"`
}

func (q *Queries) DeleteSubscriptionPrice(ctx context.Context, arg DeleteSubscriptionPriceParams) (SubscriptionsPrice, error) {
	row := q.db.QueryRow(ctx, deleteSubscriptionPrice, arg.ID, arg.CountriesID)
	var i SubscriptionsPrice
	err := row.Scan(
		&i.ID,
		&i.CountriesID,
		&i.SubscriptionName,
		&i.Price,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionPrice = `-- name: GetSubscriptionPrice :one
SELECT id, countries_id, subscription_name, price, created_by, created_at, updated_at
FROM subscriptions_price
WHERE id = $1
`

func (q *Queries) GetSubscriptionPrice(ctx context.Context, id int64) (SubscriptionsPrice, error) {
	row := q.db.QueryRow(ctx, getSubscriptionPrice, id)
	var i SubscriptionsPrice
	err := row.Scan(
		&i.ID,
		&i.CountriesID,
		&i.SubscriptionName,
		&i.Price,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSubscriptionPriceByName = `-- name: GetSubscriptionPriceByName :one
SELECT id, countries_id, subscription_name, price, created_by, created_at, updated_at
FROM subscriptions_price
WHERE subscription_name = $1 AND countries_id = $2
`

type GetSubscriptionPriceByNameParams struct {
	SubscriptionName string `json:"subscription_name"`
	CountriesID      int64  `json:"countries_id"`
}

func (q *Queries) GetSubscriptionPriceByName(ctx context.Context, arg GetSubscriptionPriceByNameParams) (SubscriptionsPrice, error) {
	row := q.db.QueryRow(ctx, getSubscriptionPriceByName, arg.SubscriptionName, arg.CountriesID)
	var i SubscriptionsPrice
	err := row.Scan(
		&i.ID,
		&i.CountriesID,
		&i.SubscriptionName,
		&i.Price,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSubscriptionsPrice = `-- name: ListSubscriptionsPrice :many
SELECT id, countries_id, subscription_name, price, created_by, created_at, updated_at
FROM subscriptions_price
ORDER BY id LIMIT $1 OFFSET $2
`

type ListSubscriptionsPriceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubscriptionsPrice(ctx context.Context, arg ListSubscriptionsPriceParams) ([]SubscriptionsPrice, error) {
	rows, err := q.db.Query(ctx, listSubscriptionsPrice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionsPrice
	for rows.Next() {
		var i SubscriptionsPrice
		if err := rows.Scan(
			&i.ID,
			&i.CountriesID,
			&i.SubscriptionName,
			&i.Price,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionPrice = `-- name: UpdateSubscriptionPrice :one
UPDATE subscriptions_price
SET countries_id = $2,
    subscription_name = $3,
    price = $4,
    updated_at = NOW()
WHERE id = $1
RETURNING id, countries_id, subscription_name, price, created_by, created_at, updated_at
`

type UpdateSubscriptionPriceParams struct {
	ID               int64   `json:"id"`
	CountriesID      int64   `json:"countries_id"`
	SubscriptionName string  `json:"subscription_name"`
	Price            float64 `json:"price"`
}

func (q *Queries) UpdateSubscriptionPrice(ctx context.Context, arg UpdateSubscriptionPriceParams) (SubscriptionsPrice, error) {
	row := q.db.QueryRow(ctx, updateSubscriptionPrice,
		arg.ID,
		arg.CountriesID,
		arg.SubscriptionName,
		arg.Price,
	)
	var i SubscriptionsPrice
	err := row.Scan(
		&i.ID,
		&i.CountriesID,
		&i.SubscriptionName,
		&i.Price,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
