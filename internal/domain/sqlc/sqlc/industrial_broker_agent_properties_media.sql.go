// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_broker_agent_properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrailBrokerAgentPropertyMedia = `-- name: CreateIndustrailBrokerAgentPropertyMedia :one
INSERT INTO industrial_broker_agent_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    industrial_broker_agent_properties_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch
`

type CreateIndustrailBrokerAgentPropertyMediaParams struct {
	ImageUrl                          []string    `json:"image_url"`
	Image360Url                       []string    `json:"image360_url"`
	VideoUrl                          []string    `json:"video_url"`
	PanaromaUrl                       []string    `json:"panaroma_url"`
	MainMediaSection                  string      `json:"main_media_section"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrailBrokerAgentPropertyMedia(ctx context.Context, arg CreateIndustrailBrokerAgentPropertyMediaParams) (IndustrialBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createIndustrailBrokerAgentPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialBrokerAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrailBrokerAgentPropertyMedia = `-- name: DeleteIndustrailBrokerAgentPropertyMedia :exec
DELETE FROM industrial_broker_agent_properties_media
Where id = $1
`

func (q *Queries) DeleteIndustrailBrokerAgentPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrailBrokerAgentPropertyMedia, id)
	return err
}

const getAllIndustrailBrokerAgentPropertyMedia = `-- name: GetAllIndustrailBrokerAgentPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrailBrokerAgentPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrailBrokerAgentPropertyMedia(ctx context.Context, arg GetAllIndustrailBrokerAgentPropertyMediaParams) ([]IndustrialBrokerAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrailBrokerAgentPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesMedium
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialBrokerAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialBrokerAgentPropertyMediaByPropertyId = `-- name: GetAllIndustrialBrokerAgentPropertyMediaByPropertyId :many
Select id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch from industrial_broker_agent_properties_media
WHERE industrial_broker_agent_properties_id = $1 ORDER BY id
`

func (q *Queries) GetAllIndustrialBrokerAgentPropertyMediaByPropertyId(ctx context.Context, industrialBrokerAgentPropertiesID int64) ([]IndustrialBrokerAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyMediaByPropertyId, industrialBrokerAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesMedium
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialBrokerAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrailBrokerAgentPropertyMedia = `-- name: GetIndustrailBrokerAgentPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrailBrokerAgentPropertyMedia(ctx context.Context, limit int32) (IndustrialBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrailBrokerAgentPropertyMedia, limit)
	var i IndustrialBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSection = `-- name: GetIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_media
WHERE industrial_broker_agent_properties_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSectionParams struct {
	IndustrialBrokerAgentPropertiesID int64  `json:"industrial_broker_agent_properties_id"`
	Lower                             string `json:"lower"`
}

func (q *Queries) GetIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSectionParams) (IndustrialBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyMediaByPropertyIdAndMediaSection, arg.IndustrialBrokerAgentPropertiesID, arg.Lower)
	var i IndustrialBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateIndustrailBrokerAgentPropertyMedia = `-- name: UpdateIndustrailBrokerAgentPropertyMedia :one
UPDATE industrial_broker_agent_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    industrial_broker_agent_properties_id = $7,
    created_at = $8,
    updated_at = $9,
     is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_id, created_at, updated_at, is_branch
`

type UpdateIndustrailBrokerAgentPropertyMediaParams struct {
	ID                                int64       `json:"id"`
	ImageUrl                          []string    `json:"image_url"`
	Image360Url                       []string    `json:"image360_url"`
	VideoUrl                          []string    `json:"video_url"`
	PanaromaUrl                       []string    `json:"panaroma_url"`
	MainMediaSection                  string      `json:"main_media_section"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrailBrokerAgentPropertyMedia(ctx context.Context, arg UpdateIndustrailBrokerAgentPropertyMediaParams) (IndustrialBrokerAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateIndustrailBrokerAgentPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialBrokerAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
