// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owner_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOwnerPropertyDocument = `-- name: CreateOwnerPropertyDocument :one
INSERT INTO owner_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    owner_properties_id,
    status
)VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, owner_properties_id, status
`

type CreateOwnerPropertyDocumentParams struct {
	DocumentsCategoryID    int64     `json:"documents_category_id"`
	DocumentsSubcategoryID int64     `json:"documents_subcategory_id"`
	FileUrl                []string  `json:"file_url"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	OwnerPropertiesID      int64     `json:"owner_properties_id"`
	Status                 int64     `json:"status"`
}

func (q *Queries) CreateOwnerPropertyDocument(ctx context.Context, arg CreateOwnerPropertyDocumentParams) (OwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createOwnerPropertyDocument,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OwnerPropertiesID,
		arg.Status,
	)
	var i OwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerPropertiesID,
		&i.Status,
	)
	return i, err
}

const deleteOwnerPropertyDocument = `-- name: DeleteOwnerPropertyDocument :exec
DELETE FROM owner_properties_documents
Where id = $1
`

func (q *Queries) DeleteOwnerPropertyDocument(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOwnerPropertyDocument, id)
	return err
}

const getAllOwnerPropertyDocument = `-- name: GetAllOwnerPropertyDocument :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, owner_properties_id, status FROM owner_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllOwnerPropertyDocumentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllOwnerPropertyDocument(ctx context.Context, arg GetAllOwnerPropertyDocumentParams) ([]OwnerPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllOwnerPropertyDocument, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OwnerPropertiesDocument
	for rows.Next() {
		var i OwnerPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerPropertiesID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOwnerPropertyDocumentsByOwnerPropertyId = `-- name: GetAllOwnerPropertyDocumentsByOwnerPropertyId :many
SELECT owner_properties_documents.id, owner_properties_documents.documents_category_id, owner_properties_documents.documents_subcategory_id, owner_properties_documents.file_url, owner_properties_documents.created_at, owner_properties_documents.updated_at, owner_properties_documents.owner_properties_id, owner_properties_documents.status,documents_category.category,documents_subcategory.sub_category FROM owner_properties_documents LEFT JOIN documents_category ON documents_category.id=owner_properties_documents.documents_category_id LEFT JOIN documents_subcategory ON documents_subcategory.id=owner_properties_documents.documents_subcategory_id WHERE owner_properties_documents.owner_properties_id=$3 ORDER BY owner_properties_documents.id OFFSET $2 LIMIT $1
`

type GetAllOwnerPropertyDocumentsByOwnerPropertyIdParams struct {
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
	OwnerPropertiesID int64 `json:"owner_properties_id"`
}

type GetAllOwnerPropertyDocumentsByOwnerPropertyIdRow struct {
	ID                     int64       `json:"id"`
	DocumentsCategoryID    int64       `json:"documents_category_id"`
	DocumentsSubcategoryID int64       `json:"documents_subcategory_id"`
	FileUrl                []string    `json:"file_url"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	OwnerPropertiesID      int64       `json:"owner_properties_id"`
	Status                 int64       `json:"status"`
	Category               pgtype.Text `json:"category"`
	SubCategory            pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllOwnerPropertyDocumentsByOwnerPropertyId(ctx context.Context, arg GetAllOwnerPropertyDocumentsByOwnerPropertyIdParams) ([]GetAllOwnerPropertyDocumentsByOwnerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllOwnerPropertyDocumentsByOwnerPropertyId, arg.Limit, arg.Offset, arg.OwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOwnerPropertyDocumentsByOwnerPropertyIdRow
	for rows.Next() {
		var i GetAllOwnerPropertyDocumentsByOwnerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerPropertiesID,
			&i.Status,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAmenitiesIdByOwnerPropertyId = `-- name: GetAmenitiesIdByOwnerPropertyId :one
SELECT owner_properties.amenities_id FROM owner_properties WHERE id = $1
`

func (q *Queries) GetAmenitiesIdByOwnerPropertyId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAmenitiesIdByOwnerPropertyId, id)
	var amenities_id []int64
	err := row.Scan(&amenities_id)
	return amenities_id, err
}

const getCountOwnerPropertyDocumentsByOwnerPropertyId = `-- name: GetCountOwnerPropertyDocumentsByOwnerPropertyId :one
 SELECT count(*) FROM owner_properties_documents
  WHERE owner_properties_id = $1
`

func (q *Queries) GetCountOwnerPropertyDocumentsByOwnerPropertyId(ctx context.Context, ownerPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOwnerPropertyDocumentsByOwnerPropertyId, ownerPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFacilitiesIdByOwnerPropertyId = `-- name: GetFacilitiesIdByOwnerPropertyId :one
SELECT owner_properties.facilities_id FROM owner_properties WHERE id = $1
`

func (q *Queries) GetFacilitiesIdByOwnerPropertyId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getFacilitiesIdByOwnerPropertyId, id)
	var facilities_id []int64
	err := row.Scan(&facilities_id)
	return facilities_id, err
}

const getOwnerPropertyDocById = `-- name: GetOwnerPropertyDocById :one
SELECT owner_properties_documents.id, owner_properties_documents.documents_category_id, owner_properties_documents.documents_subcategory_id, owner_properties_documents.file_url, owner_properties_documents.created_at, owner_properties_documents.updated_at, owner_properties_documents.owner_properties_id, owner_properties_documents.status,documents_category.category,documents_subcategory.sub_category 
FROM owner_properties_documents 
LEFT JOIN documents_category ON documents_category.id = owner_properties_documents.documents_category_id 
LEFT JOIN documents_subcategory ON documents_subcategory.id = owner_properties_documents.documents_subcategory_id 
WHERE owner_properties_documents.id = $1
`

type GetOwnerPropertyDocByIdRow struct {
	ID                     int64       `json:"id"`
	DocumentsCategoryID    int64       `json:"documents_category_id"`
	DocumentsSubcategoryID int64       `json:"documents_subcategory_id"`
	FileUrl                []string    `json:"file_url"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	OwnerPropertiesID      int64       `json:"owner_properties_id"`
	Status                 int64       `json:"status"`
	Category               pgtype.Text `json:"category"`
	SubCategory            pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetOwnerPropertyDocById(ctx context.Context, id int64) (GetOwnerPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getOwnerPropertyDocById, id)
	var i GetOwnerPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerPropertiesID,
		&i.Status,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getOwnerPropertyDocument = `-- name: GetOwnerPropertyDocument :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, owner_properties_id, status FROM owner_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetOwnerPropertyDocument(ctx context.Context, limit int32) (OwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getOwnerPropertyDocument, limit)
	var i OwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerPropertiesID,
		&i.Status,
	)
	return i, err
}

const getOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, owner_properties_id, status FROM owner_properties_documents
WHERE  owner_properties_id = $1
 AND
  documents_category_id = $2 
  AND
 documents_subcategory_id = $3
`

type GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	OwnerPropertiesID      int64 `json:"owner_properties_id"`
	DocumentsCategoryID    int64 `json:"documents_category_id"`
	DocumentsSubcategoryID int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams) (OwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatId, arg.OwnerPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i OwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerPropertiesID,
		&i.Status,
	)
	return i, err
}

const updateOwnerPropertyDocument = `-- name: UpdateOwnerPropertyDocument :one
UPDATE owner_properties_documents
SET    documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    owner_properties_id = $7,
    status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, owner_properties_id, status
`

type UpdateOwnerPropertyDocumentParams struct {
	ID                     int64     `json:"id"`
	DocumentsCategoryID    int64     `json:"documents_category_id"`
	DocumentsSubcategoryID int64     `json:"documents_subcategory_id"`
	FileUrl                []string  `json:"file_url"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	OwnerPropertiesID      int64     `json:"owner_properties_id"`
	Status                 int64     `json:"status"`
}

func (q *Queries) UpdateOwnerPropertyDocument(ctx context.Context, arg UpdateOwnerPropertyDocumentParams) (OwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateOwnerPropertyDocument,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OwnerPropertiesID,
		arg.Status,
	)
	var i OwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerPropertiesID,
		&i.Status,
	)
	return i, err
}
