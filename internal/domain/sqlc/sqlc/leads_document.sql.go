// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leads_document.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLeadDocument = `-- name: CreateLeadDocument :one
INSERT INTO leads_document (
    leads_id,
    document_category_id,
    is_private,
    title,
    document_url,
    date_added,
    expiry_date,
    description,
    entered_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by
`

type CreateLeadDocumentParams struct {
	LeadsID            pgtype.Int8        `json:"leads_id"`
	DocumentCategoryID int64              `json:"document_category_id"`
	IsPrivate          bool               `json:"is_private"`
	Title              string             `json:"title"`
	DocumentUrl        string             `json:"document_url"`
	DateAdded          time.Time          `json:"date_added"`
	ExpiryDate         pgtype.Timestamptz `json:"expiry_date"`
	Description        string             `json:"description"`
	EnteredBy          int64              `json:"entered_by"`
}

func (q *Queries) CreateLeadDocument(ctx context.Context, arg CreateLeadDocumentParams) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, createLeadDocument,
		arg.LeadsID,
		arg.DocumentCategoryID,
		arg.IsPrivate,
		arg.Title,
		arg.DocumentUrl,
		arg.DateAdded,
		arg.ExpiryDate,
		arg.Description,
		arg.EnteredBy,
	)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}

const deleteLeadDocumentByDocumentId = `-- name: DeleteLeadDocumentByDocumentId :exec
delete from leads_document where id =  $1
`

func (q *Queries) DeleteLeadDocumentByDocumentId(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLeadDocumentByDocumentId, id)
	return err
}

const getCountAllLeadsDocumentsByLeadId = `-- name: GetCountAllLeadsDocumentsByLeadId :one
SELECT COUNT(*) FROM leads_document WHERE leads_id = $1
`

func (q *Queries) GetCountAllLeadsDocumentsByLeadId(ctx context.Context, leadsID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllLeadsDocumentsByLeadId, leadsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getLeadDocumentByDocumentId = `-- name: GetLeadDocumentByDocumentId :one
select id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by from leads_document where id = $1
`

func (q *Queries) GetLeadDocumentByDocumentId(ctx context.Context, id int64) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, getLeadDocumentByDocumentId, id)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}

const getLeadDocumentById = `-- name: GetLeadDocumentById :many
SELECT ld.id, ld.document_category_id, dc.category as document_category, ld.title, NOT ld.is_private AS is_public, ld.document_url, ld.date_added, ld.expiry_date, ld.description FROM
    leads_document ld LEFT JOIN documents_category dc on ld.document_category_id = dc.id  
WHERE
    leads_id = $1 LIMIT $2 OFFSET $3
`

type GetLeadDocumentByIdParams struct {
	LeadsID pgtype.Int8 `json:"leads_id"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

type GetLeadDocumentByIdRow struct {
	ID                 int64              `json:"id"`
	DocumentCategoryID int64              `json:"document_category_id"`
	DocumentCategory   pgtype.Text        `json:"document_category"`
	Title              string             `json:"title"`
	IsPublic           pgtype.Bool        `json:"is_public"`
	DocumentUrl        string             `json:"document_url"`
	DateAdded          time.Time          `json:"date_added"`
	ExpiryDate         pgtype.Timestamptz `json:"expiry_date"`
	Description        string             `json:"description"`
}

func (q *Queries) GetLeadDocumentById(ctx context.Context, arg GetLeadDocumentByIdParams) ([]GetLeadDocumentByIdRow, error) {
	rows, err := q.db.Query(ctx, getLeadDocumentById, arg.LeadsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeadDocumentByIdRow
	for rows.Next() {
		var i GetLeadDocumentByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentCategoryID,
			&i.DocumentCategory,
			&i.Title,
			&i.IsPublic,
			&i.DocumentUrl,
			&i.DateAdded,
			&i.ExpiryDate,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLeadDocumentsByLeadIdWithPagination = `-- name: GetLeadDocumentsByLeadIdWithPagination :many
SELECT ld.id, ld.leads_id, ld.document_category_id, ld.title, ld.is_private, ld.document_url, ld.date_added, ld.expiry_date, ld.description, ld.entered_by, dc.category, u.username as "entered_by_username" FROM
    leads_document ld
LEFT JOIN documents_category dc on ld.document_category_id = dc.id
LEFT JOIN users u on ld.entered_by = u.id
WHERE
    ld.leads_id = $1
ORDER BY
    ld.id
LIMIT
    $3
OFFSET
    $2
`

type GetLeadDocumentsByLeadIdWithPaginationParams struct {
	LeadsID pgtype.Int8 `json:"leads_id"`
	Offset  int32       `json:"offset"`
	Limit   int32       `json:"limit"`
}

type GetLeadDocumentsByLeadIdWithPaginationRow struct {
	ID                 int64              `json:"id"`
	LeadsID            pgtype.Int8        `json:"leads_id"`
	DocumentCategoryID int64              `json:"document_category_id"`
	Title              string             `json:"title"`
	IsPrivate          bool               `json:"is_private"`
	DocumentUrl        string             `json:"document_url"`
	DateAdded          time.Time          `json:"date_added"`
	ExpiryDate         pgtype.Timestamptz `json:"expiry_date"`
	Description        string             `json:"description"`
	EnteredBy          int64              `json:"entered_by"`
	Category           pgtype.Text        `json:"category"`
	EnteredByUsername  pgtype.Text        `json:"entered_by_username"`
}

func (q *Queries) GetLeadDocumentsByLeadIdWithPagination(ctx context.Context, arg GetLeadDocumentsByLeadIdWithPaginationParams) ([]GetLeadDocumentsByLeadIdWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, getLeadDocumentsByLeadIdWithPagination, arg.LeadsID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeadDocumentsByLeadIdWithPaginationRow
	for rows.Next() {
		var i GetLeadDocumentsByLeadIdWithPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.LeadsID,
			&i.DocumentCategoryID,
			&i.Title,
			&i.IsPrivate,
			&i.DocumentUrl,
			&i.DateAdded,
			&i.ExpiryDate,
			&i.Description,
			&i.EnteredBy,
			&i.Category,
			&i.EnteredByUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLeadDocumentDetails = `-- name: UpdateLeadDocumentDetails :one
UPDATE leads_document
SET
    title = $2,
    document_url = $3,
    document_category_id = $4
WHERE
    id = $1
RETURNING id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by
`

type UpdateLeadDocumentDetailsParams struct {
	ID                 int64  `json:"id"`
	Title              string `json:"title"`
	DocumentUrl        string `json:"document_url"`
	DocumentCategoryID int64  `json:"document_category_id"`
}

func (q *Queries) UpdateLeadDocumentDetails(ctx context.Context, arg UpdateLeadDocumentDetailsParams) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, updateLeadDocumentDetails,
		arg.ID,
		arg.Title,
		arg.DocumentUrl,
		arg.DocumentCategoryID,
	)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}

const updateLeadDocumentPrivacy = `-- name: UpdateLeadDocumentPrivacy :one
UPDATE leads_document
SET
    is_private = $2
WHERE
    id = $1
RETURNING id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by
`

type UpdateLeadDocumentPrivacyParams struct {
	ID        int64 `json:"id"`
	IsPrivate bool  `json:"is_private"`
}

func (q *Queries) UpdateLeadDocumentPrivacy(ctx context.Context, arg UpdateLeadDocumentPrivacyParams) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, updateLeadDocumentPrivacy, arg.ID, arg.IsPrivate)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}

const updateMultipleLeadDocumentLeadID = `-- name: UpdateMultipleLeadDocumentLeadID :one
UPDATE leads_document SET leads_id = $1 WHERE id = ANY($2::bigint[]) RETURNING id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by
`

type UpdateMultipleLeadDocumentLeadIDParams struct {
	LeadsID pgtype.Int8 `json:"leads_id"`
	Column2 []int64     `json:"column_2"`
}

func (q *Queries) UpdateMultipleLeadDocumentLeadID(ctx context.Context, arg UpdateMultipleLeadDocumentLeadIDParams) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, updateMultipleLeadDocumentLeadID, arg.LeadsID, arg.Column2)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}

const updateSingleLeadDocumentLeadID = `-- name: UpdateSingleLeadDocumentLeadID :one
UPDATE leads_document SET leads_id = $1 WHERE id = $2 RETURNING id, leads_id, document_category_id, title, is_private, document_url, date_added, expiry_date, description, entered_by
`

type UpdateSingleLeadDocumentLeadIDParams struct {
	LeadsID pgtype.Int8 `json:"leads_id"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateSingleLeadDocumentLeadID(ctx context.Context, arg UpdateSingleLeadDocumentLeadIDParams) (LeadsDocument, error) {
	row := q.db.QueryRow(ctx, updateSingleLeadDocumentLeadID, arg.LeadsID, arg.ID)
	var i LeadsDocument
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.DateAdded,
		&i.ExpiryDate,
		&i.Description,
		&i.EnteredBy,
	)
	return i, err
}
