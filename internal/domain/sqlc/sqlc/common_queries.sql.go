// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: common_queries.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCompanyAdmin = `-- name: GetCompanyAdmin :one
With x AS (
    SELECT users_id FROM broker_companies
    WHERE broker_companies.id = $1 AND broker_companies.is_branch = $2 AND broker_companies.company_type = $3
 	UNION ALL
 	SELECT users_id FROM broker_companies_branches
 	Where id = $1 AND is_branch = $2 AND company_type = $3  	 	
 	UNION ALL 
 	SELECT users_id FROM developer_companies
 	Where id = $1 AND is_branch = $2 AND company_type = $3
 	UNION ALL
 	SELECT users_id  FROM developer_company_branches
 	Where id = $1 AND is_branch = $2 AND company_type = $3 	
 	UNION ALL
 	SELECT users_id FROM services_companies
 	Where id = $1 AND is_branch = $2 AND company_type = $3
 	UNION ALL
 	SELECT users_id FROM service_company_branches
 	Where id = $1 AND is_branch = $2 AND company_type = $3
) SELECT users_id FROM x
`

type GetCompanyAdminParams struct {
	CompanyID   int64       `json:"company_id"`
	IsBranch    pgtype.Bool `json:"is_branch"`
	CompanyType int64       `json:"company_type"`
}

func (q *Queries) GetCompanyAdmin(ctx context.Context, arg GetCompanyAdminParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCompanyAdmin, arg.CompanyID, arg.IsBranch, arg.CompanyType)
	var users_id int64
	err := row.Scan(&users_id)
	return users_id, err
}

const getCompanyByRank = `-- name: GetCompanyByRank :many
With x As (
   SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM broker_companies  WHERE  broker_companies.company_rank = $3 
   UNION ALL
   SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM broker_companies_branches WHERE  broker_companies_branches.company_rank = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM developer_companies WHERE  developer_companies.company_rank = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM developer_company_branches WHERE  developer_company_branches.company_rank = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch,  addresses_id,  users_id FROM services_companies WHERE  services_companies.company_rank = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM service_company_branches WHERE  service_company_branches.company_rank = $3
    
) SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id, users_id FROM x  ORDER BY id  LIMIT $1 OFFSET $2
`

type GetCompanyByRankParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CompanyRank int64 `json:"company_rank"`
}

type GetCompanyByRankRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	CompanyType         int64       `json:"company_type"`
	LogoUrl             string      `json:"logo_url"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
	Email               pgtype.Text `json:"email"`
	PhoneNumber         pgtype.Text `json:"phone_number"`
	Status              int64       `json:"status"`
	CompanyRank         int64       `json:"company_rank"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	AddressesID         int64       `json:"addresses_id"`
	UsersID             int64       `json:"users_id"`
}

func (q *Queries) GetCompanyByRank(ctx context.Context, arg GetCompanyByRankParams) ([]GetCompanyByRankRow, error) {
	rows, err := q.db.Query(ctx, getCompanyByRank, arg.Limit, arg.Offset, arg.CompanyRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyByRankRow
	for rows.Next() {
		var i GetCompanyByRankRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.CompanyType,
			&i.LogoUrl,
			&i.CommercialLicenseNo,
			&i.Email,
			&i.PhoneNumber,
			&i.Status,
			&i.CompanyRank,
			&i.IsBranch,
			&i.AddressesID,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByStatus = `-- name: GetCompanyByStatus :many
With x As (
   SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id, users_id FROM broker_companies  WHERE  broker_companies.status = $3 
   UNION ALL
   SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id, users_id FROM broker_companies_branches WHERE  broker_companies_branches.status = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM developer_companies WHERE  developer_companies.status = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM developer_company_branches WHERE  developer_company_branches.status = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch,  addresses_id,  users_id FROM services_companies WHERE  services_companies.status = $3
   UNION ALL
   SELECT  id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id,  users_id FROM service_company_branches WHERE  service_company_branches.status = $3
) SELECT id, company_name, company_type, logo_url, commercial_license_no, email, phone_number, status, company_rank, is_branch, addresses_id, users_id FROM x  ORDER BY id  LIMIT $1 OFFSET $2
`

type GetCompanyByStatusParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Status int64 `json:"status"`
}

type GetCompanyByStatusRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	CompanyType         int64       `json:"company_type"`
	LogoUrl             string      `json:"logo_url"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
	Email               pgtype.Text `json:"email"`
	PhoneNumber         pgtype.Text `json:"phone_number"`
	Status              int64       `json:"status"`
	CompanyRank         int64       `json:"company_rank"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	AddressesID         int64       `json:"addresses_id"`
	UsersID             int64       `json:"users_id"`
}

func (q *Queries) GetCompanyByStatus(ctx context.Context, arg GetCompanyByStatusParams) ([]GetCompanyByStatusRow, error) {
	rows, err := q.db.Query(ctx, getCompanyByStatus, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyByStatusRow
	for rows.Next() {
		var i GetCompanyByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.CompanyType,
			&i.LogoUrl,
			&i.CommercialLicenseNo,
			&i.Email,
			&i.PhoneNumber,
			&i.Status,
			&i.CompanyRank,
			&i.IsBranch,
			&i.AddressesID,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByUserId = `-- name: GetCompanyByUserId :one
SELECT 
    'broker_companies' AS table_name,
    bc.id,
    bc.company_type,
    bc.is_branch,
    bc.company_name,
    bc.is_verified,
    bc.no_of_employees,
    bc.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    bc.website_url,
    bc.phone_number,
    bc.commercial_license_no,
    l.lat,
    l.lng
FROM 
    broker_companies bc
JOIN 
    addresses a ON bc.addresses_id = a.id
JOIN
    locations l ON a.locations_id= l.id
WHERE 
    bc.users_id = $1
UNION 
SELECT 
    'broker_companies_branches' AS table_name,
    bcb.id,
    bcb.company_type,
    bcb.is_branch,
    bcb.company_name,
    bcb.is_verified,
    bcb.no_of_employees,
    bcb.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    bcb.website_url,
    bcb.phone_number,
    bcb.commercial_license_no,
    l.lat,
    l.lng
FROM 
    broker_companies_branches bcb
JOIN 
    addresses a ON bcb.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    bcb.users_id = $1
UNION 
SELECT 
    'developer_companies' AS table_name,
    dc.id,
    dc.company_type,
    dc.is_branch,
    dc.company_name,
    dc.is_verified,
    dc.no_of_employees,
    dc.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    dc.website_url,
    dc.phone_number,
    dc.commercial_license_no,
    l.lat,
    l.lng
FROM 
    developer_companies dc
JOIN 
    addresses a ON dc.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    dc.users_id = $1
UNION 
SELECT 
    'developer_company_branches' AS table_name,
    dcb.id,
    dcb.company_type,
    dcb.is_branch,
    dcb.company_name,
    dcb.is_verified,
    dcb.no_of_employees,
    dcb.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    dcb.website_url,
    dcb.phone_number,
    dcb.commercial_license_no,
    l.lat,
    l.lng
FROM 
    developer_company_branches dcb
JOIN 
    addresses a ON dcb.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    dcb.users_id = $1
UNION 
SELECT 
    'services_companies' AS table_name,
    sc.id,
    sc.company_type,
    sc.is_branch,
    sc.company_name,
    sc.is_verified,
    sc.no_of_employees,
    sc.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    sc.website_url,
    sc.phone_number,
    sc.commercial_license_no,
   l.lat,
    l.lng
FROM 
    services_companies sc
JOIN 
    addresses a ON sc.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    sc.users_id = $1
UNION 
SELECT 
    'service_company_branches' AS table_name,
    scb.id,
    scb.company_type,
    scb.is_branch,
    scb.company_name,
    scb.is_verified,
    scb.no_of_employees,
    scb.email,
   a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    scb.website_url,
    scb.phone_number,
    scb.commercial_license_no,
    l.lat,
    l.lng
FROM 
    service_company_branches scb
JOIN 
    addresses a ON scb.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    scb.users_id = $1
UNION 
SELECT 
    'product_company' AS table_name,
    pc.id,
    pc.company_type,
    pc.is_branch,
    pc.company_name,
    pc.is_verified,
    pc.no_of_employees,
    pc.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    pc.website_url,
    pc.phone_number,
    pc.commercial_license_no,
    l.lat,
    l.lng
FROM 
    product_companies pc
JOIN 
    addresses a ON pc.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    pc.users_id = $1
UNION 
SELECT 
    'product_company_branch' AS table_name,
    pcb.id,
    pcb.company_type,
    pcb.is_branch,
    pcb.company_name,
    pcb.is_verified,
    pcb.no_of_employees,
    pcb.email,
    a.countries_id,
    a.states_id,
    a.cities_id,
    a.communities_id,
    a.sub_communities_id,
    pcb.website_url,
    pcb.phone_number,
    pcb.commercial_license_no,
    l.lat,
    l.lng
FROM 
    product_companies_branches pcb
JOIN 
    addresses a ON pcb.addresses_id = a.id
JOIN
    locations l ON a.locations_id = l.id
WHERE 
    pcb.users_id = $1
LIMIT 1
`

type GetCompanyByUserIdRow struct {
	TableName           string      `json:"table_name"`
	ID                  int64       `json:"id"`
	CompanyType         int64       `json:"company_type"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	CompanyName         string      `json:"company_name"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	NoOfEmployees       pgtype.Int8 `json:"no_of_employees"`
	Email               pgtype.Text `json:"email"`
	CountriesID         pgtype.Int8 `json:"countries_id"`
	StatesID            pgtype.Int8 `json:"states_id"`
	CitiesID            pgtype.Int8 `json:"cities_id"`
	CommunitiesID       pgtype.Int8 `json:"communities_id"`
	SubCommunitiesID    pgtype.Int8 `json:"sub_communities_id"`
	WebsiteUrl          pgtype.Text `json:"website_url"`
	PhoneNumber         pgtype.Text `json:"phone_number"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
	Lat                 string      `json:"lat"`
	Lng                 string      `json:"lng"`
}

func (q *Queries) GetCompanyByUserId(ctx context.Context, usersID int64) (GetCompanyByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getCompanyByUserId, usersID)
	var i GetCompanyByUserIdRow
	err := row.Scan(
		&i.TableName,
		&i.ID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CompanyName,
		&i.IsVerified,
		&i.NoOfEmployees,
		&i.Email,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubCommunitiesID,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.CommercialLicenseNo,
		&i.Lat,
		&i.Lng,
	)
	return i, err
}

const getCountCompanyByRank = `-- name: GetCountCompanyByRank :one
With x As (
   SELECT id  FROM broker_companies  WHERE  broker_companies.company_rank = $1
   UNION ALL
   SELECT id  FROM broker_companies_branches  WHERE  broker_companies_branches.company_rank = $1
   UNION ALL
   SELECT  id   FROM developer_companies WHERE  developer_companies.company_rank = $1
   UNION ALL
   SELECT  id   FROM developer_company_branches WHERE  developer_company_branches.company_rank = $1
   UNION ALL
   SELECT  id   FROM services_companies WHERE  services_companies.company_rank = $1
   UNION ALL
   SELECT  id   FROM service_company_branches WHERE  service_company_branches.company_rank = $1
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountCompanyByRank(ctx context.Context, companyRank int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCompanyByRank, companyRank)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountCompanyByStatus = `-- name: GetCountCompanyByStatus :one
With x As (
   SELECT id   FROM broker_companies  WHERE  broker_companies.status = $1
   UNION ALL
   SELECT id   FROM broker_companies_branches  WHERE  broker_companies_branches.status = $1
   UNION ALL
   SELECT  id   FROM developer_companies WHERE  developer_companies.status = $1
   UNION ALL
   SELECT  id   FROM developer_company_branches WHERE  developer_company_branches.status = $1
   UNION ALL
   SELECT  id   FROM services_companies WHERE  services_companies.status = $1
   UNION ALL
   SELECT  id   FROM service_company_branches WHERE  service_company_branches.status = $1
    
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountCompanyByStatus(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCompanyByStatus, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}
