// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: retail_category.sql

package sqlc

import (
	"context"
)

const getAllRetailCategory = `-- name: GetAllRetailCategory :one
SELECT id, parent_retail_id, title, title_ar FROM retail_category
`

func (q *Queries) GetAllRetailCategory(ctx context.Context) (RetailCategory, error) {
	row := q.db.QueryRow(ctx, getAllRetailCategory)
	var i RetailCategory
	err := row.Scan(
		&i.ID,
		&i.ParentRetailID,
		&i.Title,
		&i.TitleAr,
	)
	return i, err
}

const getAllRetailCategoryWithoutPagination = `-- name: GetAllRetailCategoryWithoutPagination :many
select id, parent_retail_id, title, title_ar from retail_category
`

func (q *Queries) GetAllRetailCategoryWithoutPagination(ctx context.Context) ([]RetailCategory, error) {
	rows, err := q.db.Query(ctx, getAllRetailCategoryWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetailCategory
	for rows.Next() {
		var i RetailCategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentRetailID,
			&i.Title,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRetailCategory = `-- name: GetRetailCategory :one
SELECT id, parent_retail_id, title, title_ar FROM retail_category WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRetailCategory(ctx context.Context, id int64) (RetailCategory, error) {
	row := q.db.QueryRow(ctx, getRetailCategory, id)
	var i RetailCategory
	err := row.Scan(
		&i.ID,
		&i.ParentRetailID,
		&i.Title,
		&i.TitleAr,
	)
	return i, err
}
