// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFreelancer = `-- name: CreateFreelancer :one
INSERT INTO freelancers (
    profiles_id,
    users_id,
    about,
    about_arabic,
    nationalities,
    brn,
    br_file,
    facebook_profile_url,
    instagram_profile_url,
    linkedin_profile_url,
    twitter_profile_url,
    youtube,
    status,
    noc_file,
    noc_expiry_date,
    created_at,
    updated_at,
    freelancers_companies
)VALUES (
    $1 ,$2, $3, $4, $5,$6,$7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
) RETURNING id, profiles_id, users_id, about, about_arabic, nationalities, brn, br_file, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, youtube, status, noc_file, noc_expiry_date, created_at, updated_at, freelancers_companies
`

type CreateFreelancerParams struct {
	ProfilesID           int64       `json:"profiles_id"`
	UsersID              int64       `json:"users_id"`
	About                pgtype.Text `json:"about"`
	AboutArabic          pgtype.Text `json:"about_arabic"`
	Nationalities        []int64     `json:"nationalities"`
	Brn                  string      `json:"brn"`
	BrFile               string      `json:"br_file"`
	FacebookProfileUrl   pgtype.Text `json:"facebook_profile_url"`
	InstagramProfileUrl  pgtype.Text `json:"instagram_profile_url"`
	LinkedinProfileUrl   pgtype.Text `json:"linkedin_profile_url"`
	TwitterProfileUrl    pgtype.Text `json:"twitter_profile_url"`
	Youtube              pgtype.Text `json:"youtube"`
	Status               int64       `json:"status"`
	NocFile              string      `json:"noc_file"`
	NocExpiryDate        time.Time   `json:"noc_expiry_date"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	FreelancersCompanies pgtype.Int8 `json:"freelancers_companies"`
}

func (q *Queries) CreateFreelancer(ctx context.Context, arg CreateFreelancerParams) (Freelancer, error) {
	row := q.db.QueryRow(ctx, createFreelancer,
		arg.ProfilesID,
		arg.UsersID,
		arg.About,
		arg.AboutArabic,
		arg.Nationalities,
		arg.Brn,
		arg.BrFile,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.LinkedinProfileUrl,
		arg.TwitterProfileUrl,
		arg.Youtube,
		arg.Status,
		arg.NocFile,
		arg.NocExpiryDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersCompanies,
	)
	var i Freelancer
	err := row.Scan(
		&i.ID,
		&i.ProfilesID,
		&i.UsersID,
		&i.About,
		&i.AboutArabic,
		&i.Nationalities,
		&i.Brn,
		&i.BrFile,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.Youtube,
		&i.Status,
		&i.NocFile,
		&i.NocExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersCompanies,
	)
	return i, err
}

const deleteFreelancer = `-- name: DeleteFreelancer :exec
DELETE FROM freelancers
Where id = $1
`

func (q *Queries) DeleteFreelancer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancer, id)
	return err
}

const getAllFreelancer = `-- name: GetAllFreelancer :many
SELECT id, profiles_id, users_id, about, about_arabic, nationalities, brn, br_file, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, youtube, status, noc_file, noc_expiry_date, created_at, updated_at, freelancers_companies FROM freelancers
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllFreelancerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancer(ctx context.Context, arg GetAllFreelancerParams) ([]Freelancer, error) {
	rows, err := q.db.Query(ctx, getAllFreelancer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Freelancer
	for rows.Next() {
		var i Freelancer
		if err := rows.Scan(
			&i.ID,
			&i.ProfilesID,
			&i.UsersID,
			&i.About,
			&i.AboutArabic,
			&i.Nationalities,
			&i.Brn,
			&i.BrFile,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.Youtube,
			&i.Status,
			&i.NocFile,
			&i.NocExpiryDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FreelancersCompanies,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancer = `-- name: GetFreelancer :one
SELECT id, profiles_id, users_id, about, about_arabic, nationalities, brn, br_file, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, youtube, status, noc_file, noc_expiry_date, created_at, updated_at, freelancers_companies FROM freelancers 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetFreelancer(ctx context.Context, limit int32) (Freelancer, error) {
	row := q.db.QueryRow(ctx, getFreelancer, limit)
	var i Freelancer
	err := row.Scan(
		&i.ID,
		&i.ProfilesID,
		&i.UsersID,
		&i.About,
		&i.AboutArabic,
		&i.Nationalities,
		&i.Brn,
		&i.BrFile,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.Youtube,
		&i.Status,
		&i.NocFile,
		&i.NocExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersCompanies,
	)
	return i, err
}

const updateFreelancer = `-- name: UpdateFreelancer :one
UPDATE freelancers
SET profiles_id = $2,
    users_id = $3,
    about = $4,
    about_arabic = $5,
    nationalities = $6,
    brn = $7,
    br_file = $8,
    facebook_profile_url = $9,
    instagram_profile_url = $10,
    linkedin_profile_url = $11,
    twitter_profile_url = $12,
    youtube = $13,
    status = $14,
    noc_file = $15,
    noc_expiry_date = $16,
    created_at = $17,
    updated_at = $18,
    freelancers_companies = $19
Where id = $1
RETURNING id, profiles_id, users_id, about, about_arabic, nationalities, brn, br_file, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, youtube, status, noc_file, noc_expiry_date, created_at, updated_at, freelancers_companies
`

type UpdateFreelancerParams struct {
	ID                   int64       `json:"id"`
	ProfilesID           int64       `json:"profiles_id"`
	UsersID              int64       `json:"users_id"`
	About                pgtype.Text `json:"about"`
	AboutArabic          pgtype.Text `json:"about_arabic"`
	Nationalities        []int64     `json:"nationalities"`
	Brn                  string      `json:"brn"`
	BrFile               string      `json:"br_file"`
	FacebookProfileUrl   pgtype.Text `json:"facebook_profile_url"`
	InstagramProfileUrl  pgtype.Text `json:"instagram_profile_url"`
	LinkedinProfileUrl   pgtype.Text `json:"linkedin_profile_url"`
	TwitterProfileUrl    pgtype.Text `json:"twitter_profile_url"`
	Youtube              pgtype.Text `json:"youtube"`
	Status               int64       `json:"status"`
	NocFile              string      `json:"noc_file"`
	NocExpiryDate        time.Time   `json:"noc_expiry_date"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	FreelancersCompanies pgtype.Int8 `json:"freelancers_companies"`
}

func (q *Queries) UpdateFreelancer(ctx context.Context, arg UpdateFreelancerParams) (Freelancer, error) {
	row := q.db.QueryRow(ctx, updateFreelancer,
		arg.ID,
		arg.ProfilesID,
		arg.UsersID,
		arg.About,
		arg.AboutArabic,
		arg.Nationalities,
		arg.Brn,
		arg.BrFile,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.LinkedinProfileUrl,
		arg.TwitterProfileUrl,
		arg.Youtube,
		arg.Status,
		arg.NocFile,
		arg.NocExpiryDate,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersCompanies,
	)
	var i Freelancer
	err := row.Scan(
		&i.ID,
		&i.ProfilesID,
		&i.UsersID,
		&i.About,
		&i.AboutArabic,
		&i.Nationalities,
		&i.Brn,
		&i.BrFile,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.Youtube,
		&i.Status,
		&i.NocFile,
		&i.NocExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersCompanies,
	)
	return i, err
}
