// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: city_guide.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCityGuide = `-- name: CreateCityGuide :one
INSERT INTO
    city_guide (
         city_id,
        cover_image,
        description,
        status
    )
SELECT
    $1,
    $2,
    $3,
    $4
FROM 
	cities WHERE id= $1::BIGINT and status !=6 RETURNING 1
`

type CreateCityGuideParams struct {
	CityID      int64       `json:"city_id"`
	CoverImage  string      `json:"cover_image"`
	Description pgtype.Text `json:"description"`
	Status      int64       `json:"status"`
}

func (q *Queries) CreateCityGuide(ctx context.Context, arg CreateCityGuideParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createCityGuide,
		arg.CityID,
		arg.CoverImage,
		arg.Description,
		arg.Status,
	)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const exitingCityGuide = `-- name: ExitingCityGuide :one
SELECT EXISTS (
    SELECT 1
    FROM city_guide
    WHERE city_id = $1 and status!= $2::bigint
) AS exists
`

type ExitingCityGuideParams struct {
	CityID        int64 `json:"city_id"`
	DeletedStatus int64 `json:"deleted_status"`
}

func (q *Queries) ExitingCityGuide(ctx context.Context, arg ExitingCityGuideParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, exitingCityGuide, arg.CityID, arg.DeletedStatus)
	var exists pgtype.Bool
	err := row.Scan(&exists)
	return exists, err
}

const exitingCityGuideByStatus = `-- name: ExitingCityGuideByStatus :one
SELECT EXISTS (
    SELECT 1
    FROM city_guide
    WHERE city_id = $1 and status= $2::bigint
) AS exists
`

type ExitingCityGuideByStatusParams struct {
	CityID int64 `json:"city_id"`
	Status int64 `json:"status"`
}

func (q *Queries) ExitingCityGuideByStatus(ctx context.Context, arg ExitingCityGuideByStatusParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, exitingCityGuideByStatus, arg.CityID, arg.Status)
	var exists pgtype.Bool
	err := row.Scan(&exists)
	return exists, err
}

const getCityGuide = `-- name: GetCityGuide :one
SELECT 
    cities.city,
    cities.states_id , states.state,
    states.countries_id, countries.country,
	city_guide.id, city_guide.city_id, city_guide.cover_image, city_guide.description, city_guide.status, city_guide.created_at, city_guide.updated_at, city_guide.deleted_at
FROM city_guide 
JOIN cities ON cities.id= city_guide.city_id
JOIN states ON states.id = cities.states_id
JOIN countries ON countries.id = states.countries_id
WHERE city_guide.id=$1
`

type GetCityGuideRow struct {
	City        string      `json:"city"`
	StatesID    pgtype.Int8 `json:"states_id"`
	State       string      `json:"state"`
	CountriesID pgtype.Int8 `json:"countries_id"`
	Country     string      `json:"country"`
	CityGuide   CityGuide   `json:"city_guide"`
}

func (q *Queries) GetCityGuide(ctx context.Context, id int64) (GetCityGuideRow, error) {
	row := q.db.QueryRow(ctx, getCityGuide, id)
	var i GetCityGuideRow
	err := row.Scan(
		&i.City,
		&i.StatesID,
		&i.State,
		&i.CountriesID,
		&i.Country,
		&i.CityGuide.ID,
		&i.CityGuide.CityID,
		&i.CityGuide.CoverImage,
		&i.CityGuide.Description,
		&i.CityGuide.Status,
		&i.CityGuide.CreatedAt,
		&i.CityGuide.UpdatedAt,
		&i.CityGuide.DeletedAt,
	)
	return i, err
}

const getCityGuides = `-- name: GetCityGuides :many
SELECT 
	city_guide.id,
	cities.city,
	cities.id as city_id,
	city_guide.cover_image,
	city_guide.description,
    city_guide.deleted_at,
    cities.states_id , states.state,
    states.countries_id, countries.country
FROM city_guide
JOIN cities ON cities.id = city_guide.city_id
JOIN states ON states.id = cities.states_id
JOIN countries ON countries.id = states.countries_id
WHERE city_guide.status= $1::BIGINT
LIMIT $3
OFFSET $2
`

type GetCityGuidesParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetCityGuidesRow struct {
	ID          int64              `json:"id"`
	City        string             `json:"city"`
	CityID      int64              `json:"city_id"`
	CoverImage  string             `json:"cover_image"`
	Description pgtype.Text        `json:"description"`
	DeletedAt   pgtype.Timestamptz `json:"deleted_at"`
	StatesID    pgtype.Int8        `json:"states_id"`
	State       string             `json:"state"`
	CountriesID pgtype.Int8        `json:"countries_id"`
	Country     string             `json:"country"`
}

func (q *Queries) GetCityGuides(ctx context.Context, arg GetCityGuidesParams) ([]GetCityGuidesRow, error) {
	rows, err := q.db.Query(ctx, getCityGuides, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCityGuidesRow
	for rows.Next() {
		var i GetCityGuidesRow
		if err := rows.Scan(
			&i.ID,
			&i.City,
			&i.CityID,
			&i.CoverImage,
			&i.Description,
			&i.DeletedAt,
			&i.StatesID,
			&i.State,
			&i.CountriesID,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCityGuidesCount = `-- name: GetCityGuidesCount :one
SELECT 
	count(city_guide.id)
FROM city_guide
JOIN cities ON cities.id= city_guide.city_id
JOIN states ON states.id = cities.states_id
JOIN countries ON countries.id = states.countries_id
WHERE city_guide.status= $1::BIGINT
`

func (q *Queries) GetCityGuidesCount(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCityGuidesCount, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCityGuide = `-- name: UpdateCityGuide :one
UPDATE
    city_guide
SET
    cover_image = COALESCE($3, cover_image),
    description = $4,
    updated_at = $2
WHERE
    city_guide.id = $1
    AND status = $5::BIGINT
   RETURNING id
`

type UpdateCityGuideParams struct {
	ID           int64       `json:"id"`
	UpdatedAt    time.Time   `json:"updated_at"`
	CoverImage   pgtype.Text `json:"cover_image"`
	Description  pgtype.Text `json:"description"`
	ActiveStatus int64       `json:"active_status"`
}

func (q *Queries) UpdateCityGuide(ctx context.Context, arg UpdateCityGuideParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateCityGuide,
		arg.ID,
		arg.UpdatedAt,
		arg.CoverImage,
		arg.Description,
		arg.ActiveStatus,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateCityGuideStatus = `-- name: UpdateCityGuideStatus :exec
UPDATE
    city_guide
SET
    updated_at = $2,
    status = $3,
    deleted_at = $4
WHERE   
    id = $1
`

type UpdateCityGuideStatusParams struct {
	ID        int64              `json:"id"`
	UpdatedAt time.Time          `json:"updated_at"`
	Status    int64              `json:"status"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

func (q *Queries) UpdateCityGuideStatus(ctx context.Context, arg UpdateCityGuideStatusParams) error {
	_, err := q.db.Exec(ctx, updateCityGuideStatus,
		arg.ID,
		arg.UpdatedAt,
		arg.Status,
		arg.DeletedAt,
	)
	return err
}
