// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product_companies_branches.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllProductBranchReviews = `-- name: GetAllProductBranchReviews :many
select 
pcb.company_name,
cp.product_name, 
pr.id as reviews_id, pr.ref_no,pr.review_quality,pr.review_price,pr.customer_service,pr.order_experience,pr.description as review,
u.username,u.email,
   COALESCE(
        (
            SELECT
                company_name
            FROM
                services_companies
            WHERE
                users_id = pr.reviewer
            UNION
            SELECT
                company_name
            FROM
                service_company_branches
            WHERE
                users_id = pr.reviewer
            UNION
            SELECT
                company_name
            FROM
                broker_companies_branches
            WHERE
                users_id = pr.reviewer
            UNION
            SELECT
                company_name
            FROM
                broker_companies
            WHERE
                users_id = pr.reviewer
            UNION
            SELECT
                company_name
            FROM
                developer_company_branches
            WHERE
                users_id = pr.reviewer
            UNION
            SELECT
                company_name
            FROM
                developer_companies
            WHERE
                users_id = pr.reviewer
            LIMIT 1
        ), 'no company'
    ) AS reviewer_company
from product_companies_branches pcb 
join companies_products cp on cp.companies_id=pcb.id
join product_reviews pr on pr.companies_products_id=cp.id
join users u on u.id=pr.reviewer
where pcb.id=$1 and cp.is_branch=true
LIMIT $2 OFFSET $3
`

type GetAllProductBranchReviewsParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllProductBranchReviewsRow struct {
	CompanyName     string      `json:"company_name"`
	ProductName     string      `json:"product_name"`
	ReviewsID       int64       `json:"reviews_id"`
	RefNo           string      `json:"ref_no"`
	ReviewQuality   int32       `json:"review_quality"`
	ReviewPrice     int32       `json:"review_price"`
	CustomerService int32       `json:"customer_service"`
	OrderExperience int32       `json:"order_experience"`
	Review          string      `json:"review"`
	Username        string      `json:"username"`
	Email           string      `json:"email"`
	ReviewerCompany interface{} `json:"reviewer_company"`
}

func (q *Queries) GetAllProductBranchReviews(ctx context.Context, arg GetAllProductBranchReviewsParams) ([]GetAllProductBranchReviewsRow, error) {
	rows, err := q.db.Query(ctx, getAllProductBranchReviews, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProductBranchReviewsRow
	for rows.Next() {
		var i GetAllProductBranchReviewsRow
		if err := rows.Scan(
			&i.CompanyName,
			&i.ProductName,
			&i.ReviewsID,
			&i.RefNo,
			&i.ReviewQuality,
			&i.ReviewPrice,
			&i.CustomerService,
			&i.OrderExperience,
			&i.Review,
			&i.Username,
			&i.Email,
			&i.ReviewerCompany,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCompanyBranchForGraph = `-- name: GetProductCompanyBranchForGraph :one
SELECT id,
	company_name, 
	description, 
	logo_url, 
	cover_image_url, 
	is_verified, 
	commercial_license_no
FROM 
	product_companies_branches 
WHERE 
	id=$1 
LIMIT 1
`

type GetProductCompanyBranchForGraphRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	Description         string      `json:"description"`
	LogoUrl             string      `json:"logo_url"`
	CoverImageUrl       string      `json:"cover_image_url"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
}

func (q *Queries) GetProductCompanyBranchForGraph(ctx context.Context, id int64) (GetProductCompanyBranchForGraphRow, error) {
	row := q.db.QueryRow(ctx, getProductCompanyBranchForGraph, id)
	var i GetProductCompanyBranchForGraphRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.IsVerified,
		&i.CommercialLicenseNo,
	)
	return i, err
}
