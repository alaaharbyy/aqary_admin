// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_unit_types_branch.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialUnitTypesBranch = `-- name: CreateIndustrialUnitTypesBranch :one
INSERT INTO industrial_unit_types_branch (
     description,
     image_url,
     min_area,
     max_area,
     min_price,
     max_price,
     parking,
     balcony,
     properties_id,
     property,
     property_types_id,
     created_at,
     updated_at,
     title,
     bedrooms
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms
`

type CreateIndustrialUnitTypesBranchParams struct {
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
}

func (q *Queries) CreateIndustrialUnitTypesBranch(ctx context.Context, arg CreateIndustrialUnitTypesBranchParams) (IndustrialUnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, createIndustrialUnitTypesBranch,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
	)
	var i IndustrialUnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}

const deleteIndustrialUnitTypesBranch = `-- name: DeleteIndustrialUnitTypesBranch :exec
DELETE FROM industrial_unit_types_branch
Where id = $1
`

func (q *Queries) DeleteIndustrialUnitTypesBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialUnitTypesBranch, id)
	return err
}

const getAllIndustrialUnitTypeBranchByPropertyId = `-- name: GetAllIndustrialUnitTypeBranchByPropertyId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM industrial_unit_types_branch 
WHERE property = $3 AND properties_id = $4  LIMIT $1 OFFSET $2
`

type GetAllIndustrialUnitTypeBranchByPropertyIdParams struct {
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllIndustrialUnitTypeBranchByPropertyId(ctx context.Context, arg GetAllIndustrialUnitTypeBranchByPropertyIdParams) ([]IndustrialUnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialUnitTypeBranchByPropertyId,
		arg.Limit,
		arg.Offset,
		arg.Property,
		arg.PropertiesID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialUnitTypesBranch
	for rows.Next() {
		var i IndustrialUnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialUnitTypesBranch = `-- name: GetAllIndustrialUnitTypesBranch :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM industrial_unit_types_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialUnitTypesBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialUnitTypesBranch(ctx context.Context, arg GetAllIndustrialUnitTypesBranchParams) ([]IndustrialUnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialUnitTypesBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialUnitTypesBranch
	for rows.Next() {
		var i IndustrialUnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialUnitTypesBranchWithoutPagination = `-- name: GetAllIndustrialUnitTypesBranchWithoutPagination :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM industrial_unit_types_branch
ORDER BY id
`

func (q *Queries) GetAllIndustrialUnitTypesBranchWithoutPagination(ctx context.Context) ([]IndustrialUnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialUnitTypesBranchWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialUnitTypesBranch
	for rows.Next() {
		var i IndustrialUnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllIndustrialUnitTypeBranchByPropertyId = `-- name: GetCountAllIndustrialUnitTypeBranchByPropertyId :one
SELECT COUNT(*) FROM industrial_unit_types_branch
WHERE property = $1 AND properties_id = $2
`

type GetCountAllIndustrialUnitTypeBranchByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetCountAllIndustrialUnitTypeBranchByPropertyId(ctx context.Context, arg GetCountAllIndustrialUnitTypeBranchByPropertyIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllIndustrialUnitTypeBranchByPropertyId, arg.Property, arg.PropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIndustrialUnitTypesBranch = `-- name: GetIndustrialUnitTypesBranch :one
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM industrial_unit_types_branch 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIndustrialUnitTypesBranch(ctx context.Context, id int64) (IndustrialUnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, getIndustrialUnitTypesBranch, id)
	var i IndustrialUnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}

const updateIndustrialUnitTypesBranch = `-- name: UpdateIndustrialUnitTypesBranch :one
UPDATE industrial_unit_types_branch
SET  description = $2,
     image_url = $3,
     min_area = $4,
     max_area = $5,
     min_price = $6,
     max_price = $7,
     parking = $8,
     balcony = $9,
     properties_id = $10,
     property = $11,
     property_types_id = $12,
     created_at = $13,
     updated_at = $14,
     title = $15,
     bedrooms = $16
Where id = $1
RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms
`

type UpdateIndustrialUnitTypesBranchParams struct {
	ID              int64       `json:"id"`
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
}

func (q *Queries) UpdateIndustrialUnitTypesBranch(ctx context.Context, arg UpdateIndustrialUnitTypesBranchParams) (IndustrialUnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrialUnitTypesBranch,
		arg.ID,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
	)
	var i IndustrialUnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}
