// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: properties_plans_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createPropertyBranchPlan = `-- name: CreatePropertyBranchPlan :one
INSERT INTO properties_plans_branch (
    img_url,
    title,
    properties_id,
    property,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, img_url, title, properties_id, property, created_at, updated_at, projects_id
`

type CreatePropertyBranchPlanParams struct {
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreatePropertyBranchPlan(ctx context.Context, arg CreatePropertyBranchPlanParams) (PropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, createPropertyBranchPlan,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
	)
	return i, err
}

const deletePropertyBranchPlan = `-- name: DeletePropertyBranchPlan :exec
DELETE FROM properties_plans_branch
Where id = $1
`

func (q *Queries) DeletePropertyBranchPlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyBranchPlan, id)
	return err
}

const getAllPropertyBranchPlan = `-- name: GetAllPropertyBranchPlan :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at, projects_id FROM properties_plans_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllPropertyBranchPlanParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPropertyBranchPlan(ctx context.Context, arg GetAllPropertyBranchPlanParams) ([]PropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllPropertyBranchPlan, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertiesPlansBranch
	for rows.Next() {
		var i PropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPropertyBranchPlanById = `-- name: GetAllPropertyBranchPlanById :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at 
 FROM properties_plans_branch 
WHERE properties_id = $1 AND property = $2
`

type GetAllPropertyBranchPlanByIdParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

type GetAllPropertyBranchPlanByIdRow struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) GetAllPropertyBranchPlanById(ctx context.Context, arg GetAllPropertyBranchPlanByIdParams) ([]GetAllPropertyBranchPlanByIdRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyBranchPlanById, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyBranchPlanByIdRow
	for rows.Next() {
		var i GetAllPropertyBranchPlanByIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPropertyBranchPlanWithoutPagination = `-- name: GetAllPropertyBranchPlanWithoutPagination :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at, projects_id FROM properties_plans_branch
ORDER BY id
`

func (q *Queries) GetAllPropertyBranchPlanWithoutPagination(ctx context.Context) ([]PropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllPropertyBranchPlanWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertiesPlansBranch
	for rows.Next() {
		var i PropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertiesBranchPlanByTitle = `-- name: GetPropertiesBranchPlanByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at, projects_id FROM properties_plans_branch 
WHERE title = $1 AND properties_id = $2 AND property = $3
`

type GetPropertiesBranchPlanByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetPropertiesBranchPlanByTitle(ctx context.Context, arg GetPropertiesBranchPlanByTitleParams) (PropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getPropertiesBranchPlanByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i PropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
	)
	return i, err
}

const getPropertyBranchPlan = `-- name: GetPropertyBranchPlan :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at, projects_id FROM properties_plans_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetPropertyBranchPlan(ctx context.Context, limit int32) (PropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getPropertyBranchPlan, limit)
	var i PropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
	)
	return i, err
}

const getPropertyPlanBranchByTitle = `-- name: GetPropertyPlanBranchByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at, projects_id FROM properties_plans_branch 
WHERE title=$1 AND properties_id=$2 AND property=$3
`

type GetPropertyPlanBranchByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetPropertyPlanBranchByTitle(ctx context.Context, arg GetPropertyPlanBranchByTitleParams) (PropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getPropertyPlanBranchByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i PropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
	)
	return i, err
}

const updatePropertyBranchPlan = `-- name: UpdatePropertyBranchPlan :one
UPDATE properties_plans_branch
SET  img_url = $2,
    title = $3,
    properties_id = $4,
    property = $5,
    created_at = $6,
    updated_at = $7
Where id = $1
RETURNING id, img_url, title, properties_id, property, created_at, updated_at, projects_id
`

type UpdatePropertyBranchPlanParams struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePropertyBranchPlan(ctx context.Context, arg UpdatePropertyBranchPlanParams) (PropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, updatePropertyBranchPlan,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
	)
	return i, err
}
