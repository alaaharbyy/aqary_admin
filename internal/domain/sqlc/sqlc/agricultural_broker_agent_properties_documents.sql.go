// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_broker_agent_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalBrokerAgentPropertyDoc = `-- name: CreateAgriculturalBrokerAgentPropertyDoc :one
INSERT INTO agricultural_broker_agent_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    agricultural_broker_agent_properties_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_id, status, is_branch
`

type CreateAgriculturalBrokerAgentPropertyDocParams struct {
	DocumentsCategoryID                 int64       `json:"documents_category_id"`
	DocumentsSubcategoryID              int64       `json:"documents_subcategory_id"`
	FileUrl                             []string    `json:"file_url"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	Status                              int64       `json:"status"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalBrokerAgentPropertyDoc(ctx context.Context, arg CreateAgriculturalBrokerAgentPropertyDocParams) (AgriculturalBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createAgriculturalBrokerAgentPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalBrokerAgentPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalBrokerAgentPropertyDoc = `-- name: DeleteAgriculturalBrokerAgentPropertyDoc :exec
DELETE FROM agricultural_broker_agent_properties_documents
Where id = $1
`

func (q *Queries) DeleteAgriculturalBrokerAgentPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalBrokerAgentPropertyDoc, id)
	return err
}

const getAgriculturalBrokerAgentPropertyDoc = `-- name: GetAgriculturalBrokerAgentPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_id, status, is_branch FROM agricultural_broker_agent_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalBrokerAgentPropertyDoc(ctx context.Context, limit int32) (AgriculturalBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyDoc, limit)
	var i AgriculturalBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerAgentPropertyDoc = `-- name: GetAllAgriculturalBrokerAgentPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_id, status, is_branch FROM agricultural_broker_agent_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalBrokerAgentPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyDoc(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyDocParams) ([]AgriculturalBrokerAgentPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesDocument
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalBrokerAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalBrokerAgentPropertyDoc = `-- name: UpdateAgriculturalBrokerAgentPropertyDoc :one
UPDATE agricultural_broker_agent_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    agricultural_broker_agent_properties_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_id, status, is_branch
`

type UpdateAgriculturalBrokerAgentPropertyDocParams struct {
	ID                                  int64       `json:"id"`
	DocumentsCategoryID                 int64       `json:"documents_category_id"`
	DocumentsSubcategoryID              int64       `json:"documents_subcategory_id"`
	FileUrl                             []string    `json:"file_url"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	Status                              int64       `json:"status"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalBrokerAgentPropertyDoc(ctx context.Context, arg UpdateAgriculturalBrokerAgentPropertyDocParams) (AgriculturalBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalBrokerAgentPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalBrokerAgentPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
