// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFreelancerPropertyDoc = `-- name: CreateFreelancerPropertyDoc :one
INSERT INTO freelancers_properties_documents (
  documents_category_id,
  documents_subcategory_id,
  file_url,
  created_at, 
  updated_at,  
  freelancers_properties_id, 
  status
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status
`

type CreateFreelancerPropertyDocParams struct {
	DocumentsCategoryID     int64     `json:"documents_category_id"`
	DocumentsSubcategoryID  int64     `json:"documents_subcategory_id"`
	FileUrl                 []string  `json:"file_url"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	FreelancersPropertiesID int64     `json:"freelancers_properties_id"`
	Status                  int64     `json:"status"`
}

func (q *Queries) CreateFreelancerPropertyDoc(ctx context.Context, arg CreateFreelancerPropertyDocParams) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createFreelancerPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersPropertiesID,
		arg.Status,
	)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}

const deleteFreelancerPropertyDoc = `-- name: DeleteFreelancerPropertyDoc :exec
DELETE FROM freelancers_properties_documents
Where id = $1
`

func (q *Queries) DeleteFreelancerPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancerPropertyDoc, id)
	return err
}

const getAllFreelancerPropertyDoc = `-- name: GetAllFreelancerPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status FROM freelancers_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllFreelancerPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancerPropertyDoc(ctx context.Context, arg GetAllFreelancerPropertyDocParams) ([]FreelancersPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesDocument
	for rows.Next() {
		var i FreelancersPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FreelancersPropertiesID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetAllFreelancerPropertyDocByFreelancerPropertyId :many
SELECT freelancers_properties_documents.id,freelancers_properties_documents.documents_category_id,freelancers_properties_documents.documents_subcategory_id,freelancers_properties_documents.file_url,freelancers_properties_documents.created_at,freelancers_properties_documents.updated_at,freelancers_properties_documents.freelancers_properties_id,freelancers_properties_documents.status,documents_category.category,documents_subcategory.sub_category FROM freelancers_properties_documents 
LEFT JOIN documents_category ON documents_category.id=freelancers_properties_documents.documents_category_id 
LEFT JOIN documents_subcategory ON documents_subcategory.id=freelancers_properties_documents.documents_subcategory_id 
WHERE freelancers_properties_documents.freelancers_properties_id=$3 ORDER BY freelancers_properties_documents.id LIMIT $1 OFFSET $2
`

type GetAllFreelancerPropertyDocByFreelancerPropertyIdParams struct {
	Limit                   int32 `json:"limit"`
	Offset                  int32 `json:"offset"`
	FreelancersPropertiesID int64 `json:"freelancers_properties_id"`
}

type GetAllFreelancerPropertyDocByFreelancerPropertyIdRow struct {
	ID                      int64       `json:"id"`
	DocumentsCategoryID     int64       `json:"documents_category_id"`
	DocumentsSubcategoryID  int64       `json:"documents_subcategory_id"`
	FileUrl                 []string    `json:"file_url"`
	CreatedAt               time.Time   `json:"created_at"`
	UpdatedAt               time.Time   `json:"updated_at"`
	FreelancersPropertiesID int64       `json:"freelancers_properties_id"`
	Status                  int64       `json:"status"`
	Category                pgtype.Text `json:"category"`
	SubCategory             pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, arg GetAllFreelancerPropertyDocByFreelancerPropertyIdParams) ([]GetAllFreelancerPropertyDocByFreelancerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerPropertyDocByFreelancerPropertyId, arg.Limit, arg.Offset, arg.FreelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFreelancerPropertyDocByFreelancerPropertyIdRow
	for rows.Next() {
		var i GetAllFreelancerPropertyDocByFreelancerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FreelancersPropertiesID,
			&i.Status,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetCountFreelancerPropertyDocByFreelancerPropertyId :one
SELECT count(*)FROM freelancers_properties_documents WHERE freelancers_properties_documents.freelancers_properties_id=$1
`

func (q *Queries) GetCountFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, freelancersPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountFreelancerPropertyDocByFreelancerPropertyId, freelancersPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFreelancerPropertyDoc = `-- name: GetFreelancerPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status FROM freelancers_properties_documents 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFreelancerPropertyDoc(ctx context.Context, id int64) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyDoc, id)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}

const getFreelancerPropertyDocByFreelancerPropertyDocId = `-- name: GetFreelancerPropertyDocByFreelancerPropertyDocId :one
SELECT freelancers_properties_documents.id,freelancers_properties_documents.documents_category_id,freelancers_properties_documents.documents_subcategory_id,
freelancers_properties_documents.file_url,freelancers_properties_documents.created_at,freelancers_properties_documents.updated_at,
freelancers_properties_documents.freelancers_properties_id,
freelancers_properties_documents.status,
documents_category.category,documents_subcategory.sub_category 
FROM freelancers_properties_documents LEFT JOIN documents_category ON documents_category.id=freelancers_properties_documents.documents_category_id
 LEFT JOIN documents_subcategory ON documents_subcategory.id=freelancers_properties_documents.documents_subcategory_id 
 WHERE freelancers_properties_documents.id=$1
`

type GetFreelancerPropertyDocByFreelancerPropertyDocIdRow struct {
	ID                      int64       `json:"id"`
	DocumentsCategoryID     int64       `json:"documents_category_id"`
	DocumentsSubcategoryID  int64       `json:"documents_subcategory_id"`
	FileUrl                 []string    `json:"file_url"`
	CreatedAt               time.Time   `json:"created_at"`
	UpdatedAt               time.Time   `json:"updated_at"`
	FreelancersPropertiesID int64       `json:"freelancers_properties_id"`
	Status                  int64       `json:"status"`
	Category                pgtype.Text `json:"category"`
	SubCategory             pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetFreelancerPropertyDocByFreelancerPropertyDocId(ctx context.Context, id int64) (GetFreelancerPropertyDocByFreelancerPropertyDocIdRow, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyDocByFreelancerPropertyDocId, id)
	var i GetFreelancerPropertyDocByFreelancerPropertyDocIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status FROM freelancers_properties_documents 
WHERE freelancers_properties_id=$1 AND documents_category_id=$2 AND documents_subcategory_id=$3
`

type GetFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	FreelancersPropertiesID int64 `json:"freelancers_properties_id"`
	DocumentsCategoryID     int64 `json:"documents_category_id"`
	DocumentsSubcategoryID  int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyDocumentsByFreelancerPropertyIdAndDocCatIdAndSubDocCatId, arg.FreelancersPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}

const getFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatId = `-- name: GetFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id,
 file_url, created_at, updated_at, freelancers_properties_id, status FROM freelancers_properties_documents 
WHERE freelancers_properties_id = $1 
AND documents_category_id = $2 AND documents_subcategory_id = $3
`

type GetFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatIdParams struct {
	FreelancersPropertiesID int64 `json:"freelancers_properties_id"`
	DocumentsCategoryID     int64 `json:"documents_category_id"`
	DocumentsSubcategoryID  int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatIdParams) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyDocumentsByRentPropertyUnitIdAndDocCatIdAndSubDocCatId, arg.FreelancersPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}

const updateFreelancerPropertyDoc = `-- name: UpdateFreelancerPropertyDoc :one
UPDATE freelancers_properties_documents
SET documents_category_id = $2,
  documents_subcategory_id = $3,
  file_url = $4,
  created_at = $5, 
  updated_at = $6,  
  freelancers_properties_id = $7, 
  status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status
`

type UpdateFreelancerPropertyDocParams struct {
	ID                      int64     `json:"id"`
	DocumentsCategoryID     int64     `json:"documents_category_id"`
	DocumentsSubcategoryID  int64     `json:"documents_subcategory_id"`
	FileUrl                 []string  `json:"file_url"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	FreelancersPropertiesID int64     `json:"freelancers_properties_id"`
	Status                  int64     `json:"status"`
}

func (q *Queries) UpdateFreelancerPropertyDoc(ctx context.Context, arg UpdateFreelancerPropertyDocParams) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersPropertiesID,
		arg.Status,
	)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}

const updateFreelancerPropertyDocStatusById = `-- name: UpdateFreelancerPropertyDocStatusById :one
UPDATE freelancers_properties_documents
SET status = $2
WHERE id= $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, freelancers_properties_id, status
`

type UpdateFreelancerPropertyDocStatusByIdParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateFreelancerPropertyDocStatusById(ctx context.Context, arg UpdateFreelancerPropertyDocStatusByIdParams) (FreelancersPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyDocStatusById, arg.ID, arg.Status)
	var i FreelancersPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FreelancersPropertiesID,
		&i.Status,
	)
	return i, err
}
