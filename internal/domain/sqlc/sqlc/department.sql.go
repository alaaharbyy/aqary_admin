// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: department.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO department (
    department,
    department_ar,
    created_at,
    status,
    company_id,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, department, department_ar, status, company_id, created_at, updated_at
`

type CreateDepartmentParams struct {
	Department   string      `json:"department"`
	DepartmentAr pgtype.Text `json:"department_ar"`
	CreatedAt    time.Time   `json:"created_at"`
	Status       int64       `json:"status"`
	CompanyID    pgtype.Int8 `json:"company_id"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment,
		arg.Department,
		arg.DepartmentAr,
		arg.CreatedAt,
		arg.Status,
		arg.CompanyID,
		arg.UpdatedAt,
	)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.DepartmentAr,
		&i.Status,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDepartment = `-- name: DeleteDepartment :exec
DELETE FROM department
Where 
 CASE WHEN $2 = 0 THEN true ELSE department.company_id = $2 END
AND id = $1
`

type DeleteDepartmentParams struct {
	ID        int64       `json:"id"`
	CompanyID interface{} `json:"company_id"`
}

func (q *Queries) DeleteDepartment(ctx context.Context, arg DeleteDepartmentParams) error {
	_, err := q.db.Exec(ctx, deleteDepartment, arg.ID, arg.CompanyID)
	return err
}

const getAllDepartment = `-- name: GetAllDepartment :many
SELECT id, department, department_ar, status, company_id, created_at, updated_at FROM department
WHERE 
 CASE 
 WHEN $3 = 0 THEN department.company_id IS NULL
 ELSE department.company_id = $3 END
 AND ( $4 = '%%'
  OR department.department ILIKE $4
  OR department.department_ar ILIKE $4
 )
ORDER BY updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllDepartmentParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	CompanyID interface{} `json:"company_id"`
	Search    interface{} `json:"search"`
}

func (q *Queries) GetAllDepartment(ctx context.Context, arg GetAllDepartmentParams) ([]Department, error) {
	rows, err := q.db.Query(ctx, getAllDepartment,
		arg.Limit,
		arg.Offset,
		arg.CompanyID,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Department,
			&i.DepartmentAr,
			&i.Status,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDepartmentWithoutPagination = `-- name: GetAllDepartmentWithoutPagination :many
SELECT id, department, department_ar, status, company_id, created_at, updated_at FROM department
ORDER BY id
`

func (q *Queries) GetAllDepartmentWithoutPagination(ctx context.Context) ([]Department, error) {
	rows, err := q.db.Query(ctx, getAllDepartmentWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Department
	for rows.Next() {
		var i Department
		if err := rows.Scan(
			&i.ID,
			&i.Department,
			&i.DepartmentAr,
			&i.Status,
			&i.CompanyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllDepartment = `-- name: GetCountAllDepartment :one
SELECT COUNT(department.id) FROM department
WHERE 
CASE WHEN $1 = 0 THEN department.company_id IS NULL
 ELSE department.company_id = $1 END
AND
 ( $2 = '%%'
  OR department.department ILIKE $2
  OR department.department_ar ILIKE $2
 )
`

type GetCountAllDepartmentParams struct {
	CompanyID interface{} `json:"company_id"`
	Search    interface{} `json:"search"`
}

func (q *Queries) GetCountAllDepartment(ctx context.Context, arg GetCountAllDepartmentParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllDepartment, arg.CompanyID, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDepartment = `-- name: GetDepartment :one
SELECT id, department, department_ar, status, company_id, created_at, updated_at FROM department 
 WHERE 
    CASE WHEN  $1 = 0 THEN true ELSE department.company_id = $1 END
  AND 
department.id = $2
`

type GetDepartmentParams struct {
	CompanyID    interface{} `json:"company_id"`
	DepartmentID int64       `json:"department_id"`
}

func (q *Queries) GetDepartment(ctx context.Context, arg GetDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartment, arg.CompanyID, arg.DepartmentID)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.DepartmentAr,
		&i.Status,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDepartmentByDepartment = `-- name: GetDepartmentByDepartment :one
SELECT id, department, department_ar, status, company_id, created_at, updated_at FROM department 
WHERE  
 CASE WHEN  $1 = 0 THEN true ELSE department.company_id = $1 END
 AND LOWER(department.department) = LOWER($2) LIMIT 1
`

type GetDepartmentByDepartmentParams struct {
	CompanyID  interface{} `json:"company_id"`
	Department string      `json:"department"`
}

func (q *Queries) GetDepartmentByDepartment(ctx context.Context, arg GetDepartmentByDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByDepartment, arg.CompanyID, arg.Department)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.DepartmentAr,
		&i.Status,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDepartment = `-- name: UpdateDepartment :one


UPDATE department
SET department = $2,
    department_ar = $3,
    updated_at = $4
Where 
 CASE WHEN $5 = 0 THEN true ELSE department.company_id = $5 END
 AND
 id = $1 
RETURNING id, department, department_ar, status, company_id, created_at, updated_at
`

type UpdateDepartmentParams struct {
	ID           int64       `json:"id"`
	Department   string      `json:"department"`
	DepartmentAr pgtype.Text `json:"department_ar"`
	UpdatedAt    time.Time   `json:"updated_at"`
	CompanyID    interface{} `json:"company_id"`
}

// SELECT COUNT(*) FROM department;
func (q *Queries) UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, updateDepartment,
		arg.ID,
		arg.Department,
		arg.DepartmentAr,
		arg.UpdatedAt,
		arg.CompanyID,
	)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Department,
		&i.DepartmentAr,
		&i.Status,
		&i.CompanyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
