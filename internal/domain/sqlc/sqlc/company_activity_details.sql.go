// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_activity_details.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompanyActivityDetail = `-- name: CreateCompanyActivityDetail :one
INSERT INTO company_activities_detail(
    company_id,
    activity_id,
    title,
    description,
    status,
    created_by,
    created_at,
    updated_at
) VALUES($1,$2,$3,$4,$5,$6,$7,$8)RETURNING id, company_id, activity_id, title, description, status, created_by, created_at, updated_at
`

type CreateCompanyActivityDetailParams struct {
	CompanyID   int64       `json:"company_id"`
	ActivityID  int64       `json:"activity_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Status      int64       `json:"status"`
	CreatedBy   int64       `json:"created_by"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) CreateCompanyActivityDetail(ctx context.Context, arg CreateCompanyActivityDetailParams) (CompanyActivitiesDetail, error) {
	row := q.db.QueryRow(ctx, createCompanyActivityDetail,
		arg.CompanyID,
		arg.ActivityID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i CompanyActivitiesDetail
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.ActivityID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyActivityDetail = `-- name: GetCompanyActivityDetail :one
SELECT
  ca.id as activity_id,cad.id, ca.activity_name, cad.description, p.first_name, p.last_name, cad.updated_at, cad.title
FROM company_activities_detail cad
JOIN
  company_activities ca
  ON
  ca.id = cad.activity_id 
left join profiles p on p.users_id  = cad.created_by
where cad.activity_id  = $1 and cad.company_id  = $2
`

type GetCompanyActivityDetailParams struct {
	ActivityID int64 `json:"activity_id"`
	CompanyID  int64 `json:"company_id"`
}

type GetCompanyActivityDetailRow struct {
	ActivityID   int64       `json:"activity_id"`
	ID           int64       `json:"id"`
	ActivityName string      `json:"activity_name"`
	Description  pgtype.Text `json:"description"`
	FirstName    pgtype.Text `json:"first_name"`
	LastName     pgtype.Text `json:"last_name"`
	UpdatedAt    time.Time   `json:"updated_at"`
	Title        string      `json:"title"`
}

func (q *Queries) GetCompanyActivityDetail(ctx context.Context, arg GetCompanyActivityDetailParams) (GetCompanyActivityDetailRow, error) {
	row := q.db.QueryRow(ctx, getCompanyActivityDetail, arg.ActivityID, arg.CompanyID)
	var i GetCompanyActivityDetailRow
	err := row.Scan(
		&i.ActivityID,
		&i.ID,
		&i.ActivityName,
		&i.Description,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.Title,
	)
	return i, err
}

const getCompanyActivityDetails = `-- name: GetCompanyActivityDetails :many
SELECT
   ca.id as activity_id,cad.id, ca.activity_name, cad.description, p.first_name, p.last_name, cad.updated_at, cad.title
FROM
  companies c
JOIN
  company_activities ca
ON
  ca.id = ANY(c.company_activities_id)
left join
company_activities_detail cad on cad.activity_id  = ca.id and cad.company_id = $1 AND cad.status = 2
left join profiles p on p.users_id  = cad.created_by
where c.id = $1
LIMIT $3
OFFSET $2
`

type GetCompanyActivityDetailsParams struct {
	CompanyID int64       `json:"company_id"`
	Offset    pgtype.Int4 `json:"offset"`
	Limit     pgtype.Int4 `json:"limit"`
}

type GetCompanyActivityDetailsRow struct {
	ActivityID   int64              `json:"activity_id"`
	ID           pgtype.Int8        `json:"id"`
	ActivityName string             `json:"activity_name"`
	Description  pgtype.Text        `json:"description"`
	FirstName    pgtype.Text        `json:"first_name"`
	LastName     pgtype.Text        `json:"last_name"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	Title        pgtype.Text        `json:"title"`
}

func (q *Queries) GetCompanyActivityDetails(ctx context.Context, arg GetCompanyActivityDetailsParams) ([]GetCompanyActivityDetailsRow, error) {
	rows, err := q.db.Query(ctx, getCompanyActivityDetails, arg.CompanyID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyActivityDetailsRow
	for rows.Next() {
		var i GetCompanyActivityDetailsRow
		if err := rows.Scan(
			&i.ActivityID,
			&i.ID,
			&i.ActivityName,
			&i.Description,
			&i.FirstName,
			&i.LastName,
			&i.UpdatedAt,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyActivityDetailsCount = `-- name: GetCompanyActivityDetailsCount :one
SELECT 
    count(ca.*)
FROM
  companies c
JOIN
  company_activities ca
ON
  ca.id = ANY(c.company_activities_id)
left join
company_activities_detail cad on cad.activity_id  = ca.id and cad.company_id = $1 AND cad.status = 2
left join profiles p on p.users_id  = cad.created_by
where c.id = $1::bigint
`

func (q *Queries) GetCompanyActivityDetailsCount(ctx context.Context, companyID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCompanyActivityDetailsCount, companyID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleCompanyActivityDetail = `-- name: GetSingleCompanyActivityDetail :one
SELECT
  ca.id AS activity_id,
  cad.id,
  ca.activity_name,
  cad.description,
  p.first_name,
  p.last_name,
  cad.updated_at,
  cad.title
FROM companies c
LEFT JOIN company_activities ca
  ON ca.id = ANY(c.company_activities_id)
LEFT JOIN company_activities_detail cad
  ON cad.activity_id = ca.id AND cad.company_id = c.id AND cad.status = 2
LEFT JOIN profiles p
  ON p.users_id = cad.created_by
WHERE c.id = $1 AND ca.id = $2::bigint
`

type GetSingleCompanyActivityDetailParams struct {
	ID         int64 `json:"id"`
	ActivityID int64 `json:"activity_id"`
}

type GetSingleCompanyActivityDetailRow struct {
	ActivityID   pgtype.Int8        `json:"activity_id"`
	ID           pgtype.Int8        `json:"id"`
	ActivityName pgtype.Text        `json:"activity_name"`
	Description  pgtype.Text        `json:"description"`
	FirstName    pgtype.Text        `json:"first_name"`
	LastName     pgtype.Text        `json:"last_name"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	Title        pgtype.Text        `json:"title"`
}

func (q *Queries) GetSingleCompanyActivityDetail(ctx context.Context, arg GetSingleCompanyActivityDetailParams) (GetSingleCompanyActivityDetailRow, error) {
	row := q.db.QueryRow(ctx, getSingleCompanyActivityDetail, arg.ID, arg.ActivityID)
	var i GetSingleCompanyActivityDetailRow
	err := row.Scan(
		&i.ActivityID,
		&i.ID,
		&i.ActivityName,
		&i.Description,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.Title,
	)
	return i, err
}

const updateCompanyActivityDetail = `-- name: UpdateCompanyActivityDetail :exec
UPDATE company_activities_detail
SET
    title=$2,
    description=$3,
    updated_at=$4
WHERE id=$1
`

type UpdateCompanyActivityDetailParams struct {
	ID          int64       `json:"id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateCompanyActivityDetail(ctx context.Context, arg UpdateCompanyActivityDetailParams) error {
	_, err := q.db.Exec(ctx, updateCompanyActivityDetail,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}

const updateCompanyActivityDetailStatus = `-- name: UpdateCompanyActivityDetailStatus :exec
UPDATE company_activities_detail
SET
    status=$2,
    updated_at=$3
WHERE id=$1
`

type UpdateCompanyActivityDetailStatusParams struct {
	ID        int64     `json:"id"`
	Status    int64     `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateCompanyActivityDetailStatus(ctx context.Context, arg UpdateCompanyActivityDetailStatusParams) error {
	_, err := q.db.Exec(ctx, updateCompanyActivityDetailStatus, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}
