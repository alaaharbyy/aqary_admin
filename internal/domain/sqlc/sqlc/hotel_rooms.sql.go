// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_rooms.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotelRoom = `-- name: CreateHotelRoom :one
INSERT INTO hotel_rooms (
    ref_no,
    posted_hotel_id,
    room_types_id,
    room_number,
    title,
    title_ar,
    description,
    description_ar,
    price_night,
    is_booked,
    created_at,
    updated_at,
    max_pax,
    bedrooms,
    common_bathroom,
    private_bathroom,
    status
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16,$17
) RETURNING id, ref_no, posted_hotel_id, room_types_id, room_number, title, title_ar, description, description_ar, price_night, is_booked, created_at, updated_at, max_pax, bedrooms, common_bathroom, private_bathroom, status
`

type CreateHotelRoomParams struct {
	RefNo           string             `json:"ref_no"`
	PostedHotelID   int64              `json:"posted_hotel_id"`
	RoomTypesID     int64              `json:"room_types_id"`
	RoomNumber      string             `json:"room_number"`
	Title           string             `json:"title"`
	TitleAr         pgtype.Text        `json:"title_ar"`
	Description     string             `json:"description"`
	DescriptionAr   pgtype.Text        `json:"description_ar"`
	PriceNight      float64            `json:"price_night"`
	IsBooked        pgtype.Bool        `json:"is_booked"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	MaxPax          int64              `json:"max_pax"`
	Bedrooms        int64              `json:"bedrooms"`
	CommonBathroom  int64              `json:"common_bathroom"`
	PrivateBathroom int64              `json:"private_bathroom"`
	Status          int64              `json:"status"`
}

func (q *Queries) CreateHotelRoom(ctx context.Context, arg CreateHotelRoomParams) (HotelRoom, error) {
	row := q.db.QueryRow(ctx, createHotelRoom,
		arg.RefNo,
		arg.PostedHotelID,
		arg.RoomTypesID,
		arg.RoomNumber,
		arg.Title,
		arg.TitleAr,
		arg.Description,
		arg.DescriptionAr,
		arg.PriceNight,
		arg.IsBooked,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MaxPax,
		arg.Bedrooms,
		arg.CommonBathroom,
		arg.PrivateBathroom,
		arg.Status,
	)
	var i HotelRoom
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PostedHotelID,
		&i.RoomTypesID,
		&i.RoomNumber,
		&i.Title,
		&i.TitleAr,
		&i.Description,
		&i.DescriptionAr,
		&i.PriceNight,
		&i.IsBooked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxPax,
		&i.Bedrooms,
		&i.CommonBathroom,
		&i.PrivateBathroom,
		&i.Status,
	)
	return i, err
}

const getAllHotelRooms = `-- name: GetAllHotelRooms :many
SELECT 
    hr.id,
    hr.ref_no,
    hr.title,
    hr.price_night,
    hr.room_types_id,
    hr.room_number,
    hr.title_ar,
    hr.description,
    hr.description_ar,
    hr.is_booked,
    hr.created_at,
    hr.updated_at,
    hr.max_pax,
    hr.bedrooms,
    hr.common_bathroom,
    hr.private_bathroom,
    hr.status,
    room_types.title AS room_type,
    states.state,
    cities.city,
    communities.community,
    sub_communities.sub_community,
    CASE 
        WHEN hr.is_booked = true THEN 'BOOKED'
        ELSE 'AVAILABLE'
    END AS status
FROM 
    hotel_rooms AS hr
INNER JOIN 
    posted_hotel_bookings AS phb ON hr.posted_hotel_id = phb.id
INNER JOIN 
    room_types ON hr.room_types_id = room_types.id
INNER JOIN 
    states ON phb.states_id = states.id
INNER JOIN 
    cities ON phb.cities_id = cities.id
INNER JOIN 
    communities ON phb.community_id = communities.id
INNER JOIN 
    sub_communities on phb.subcommunity_id = sub_communities.id
WHERE
	hr.status!=6
ORDER BY 
    hr.id
LIMIT $1
OFFSET $2
`

type GetAllHotelRoomsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllHotelRoomsRow struct {
	ID              int64              `json:"id"`
	RefNo           string             `json:"ref_no"`
	Title           string             `json:"title"`
	PriceNight      float64            `json:"price_night"`
	RoomTypesID     int64              `json:"room_types_id"`
	RoomNumber      string             `json:"room_number"`
	TitleAr         pgtype.Text        `json:"title_ar"`
	Description     string             `json:"description"`
	DescriptionAr   pgtype.Text        `json:"description_ar"`
	IsBooked        pgtype.Bool        `json:"is_booked"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	MaxPax          int64              `json:"max_pax"`
	Bedrooms        int64              `json:"bedrooms"`
	CommonBathroom  int64              `json:"common_bathroom"`
	PrivateBathroom int64              `json:"private_bathroom"`
	Status          int64              `json:"status"`
	RoomType        string             `json:"room_type"`
	State           string             `json:"state"`
	City            string             `json:"city"`
	Community       string             `json:"community"`
	SubCommunity    string             `json:"sub_community"`
	Status_2        string             `json:"status_2"`
}

func (q *Queries) GetAllHotelRooms(ctx context.Context, arg GetAllHotelRoomsParams) ([]GetAllHotelRoomsRow, error) {
	rows, err := q.db.Query(ctx, getAllHotelRooms, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHotelRoomsRow
	for rows.Next() {
		var i GetAllHotelRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Title,
			&i.PriceNight,
			&i.RoomTypesID,
			&i.RoomNumber,
			&i.TitleAr,
			&i.Description,
			&i.DescriptionAr,
			&i.IsBooked,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MaxPax,
			&i.Bedrooms,
			&i.CommonBathroom,
			&i.PrivateBathroom,
			&i.Status,
			&i.RoomType,
			&i.State,
			&i.City,
			&i.Community,
			&i.SubCommunity,
			&i.Status_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelRoomByID = `-- name: GetHotelRoomByID :one
SELECT id, ref_no, posted_hotel_id, room_types_id, room_number, title, title_ar, description, description_ar, price_night, is_booked, created_at, updated_at, max_pax, bedrooms, common_bathroom, private_bathroom, status FROM hotel_rooms WHERE id=$1
`

func (q *Queries) GetHotelRoomByID(ctx context.Context, id int64) (HotelRoom, error) {
	row := q.db.QueryRow(ctx, getHotelRoomByID, id)
	var i HotelRoom
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PostedHotelID,
		&i.RoomTypesID,
		&i.RoomNumber,
		&i.Title,
		&i.TitleAr,
		&i.Description,
		&i.DescriptionAr,
		&i.PriceNight,
		&i.IsBooked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxPax,
		&i.Bedrooms,
		&i.CommonBathroom,
		&i.PrivateBathroom,
		&i.Status,
	)
	return i, err
}

const getNumberOfHotelRooms = `-- name: GetNumberOfHotelRooms :one
SELECT COUNT(id) 
FROM hotel_rooms 
WHERE status!=6
`

func (q *Queries) GetNumberOfHotelRooms(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfHotelRooms)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleHotelRoom = `-- name: GetSingleHotelRoom :one
SELECT 
    hr.id,
    hr.ref_no,
    hr.posted_hotel_id,
    hr.room_types_id,
    hr.room_number,
    hr.title,
    hr.title_ar,
    hr.description,
    hr.description_ar,
    hr.price_night,
    hr.is_booked,
    hr.created_at,
    hr.updated_at,
    hr.max_pax,
    hr.bedrooms,
    hr.common_bathroom,
    hr.private_bathroom,
    hr.status,
    phb.title AS hotel_booking_title,
    room_types.title AS room_type
FROM 
    hotel_rooms AS hr 
INNER JOIN 
    posted_hotel_bookings AS phb ON hr.posted_hotel_id = phb.id
INNER JOIN 
    room_types ON hr.room_types_id = room_types.id
WHERE 
    hr.id = $1
`

type GetSingleHotelRoomRow struct {
	ID                int64              `json:"id"`
	RefNo             string             `json:"ref_no"`
	PostedHotelID     int64              `json:"posted_hotel_id"`
	RoomTypesID       int64              `json:"room_types_id"`
	RoomNumber        string             `json:"room_number"`
	Title             string             `json:"title"`
	TitleAr           pgtype.Text        `json:"title_ar"`
	Description       string             `json:"description"`
	DescriptionAr     pgtype.Text        `json:"description_ar"`
	PriceNight        float64            `json:"price_night"`
	IsBooked          pgtype.Bool        `json:"is_booked"`
	CreatedAt         time.Time          `json:"created_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	MaxPax            int64              `json:"max_pax"`
	Bedrooms          int64              `json:"bedrooms"`
	CommonBathroom    int64              `json:"common_bathroom"`
	PrivateBathroom   int64              `json:"private_bathroom"`
	Status            int64              `json:"status"`
	HotelBookingTitle string             `json:"hotel_booking_title"`
	RoomType          string             `json:"room_type"`
}

func (q *Queries) GetSingleHotelRoom(ctx context.Context, id int64) (GetSingleHotelRoomRow, error) {
	row := q.db.QueryRow(ctx, getSingleHotelRoom, id)
	var i GetSingleHotelRoomRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PostedHotelID,
		&i.RoomTypesID,
		&i.RoomNumber,
		&i.Title,
		&i.TitleAr,
		&i.Description,
		&i.DescriptionAr,
		&i.PriceNight,
		&i.IsBooked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxPax,
		&i.Bedrooms,
		&i.CommonBathroom,
		&i.PrivateBathroom,
		&i.Status,
		&i.HotelBookingTitle,
		&i.RoomType,
	)
	return i, err
}

const updateHotelRoom = `-- name: UpdateHotelRoom :one
UPDATE hotel_rooms
SET
    ref_no = $1,
    posted_hotel_id = $2,
    room_types_id = $3,
    room_number = $4,
    title = $5,
    title_ar = $6,
    description = $7,
    description_ar = $8,
    price_night = $9,
    is_booked = $10,
    created_at = $11,
    updated_at = $12,
    max_pax = $13,
    bedrooms = $14,
    common_bathroom = $15,
    private_bathroom = $16,
    status=$17
WHERE
    id = $18
RETURNING id, ref_no, posted_hotel_id, room_types_id, room_number, title, title_ar, description, description_ar, price_night, is_booked, created_at, updated_at, max_pax, bedrooms, common_bathroom, private_bathroom, status
`

type UpdateHotelRoomParams struct {
	RefNo           string             `json:"ref_no"`
	PostedHotelID   int64              `json:"posted_hotel_id"`
	RoomTypesID     int64              `json:"room_types_id"`
	RoomNumber      string             `json:"room_number"`
	Title           string             `json:"title"`
	TitleAr         pgtype.Text        `json:"title_ar"`
	Description     string             `json:"description"`
	DescriptionAr   pgtype.Text        `json:"description_ar"`
	PriceNight      float64            `json:"price_night"`
	IsBooked        pgtype.Bool        `json:"is_booked"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `json:"updated_at"`
	MaxPax          int64              `json:"max_pax"`
	Bedrooms        int64              `json:"bedrooms"`
	CommonBathroom  int64              `json:"common_bathroom"`
	PrivateBathroom int64              `json:"private_bathroom"`
	Status          int64              `json:"status"`
	ID              int64              `json:"id"`
}

func (q *Queries) UpdateHotelRoom(ctx context.Context, arg UpdateHotelRoomParams) (HotelRoom, error) {
	row := q.db.QueryRow(ctx, updateHotelRoom,
		arg.RefNo,
		arg.PostedHotelID,
		arg.RoomTypesID,
		arg.RoomNumber,
		arg.Title,
		arg.TitleAr,
		arg.Description,
		arg.DescriptionAr,
		arg.PriceNight,
		arg.IsBooked,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.MaxPax,
		arg.Bedrooms,
		arg.CommonBathroom,
		arg.PrivateBathroom,
		arg.Status,
		arg.ID,
	)
	var i HotelRoom
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PostedHotelID,
		&i.RoomTypesID,
		&i.RoomNumber,
		&i.Title,
		&i.TitleAr,
		&i.Description,
		&i.DescriptionAr,
		&i.PriceNight,
		&i.IsBooked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxPax,
		&i.Bedrooms,
		&i.CommonBathroom,
		&i.PrivateBathroom,
		&i.Status,
	)
	return i, err
}

const updateHotelRoomStatus = `-- name: UpdateHotelRoomStatus :one
UPDATE hotel_rooms
SET
  status=$1
WHERE
    id = $2
RETURNING id, ref_no, posted_hotel_id, room_types_id, room_number, title, title_ar, description, description_ar, price_night, is_booked, created_at, updated_at, max_pax, bedrooms, common_bathroom, private_bathroom, status
`

type UpdateHotelRoomStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateHotelRoomStatus(ctx context.Context, arg UpdateHotelRoomStatusParams) (HotelRoom, error) {
	row := q.db.QueryRow(ctx, updateHotelRoomStatus, arg.Status, arg.ID)
	var i HotelRoom
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PostedHotelID,
		&i.RoomTypesID,
		&i.RoomNumber,
		&i.Title,
		&i.TitleAr,
		&i.Description,
		&i.DescriptionAr,
		&i.PriceNight,
		&i.IsBooked,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaxPax,
		&i.Bedrooms,
		&i.CommonBathroom,
		&i.PrivateBathroom,
		&i.Status,
	)
	return i, err
}
