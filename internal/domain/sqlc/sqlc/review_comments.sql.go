// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: review_comments.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLiveCommentsForAgentReview = `-- name: GetLiveCommentsForAgentReview :many
SELECT 
    rc.id AS comment_id, 
    u.username as reviewer_username,
    rc.parent_review_comments as parent_comment_id, -- parent comment is in the review comments table
    p.first_name as agent_first_name,
    p.last_name as agent_last_name, 
    rcc.comment as parent_comment,
    cu.username as commented_by, 
    rcc.comment as parent_comment,
    rc.comment, 
    ar.agent_knowledge,
    ar.agent_expertise,
    ar.agent_responsiveness,
    ar.agent_negotiation,
    ar.review,
    COALESCE(bc.company_name, bcb.company_name) AS company_name,
    rc.comment_date
FROM review_comments rc
JOIN agent_reviews ar ON rc.reviews_id = ar.id
JOIN users as u ON ar.reviewer=u.id
JOIN profiles as p ON p.id=ar.agent_id
JOIN users as cu ON cu.id=rc.commented_by
LEFT JOIN review_comments rcc on rcc.id=rc.parent_review_comments
LEFT JOIN broker_companies bc ON ar.companies_id = bc.id AND ar.is_branch = false
LEFT JOIN broker_companies_branches bcb ON ar.companies_id = bcb.id AND ar.is_branch = true
WHERE rc.review_comment_category = 1 and ar.id=$1
`

type GetLiveCommentsForAgentReviewRow struct {
	CommentID           int64       `json:"comment_id"`
	ReviewerUsername    string      `json:"reviewer_username"`
	ParentCommentID     pgtype.Int8 `json:"parent_comment_id"`
	AgentFirstName      string      `json:"agent_first_name"`
	AgentLastName       string      `json:"agent_last_name"`
	ParentComment       pgtype.Text `json:"parent_comment"`
	CommentedBy         string      `json:"commented_by"`
	ParentComment_2     pgtype.Text `json:"parent_comment_2"`
	Comment             string      `json:"comment"`
	AgentKnowledge      int32       `json:"agent_knowledge"`
	AgentExpertise      int32       `json:"agent_expertise"`
	AgentResponsiveness int32       `json:"agent_responsiveness"`
	AgentNegotiation    int32       `json:"agent_negotiation"`
	Review              string      `json:"review"`
	CompanyName         string      `json:"company_name"`
	CommentDate         time.Time   `json:"comment_date"`
}

func (q *Queries) GetLiveCommentsForAgentReview(ctx context.Context, id int64) ([]GetLiveCommentsForAgentReviewRow, error) {
	rows, err := q.db.Query(ctx, getLiveCommentsForAgentReview, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLiveCommentsForAgentReviewRow
	for rows.Next() {
		var i GetLiveCommentsForAgentReviewRow
		if err := rows.Scan(
			&i.CommentID,
			&i.ReviewerUsername,
			&i.ParentCommentID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.ParentComment,
			&i.CommentedBy,
			&i.ParentComment_2,
			&i.Comment,
			&i.AgentKnowledge,
			&i.AgentExpertise,
			&i.AgentResponsiveness,
			&i.AgentNegotiation,
			&i.Review,
			&i.CompanyName,
			&i.CommentDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
