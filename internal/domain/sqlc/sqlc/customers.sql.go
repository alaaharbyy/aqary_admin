// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getActiveCustomerByEmail = `-- name: GetActiveCustomerByEmail :one
SELECT id, company_id, username, password, country_code, phone_number, date_of_birth, first_name, last_name, email, gender, profile_image_url, cover_image_url, about, addresses_id, is_phone_verified, is_email_verified, status, created_at, updated_at, nationality, social_login FROM platform_users
WHERE email = $1 and status = $2::BIGINT
AND (CASE WHEN $3::bigint = 0 THEN company_id IS NULL ELSE company_id = $3::bigint END) AND is_email_verified = true
`

type GetActiveCustomerByEmailParams struct {
	Email        string `json:"email"`
	ActiveStatus int64  `json:"active_status"`
	CompanyID    int64  `json:"company_id"`
}

func (q *Queries) GetActiveCustomerByEmail(ctx context.Context, arg GetActiveCustomerByEmailParams) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getActiveCustomerByEmail, arg.Email, arg.ActiveStatus, arg.CompanyID)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Username,
		&i.Password,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.ProfileImageUrl,
		&i.CoverImageUrl,
		&i.About,
		&i.AddressesID,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nationality,
		&i.SocialLogin,
	)
	return i, err
}

const getCustomerByPhoneVerified = `-- name: GetCustomerByPhoneVerified :one
SELECT id, company_id, username, password, country_code, phone_number, date_of_birth, first_name, last_name, email, gender, profile_image_url, cover_image_url, about, addresses_id, is_phone_verified, is_email_verified, status, created_at, updated_at, nationality, social_login FROM platform_users
WHERE phone_number = $1 AND country_code = $2 AND is_phone_verified = true AND status = $3::BIGINT
AND (CASE WHEN $4::bigint = 0 THEN company_id IS NULL ELSE company_id = $4::bigint END)
`

type GetCustomerByPhoneVerifiedParams struct {
	PhoneNumber  pgtype.Int8 `json:"phone_number"`
	CountryCode  pgtype.Text `json:"country_code"`
	ActiveStatus int64       `json:"active_status"`
	CompanyID    int64       `json:"company_id"`
}

func (q *Queries) GetCustomerByPhoneVerified(ctx context.Context, arg GetCustomerByPhoneVerifiedParams) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getCustomerByPhoneVerified,
		arg.PhoneNumber,
		arg.CountryCode,
		arg.ActiveStatus,
		arg.CompanyID,
	)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Username,
		&i.Password,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.ProfileImageUrl,
		&i.CoverImageUrl,
		&i.About,
		&i.AddressesID,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nationality,
		&i.SocialLogin,
	)
	return i, err
}

const getCustomerByUsername = `-- name: GetCustomerByUsername :one
SELECT id, company_id, username, password, country_code, phone_number, date_of_birth, first_name, last_name, email, gender, profile_image_url, cover_image_url, about, addresses_id, is_phone_verified, is_email_verified, status, created_at, updated_at, nationality, social_login FROM platform_users
WHERE username = $1 and status = $2::BIGINT AND (CASE WHEN $3::bigint = 0 THEN company_id IS NULL ELSE company_id = $3::bigint END) AND is_email_verified = true
`

type GetCustomerByUsernameParams struct {
	Username     string `json:"username"`
	ActiveStatus int64  `json:"active_status"`
	CompanyID    int64  `json:"company_id"`
}

func (q *Queries) GetCustomerByUsername(ctx context.Context, arg GetCustomerByUsernameParams) (PlatformUser, error) {
	row := q.db.QueryRow(ctx, getCustomerByUsername, arg.Username, arg.ActiveStatus, arg.CompanyID)
	var i PlatformUser
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Username,
		&i.Password,
		&i.CountryCode,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Gender,
		&i.ProfileImageUrl,
		&i.CoverImageUrl,
		&i.About,
		&i.AddressesID,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Nationality,
		&i.SocialLogin,
	)
	return i, err
}
