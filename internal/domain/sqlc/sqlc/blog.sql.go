// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: blog.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeStatusOfBlogByID = `-- name: ChangeStatusOfBlogByID :one
UPDATE blog
SET 
	status=$2  
WHERE
	id=$1 RETURNING id, company_types_id, is_branch, companies_id, blog_categories_id, title, sub_title, blog_article, is_public, status, created_by, created_at, media_type_id, media_url
`

type ChangeStatusOfBlogByIDParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) ChangeStatusOfBlogByID(ctx context.Context, arg ChangeStatusOfBlogByIDParams) (Blog, error) {
	row := q.db.QueryRow(ctx, changeStatusOfBlogByID, arg.ID, arg.Status)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.BlogCategoriesID,
		&i.Title,
		&i.SubTitle,
		&i.BlogArticle,
		&i.IsPublic,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.MediaTypeID,
		&i.MediaUrl,
	)
	return i, err
}

const createBlog = `-- name: CreateBlog :one
INSERT INTO blog (
    company_types_id,
    is_branch,
    companies_id,
    blog_categories_id,
    title,
    sub_title,
    blog_article,
    is_public,
    status,
    created_by,
    created_at,
    media_type_id,
    media_url
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13
) RETURNING id, company_types_id, is_branch, companies_id, blog_categories_id, title, sub_title, blog_article, is_public, status, created_by, created_at, media_type_id, media_url
`

type CreateBlogParams struct {
	CompanyTypesID   int64       `json:"company_types_id"`
	IsBranch         pgtype.Bool `json:"is_branch"`
	CompaniesID      int64       `json:"companies_id"`
	BlogCategoriesID int64       `json:"blog_categories_id"`
	Title            string      `json:"title"`
	SubTitle         pgtype.Text `json:"sub_title"`
	BlogArticle      string      `json:"blog_article"`
	IsPublic         pgtype.Bool `json:"is_public"`
	Status           int64       `json:"status"`
	CreatedBy        int64       `json:"created_by"`
	CreatedAt        time.Time   `json:"created_at"`
	MediaTypeID      int64       `json:"media_type_id"`
	MediaUrl         string      `json:"media_url"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompaniesID,
		arg.BlogCategoriesID,
		arg.Title,
		arg.SubTitle,
		arg.BlogArticle,
		arg.IsPublic,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.MediaTypeID,
		arg.MediaUrl,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.BlogCategoriesID,
		&i.Title,
		&i.SubTitle,
		&i.BlogArticle,
		&i.IsPublic,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.MediaTypeID,
		&i.MediaUrl,
	)
	return i, err
}

const deleteBlogByID = `-- name: DeleteBlogByID :exec
DELETE FROM blog
WHERE id = $1 AND blog.status !=6
`

func (q *Queries) DeleteBlogByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBlogByID, id)
	return err
}

const getAllBlogs = `-- name: GetAllBlogs :many
SELECT id, company_types_id, is_branch, companies_id, blog_categories_id, title, sub_title, blog_article, is_public, status, created_by, created_at, media_type_id, media_url
FROM blog
WHERE blog.status!=6
ORDER BY blog.id
LIMIT $1
OFFSET $2
`

type GetAllBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBlogs(ctx context.Context, arg GetAllBlogsParams) ([]Blog, error) {
	rows, err := q.db.Query(ctx, getAllBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.BlogCategoriesID,
			&i.Title,
			&i.SubTitle,
			&i.BlogArticle,
			&i.IsPublic,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.MediaTypeID,
			&i.MediaUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBlogsForManage = `-- name: GetAllBlogsForManage :many
SELECT
    blog.id,
    blog.title,
    blog.blog_article,
    blog.media_url,
    blog.blog_categories_id,
    blog_categories.category_title,
    blog_categories.category_title_ar,
    blog.companies_id,
    blog.created_by
FROM
    blog
INNER JOIN
    blog_categories ON blog.blog_categories_id=blog_categories.id AND blog_categories.status!=6
WHERE
    blog.status!=6
ORDER BY blog.id
LIMIT $1
OFFSET $2
`

type GetAllBlogsForManageParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllBlogsForManageRow struct {
	ID               int64       `json:"id"`
	Title            string      `json:"title"`
	BlogArticle      string      `json:"blog_article"`
	MediaUrl         string      `json:"media_url"`
	BlogCategoriesID int64       `json:"blog_categories_id"`
	CategoryTitle    string      `json:"category_title"`
	CategoryTitleAr  pgtype.Text `json:"category_title_ar"`
	CompaniesID      int64       `json:"companies_id"`
	CreatedBy        int64       `json:"created_by"`
}

func (q *Queries) GetAllBlogsForManage(ctx context.Context, arg GetAllBlogsForManageParams) ([]GetAllBlogsForManageRow, error) {
	rows, err := q.db.Query(ctx, getAllBlogsForManage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBlogsForManageRow
	for rows.Next() {
		var i GetAllBlogsForManageRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.BlogArticle,
			&i.MediaUrl,
			&i.BlogCategoriesID,
			&i.CategoryTitle,
			&i.CategoryTitleAr,
			&i.CompaniesID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeletedBlogs = `-- name: GetAllDeletedBlogs :many
SELECT
    blog.id,
    blog.title,
    blog.blog_article,
    blog.media_url,
    blog.blog_categories_id,
    blog_categories.category_title,
    blog_categories.category_title_ar,
    blog.companies_id,
    blog.created_by
FROM
    blog
INNER JOIN
    blog_categories ON blog.blog_categories_id=blog_categories.id AND blog_categories.status!=6
WHERE
    blog.status=6
ORDER BY blog.id
LIMIT $1
OFFSET $2
`

type GetAllDeletedBlogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllDeletedBlogsRow struct {
	ID               int64       `json:"id"`
	Title            string      `json:"title"`
	BlogArticle      string      `json:"blog_article"`
	MediaUrl         string      `json:"media_url"`
	BlogCategoriesID int64       `json:"blog_categories_id"`
	CategoryTitle    string      `json:"category_title"`
	CategoryTitleAr  pgtype.Text `json:"category_title_ar"`
	CompaniesID      int64       `json:"companies_id"`
	CreatedBy        int64       `json:"created_by"`
}

func (q *Queries) GetAllDeletedBlogs(ctx context.Context, arg GetAllDeletedBlogsParams) ([]GetAllDeletedBlogsRow, error) {
	rows, err := q.db.Query(ctx, getAllDeletedBlogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDeletedBlogsRow
	for rows.Next() {
		var i GetAllDeletedBlogsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.BlogArticle,
			&i.MediaUrl,
			&i.BlogCategoriesID,
			&i.CategoryTitle,
			&i.CategoryTitleAr,
			&i.CompaniesID,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogByID = `-- name: GetBlogByID :one
SELECT blog.id, company_types_id, is_branch, companies_id, blog_categories_id, title, sub_title, blog_article, is_public, blog.status, created_by, blog.created_at, media_type_id, media_url, blog_categories.id, category_title, blog_categories.status, blog_categories.created_at, updated_at, description, category_title_ar, description_ar
FROM blog
INNER JOIN blog_categories 
	on blog.blog_categories_id = blog_categories.id 
WHERE blog.id = $1 AND blog.status!=6 AND blog_categories.status!=6
`

type GetBlogByIDRow struct {
	ID               int64       `json:"id"`
	CompanyTypesID   int64       `json:"company_types_id"`
	IsBranch         pgtype.Bool `json:"is_branch"`
	CompaniesID      int64       `json:"companies_id"`
	BlogCategoriesID int64       `json:"blog_categories_id"`
	Title            string      `json:"title"`
	SubTitle         pgtype.Text `json:"sub_title"`
	BlogArticle      string      `json:"blog_article"`
	IsPublic         pgtype.Bool `json:"is_public"`
	Status           int64       `json:"status"`
	CreatedBy        int64       `json:"created_by"`
	CreatedAt        time.Time   `json:"created_at"`
	MediaTypeID      int64       `json:"media_type_id"`
	MediaUrl         string      `json:"media_url"`
	ID_2             int64       `json:"id_2"`
	CategoryTitle    string      `json:"category_title"`
	Status_2         int64       `json:"status_2"`
	CreatedAt_2      time.Time   `json:"created_at_2"`
	UpdatedAt        time.Time   `json:"updated_at"`
	Description      pgtype.Text `json:"description"`
	CategoryTitleAr  pgtype.Text `json:"category_title_ar"`
	DescriptionAr    pgtype.Text `json:"description_ar"`
}

func (q *Queries) GetBlogByID(ctx context.Context, id int64) (GetBlogByIDRow, error) {
	row := q.db.QueryRow(ctx, getBlogByID, id)
	var i GetBlogByIDRow
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.BlogCategoriesID,
		&i.Title,
		&i.SubTitle,
		&i.BlogArticle,
		&i.IsPublic,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.MediaTypeID,
		&i.MediaUrl,
		&i.ID_2,
		&i.CategoryTitle,
		&i.Status_2,
		&i.CreatedAt_2,
		&i.UpdatedAt,
		&i.Description,
		&i.CategoryTitleAr,
		&i.DescriptionAr,
	)
	return i, err
}

const getNumberOfBlogs = `-- name: GetNumberOfBlogs :one
SELECT COUNT(id)
FROM blog
WHERE status!=6
`

func (q *Queries) GetNumberOfBlogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfBlogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfDeletedBlogs = `-- name: GetNumberOfDeletedBlogs :one
SELECT COUNT(id)
FROM
	blog
WHERE blog.status =6
`

func (q *Queries) GetNumberOfDeletedBlogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfDeletedBlogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBlogByID = `-- name: UpdateBlogByID :one
UPDATE blog
SET 
    company_types_id = $2,
    is_branch = $3,
    companies_id = $4,
    blog_categories_id = $5,
    title = $6,
    sub_title = $7,
    blog_article = $8,
    is_public = $9,
    created_by = $10,
    media_type_id = $11,
    media_url = $12
WHERE
    id = $1 AND blog.status !=6
RETURNING id, company_types_id, is_branch, companies_id, blog_categories_id, title, sub_title, blog_article, is_public, status, created_by, created_at, media_type_id, media_url
`

type UpdateBlogByIDParams struct {
	ID               int64       `json:"id"`
	CompanyTypesID   int64       `json:"company_types_id"`
	IsBranch         pgtype.Bool `json:"is_branch"`
	CompaniesID      int64       `json:"companies_id"`
	BlogCategoriesID int64       `json:"blog_categories_id"`
	Title            string      `json:"title"`
	SubTitle         pgtype.Text `json:"sub_title"`
	BlogArticle      string      `json:"blog_article"`
	IsPublic         pgtype.Bool `json:"is_public"`
	CreatedBy        int64       `json:"created_by"`
	MediaTypeID      int64       `json:"media_type_id"`
	MediaUrl         string      `json:"media_url"`
}

func (q *Queries) UpdateBlogByID(ctx context.Context, arg UpdateBlogByIDParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlogByID,
		arg.ID,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompaniesID,
		arg.BlogCategoriesID,
		arg.Title,
		arg.SubTitle,
		arg.BlogArticle,
		arg.IsPublic,
		arg.CreatedBy,
		arg.MediaTypeID,
		arg.MediaUrl,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.BlogCategoriesID,
		&i.Title,
		&i.SubTitle,
		&i.BlogArticle,
		&i.IsPublic,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.MediaTypeID,
		&i.MediaUrl,
	)
	return i, err
}
