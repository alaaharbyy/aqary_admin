// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_owner_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalOwnerPropertyDoc = `-- name: CreateAgriculturalOwnerPropertyDoc :one
INSERT INTO agricultural_owner_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    agricultural_owner_properties_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_owner_properties_id, status, is_branch
`

type CreateAgriculturalOwnerPropertyDocParams struct {
	DocumentsCategoryID           int64       `json:"documents_category_id"`
	DocumentsSubcategoryID        int64       `json:"documents_subcategory_id"`
	FileUrl                       []string    `json:"file_url"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	Status                        int64       `json:"status"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalOwnerPropertyDoc(ctx context.Context, arg CreateAgriculturalOwnerPropertyDocParams) (AgriculturalOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createAgriculturalOwnerPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalOwnerPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalOwnerPropertyDoc = `-- name: DeleteAgriculturalOwnerPropertyDoc :exec
DELETE FROM agricultural_owner_properties_documents
Where id = $1
`

func (q *Queries) DeleteAgriculturalOwnerPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalOwnerPropertyDoc, id)
	return err
}

const getAgriculturalOwnerPropertyDoc = `-- name: GetAgriculturalOwnerPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_owner_properties_id, status, is_branch FROM agricultural_owner_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalOwnerPropertyDoc(ctx context.Context, limit int32) (AgriculturalOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalOwnerPropertyDoc, limit)
	var i AgriculturalOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalOwnerPropertyDoc = `-- name: GetAllAgriculturalOwnerPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_owner_properties_id, status, is_branch FROM agricultural_owner_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalOwnerPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalOwnerPropertyDoc(ctx context.Context, arg GetAllAgriculturalOwnerPropertyDocParams) ([]AgriculturalOwnerPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalOwnerPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalOwnerPropertiesDocument
	for rows.Next() {
		var i AgriculturalOwnerPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalOwnerPropertiesID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalOwnerPropertyDoc = `-- name: UpdateAgriculturalOwnerPropertyDoc :one
UPDATE agricultural_owner_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    agricultural_owner_properties_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_owner_properties_id, status, is_branch
`

type UpdateAgriculturalOwnerPropertyDocParams struct {
	ID                            int64       `json:"id"`
	DocumentsCategoryID           int64       `json:"documents_category_id"`
	DocumentsSubcategoryID        int64       `json:"documents_subcategory_id"`
	FileUrl                       []string    `json:"file_url"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	Status                        int64       `json:"status"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalOwnerPropertyDoc(ctx context.Context, arg UpdateAgriculturalOwnerPropertyDocParams) (AgriculturalOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalOwnerPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalOwnerPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
