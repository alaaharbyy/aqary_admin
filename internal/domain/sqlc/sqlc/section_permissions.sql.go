// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: section_permissions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSectionPermission = `-- name: CreateSectionPermission :one
INSERT INTO section_permission (
    title,
    sub_title, 
    created_at,
    updated_at
)VALUES (
    $1,$2, $3, $4
) RETURNING id, title, sub_title, indicator, created_at, updated_at
`

type CreateSectionPermissionParams struct {
	Title     string      `json:"title"`
	SubTitle  pgtype.Text `json:"sub_title"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

func (q *Queries) CreateSectionPermission(ctx context.Context, arg CreateSectionPermissionParams) (SectionPermission, error) {
	row := q.db.QueryRow(ctx, createSectionPermission,
		arg.Title,
		arg.SubTitle,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SectionPermission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSectionPermission = `-- name: DeleteSectionPermission :exec
DELETE FROM section_permission
Where id = $1
`

func (q *Queries) DeleteSectionPermission(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSectionPermission, id)
	return err
}

const getAllSectionPermission = `-- name: GetAllSectionPermission :many
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission
WHERE       
      ($3 = '%%'
       OR section_permission.title ILIKE $3
       )
ORDER BY section_permission.updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllSectionPermissionParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Search interface{} `json:"search"`
}

func (q *Queries) GetAllSectionPermission(ctx context.Context, arg GetAllSectionPermissionParams) ([]SectionPermission, error) {
	rows, err := q.db.Query(ctx, getAllSectionPermission, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionPermission
	for rows.Next() {
		var i SectionPermission
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SubTitle,
			&i.Indicator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSectionPermissionMV = `-- name: GetAllSectionPermissionMV :many


SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission_mv
WHERE ($3='%%' 
   OR section_permission_mv.title ILIKE $3
)
ORDER BY id LIMIT $1 OFFSET $2
`

type GetAllSectionPermissionMVParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Search interface{} `json:"search"`
}

// SELECT * FROM section_permission_mv
// ORDER BY id;
func (q *Queries) GetAllSectionPermissionMV(ctx context.Context, arg GetAllSectionPermissionMVParams) ([]SectionPermissionMv, error) {
	rows, err := q.db.Query(ctx, getAllSectionPermissionMV, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionPermissionMv
	for rows.Next() {
		var i SectionPermissionMv
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SubTitle,
			&i.Indicator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSectionPermissionWithoutPagination = `-- name: GetAllSectionPermissionWithoutPagination :many


SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission
ORDER BY id
`

// SELECT COUNT(*) FROM section_permission;
func (q *Queries) GetAllSectionPermissionWithoutPagination(ctx context.Context) ([]SectionPermission, error) {
	rows, err := q.db.Query(ctx, getAllSectionPermissionWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionPermission
	for rows.Next() {
		var i SectionPermission
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SubTitle,
			&i.Indicator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSectionPermissionWithoutPaginationMV = `-- name: GetAllSectionPermissionWithoutPaginationMV :many
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission_mv
Where (
   $1 = '%%'
   OR title ILIKE  $1
)
ORDER BY id
`

func (q *Queries) GetAllSectionPermissionWithoutPaginationMV(ctx context.Context, search interface{}) ([]SectionPermissionMv, error) {
	rows, err := q.db.Query(ctx, getAllSectionPermissionWithoutPaginationMV, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SectionPermissionMv
	for rows.Next() {
		var i SectionPermissionMv
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.SubTitle,
			&i.Indicator,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSections = `-- name: GetAllSections :many
SELECT s.id, s.title
FROM section_permission s
WHERE 
COALESCE($1, '') = '' 
OR s.title ILIKE $1
`

type GetAllSectionsRow struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
}

func (q *Queries) GetAllSections(ctx context.Context, search interface{}) ([]GetAllSectionsRow, error) {
	rows, err := q.db.Query(ctx, getAllSections, search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSectionsRow
	for rows.Next() {
		var i GetAllSectionsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllSectionPermission = `-- name: GetCountAllSectionPermission :one
SELECT COUNT(section_permission.id) FROM section_permission
WHERE       
    ( $1 = '%%'
       OR section_permission.title ILIKE $1
)
`

func (q *Queries) GetCountAllSectionPermission(ctx context.Context, search interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllSectionPermission, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllSectionPermissionMV = `-- name: GetCountAllSectionPermissionMV :one
SELECT COUNT(section_permission_mv.id) FROM section_permission_mv 
WHERE ($1='%%' 
   OR section_permission_mv.title ILIKE $1
)
`

func (q *Queries) GetCountAllSectionPermissionMV(ctx context.Context, search interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllSectionPermissionMV, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSectionPermission = `-- name: GetSectionPermission :one
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission 
WHERE id = $1
`

func (q *Queries) GetSectionPermission(ctx context.Context, id int64) (SectionPermission, error) {
	row := q.db.QueryRow(ctx, getSectionPermission, id)
	var i SectionPermission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSectionPermissionByTitle = `-- name: GetSectionPermissionByTitle :one
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission 
WHERE LOWER(title) = LOWER($1)
`

func (q *Queries) GetSectionPermissionByTitle(ctx context.Context, title string) (SectionPermission, error) {
	row := q.db.QueryRow(ctx, getSectionPermissionByTitle, title)
	var i SectionPermission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSectionPermissionMV = `-- name: GetSectionPermissionMV :one
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission_mv
WHERE id =  $1
`

func (q *Queries) GetSectionPermissionMV(ctx context.Context, id int64) (SectionPermissionMv, error) {
	row := q.db.QueryRow(ctx, getSectionPermissionMV, id)
	var i SectionPermissionMv
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSectionPermission = `-- name: UpdateSectionPermission :one
UPDATE section_permission
SET title = $2,
    sub_title = $3,  
    created_at= $4,
    updated_at = $5
Where id = $1
RETURNING id, title, sub_title, indicator, created_at, updated_at
`

type UpdateSectionPermissionParams struct {
	ID        int64       `json:"id"`
	Title     string      `json:"title"`
	SubTitle  pgtype.Text `json:"sub_title"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateSectionPermission(ctx context.Context, arg UpdateSectionPermissionParams) (SectionPermission, error) {
	row := q.db.QueryRow(ctx, updateSectionPermission,
		arg.ID,
		arg.Title,
		arg.SubTitle,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SectionPermission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
