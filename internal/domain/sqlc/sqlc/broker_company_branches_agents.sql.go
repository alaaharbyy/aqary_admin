// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_branches_agents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerBranchAgent = `-- name: CreateBrokerBranchAgent :one
INSERT INTO broker_company_branches_agents (
    brn,
    experience_since,
    users_id,
    nationalities,
    brn_expiry,
    broker_companies_branches_id,
    created_at,
    updated_at,
    verification_document_url,
    about,
    about_arabic,
    linkedin_profile_url,
    facebook_profile_url,
    twitter_profile_url, 
    status,
    is_verified,
    profiles_id,
     telegram,
    botim,
    tawasal,
    service_areas,
    agent_rank
)VALUES (
    $1 ,$2, $3, $4, $5,$6,$7, $8, $9, $10, $11, $12, $13, $14, $15, $16,$17, $18, $19, $20, $21, $22
) RETURNING id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type CreateBrokerBranchAgentParams struct {
	Brn                       string             `json:"brn"`
	ExperienceSince           pgtype.Timestamptz `json:"experience_since"`
	UsersID                   int64              `json:"users_id"`
	Nationalities             []int64            `json:"nationalities"`
	BrnExpiry                 time.Time          `json:"brn_expiry"`
	BrokerCompaniesBranchesID pgtype.Int8        `json:"broker_companies_branches_id"`
	CreatedAt                 time.Time          `json:"created_at"`
	UpdatedAt                 time.Time          `json:"updated_at"`
	VerificationDocumentUrl   string             `json:"verification_document_url"`
	About                     pgtype.Text        `json:"about"`
	AboutArabic               pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl        pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl        pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl         pgtype.Text        `json:"twitter_profile_url"`
	Status                    int64              `json:"status"`
	IsVerified                pgtype.Bool        `json:"is_verified"`
	ProfilesID                int64              `json:"profiles_id"`
	Telegram                  pgtype.Text        `json:"telegram"`
	Botim                     pgtype.Text        `json:"botim"`
	Tawasal                   pgtype.Text        `json:"tawasal"`
	ServiceAreas              []int64            `json:"service_areas"`
	AgentRank                 int64              `json:"agent_rank"`
}

func (q *Queries) CreateBrokerBranchAgent(ctx context.Context, arg CreateBrokerBranchAgentParams) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, createBrokerBranchAgent,
		arg.Brn,
		arg.ExperienceSince,
		arg.UsersID,
		arg.Nationalities,
		arg.BrnExpiry,
		arg.BrokerCompaniesBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.VerificationDocumentUrl,
		arg.About,
		arg.AboutArabic,
		arg.LinkedinProfileUrl,
		arg.FacebookProfileUrl,
		arg.TwitterProfileUrl,
		arg.Status,
		arg.IsVerified,
		arg.ProfilesID,
		arg.Telegram,
		arg.Botim,
		arg.Tawasal,
		arg.ServiceAreas,
		arg.AgentRank,
	)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const deleteBrokerBranchAgent = `-- name: DeleteBrokerBranchAgent :exec
DELETE FROM broker_company_branches_agents
Where id = $1
`

func (q *Queries) DeleteBrokerBranchAgent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerBranchAgent, id)
	return err
}

const getAllBrokerBranchAgent = `-- name: GetAllBrokerBranchAgent :many
SELECT id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_branches_agents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerBranchAgentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerBranchAgent(ctx context.Context, arg GetAllBrokerBranchAgentParams) ([]BrokerCompanyBranchesAgent, error) {
	rows, err := q.db.Query(ctx, getAllBrokerBranchAgent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyBranchesAgent
	for rows.Next() {
		var i BrokerCompanyBranchesAgent
		if err := rows.Scan(
			&i.ID,
			&i.Brn,
			&i.ExperienceSince,
			&i.UsersID,
			&i.Nationalities,
			&i.BrokerCompaniesBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrnExpiry,
			&i.VerificationDocumentUrl,
			&i.About,
			&i.AboutArabic,
			&i.LinkedinProfileUrl,
			&i.FacebookProfileUrl,
			&i.TwitterProfileUrl,
			&i.Status,
			&i.IsVerified,
			&i.ProfilesID,
			&i.Telegram,
			&i.Botim,
			&i.Tawasal,
			&i.ServiceAreas,
			&i.AgentRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerBranchAgent = `-- name: GetBrokerBranchAgent :one
SELECT id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_branches_agents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerBranchAgent(ctx context.Context, limit int32) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerBranchAgent, limit)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getBrokerCompanyBranchAgentByBrokerCompany = `-- name: GetBrokerCompanyBranchAgentByBrokerCompany :many



SELECT 
profiles.id AS profile_id,
profiles.first_name,
profiles.last_name,
broker_company_branches_agents.broker_companies_branches_id AS broker_branch_company_id,
broker_company_branches_agents.id AS broker_branch_company_agent_id,
users.id AS user_id
 FROM broker_companies_branches 
 RIGHT JOIN broker_company_branches_agents ON broker_company_branches_agents.broker_companies_branches_id=broker_companies_branches.id 
 RIGHT JOIN users ON users.id=broker_company_branches_agents.users_id 
 RIGHT JOIN profiles ON profiles.users_id=users.id 
 WHERE broker_companies_branches.id=$1
`

type GetBrokerCompanyBranchAgentByBrokerCompanyRow struct {
	ProfileID                  int64       `json:"profile_id"`
	FirstName                  string      `json:"first_name"`
	LastName                   string      `json:"last_name"`
	BrokerBranchCompanyID      pgtype.Int8 `json:"broker_branch_company_id"`
	BrokerBranchCompanyAgentID int64       `json:"broker_branch_company_agent_id"`
	UserID                     int64       `json:"user_id"`
}

// -- name: GetAllBrokerBranchAgentNamesByBrokerCompId :many
// SELECT profiles.id AS profile_id,profiles.first_name,profiles.last_name,broker_company_branches_agents.broker_companies_id AS broker_company_id,broker_company_branches_agents.id AS broker_company_agent_id,broker_company_branches_agents.is_freelancer,users.id AS user_id
// FROM broker_companies
// LEFT JOIN broker_company_branches_agents ON broker_company_branches_agents.broker_companies_id = broker_companies.id
// LEFT JOIN users ON users.id = broker_company_branches_agents.users_id
// LEFT JOIN profiles ON profiles.id = users.profiles_id
// WHERE broker_companies.id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetBrokerCompanyBranchAgentByBrokerCompany(ctx context.Context, id int64) ([]GetBrokerCompanyBranchAgentByBrokerCompanyRow, error) {
	rows, err := q.db.Query(ctx, getBrokerCompanyBranchAgentByBrokerCompany, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrokerCompanyBranchAgentByBrokerCompanyRow
	for rows.Next() {
		var i GetBrokerCompanyBranchAgentByBrokerCompanyRow
		if err := rows.Scan(
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.BrokerBranchCompanyID,
			&i.BrokerBranchCompanyAgentID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyBranchAgentByUsername = `-- name: GetBrokerCompanyBranchAgentByUsername :one
 SELECT broker_company_branches_agents.id, broker_company_branches_agents.brn, broker_company_branches_agents.experience_since, broker_company_branches_agents.users_id, broker_company_branches_agents.nationalities, broker_company_branches_agents.broker_companies_branches_id, broker_company_branches_agents.created_at, broker_company_branches_agents.updated_at, broker_company_branches_agents.brn_expiry, broker_company_branches_agents.verification_document_url, broker_company_branches_agents.about, broker_company_branches_agents.about_arabic, broker_company_branches_agents.linkedin_profile_url, broker_company_branches_agents.facebook_profile_url, broker_company_branches_agents.twitter_profile_url, broker_company_branches_agents.status, broker_company_branches_agents.is_verified, broker_company_branches_agents.profiles_id, broker_company_branches_agents.telegram, broker_company_branches_agents.botim, broker_company_branches_agents.tawasal, broker_company_branches_agents.service_areas, broker_company_branches_agents.agent_rank FROM broker_company_branches_agents LEFT JOIN users ON users.id = broker_company_branches_agents.users_id WHERE users.user_types_id = 2 AND users.username = $1
`

func (q *Queries) GetBrokerCompanyBranchAgentByUsername(ctx context.Context, username string) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranchAgentByUsername, username)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getCompanyUserBranchAgentAndQuotaByUserId = `-- name: GetCompanyUserBranchAgentAndQuotaByUserId :one
SELECT
	broker_company_branches_agents.id AS broker_company_agents_id,
	broker_company_branches_agents.brn,
	broker_company_branches_agents.experience_since,
	broker_company_branches_agents.nationalities,
	broker_company_branches_agents.brn_expiry,
	broker_company_branches_agents.verification_document_url,
	broker_company_branches_agents.about,
	broker_company_branches_agents.about_arabic,
	broker_company_branches_agents.linkedin_profile_url,
	broker_company_branches_agents.facebook_profile_url,
	broker_company_branches_agents.twitter_profile_url,
	broker_company_branches_agents.is_verified,
	broker_company_branches_agents.profiles_id,
	broker_company_branches_agents.service_areas,
	agent_subscription_quota_branch.id AS agent_subscription_quota_branch_id,
	agent_subscription_quota_branch.standard,
	agent_subscription_quota_branch.featured,
	agent_subscription_quota_branch.premium,
	agent_subscription_quota_branch.top_deal
FROM
	broker_company_branches_agents
	LEFT JOIN agent_subscription_quota_branch ON agent_subscription_quota_branch.broker_company_branches_agents_id = broker_company_branches_agents.id
WHERE
	broker_company_branches_agents.users_id = $1
`

type GetCompanyUserBranchAgentAndQuotaByUserIdRow struct {
	BrokerCompanyAgentsID          int64              `json:"broker_company_agents_id"`
	Brn                            string             `json:"brn"`
	ExperienceSince                pgtype.Timestamptz `json:"experience_since"`
	Nationalities                  []int64            `json:"nationalities"`
	BrnExpiry                      time.Time          `json:"brn_expiry"`
	VerificationDocumentUrl        string             `json:"verification_document_url"`
	About                          pgtype.Text        `json:"about"`
	AboutArabic                    pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl             pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl             pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl              pgtype.Text        `json:"twitter_profile_url"`
	IsVerified                     pgtype.Bool        `json:"is_verified"`
	ProfilesID                     int64              `json:"profiles_id"`
	ServiceAreas                   []int64            `json:"service_areas"`
	AgentSubscriptionQuotaBranchID pgtype.Int8        `json:"agent_subscription_quota_branch_id"`
	Standard                       pgtype.Int8        `json:"standard"`
	Featured                       pgtype.Int8        `json:"featured"`
	Premium                        pgtype.Int8        `json:"premium"`
	TopDeal                        pgtype.Int8        `json:"top_deal"`
}

func (q *Queries) GetCompanyUserBranchAgentAndQuotaByUserId(ctx context.Context, usersID int64) (GetCompanyUserBranchAgentAndQuotaByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getCompanyUserBranchAgentAndQuotaByUserId, usersID)
	var i GetCompanyUserBranchAgentAndQuotaByUserIdRow
	err := row.Scan(
		&i.BrokerCompanyAgentsID,
		&i.Brn,
		&i.ExperienceSince,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.IsVerified,
		&i.ProfilesID,
		&i.ServiceAreas,
		&i.AgentSubscriptionQuotaBranchID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
	)
	return i, err
}

const updateBrokerBranchAgent = `-- name: UpdateBrokerBranchAgent :one
UPDATE broker_company_branches_agents
SET  
     brn = $2,
    experience_since = $3,
    users_id = $4,
    nationalities = $5,
    brn_expiry = $6,
    broker_companies_branches_id = $7,
    created_at = $8,
    updated_at = $9,
    verification_document_url = $10,
    about = $11,
    about_arabic = $12,
    linkedin_profile_url = $13,
    facebook_profile_url = $14,
    twitter_profile_url = $15, 
    status = $16,
    is_verified = $17,
    profiles_id = $18,
      telegram = $19,
    botim = $20,
    tawasal = $21,
    service_areas = $22,
    agent_rank = $23
Where id = $1
RETURNING id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type UpdateBrokerBranchAgentParams struct {
	ID                        int64              `json:"id"`
	Brn                       string             `json:"brn"`
	ExperienceSince           pgtype.Timestamptz `json:"experience_since"`
	UsersID                   int64              `json:"users_id"`
	Nationalities             []int64            `json:"nationalities"`
	BrnExpiry                 time.Time          `json:"brn_expiry"`
	BrokerCompaniesBranchesID pgtype.Int8        `json:"broker_companies_branches_id"`
	CreatedAt                 time.Time          `json:"created_at"`
	UpdatedAt                 time.Time          `json:"updated_at"`
	VerificationDocumentUrl   string             `json:"verification_document_url"`
	About                     pgtype.Text        `json:"about"`
	AboutArabic               pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl        pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl        pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl         pgtype.Text        `json:"twitter_profile_url"`
	Status                    int64              `json:"status"`
	IsVerified                pgtype.Bool        `json:"is_verified"`
	ProfilesID                int64              `json:"profiles_id"`
	Telegram                  pgtype.Text        `json:"telegram"`
	Botim                     pgtype.Text        `json:"botim"`
	Tawasal                   pgtype.Text        `json:"tawasal"`
	ServiceAreas              []int64            `json:"service_areas"`
	AgentRank                 int64              `json:"agent_rank"`
}

func (q *Queries) UpdateBrokerBranchAgent(ctx context.Context, arg UpdateBrokerBranchAgentParams) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, updateBrokerBranchAgent,
		arg.ID,
		arg.Brn,
		arg.ExperienceSince,
		arg.UsersID,
		arg.Nationalities,
		arg.BrnExpiry,
		arg.BrokerCompaniesBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.VerificationDocumentUrl,
		arg.About,
		arg.AboutArabic,
		arg.LinkedinProfileUrl,
		arg.FacebookProfileUrl,
		arg.TwitterProfileUrl,
		arg.Status,
		arg.IsVerified,
		arg.ProfilesID,
		arg.Telegram,
		arg.Botim,
		arg.Tawasal,
		arg.ServiceAreas,
		arg.AgentRank,
	)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const updateBrokerBranchAgentByStatus = `-- name: UpdateBrokerBranchAgentByStatus :one
UPDATE broker_company_branches_agents SET status = $2 WHERE id = $1 RETURNING id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type UpdateBrokerBranchAgentByStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerBranchAgentByStatus(ctx context.Context, arg UpdateBrokerBranchAgentByStatusParams) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, updateBrokerBranchAgentByStatus, arg.ID, arg.Status)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}
