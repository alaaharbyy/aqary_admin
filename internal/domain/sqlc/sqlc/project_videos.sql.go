// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_videos.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProjectVideo = `-- name: CreateProjectVideo :one
INSERT INTO project_videos
(ref_no,company_types,is_branch,companies_id,project_id,title,video_url,is_deleted,created_by,created_at)VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10) RETURNING id, ref_no, company_types, is_branch, companies_id, project_id, title, video_url, is_deleted, created_by, created_at
`

type CreateProjectVideoParams struct {
	RefNo        string      `json:"ref_no"`
	CompanyTypes pgtype.Int8 `json:"company_types"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	CompaniesID  int64       `json:"companies_id"`
	ProjectID    int64       `json:"project_id"`
	Title        string      `json:"title"`
	VideoUrl     string      `json:"video_url"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedBy    int64       `json:"created_by"`
	CreatedAt    time.Time   `json:"created_at"`
}

func (q *Queries) CreateProjectVideo(ctx context.Context, arg CreateProjectVideoParams) (ProjectVideo, error) {
	row := q.db.QueryRow(ctx, createProjectVideo,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.ProjectID,
		arg.Title,
		arg.VideoUrl,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.CreatedAt,
	)
	var i ProjectVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectID,
		&i.Title,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProjectVideo = `-- name: DeleteProjectVideo :one
UPDATE project_videos
SET 
is_deleted=TRUE
WHERE id=$1 RETURNING id, ref_no, company_types, is_branch, companies_id, project_id, title, video_url, is_deleted, created_by, created_at
`

func (q *Queries) DeleteProjectVideo(ctx context.Context, id int64) (ProjectVideo, error) {
	row := q.db.QueryRow(ctx, deleteProjectVideo, id)
	var i ProjectVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectID,
		&i.Title,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getAllProjectVideos = `-- name: GetAllProjectVideos :many
SELECT
   id, ref_no, company_types, is_branch, companies_id, project_id, title, video_url, is_deleted, created_by, created_at
FROM
    project_videos
WHERE is_deleted!=TRUE
ORDER BY
    id DESC
LIMIT $1 OFFSET $2
`

type GetAllProjectVideosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProjectVideos(ctx context.Context, arg GetAllProjectVideosParams) ([]ProjectVideo, error) {
	rows, err := q.db.Query(ctx, getAllProjectVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectVideo
	for rows.Next() {
		var i ProjectVideo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypes,
			&i.IsBranch,
			&i.CompaniesID,
			&i.ProjectID,
			&i.Title,
			&i.VideoUrl,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountProjectVideos = `-- name: GetCountProjectVideos :one
SELECT COUNT(*) FROM project_videos WHERE is_deleted=FALSE
`

func (q *Queries) GetCountProjectVideos(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProjectVideos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleProjectVideo = `-- name: GetSingleProjectVideo :one
SELECT
id, ref_no, company_types, is_branch, companies_id, project_id, title, video_url, is_deleted, created_by, created_at
FROM
    project_videos
WHERE
    id = $1
`

func (q *Queries) GetSingleProjectVideo(ctx context.Context, id int64) (ProjectVideo, error) {
	row := q.db.QueryRow(ctx, getSingleProjectVideo, id)
	var i ProjectVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectID,
		&i.Title,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}

const updateProjectVideo = `-- name: UpdateProjectVideo :one
UPDATE project_videos
SET
    ref_no = $1,
    company_types = $2,
    is_branch = $3,
    companies_id = $4,
    project_id = $5,
    title = $6,
    video_url = $7,
    is_deleted = $8,
    created_by = $9
WHERE
    id = $10
RETURNING id, ref_no, company_types, is_branch, companies_id, project_id, title, video_url, is_deleted, created_by, created_at
`

type UpdateProjectVideoParams struct {
	RefNo        string      `json:"ref_no"`
	CompanyTypes pgtype.Int8 `json:"company_types"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	CompaniesID  int64       `json:"companies_id"`
	ProjectID    int64       `json:"project_id"`
	Title        string      `json:"title"`
	VideoUrl     string      `json:"video_url"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedBy    int64       `json:"created_by"`
	ID           int64       `json:"id"`
}

func (q *Queries) UpdateProjectVideo(ctx context.Context, arg UpdateProjectVideoParams) (ProjectVideo, error) {
	row := q.db.QueryRow(ctx, updateProjectVideo,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.ProjectID,
		arg.Title,
		arg.VideoUrl,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.ID,
	)
	var i ProjectVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectID,
		&i.Title,
		&i.VideoUrl,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
	)
	return i, err
}
