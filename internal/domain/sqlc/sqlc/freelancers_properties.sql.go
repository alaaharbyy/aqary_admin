// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers_properties.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFreelancerProperty = `-- name: CreateFreelancerProperty :one
INSERT INTO freelancers_properties (
    list_of_date,
  list_of_notes,
  property_title,
  property_title_arabic,
  description,
  description_arabic,
  is_verified,
  property_rank,
  addresses_id,
  locations_id, 
  property_types_id,
  profiles_id,
  facilities_id,
  amenities_id,
  status,
  created_at,
  updated_at,
  freelancers_id,
  is_show_owner_info,
  property,
  -- facts_values,
  countries_id,
  ref_no,
  developer_company_name,
  sub_developer_company_name,
  category,
  investment,
  contract_start_datetime,
  contract_end_datetime,
  amount,
  -- ask_price,
  unit_types,
  users_id,
  property_name,
  list_of_agent,
  owner_users_id
)VALUES (
    $1, $2,$3, $4, $5,$6,$7,$8,$9,$10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34
) RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type CreateFreelancerPropertyParams struct {
	ListOfDate              []time.Time        `json:"list_of_date"`
	ListOfNotes             []string           `json:"list_of_notes"`
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	ProfilesID              int64              `json:"profiles_id"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	FreelancersID           int64              `json:"freelancers_id"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  float64            `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	PropertyName            string             `json:"property_name"`
	ListOfAgent             []int64            `json:"list_of_agent"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) CreateFreelancerProperty(ctx context.Context, arg CreateFreelancerPropertyParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, createFreelancerProperty,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const deleteFreelancerProperty = `-- name: DeleteFreelancerProperty :exec
DELETE FROM freelancers_properties
Where id = $1
`

func (q *Queries) DeleteFreelancerProperty(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancerProperty, id)
	return err
}

const getAllFreelancerProperty = `-- name: GetAllFreelancerProperty :many
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM freelancers_properties
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllFreelancerPropertyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancerProperty(ctx context.Context, arg GetAllFreelancerPropertyParams) ([]FreelancersProperty, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerProperty, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersProperty
	for rows.Next() {
		var i FreelancersProperty
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.ProfilesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.FreelancersID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.ListOfDate,
			&i.ListOfNotes,
			&i.ListOfAgent,
			&i.OwnerUsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancePropertiesByRefrenceNumber = `-- name: GetFreelancePropertiesByRefrenceNumber :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM freelancers_properties WHERE ref_no = $1 LIMIT 1
`

func (q *Queries) GetFreelancePropertiesByRefrenceNumber(ctx context.Context, refNo string) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, getFreelancePropertiesByRefrenceNumber, refNo)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getFreelancerProperty = `-- name: GetFreelancerProperty :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM freelancers_properties 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFreelancerProperty(ctx context.Context, id int64) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, getFreelancerProperty, id)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getFreelancerPropertyByName = `-- name: GetFreelancerPropertyByName :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM freelancers_properties 
WHERE property_title = $2 LIMIT $1
`

type GetFreelancerPropertyByNameParams struct {
	Limit         int32  `json:"limit"`
	PropertyTitle string `json:"property_title"`
}

func (q *Queries) GetFreelancerPropertyByName(ctx context.Context, arg GetFreelancerPropertyByNameParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyByName, arg.Limit, arg.PropertyTitle)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getFreelancerPropertyWithValidation = `-- name: GetFreelancerPropertyWithValidation :one
SELECT
    id,
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    profiles_id,
    status,
    created_at,
    updated_at,
    facilities_id,
    amenities_id,
    freelancers_id,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    developer_company_name,
    sub_developer_company_name,
    category,
    investment,
    contract_start_datetime,
    contract_end_datetime,
    amount,
    unit_types,
    users_id,
    property_name,
    list_of_date,
    list_of_notes,
    list_of_agent,
    owner_users_id
from
    freelancers_properties fp
WHERE
    CASE
        WHEN $1 :: bigint = 0 THEN true
        WHEN $1 :: bigint = 1 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
        )
        WHEN $1 :: bigint = 2 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
        )
        WHEN $1 :: bigint = 3 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
        )
        WHEN $1 :: bigint = 4 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
                AND addresses.locations_id = $5
        )
    END
    AND (
        status != 5
        AND status != 6
    )
    AND fp.id = $6
LIMIT
    1
`

type GetFreelancerPropertyWithValidationParams struct {
	Column1     int64       `json:"column_1"`
	CitiesID    pgtype.Int8 `json:"cities_id"`
	Column3     []int64     `json:"column_3"`
	Column4     []int64     `json:"column_4"`
	LocationsID pgtype.Int8 `json:"locations_id"`
	ID          int64       `json:"id"`
}

func (q *Queries) GetFreelancerPropertyWithValidation(ctx context.Context, arg GetFreelancerPropertyWithValidationParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyWithValidation,
		arg.Column1,
		arg.CitiesID,
		arg.Column3,
		arg.Column4,
		arg.LocationsID,
		arg.ID,
	)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getFreelancersPropertiesByUsersId = `-- name: GetFreelancersPropertiesByUsersId :many
SELECT freelancers_properties.id, freelancers_properties.property_title,  freelancers_properties.property
FROM freelancers_properties 
LEFT JOIN freelancers ON freelancers.id = freelancers_id 
WHERE freelancers.users_id = $1
`

type GetFreelancersPropertiesByUsersIdRow struct {
	ID            int64  `json:"id"`
	PropertyTitle string `json:"property_title"`
	Property      int64  `json:"property"`
}

func (q *Queries) GetFreelancersPropertiesByUsersId(ctx context.Context, usersID int64) ([]GetFreelancersPropertiesByUsersIdRow, error) {
	rows, err := q.db.Query(ctx, getFreelancersPropertiesByUsersId, usersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFreelancersPropertiesByUsersIdRow
	for rows.Next() {
		var i GetFreelancersPropertiesByUsersIdRow
		if err := rows.Scan(&i.ID, &i.PropertyTitle, &i.Property); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFreelancerProperty = `-- name: UpdateFreelancerProperty :one
UPDATE freelancers_properties
SET    property_title = $2,
  property_title_arabic = $3,
  description = $4,
  description_arabic = $5,
  is_verified = $6,
  property_rank = $7,
  addresses_id = $8,
  locations_id = $9, 
  property_types_id = $10,
  profiles_id = $11,
  facilities_id = $12,
  amenities_id = $13,
  status = $14,
  created_at = $15,
  updated_at = $16,
  freelancers_id = $17,
  is_show_owner_info = $18,
  property = $19,
  -- facts_values = $20,
  countries_id = $20,
  ref_no = $21,
  developer_company_name = $22,
  sub_developer_company_name = $23,
  category = $24,
  investment = $25,
  contract_start_datetime = $26,
  contract_end_datetime = $27,
  amount = $28,
  -- ask_price = $29,
  unit_types = $29,
  users_id = $30,
  property_name = $31,
  list_of_date = $32,
  list_of_notes = $33,
  list_of_agent = $34,
  owner_users_id = $35
Where id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateFreelancerPropertyParams struct {
	ID                      int64              `json:"id"`
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	ProfilesID              int64              `json:"profiles_id"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	FreelancersID           int64              `json:"freelancers_id"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  float64            `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	PropertyName            string             `json:"property_name"`
	ListOfDate              []time.Time        `json:"list_of_date"`
	ListOfNotes             []string           `json:"list_of_notes"`
	ListOfAgent             []int64            `json:"list_of_agent"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) UpdateFreelancerProperty(ctx context.Context, arg UpdateFreelancerPropertyParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, updateFreelancerProperty,
		arg.ID,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FreelancersID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateFreelancerPropertyRankById = `-- name: UpdateFreelancerPropertyRankById :one
UPDATE freelancers_properties
SET property_rank=$2 
WHERE id=$1
 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateFreelancerPropertyRankByIdParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateFreelancerPropertyRankById(ctx context.Context, arg UpdateFreelancerPropertyRankByIdParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyRankById, arg.ID, arg.PropertyRank)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateFreelancerPropertyVerificationById = `-- name: UpdateFreelancerPropertyVerificationById :one
UPDATE freelancers_properties
 SET is_verified=$2
 WHERE id=$1 
 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateFreelancerPropertyVerificationByIdParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateFreelancerPropertyVerificationById(ctx context.Context, arg UpdateFreelancerPropertyVerificationByIdParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyVerificationById, arg.ID, arg.IsVerified)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateFreelancerPropertyhubStatus = `-- name: UpdateFreelancerPropertyhubStatus :one
UPDATE freelancers_properties 
SET status=$2
 Where id=$1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateFreelancerPropertyhubStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateFreelancerPropertyhubStatus(ctx context.Context, arg UpdateFreelancerPropertyhubStatusParams) (FreelancersProperty, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyhubStatus, arg.ID, arg.Status)
	var i FreelancersProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}
