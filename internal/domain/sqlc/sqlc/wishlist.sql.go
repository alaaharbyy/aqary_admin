// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wishlist.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWishlist = `-- name: CreateWishlist :one
INSERT INTO
    wishlist (
        entity_type_id,
        entity_id,
        platform_user_id,
        company_id,
        created_at
    )
SELECT
    $2::BIGINT,
    $3::BIGINT,
    $4::BIGINT,
    $1,
    $5::TIMESTAMPTZ
WHERE
    (
        CASE
            $2::BIGINT
            WHEN $6::BIGINT THEN EXISTS(
                SELECT
                    1
                FROM
                    projects
                WHERE
                    id = $3::BIGINT
                    AND status = $7::BIGINT
            )
            WHEN $8::BIGINT THEN EXISTS(
                SELECT
                    1
                FROM
                    property_versions
                WHERE 
                	id= $3::BIGINT
                    AND status = $7::BIGINT
            )
            WHEN $9::BIGINT THEN EXISTS(
                SELECT
                    1
                FROM
                    unit_versions
                WHERE 
                	id= $3::BIGINT
                    AND status = $7::BIGINT
            )
        END
    )RETURNING 1
`

type CreateWishlistParams struct {
	CompanyID             pgtype.Int8 `json:"company_id"`
	EntityTypeID          int64       `json:"entity_type_id"`
	EntityID              int64       `json:"entity_id"`
	PlatformUserID        int64       `json:"platform_user_id"`
	CreatedAt             time.Time   `json:"created_at"`
	ProjectEntityTypeID   int64       `json:"project_entity_type_id"`
	AvailableStatus       int64       `json:"available_status"`
	PropertyVersionTypeID int64       `json:"property_version_type_id"`
	UnitVersionTypeID     int64       `json:"unit_version_type_id"`
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createWishlist,
		arg.CompanyID,
		arg.EntityTypeID,
		arg.EntityID,
		arg.PlatformUserID,
		arg.CreatedAt,
		arg.ProjectEntityTypeID,
		arg.AvailableStatus,
		arg.PropertyVersionTypeID,
		arg.UnitVersionTypeID,
	)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const deleteWishlist = `-- name: DeleteWishlist :one
DELETE FROM wishlist WHERE id=$1 RETURNING 1
`

func (q *Queries) DeleteWishlist(ctx context.Context, id int64) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, deleteWishlist, id)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}
