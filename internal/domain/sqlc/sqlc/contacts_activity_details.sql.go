// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_activity_details.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActivityDetails = `-- name: CreateActivityDetails :one
INSERT INTO contacts_activity_details (
    contacts_activity_header_id,
    contacts_activity_type,
    interval,
    interval_type
) VALUES (
    $1, $2, $3, $4
) RETURNING id, contacts_activity_header_id, contacts_activity_type, interval, interval_type
`

type CreateActivityDetailsParams struct {
	ContactsActivityHeaderID int64 `json:"contacts_activity_header_id"`
	ContactsActivityType     int64 `json:"contacts_activity_type"`
	Interval                 int64 `json:"interval"`
	IntervalType             int64 `json:"interval_type"`
}

func (q *Queries) CreateActivityDetails(ctx context.Context, arg CreateActivityDetailsParams) (ContactsActivityDetail, error) {
	row := q.db.QueryRow(ctx, createActivityDetails,
		arg.ContactsActivityHeaderID,
		arg.ContactsActivityType,
		arg.Interval,
		arg.IntervalType,
	)
	var i ContactsActivityDetail
	err := row.Scan(
		&i.ID,
		&i.ContactsActivityHeaderID,
		&i.ContactsActivityType,
		&i.Interval,
		&i.IntervalType,
	)
	return i, err
}

const getAllActivityDetailsByContactActivityHeaderId = `-- name: GetAllActivityDetailsByContactActivityHeaderId :many
SELECT cad.id, contacts_activity_header_id, cad.contacts_activity_type, interval, interval_type, cah.id, title, created_by, assigned_to, cah.contacts_activity_type, reference_no, moving_date, phone_number, email, subject, comments, status, created_at, updated_at, contacts_id FROM contacts_activity_details cad JOIN contacts_activity_header cah on cad.contacts_activity_header_id = cah.id WHERE cad.contacts_activity_header_id = $1 AND cah.status != 6 LIMIT $2 OFFSET $3
`

type GetAllActivityDetailsByContactActivityHeaderIdParams struct {
	ContactsActivityHeaderID int64 `json:"contacts_activity_header_id"`
	Limit                    int32 `json:"limit"`
	Offset                   int32 `json:"offset"`
}

type GetAllActivityDetailsByContactActivityHeaderIdRow struct {
	ID                       int64            `json:"id"`
	ContactsActivityHeaderID int64            `json:"contacts_activity_header_id"`
	ContactsActivityType     int64            `json:"contacts_activity_type"`
	Interval                 int64            `json:"interval"`
	IntervalType             int64            `json:"interval_type"`
	ID_2                     int64            `json:"id_2"`
	Title                    string           `json:"title"`
	CreatedBy                int64            `json:"created_by"`
	AssignedTo               []int64          `json:"assigned_to"`
	ContactsActivityType_2   int64            `json:"contacts_activity_type_2"`
	ReferenceNo              string           `json:"reference_no"`
	MovingDate               pgtype.Timestamp `json:"moving_date"`
	PhoneNumber              string           `json:"phone_number"`
	Email                    string           `json:"email"`
	Subject                  string           `json:"subject"`
	Comments                 string           `json:"comments"`
	Status                   int64            `json:"status"`
	CreatedAt                time.Time        `json:"created_at"`
	UpdatedAt                time.Time        `json:"updated_at"`
	ContactsID               pgtype.Int8      `json:"contacts_id"`
}

func (q *Queries) GetAllActivityDetailsByContactActivityHeaderId(ctx context.Context, arg GetAllActivityDetailsByContactActivityHeaderIdParams) ([]GetAllActivityDetailsByContactActivityHeaderIdRow, error) {
	rows, err := q.db.Query(ctx, getAllActivityDetailsByContactActivityHeaderId, arg.ContactsActivityHeaderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllActivityDetailsByContactActivityHeaderIdRow
	for rows.Next() {
		var i GetAllActivityDetailsByContactActivityHeaderIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ContactsActivityHeaderID,
			&i.ContactsActivityType,
			&i.Interval,
			&i.IntervalType,
			&i.ID_2,
			&i.Title,
			&i.CreatedBy,
			&i.AssignedTo,
			&i.ContactsActivityType_2,
			&i.ReferenceNo,
			&i.MovingDate,
			&i.PhoneNumber,
			&i.Email,
			&i.Subject,
			&i.Comments,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContactsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleActivityDetail = `-- name: GetSingleActivityDetail :one
SELECT id, contacts_activity_header_id, contacts_activity_type, interval, interval_type FROM contacts_activity_details WHERE id = $1
`

func (q *Queries) GetSingleActivityDetail(ctx context.Context, id int64) (ContactsActivityDetail, error) {
	row := q.db.QueryRow(ctx, getSingleActivityDetail, id)
	var i ContactsActivityDetail
	err := row.Scan(
		&i.ID,
		&i.ContactsActivityHeaderID,
		&i.ContactsActivityType,
		&i.Interval,
		&i.IntervalType,
	)
	return i, err
}
