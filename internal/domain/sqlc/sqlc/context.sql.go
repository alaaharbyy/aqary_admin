// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: context.sql

package sqlc

import (
	"context"
)

const getCurrentUserID = `-- name: GetCurrentUserID :one
SELECT get_current_user_id()
`

func (q *Queries) GetCurrentUserID(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRow(ctx, getCurrentUserID)
	var get_current_user_id interface{}
	err := row.Scan(&get_current_user_id)
	return get_current_user_id, err
}

const getCurrentUserIDRaw = `-- name: GetCurrentUserIDRaw :one
SELECT current_setting('app.current_user_id', true) AS user_id_str
`

func (q *Queries) GetCurrentUserIDRaw(ctx context.Context) (string, error) {
	row := q.db.QueryRow(ctx, getCurrentUserIDRaw)
	var user_id_str string
	err := row.Scan(&user_id_str)
	return user_id_str, err
}

const setLogContext = `-- name: SetLogContext :exec
SELECT set_logging_context($1::text,$2::bigint, $3::text)
`

type SetLogContextParams struct {
	Column1 string `json:"column_1"`
	Column2 int64  `json:"column_2"`
	Column3 string `json:"column_3"`
}

func (q *Queries) SetLogContext(ctx context.Context, arg SetLogContextParams) error {
	_, err := q.db.Exec(ctx, setLogContext, arg.Column1, arg.Column2, arg.Column3)
	return err
}

const setModuleContext = `-- name: SetModuleContext :exec
SELECT set_current_module_name($1)
`

func (q *Queries) SetModuleContext(ctx context.Context, setCurrentModuleName interface{}) error {
	_, err := q.db.Exec(ctx, setModuleContext, setCurrentModuleName)
	return err
}

const setUserContext = `-- name: SetUserContext :one
SELECT set_current_user_id($1) AS result
`

// SQLC queries for setting and getting context
func (q *Queries) SetUserContext(ctx context.Context, setCurrentUserID interface{}) (interface{}, error) {
	row := q.db.QueryRow(ctx, setUserContext, setCurrentUserID)
	var result interface{}
	err := row.Scan(&result)
	return result, err
}

const toggleTrigger = `-- name: ToggleTrigger :exec
SELECT toggle_trigger_status($1, $2)
`

type ToggleTriggerParams struct {
	TableName interface{} `json:"table_name"`
	Status    interface{} `json:"status"`
}

func (q *Queries) ToggleTrigger(ctx context.Context, arg ToggleTriggerParams) error {
	_, err := q.db.Exec(ctx, toggleTrigger, arg.TableName, arg.Status)
	return err
}
