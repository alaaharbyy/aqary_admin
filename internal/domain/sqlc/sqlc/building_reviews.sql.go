// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: building_reviews.sql

package sqlc

import (
	"context"
	"time"
)

const createBuildingReviews = `-- name: CreateBuildingReviews :one
INSERT INTO building_reviews (
     property_id,
     property_table,
     reviews,
     maintenance_rating,
     staff_rating,
     gym_rating,
     noise_rating,
     children_rating,
     traffic_rating,
     guest_parking_rating,
     profiles_id,
     status,
     created_at,
     updated_at,
     users_id
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15 
) RETURNING id, property_id, property_table, reviews, maintenance_rating, staff_rating, gym_rating, noise_rating, children_rating, traffic_rating, guest_parking_rating, profiles_id, status, created_at, updated_at, users_id
`

type CreateBuildingReviewsParams struct {
	PropertyID         int64     `json:"property_id"`
	PropertyTable      string    `json:"property_table"`
	Reviews            string    `json:"reviews"`
	MaintenanceRating  string    `json:"maintenance_rating"`
	StaffRating        string    `json:"staff_rating"`
	GymRating          string    `json:"gym_rating"`
	NoiseRating        string    `json:"noise_rating"`
	ChildrenRating     string    `json:"children_rating"`
	TrafficRating      string    `json:"traffic_rating"`
	GuestParkingRating string    `json:"guest_parking_rating"`
	ProfilesID         int64     `json:"profiles_id"`
	Status             int64     `json:"status"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
	UsersID            int64     `json:"users_id"`
}

func (q *Queries) CreateBuildingReviews(ctx context.Context, arg CreateBuildingReviewsParams) (BuildingReview, error) {
	row := q.db.QueryRow(ctx, createBuildingReviews,
		arg.PropertyID,
		arg.PropertyTable,
		arg.Reviews,
		arg.MaintenanceRating,
		arg.StaffRating,
		arg.GymRating,
		arg.NoiseRating,
		arg.ChildrenRating,
		arg.TrafficRating,
		arg.GuestParkingRating,
		arg.ProfilesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BuildingReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.PropertyTable,
		&i.Reviews,
		&i.MaintenanceRating,
		&i.StaffRating,
		&i.GymRating,
		&i.NoiseRating,
		&i.ChildrenRating,
		&i.TrafficRating,
		&i.GuestParkingRating,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteBuildingReviews = `-- name: DeleteBuildingReviews :exec
DELETE FROM building_reviews
Where id = $1
`

func (q *Queries) DeleteBuildingReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBuildingReviews, id)
	return err
}

const getAllBuildingReviews = `-- name: GetAllBuildingReviews :many
SELECT id, property_id, property_table, reviews, maintenance_rating, staff_rating, gym_rating, noise_rating, children_rating, traffic_rating, guest_parking_rating, profiles_id, status, created_at, updated_at, users_id FROM building_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBuildingReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBuildingReviews(ctx context.Context, arg GetAllBuildingReviewsParams) ([]BuildingReview, error) {
	rows, err := q.db.Query(ctx, getAllBuildingReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BuildingReview
	for rows.Next() {
		var i BuildingReview
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.PropertyTable,
			&i.Reviews,
			&i.MaintenanceRating,
			&i.StaffRating,
			&i.GymRating,
			&i.NoiseRating,
			&i.ChildrenRating,
			&i.TrafficRating,
			&i.GuestParkingRating,
			&i.ProfilesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBuildingReviews = `-- name: GetBuildingReviews :one
SELECT id, property_id, property_table, reviews, maintenance_rating, staff_rating, gym_rating, noise_rating, children_rating, traffic_rating, guest_parking_rating, profiles_id, status, created_at, updated_at, users_id FROM building_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBuildingReviews(ctx context.Context, limit int32) (BuildingReview, error) {
	row := q.db.QueryRow(ctx, getBuildingReviews, limit)
	var i BuildingReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.PropertyTable,
		&i.Reviews,
		&i.MaintenanceRating,
		&i.StaffRating,
		&i.GymRating,
		&i.NoiseRating,
		&i.ChildrenRating,
		&i.TrafficRating,
		&i.GuestParkingRating,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const updateBuildingReviews = `-- name: UpdateBuildingReviews :one
UPDATE building_reviews
SET  property_id = $2,
     property_table = $3,
     reviews = $4,
     maintenance_rating = $5,
     staff_rating = $6,
     gym_rating = $7,
     noise_rating = $8,
     children_rating = $9,
     traffic_rating = $10,
     guest_parking_rating = $11,
      profiles_id = $12,
     status = $13,
     created_at = $14,
     updated_at = $15,
     users_id = $16
Where id = $1
RETURNING id, property_id, property_table, reviews, maintenance_rating, staff_rating, gym_rating, noise_rating, children_rating, traffic_rating, guest_parking_rating, profiles_id, status, created_at, updated_at, users_id
`

type UpdateBuildingReviewsParams struct {
	ID                 int64     `json:"id"`
	PropertyID         int64     `json:"property_id"`
	PropertyTable      string    `json:"property_table"`
	Reviews            string    `json:"reviews"`
	MaintenanceRating  string    `json:"maintenance_rating"`
	StaffRating        string    `json:"staff_rating"`
	GymRating          string    `json:"gym_rating"`
	NoiseRating        string    `json:"noise_rating"`
	ChildrenRating     string    `json:"children_rating"`
	TrafficRating      string    `json:"traffic_rating"`
	GuestParkingRating string    `json:"guest_parking_rating"`
	ProfilesID         int64     `json:"profiles_id"`
	Status             int64     `json:"status"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
	UsersID            int64     `json:"users_id"`
}

func (q *Queries) UpdateBuildingReviews(ctx context.Context, arg UpdateBuildingReviewsParams) (BuildingReview, error) {
	row := q.db.QueryRow(ctx, updateBuildingReviews,
		arg.ID,
		arg.PropertyID,
		arg.PropertyTable,
		arg.Reviews,
		arg.MaintenanceRating,
		arg.StaffRating,
		arg.GymRating,
		arg.NoiseRating,
		arg.ChildrenRating,
		arg.TrafficRating,
		arg.GuestParkingRating,
		arg.ProfilesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BuildingReview
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.PropertyTable,
		&i.Reviews,
		&i.MaintenanceRating,
		&i.StaffRating,
		&i.GymRating,
		&i.NoiseRating,
		&i.ChildrenRating,
		&i.TrafficRating,
		&i.GuestParkingRating,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
