// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: documnets_category.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDocumentsCategory = `-- name: CreateDocumentsCategory :one
INSERT INTO documents_category (
    category,
    created_at, 
    updated_at,
    status,
    category_ar
)VALUES (
    $1, $2, $3, $4,$5
) RETURNING id, category, created_at, updated_at, status, category_ar
`

type CreateDocumentsCategoryParams struct {
	Category   string      `json:"category"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
	Status     int64       `json:"status"`
	CategoryAr pgtype.Text `json:"category_ar"`
}

func (q *Queries) CreateDocumentsCategory(ctx context.Context, arg CreateDocumentsCategoryParams) (DocumentsCategory, error) {
	row := q.db.QueryRow(ctx, createDocumentsCategory,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.CategoryAr,
	)
	var i DocumentsCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryAr,
	)
	return i, err
}

const deleteDocumentsCategory = `-- name: DeleteDocumentsCategory :exec
DELETE FROM documents_category
Where id = $1
`

func (q *Queries) DeleteDocumentsCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDocumentsCategory, id)
	return err
}

const getAllDocumentsCategory = `-- name: GetAllDocumentsCategory :many
SELECT id, category, created_at, updated_at, status, category_ar FROM documents_category
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDocumentsCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDocumentsCategory(ctx context.Context, arg GetAllDocumentsCategoryParams) ([]DocumentsCategory, error) {
	rows, err := q.db.Query(ctx, getAllDocumentsCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DocumentsCategory
	for rows.Next() {
		var i DocumentsCategory
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.CategoryAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocumentCategoryForContact = `-- name: GetDocumentCategoryForContact :one
SELECT id, title,title_ar FROM document_categories
WHERE id = $1 AND parent_category_id is null LIMIT $1
`

type GetDocumentCategoryForContactRow struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) GetDocumentCategoryForContact(ctx context.Context, limit int32) (GetDocumentCategoryForContactRow, error) {
	row := q.db.QueryRow(ctx, getDocumentCategoryForContact, limit)
	var i GetDocumentCategoryForContactRow
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const getDocumentSubCategoryForContact = `-- name: GetDocumentSubCategoryForContact :one
SELECT id, title,title_ar FROM document_categories
WHERE id = $1 AND parent_category_id is not null LIMIT $1
`

type GetDocumentSubCategoryForContactRow struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) GetDocumentSubCategoryForContact(ctx context.Context, limit int32) (GetDocumentSubCategoryForContactRow, error) {
	row := q.db.QueryRow(ctx, getDocumentSubCategoryForContact, limit)
	var i GetDocumentSubCategoryForContactRow
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const getDocumentsCategorByCategory = `-- name: GetDocumentsCategorByCategory :one
SELECT id, category, created_at, updated_at, status, category_ar FROM documents_category
WHERE category = $1
`

func (q *Queries) GetDocumentsCategorByCategory(ctx context.Context, category string) (DocumentsCategory, error) {
	row := q.db.QueryRow(ctx, getDocumentsCategorByCategory, category)
	var i DocumentsCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryAr,
	)
	return i, err
}

const getDocumentsCategory = `-- name: GetDocumentsCategory :one
SELECT id, category, created_at, updated_at, status, category_ar FROM documents_category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocumentsCategory(ctx context.Context, id int64) (DocumentsCategory, error) {
	row := q.db.QueryRow(ctx, getDocumentsCategory, id)
	var i DocumentsCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryAr,
	)
	return i, err
}

const updateDocumentsCategory = `-- name: UpdateDocumentsCategory :one
UPDATE documents_category
SET category = $2,
    created_at = $3, 
    updated_at = $4,
    status = $5,
    category_ar=$6
Where id = $1
RETURNING id, category, created_at, updated_at, status, category_ar
`

type UpdateDocumentsCategoryParams struct {
	ID         int64       `json:"id"`
	Category   string      `json:"category"`
	CreatedAt  time.Time   `json:"created_at"`
	UpdatedAt  time.Time   `json:"updated_at"`
	Status     int64       `json:"status"`
	CategoryAr pgtype.Text `json:"category_ar"`
}

func (q *Queries) UpdateDocumentsCategory(ctx context.Context, arg UpdateDocumentsCategoryParams) (DocumentsCategory, error) {
	row := q.db.QueryRow(ctx, updateDocumentsCategory,
		arg.ID,
		arg.Category,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.CategoryAr,
	)
	var i DocumentsCategory
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.CategoryAr,
	)
	return i, err
}
