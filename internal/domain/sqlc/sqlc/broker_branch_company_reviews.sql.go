// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_branch_company_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerBranchCompanyReviews = `-- name: CreateBrokerBranchCompanyReviews :one
INSERT INTO broker_branch_company_reviews (
 rating,
 review,
 profiles_id,
 status,
 broker_companies_branches_id,
 created_at,
 updated_at,
 users_id

)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, rating, review, profiles_id, status, broker_companies_branches_id, created_at, updated_at, users_id
`

type CreateBrokerBranchCompanyReviewsParams struct {
	Rating                    string    `json:"rating"`
	Review                    string    `json:"review"`
	ProfilesID                int64     `json:"profiles_id"`
	Status                    int64     `json:"status"`
	BrokerCompaniesBranchesID int64     `json:"broker_companies_branches_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
	UsersID                   int64     `json:"users_id"`
}

func (q *Queries) CreateBrokerBranchCompanyReviews(ctx context.Context, arg CreateBrokerBranchCompanyReviewsParams) (BrokerBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, createBrokerBranchCompanyReviews,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.BrokerCompaniesBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteBrokerBranchCompanyReviews = `-- name: DeleteBrokerBranchCompanyReviews :exec
DELETE FROM broker_branch_company_reviews
Where id = $1
`

func (q *Queries) DeleteBrokerBranchCompanyReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerBranchCompanyReviews, id)
	return err
}

const getAllBrokerBranchCompanyReviews = `-- name: GetAllBrokerBranchCompanyReviews :many
SELECT id, rating, review, profiles_id, status, broker_companies_branches_id, created_at, updated_at, users_id FROM broker_branch_company_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerBranchCompanyReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerBranchCompanyReviews(ctx context.Context, arg GetAllBrokerBranchCompanyReviewsParams) ([]BrokerBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerBranchCompanyReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerBranchCompanyReview
	for rows.Next() {
		var i BrokerBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.BrokerCompaniesBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgBrokerBranchCompanyReviews = `-- name: GetAvgBrokerBranchCompanyReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1) FROM broker_branch_company_reviews WHERE  broker_companies_branches_id = $1
`

func (q *Queries) GetAvgBrokerBranchCompanyReviews(ctx context.Context, brokerCompaniesBranchesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgBrokerBranchCompanyReviews, brokerCompaniesBranchesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getBrokerBranchCompanyReviews = `-- name: GetBrokerBranchCompanyReviews :one
SELECT id, rating, review, profiles_id, status, broker_companies_branches_id, created_at, updated_at, users_id FROM broker_branch_company_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerBranchCompanyReviews(ctx context.Context, limit int32) (BrokerBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, getBrokerBranchCompanyReviews, limit)
	var i BrokerBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getBrokerBranchCompanyReviewsByCompanyId = `-- name: GetBrokerBranchCompanyReviewsByCompanyId :many
SELECT id, rating, review, profiles_id, status, broker_companies_branches_id, created_at, updated_at, users_id FROM broker_branch_company_reviews 
WHERE  broker_companies_branches_id = $3 LIMIT $1 OFFSET $2
`

type GetBrokerBranchCompanyReviewsByCompanyIdParams struct {
	Limit                     int32 `json:"limit"`
	Offset                    int32 `json:"offset"`
	BrokerCompaniesBranchesID int64 `json:"broker_companies_branches_id"`
}

func (q *Queries) GetBrokerBranchCompanyReviewsByCompanyId(ctx context.Context, arg GetBrokerBranchCompanyReviewsByCompanyIdParams) ([]BrokerBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getBrokerBranchCompanyReviewsByCompanyId, arg.Limit, arg.Offset, arg.BrokerCompaniesBranchesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerBranchCompanyReview
	for rows.Next() {
		var i BrokerBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.BrokerCompaniesBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrokerBranchCompanyReviews = `-- name: UpdateBrokerBranchCompanyReviews :one
UPDATE broker_branch_company_reviews
SET   
  rating = $2,
 review = $3,
 profiles_id = $4,
 status = $5,
 broker_companies_branches_id = $6,
 created_at = $7,
 updated_at = $8,
 users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, broker_companies_branches_id, created_at, updated_at, users_id
`

type UpdateBrokerBranchCompanyReviewsParams struct {
	ID                        int64     `json:"id"`
	Rating                    string    `json:"rating"`
	Review                    string    `json:"review"`
	ProfilesID                int64     `json:"profiles_id"`
	Status                    int64     `json:"status"`
	BrokerCompaniesBranchesID int64     `json:"broker_companies_branches_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
	UsersID                   int64     `json:"users_id"`
}

func (q *Queries) UpdateBrokerBranchCompanyReviews(ctx context.Context, arg UpdateBrokerBranchCompanyReviewsParams) (BrokerBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, updateBrokerBranchCompanyReviews,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.BrokerCompaniesBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
