// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_categories .sql

package sqlc

import (
	"context"
)

const createHolidayHomeCategory = `-- name: CreateHolidayHomeCategory :one
INSERT INTO holiday_home_categories (
    holiday_home_type,
    title,
    title_ar,
    status
)VALUES (
     $1, $2, $3, $4
) RETURNING id, holiday_home_type, title, title_ar, status
`

type CreateHolidayHomeCategoryParams struct {
	HolidayHomeType int64  `json:"holiday_home_type"`
	Title           string `json:"title"`
	TitleAr         string `json:"title_ar"`
	Status          int64  `json:"status"`
}

func (q *Queries) CreateHolidayHomeCategory(ctx context.Context, arg CreateHolidayHomeCategoryParams) (HolidayHomeCategory, error) {
	row := q.db.QueryRow(ctx, createHolidayHomeCategory,
		arg.HolidayHomeType,
		arg.Title,
		arg.TitleAr,
		arg.Status,
	)
	var i HolidayHomeCategory
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeType,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const deleteHolidayHomeCategory = `-- name: DeleteHolidayHomeCategory :exec
DELETE FROM holiday_home_categories
Where id = $1
`

func (q *Queries) DeleteHolidayHomeCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomeCategory, id)
	return err
}

const getAllCountHolidayHomeCategory = `-- name: GetAllCountHolidayHomeCategory :one
SELECT COUNT(*) FROM holiday_home_categories Where status != 6
`

func (q *Queries) GetAllCountHolidayHomeCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomeCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllCountHolidayHomeCategoryByHolidayType = `-- name: GetAllCountHolidayHomeCategoryByHolidayType :one
SELECT COUNT(*) FROM holiday_home_categories WHERE holiday_home_type= $1 AND status != 6
`

func (q *Queries) GetAllCountHolidayHomeCategoryByHolidayType(ctx context.Context, holidayHomeType int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomeCategoryByHolidayType, holidayHomeType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllHolidayHomeCategory = `-- name: GetAllHolidayHomeCategory :many
select id, holiday_home_type, title, title_ar, status from holiday_home_categories Where status != 6 order by id DESC
`

func (q *Queries) GetAllHolidayHomeCategory(ctx context.Context) ([]HolidayHomeCategory, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeCategory
	for rows.Next() {
		var i HolidayHomeCategory
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeType,
			&i.Title,
			&i.TitleAr,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeCategoryWithpg = `-- name: GetAllHolidayHomeCategoryWithpg :many
select id, holiday_home_type, title, title_ar, status from holiday_home_categories Where status != 6
ORDER BY id DESC
Limit $1
Offset $2
`

type GetAllHolidayHomeCategoryWithpgParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomeCategoryWithpg(ctx context.Context, arg GetAllHolidayHomeCategoryWithpgParams) ([]HolidayHomeCategory, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeCategoryWithpg, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeCategory
	for rows.Next() {
		var i HolidayHomeCategory
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeType,
			&i.Title,
			&i.TitleAr,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomeCategory = `-- name: GetHolidayHomeCategory :one
SELECT id, holiday_home_type, title, title_ar, status FROM holiday_home_categories
WHERE id = $1 AND status != 6 LIMIT 1
`

func (q *Queries) GetHolidayHomeCategory(ctx context.Context, id int64) (HolidayHomeCategory, error) {
	row := q.db.QueryRow(ctx, getHolidayHomeCategory, id)
	var i HolidayHomeCategory
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeType,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const getHolidayHomeCategoryByHolidayType = `-- name: GetHolidayHomeCategoryByHolidayType :many
SELECT id, holiday_home_type, title, title_ar, status FROM holiday_home_categories
WHERE holiday_home_type= $1 AND status != 6
`

func (q *Queries) GetHolidayHomeCategoryByHolidayType(ctx context.Context, holidayHomeType int64) ([]HolidayHomeCategory, error) {
	rows, err := q.db.Query(ctx, getHolidayHomeCategoryByHolidayType, holidayHomeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeCategory
	for rows.Next() {
		var i HolidayHomeCategory
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeType,
			&i.Title,
			&i.TitleAr,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolidayHomeCategory = `-- name: UpdateHolidayHomeCategory :one
UPDATE holiday_home_categories
SET   holiday_home_type = $2,
      title = $3,
      title_ar = $4,
      status = $5
WHERE id = $1
RETURNING id, holiday_home_type, title, title_ar, status
`

type UpdateHolidayHomeCategoryParams struct {
	ID              int64  `json:"id"`
	HolidayHomeType int64  `json:"holiday_home_type"`
	Title           string `json:"title"`
	TitleAr         string `json:"title_ar"`
	Status          int64  `json:"status"`
}

func (q *Queries) UpdateHolidayHomeCategory(ctx context.Context, arg UpdateHolidayHomeCategoryParams) (HolidayHomeCategory, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomeCategory,
		arg.ID,
		arg.HolidayHomeType,
		arg.Title,
		arg.TitleAr,
		arg.Status,
	)
	var i HolidayHomeCategory
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeType,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}
