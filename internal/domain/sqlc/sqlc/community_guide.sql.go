// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: community_guide.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommunityGuidelines = `-- name: CreateCommunityGuidelines :one
INSERT INTO community_guidelines (
  -- title,
  country_id,
  state_id,
  city_id,
  community_id,
  description,
  cover_image,
  insights,
  sub_insights,
  created_at,
  update_at,
  status,
  about
  
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9,$10, $11,$12
)
RETURNING id, country_id, state_id, city_id, community_id, description, cover_image, insights, sub_insights, status, about, created_at, update_at, deleted_at
`

type CreateCommunityGuidelinesParams struct {
	CountryID   int64       `json:"country_id"`
	StateID     int64       `json:"state_id"`
	CityID      int64       `json:"city_id"`
	CommunityID int64       `json:"community_id"`
	Description string      `json:"description"`
	CoverImage  string      `json:"cover_image"`
	Insights    []int64     `json:"insights"`
	SubInsights []int64     `json:"sub_insights"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdateAt    time.Time   `json:"update_at"`
	Status      int64       `json:"status"`
	About       pgtype.Text `json:"about"`
}

func (q *Queries) CreateCommunityGuidelines(ctx context.Context, arg CreateCommunityGuidelinesParams) (CommunityGuideline, error) {
	row := q.db.QueryRow(ctx, createCommunityGuidelines,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CommunityID,
		arg.Description,
		arg.CoverImage,
		arg.Insights,
		arg.SubInsights,
		arg.CreatedAt,
		arg.UpdateAt,
		arg.Status,
		arg.About,
	)
	var i CommunityGuideline
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.Description,
		&i.CoverImage,
		&i.Insights,
		&i.SubInsights,
		&i.Status,
		&i.About,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCommunityGuideLines = `-- name: GetCommunityGuideLines :one
SELECT 
  DISTINCT ON (community_guidelines.id)
  community_guidelines.id, community_guidelines.country_id, community_guidelines.state_id, community_guidelines.city_id, community_guidelines.community_id, community_guidelines.description, community_guidelines.cover_image, community_guidelines.insights, community_guidelines.sub_insights, community_guidelines.status, community_guidelines.about, community_guidelines.created_at, community_guidelines.update_at, community_guidelines.deleted_at,
  communities.community,
  cities.city,
  states.state,
  countries.country,
  (
    SELECT jsonb_agg(jsonb_build_object('id', i.id, 'label', i.insight_name))
    FROM community_guidelines_insight i
    WHERE i.id = ANY(community_guidelines.insights)
  ) AS community_guidelines_insight,
  (
    SELECT jsonb_agg(jsonb_build_object('id', s.id, 'label', s.subinsight_name))
    FROM community_guidelines_subinsight s
    WHERE s.id = ANY(community_guidelines.sub_insights)
  ) AS community_guidelines_subinsight

FROM community_guidelines 
JOIN communities ON community_guidelines.community_id = communities.id
JOIN cities ON cities.id = community_guidelines.city_id
JOIN states ON states.id = community_guidelines.state_id
JOIN countries ON countries.id = community_guidelines.country_id
WHERE community_guidelines.id = $1
ORDER BY community_guidelines.id
LIMIT 1
`

type GetCommunityGuideLinesRow struct {
	CommunityGuideline            CommunityGuideline `json:"community_guideline"`
	Community                     string             `json:"community"`
	City                          string             `json:"city"`
	State                         string             `json:"state"`
	Country                       string             `json:"country"`
	CommunityGuidelinesInsight    []byte             `json:"community_guidelines_insight"`
	CommunityGuidelinesSubinsight []byte             `json:"community_guidelines_subinsight"`
}

func (q *Queries) GetCommunityGuideLines(ctx context.Context, id int64) (GetCommunityGuideLinesRow, error) {
	row := q.db.QueryRow(ctx, getCommunityGuideLines, id)
	var i GetCommunityGuideLinesRow
	err := row.Scan(
		&i.CommunityGuideline.ID,
		&i.CommunityGuideline.CountryID,
		&i.CommunityGuideline.StateID,
		&i.CommunityGuideline.CityID,
		&i.CommunityGuideline.CommunityID,
		&i.CommunityGuideline.Description,
		&i.CommunityGuideline.CoverImage,
		&i.CommunityGuideline.Insights,
		&i.CommunityGuideline.SubInsights,
		&i.CommunityGuideline.Status,
		&i.CommunityGuideline.About,
		&i.CommunityGuideline.CreatedAt,
		&i.CommunityGuideline.UpdateAt,
		&i.CommunityGuideline.DeletedAt,
		&i.Community,
		&i.City,
		&i.State,
		&i.Country,
		&i.CommunityGuidelinesInsight,
		&i.CommunityGuidelinesSubinsight,
	)
	return i, err
}

const getCommunityGuidesLines = `-- name: GetCommunityGuidesLines :many







SELECT 
  DISTINCT ON (community_guidelines.id)
  community_guidelines.id, community_guidelines.country_id, community_guidelines.state_id, community_guidelines.city_id, community_guidelines.community_id, community_guidelines.cover_image, community_guidelines.insights, community_guidelines.sub_insights, community_guidelines.status, community_guidelines.about, community_guidelines.created_at, community_guidelines.update_at, community_guidelines.deleted_at,
  communities.community,
  cities.city,
  states.state,
  countries.country,

  COALESCE((
    SELECT jsonb_agg(jsonb_build_object('id', i.id, 'label', i.insight_name))
    FROM community_guidelines_insight i
    WHERE i.id = ANY(community_guidelines.insights)
      AND i.status NOT IN (5, 6)
  ), '[]'::jsonb)::jsonb AS community_guidelines_insight,

  COALESCE((
    SELECT jsonb_agg(jsonb_build_object('id', s.id, 'label', s.subinsight_name))
    FROM community_guidelines_subinsight s
    WHERE s.id = ANY(community_guidelines.sub_insights)
      AND s.status NOT IN (5, 6)
  ), '[]'::jsonb)::jsonb AS community_guidelines_subinsight

FROM community_guidelines 
JOIN communities ON community_guidelines.community_id = communities.id
JOIN cities ON cities.id = community_guidelines.city_id
JOIN states ON states.id = community_guidelines.state_id
JOIN countries ON countries.id = community_guidelines.country_id
WHERE community_guidelines.status NOT IN (5, 6)
  AND communities.status NOT IN (5, 6)
ORDER BY community_guidelines.id desc
LIMIT $2
OFFSET $1
`

type GetCommunityGuidesLinesParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetCommunityGuidesLinesRow struct {
	ID                            int64              `json:"id"`
	CountryID                     int64              `json:"country_id"`
	StateID                       int64              `json:"state_id"`
	CityID                        int64              `json:"city_id"`
	CommunityID                   int64              `json:"community_id"`
	CoverImage                    string             `json:"cover_image"`
	Insights                      []int64            `json:"insights"`
	SubInsights                   []int64            `json:"sub_insights"`
	Status                        int64              `json:"status"`
	About                         pgtype.Text        `json:"about"`
	CreatedAt                     time.Time          `json:"created_at"`
	UpdateAt                      time.Time          `json:"update_at"`
	DeletedAt                     pgtype.Timestamptz `json:"deleted_at"`
	Community                     string             `json:"community"`
	City                          string             `json:"city"`
	State                         string             `json:"state"`
	Country                       string             `json:"country"`
	CommunityGuidelinesInsight    []byte             `json:"community_guidelines_insight"`
	CommunityGuidelinesSubinsight []byte             `json:"community_guidelines_subinsight"`
}

// -- name: GetCommunityGuidesLines :many
// SELECT
//
//	sqlc.embed(community_guidelines),
//	communities.community,
//	(
//	  SELECT jsonb_agg(jsonb_build_object('id', i.id, 'label', i.insight_name))
//	  FROM community_guidelines_insight i
//	  WHERE i.id = ANY(community_guidelines.insights)
//	    AND i.status NOT IN (5, 6)
//	) AS community_guidelines_insight,
//	(
//	  SELECT jsonb_agg(jsonb_build_object('id', s.id, 'label', s.subinsight_name))
//	  FROM community_guidelines_subinsight s
//	  WHERE s.id = ANY(community_guidelines.sub_insights)
//	    AND s.status NOT IN (5, 6)
//	) AS community_guidelines_subinsight
//
// FROM community_guidelines
// JOIN communities ON community_guidelines.community_id = communities.id
// WHERE community_guidelines.status NOT IN (5, 6)
//
//	AND communities.status NOT IN (5, 6)
//
// ORDER BY community_guidelines.update_at DESC
// LIMIT sqlc.narg('limit')
// OFFSET sqlc.narg('offset');
// -- name: GetCommunityGuidesLinesCount :one
// SELECT
//
//	COUNT(DISTINCT community_guidelines.id)
//
// FROM community_guidelines
// JOIN communities ON community_guidelines.community_id = communities.id
// WHERE community_guidelines.status NOT IN (5, 6)
//
//	AND communities.status NOT IN (5, 6)
//	AND EXISTS (
//	  SELECT 1
//	  FROM community_guidelines_insight i
//	  WHERE i.id = ANY(community_guidelines.insights)
//	    AND i.status NOT IN (5, 6)
//	)
//	AND EXISTS (
//	  SELECT 1
//	  FROM community_guidelines_subinsight s
//	  WHERE s.id = ANY(community_guidelines.sub_insights)
//	    AND s.status NOT IN (5, 6));
func (q *Queries) GetCommunityGuidesLines(ctx context.Context, arg GetCommunityGuidesLinesParams) ([]GetCommunityGuidesLinesRow, error) {
	rows, err := q.db.Query(ctx, getCommunityGuidesLines, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommunityGuidesLinesRow
	for rows.Next() {
		var i GetCommunityGuidesLinesRow
		if err := rows.Scan(
			&i.ID,
			&i.CountryID,
			&i.StateID,
			&i.CityID,
			&i.CommunityID,
			&i.CoverImage,
			&i.Insights,
			&i.SubInsights,
			&i.Status,
			&i.About,
			&i.CreatedAt,
			&i.UpdateAt,
			&i.DeletedAt,
			&i.Community,
			&i.City,
			&i.State,
			&i.Country,
			&i.CommunityGuidelinesInsight,
			&i.CommunityGuidelinesSubinsight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommunityGuidesLinesCount = `-- name: GetCommunityGuidesLinesCount :one
SELECT 
  COUNT(DISTINCT community_guidelines.id)
FROM community_guidelines 
JOIN communities ON community_guidelines.community_id = communities.id
JOIN cities ON cities.id = community_guidelines.city_id
JOIN states ON states.id = community_guidelines.state_id
JOIN countries ON countries.id = community_guidelines.country_id
WHERE community_guidelines.status NOT IN (5, 6)
  AND communities.status NOT IN (5, 6)
`

func (q *Queries) GetCommunityGuidesLinesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCommunityGuidesLinesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeletedCommunityGuidesLines = `-- name: GetDeletedCommunityGuidesLines :many
	

SELECT 
  DISTINCT ON (community_guidelines.id)
  community_guidelines.id, community_guidelines.country_id, community_guidelines.state_id, community_guidelines.city_id, community_guidelines.community_id, community_guidelines.description, community_guidelines.cover_image, community_guidelines.insights, community_guidelines.sub_insights, community_guidelines.status, community_guidelines.about, community_guidelines.created_at, community_guidelines.update_at, community_guidelines.deleted_at,
  communities.community,
  cities.city,
  states.state,
  countries.country
  -- media.media
FROM community_guidelines 
JOIN communities ON community_guidelines.community_id = communities.id
JOIN cities ON cities.id = community_guidelines.city_id
JOIN states ON states.id = community_guidelines.state_id
JOIN countries ON countries.id = community_guidelines.country_id
WHERE community_guidelines.status=6
ORDER BY community_guidelines.id,deleted_at DESC
LIMIT $2
OFFSET $1
`

type GetDeletedCommunityGuidesLinesParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetDeletedCommunityGuidesLinesRow struct {
	CommunityGuideline CommunityGuideline `json:"community_guideline"`
	Community          string             `json:"community"`
	City               string             `json:"city"`
	State              string             `json:"state"`
	Country            string             `json:"country"`
}

// with media as (
//
//	SELECT
//		global_media.entity_id as community_guidelines_id,
//	jsonb_agg(jsonb_build_object('media_type', global_media.media_type, 'files', global_media.file_urls)) as media
//	FROM global_media
//	WHERE  global_media.entity_type_id= 21 AND global_media.gallery_type='Main'
//	GROUP by global_media.entity_id
//
// )
// LEFT JOIN media ON media.community_guidelines_id = community_guidelines.id
func (q *Queries) GetDeletedCommunityGuidesLines(ctx context.Context, arg GetDeletedCommunityGuidesLinesParams) ([]GetDeletedCommunityGuidesLinesRow, error) {
	rows, err := q.db.Query(ctx, getDeletedCommunityGuidesLines, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeletedCommunityGuidesLinesRow
	for rows.Next() {
		var i GetDeletedCommunityGuidesLinesRow
		if err := rows.Scan(
			&i.CommunityGuideline.ID,
			&i.CommunityGuideline.CountryID,
			&i.CommunityGuideline.StateID,
			&i.CommunityGuideline.CityID,
			&i.CommunityGuideline.CommunityID,
			&i.CommunityGuideline.Description,
			&i.CommunityGuideline.CoverImage,
			&i.CommunityGuideline.Insights,
			&i.CommunityGuideline.SubInsights,
			&i.CommunityGuideline.Status,
			&i.CommunityGuideline.About,
			&i.CommunityGuideline.CreatedAt,
			&i.CommunityGuideline.UpdateAt,
			&i.CommunityGuideline.DeletedAt,
			&i.Community,
			&i.City,
			&i.State,
			&i.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedCommunityGuidesLinesCount = `-- name: GetDeletedCommunityGuidesLinesCount :one
SELECT 
 count(community_guidelines) 
FROM community_guidelines 
JOIN communities ON community_guidelines.community_id = communities.id
WHERE community_guidelines.status=6
`

func (q *Queries) GetDeletedCommunityGuidesLinesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getDeletedCommunityGuidesLinesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCommunityGuidelines = `-- name: UpdateCommunityGuidelines :one
UPDATE community_guidelines
SET 
  description=$2,
  cover_image=$3,
  insights=$4,
  sub_insights=$5,
  update_at=$6,
  about=$7,
  community_id=$8
WHERE id=$1
RETURNING id, country_id, state_id, city_id, community_id, description, cover_image, insights, sub_insights, status, about, created_at, update_at, deleted_at
`

type UpdateCommunityGuidelinesParams struct {
	ID          int64       `json:"id"`
	Description string      `json:"description"`
	CoverImage  string      `json:"cover_image"`
	Insights    []int64     `json:"insights"`
	SubInsights []int64     `json:"sub_insights"`
	UpdateAt    time.Time   `json:"update_at"`
	About       pgtype.Text `json:"about"`
	CommunityID int64       `json:"community_id"`
}

func (q *Queries) UpdateCommunityGuidelines(ctx context.Context, arg UpdateCommunityGuidelinesParams) (CommunityGuideline, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuidelines,
		arg.ID,
		arg.Description,
		arg.CoverImage,
		arg.Insights,
		arg.SubInsights,
		arg.UpdateAt,
		arg.About,
		arg.CommunityID,
	)
	var i CommunityGuideline
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.Description,
		&i.CoverImage,
		&i.Insights,
		&i.SubInsights,
		&i.Status,
		&i.About,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCommunityGuidelinesStatus = `-- name: UpdateCommunityGuidelinesStatus :one
UPDATE community_guidelines
SET 
    status=$1,
    update_at=$2,
    deleted_at=$3
WHERE id=$4
RETURNING id, country_id, state_id, city_id, community_id, description, cover_image, insights, sub_insights, status, about, created_at, update_at, deleted_at
`

type UpdateCommunityGuidelinesStatusParams struct {
	Status    int64              `json:"status"`
	UpdateAt  time.Time          `json:"update_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateCommunityGuidelinesStatus(ctx context.Context, arg UpdateCommunityGuidelinesStatusParams) (CommunityGuideline, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuidelinesStatus,
		arg.Status,
		arg.UpdateAt,
		arg.DeletedAt,
		arg.ID,
	)
	var i CommunityGuideline
	err := row.Scan(
		&i.ID,
		&i.CountryID,
		&i.StateID,
		&i.CityID,
		&i.CommunityID,
		&i.Description,
		&i.CoverImage,
		&i.Insights,
		&i.SubInsights,
		&i.Status,
		&i.About,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}
