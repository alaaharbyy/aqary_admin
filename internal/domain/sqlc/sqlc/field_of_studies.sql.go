// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: field_of_studies.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFieldOfStudy = `-- name: CreateFieldOfStudy :one
INSERT INTO field_of_studies (
    title,
    title_ar,
    created_at,
    updated_at
 ) VALUES (
    $1, $2, $3, $4
) RETURNING id, title, title_ar, created_at, updated_at
`

type CreateFieldOfStudyParams struct {
	Title     string             `json:"title"`
	TitleAr   pgtype.Text        `json:"title_ar"`
	CreatedAt time.Time          `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateFieldOfStudy(ctx context.Context, arg CreateFieldOfStudyParams) (FieldOfStudy, error) {
	row := q.db.QueryRow(ctx, createFieldOfStudy,
		arg.Title,
		arg.TitleAr,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FieldOfStudy
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllFieldsOfStudy = `-- name: GetAllFieldsOfStudy :many
SELECT id, title, title_ar, created_at, updated_at FROM field_of_studies
`

func (q *Queries) GetAllFieldsOfStudy(ctx context.Context) ([]FieldOfStudy, error) {
	rows, err := q.db.Query(ctx, getAllFieldsOfStudy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FieldOfStudy
	for rows.Next() {
		var i FieldOfStudy
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPaginatedFieldsOfStudy = `-- name: GetAllPaginatedFieldsOfStudy :many
SELECT id, title, title_ar FROM field_of_studies 
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type GetAllPaginatedFieldsOfStudyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPaginatedFieldsOfStudyRow struct {
	ID      int64       `json:"id"`
	Title   string      `json:"title"`
	TitleAr pgtype.Text `json:"title_ar"`
}

func (q *Queries) GetAllPaginatedFieldsOfStudy(ctx context.Context, arg GetAllPaginatedFieldsOfStudyParams) ([]GetAllPaginatedFieldsOfStudyRow, error) {
	rows, err := q.db.Query(ctx, getAllPaginatedFieldsOfStudy, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPaginatedFieldsOfStudyRow
	for rows.Next() {
		var i GetAllPaginatedFieldsOfStudyRow
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountFieldsOfStudy = `-- name: GetCountFieldsOfStudy :one
SELECT COUNT(*) FROM field_of_studies
`

func (q *Queries) GetCountFieldsOfStudy(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountFieldsOfStudy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFieldsOfStudyByID = `-- name: GetFieldsOfStudyByID :one
SELECT id, title, title_ar, created_at, updated_at FROM field_of_studies where id=$1
`

func (q *Queries) GetFieldsOfStudyByID(ctx context.Context, id int64) (FieldOfStudy, error) {
	row := q.db.QueryRow(ctx, getFieldsOfStudyByID, id)
	var i FieldOfStudy
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFieldsOfStudyByTitle = `-- name: GetFieldsOfStudyByTitle :one
SELECT id, title, title_ar, created_at, updated_at FROM field_of_studies where title=$1 LIMIT 1
`

func (q *Queries) GetFieldsOfStudyByTitle(ctx context.Context, title string) (FieldOfStudy, error) {
	row := q.db.QueryRow(ctx, getFieldsOfStudyByTitle, title)
	var i FieldOfStudy
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
