// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: public.agent_routes.sql

package sqlc

import (
	"context"
)

const getAllAgentPerformance = `-- name: GetAllAgentPerformance :many
SELECT 
    assigned_to, 
    reason, 
    COUNT(*) AS reason_count
FROM 
    public.agent_routes
GROUP BY 
    assigned_to, 
    reason
ORDER BY 
    assigned_to, 
    reason_count DESC
`

type GetAllAgentPerformanceRow struct {
	AssignedTo  int64  `json:"assigned_to"`
	Reason      string `json:"reason"`
	ReasonCount int64  `json:"reason_count"`
}

func (q *Queries) GetAllAgentPerformance(ctx context.Context) ([]GetAllAgentPerformanceRow, error) {
	rows, err := q.db.Query(ctx, getAllAgentPerformance)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgentPerformanceRow
	for rows.Next() {
		var i GetAllAgentPerformanceRow
		if err := rows.Scan(&i.AssignedTo, &i.Reason, &i.ReasonCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleAgentPerformance = `-- name: GetSingleAgentPerformance :many
SELECT 
    assigned_to, 
    reason, 
    COUNT(*) AS reason_count
FROM 
    public.agent_routes WHERE assigned_to = $1
GROUP BY 
    assigned_to, 
    reason
ORDER BY 
    assigned_to, 
    reason_count DESC
`

type GetSingleAgentPerformanceRow struct {
	AssignedTo  int64  `json:"assigned_to"`
	Reason      string `json:"reason"`
	ReasonCount int64  `json:"reason_count"`
}

func (q *Queries) GetSingleAgentPerformance(ctx context.Context, assignedTo int64) ([]GetSingleAgentPerformanceRow, error) {
	rows, err := q.db.Query(ctx, getSingleAgentPerformance, assignedTo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSingleAgentPerformanceRow
	for rows.Next() {
		var i GetSingleAgentPerformanceRow
		if err := rows.Scan(&i.AssignedTo, &i.Reason, &i.ReasonCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
