// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: dropdown_items.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDropDownCategories = `-- name: CreateDropDownCategories :one
INSERT INTO dropdown_categories (
    category_name
)VALUES (
    $1
) RETURNING id, category_name, created_at
`

func (q *Queries) CreateDropDownCategories(ctx context.Context, categoryName string) (DropdownCategory, error) {
	row := q.db.QueryRow(ctx, createDropDownCategories, categoryName)
	var i DropdownCategory
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const createDropDownItems = `-- name: CreateDropDownItems :one
INSERT INTO dropdown_items (
    category_id,
    icon_url,
    item_name
)VALUES (
    $1, $2, $3
) RETURNING id, category_id, icon_url, item_name, created_at, created_by
`

type CreateDropDownItemsParams struct {
	CategoryID int64       `json:"category_id"`
	IconUrl    pgtype.Text `json:"icon_url"`
	ItemName   string      `json:"item_name"`
}

func (q *Queries) CreateDropDownItems(ctx context.Context, arg CreateDropDownItemsParams) (DropdownItem, error) {
	row := q.db.QueryRow(ctx, createDropDownItems, arg.CategoryID, arg.IconUrl, arg.ItemName)
	var i DropdownItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.IconUrl,
		&i.ItemName,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const deleteDropDownCategories = `-- name: DeleteDropDownCategories :one
DELETE FROM dropdown_categories
WHERE id = 1 RETURNING id, category_name, created_at
`

func (q *Queries) DeleteDropDownCategories(ctx context.Context) (DropdownCategory, error) {
	row := q.db.QueryRow(ctx, deleteDropDownCategories)
	var i DropdownCategory
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const deleteDropDownItems = `-- name: DeleteDropDownItems :one
DELETE FROM dropdown_items
WHERE id = $1 RETURNING id, category_id, icon_url, item_name, created_at, created_by
`

func (q *Queries) DeleteDropDownItems(ctx context.Context, id int64) (DropdownItem, error) {
	row := q.db.QueryRow(ctx, deleteDropDownItems, id)
	var i DropdownItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.IconUrl,
		&i.ItemName,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getAllDropDownCategories = `-- name: GetAllDropDownCategories :many
SELECT id, category_name, created_at FROM dropdown_categories
`

func (q *Queries) GetAllDropDownCategories(ctx context.Context) ([]DropdownCategory, error) {
	rows, err := q.db.Query(ctx, getAllDropDownCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DropdownCategory
	for rows.Next() {
		var i DropdownCategory
		if err := rows.Scan(&i.ID, &i.CategoryName, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDropDownItems = `-- name: GetAllDropDownItems :many
SELECT id, category_id, icon_url, item_name, created_at, created_by FROM dropdown_items
`

func (q *Queries) GetAllDropDownItems(ctx context.Context) ([]DropdownItem, error) {
	rows, err := q.db.Query(ctx, getAllDropDownItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DropdownItem
	for rows.Next() {
		var i DropdownItem
		if err := rows.Scan(
			&i.ID,
			&i.CategoryID,
			&i.IconUrl,
			&i.ItemName,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDropDownCategoriesById = `-- name: GetDropDownCategoriesById :one
SELECT id, category_name, created_at FROM dropdown_categories
WHERE id = 1
`

func (q *Queries) GetDropDownCategoriesById(ctx context.Context) (DropdownCategory, error) {
	row := q.db.QueryRow(ctx, getDropDownCategoriesById)
	var i DropdownCategory
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const getDropDownItemsById = `-- name: GetDropDownItemsById :one
SELECT id, category_id, icon_url, item_name, created_at, created_by FROM dropdown_items
WHERE id = $1
`

func (q *Queries) GetDropDownItemsById(ctx context.Context, id int64) (DropdownItem, error) {
	row := q.db.QueryRow(ctx, getDropDownItemsById, id)
	var i DropdownItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.IconUrl,
		&i.ItemName,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const updateDropDownCategories = `-- name: UpdateDropDownCategories :one
UPDATE dropdown_categories
SET category_name = $2
WHERE id = $1 RETURNING id, category_name, created_at
`

type UpdateDropDownCategoriesParams struct {
	ID           int64  `json:"id"`
	CategoryName string `json:"category_name"`
}

func (q *Queries) UpdateDropDownCategories(ctx context.Context, arg UpdateDropDownCategoriesParams) (DropdownCategory, error) {
	row := q.db.QueryRow(ctx, updateDropDownCategories, arg.ID, arg.CategoryName)
	var i DropdownCategory
	err := row.Scan(&i.ID, &i.CategoryName, &i.CreatedAt)
	return i, err
}

const updateDropDownItems = `-- name: UpdateDropDownItems :one
UPDATE dropdown_items
SET  category_id = $2,
    icon_url = $3,
    item_name = $4
WHERE id = $1 RETURNING id, category_id, icon_url, item_name, created_at, created_by
`

type UpdateDropDownItemsParams struct {
	ID         int64       `json:"id"`
	CategoryID int64       `json:"category_id"`
	IconUrl    pgtype.Text `json:"icon_url"`
	ItemName   string      `json:"item_name"`
}

func (q *Queries) UpdateDropDownItems(ctx context.Context, arg UpdateDropDownItemsParams) (DropdownItem, error) {
	row := q.db.QueryRow(ctx, updateDropDownItems,
		arg.ID,
		arg.CategoryID,
		arg.IconUrl,
		arg.ItemName,
	)
	var i DropdownItem
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.IconUrl,
		&i.ItemName,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
