// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_search.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const latestFilterePropertiesCount = `-- name: LatestFilterePropertiesCount :one
WITH facilities_and_amenities AS(
    SELECT 
        p.id, 
        fa."type",
        array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS facilities_amenities
    FROM property p
    LEFT JOIN facilities_amenities_entity fae ON fae.entity_id = p.id AND fae.entity_type_id = $3::bigint
    LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id = fa.id
    GROUP BY p.id, fa."type"
),
property_media_agg AS (
    SELECT
        entity_id,
        entity_type_id,
        array_agg(DISTINCT media_type ORDER BY media_type) AS media
    FROM global_media
    WHERE entity_type_id IN ($3::bigint, $2::bigint)
    GROUP BY entity_id, entity_type_id
),
downpayment AS (
    SELECT 
        pv.id as property_id, 
        ARRAY_AGG(pi.percentage) as percentages
    FROM property_versions pv
    JOIN payment_plans_packages ppp ON ppp.entity_id = pv.id 
        AND ppp.entity_type_id = $2::bigint
    JOIN LATERAL (
        SELECT 
            pp.id AS payment_plans,
            pi.percentage
        FROM plan_installments pi
        JOIN unnest(ppp.payment_plans_id) pp(id) ON pi.payment_plans = pp.id
        ORDER BY pi."date"
        LIMIT 1
    ) pi ON true
    GROUP BY pv.id
),
DesiredCountries AS (
    SELECT 
        pv.id AS property_id,
        ARRAY_AGG(a.countries_id) AS "countries" 
    FROM property_versions pv
    JOIN swap_requirement sr ON sr.entity_id = pv.id 
        AND sr.entity_type = $2::bigint
    JOIN swap_requirment_address sra ON sra.swap_requirment_id = sr.id
    JOIN addresses a ON a.id = sra.addresses_id
    WHERE pv.category = 3
    GROUP BY pv.id
),
wishlisted_properties AS (
    SELECT DISTINCT entity_id
    FROM wishlist
    WHERE entity_type_id = $2::bigint
    AND platform_user_id = $51::bigint
)
SELECT 
    count(pv.id)
FROM property_versions pv 
JOIN property p ON pv.property_id = p.id
LEFT JOIN phases ON phases.id = p.entity_id AND p.entity_type_id = $1::bigint 
LEFT JOIN property_media_agg pma1 ON pma1.entity_id = pv.id AND pma1.entity_type_id = $2::bigint
LEFT JOIN property_media_agg pma2 ON pma2.entity_id = p.id AND pma2.entity_type_id = $3::bigint AND pma1.media IS NULL
JOIN global_property_type gpt ON gpt.id = p.property_type_id
JOIN addresses a ON p.addresses_id = a.id
LEFT JOIN countries ON countries.id = a.countries_id
LEFT JOIN states st ON a.states_id = st.id
LEFT JOIN cities ci ON a.cities_id = ci.id
LEFT JOIN communities com ON a.communities_id = com.id
LEFT JOIN sub_communities subcom ON a.sub_communities_id = subcom.id
LEFT JOIN locations ON locations.id = a.locations_id
LEFT JOIN properties_map_location ON properties_map_location.id = a.property_map_location_id
LEFT JOIN downpayment ON downpayment.property_id = pv.id
LEFT JOIN facilities_and_amenities f ON f.id = p.id AND f."type" = 1
LEFT JOIN facilities_and_amenities am ON am.id = p.id AND am."type" = 2
JOIN company_users cu ON cu.users_id = pv.agent_id
JOIN users ON users.id = cu.users_id
LEFT JOIN DesiredCountries ON DesiredCountries.property_id = pv.id AND 3 = ANY($4::bigint[])
LEFT JOIN wishlisted_properties wp ON wp.entity_id = pv.id
WHERE
    (CASE WHEN $5::bool IS NULL OR $5::bool = false THEN true ELSE pv.is_hotdeal = $5::bool END)
    AND
    (CASE WHEN $6::bool IS NULL OR $6::bool = false THEN true ELSE pv.is_verified = $6::bool END)
    AND
    (CASE WHEN ARRAY_LENGTH($7::bigint[], 1) IS NULL THEN TRUE ELSE (string_to_array(trim(both '[]' from p.facts->>'views'), ',')::BIGINT[]) &&  $7::BIGINT[] END)
    AND
	    (CASE WHEN $8::BIGINT= 0 THEN TRUE ELSE phases.id= $8::BIGINT END)
    AND
        (case WHEN (ARRAY_LENGTH($9::bigint[],1)) is null then true else DesiredCountries.countries && $9::bigint[] end)
    AND
        (CASE WHEN  ARRAY_LENGTH($10::bigint [], 1) IS NULL THEN TRUE ELSE cu.company_id= ANY($10::bigint []) END) AND users.status=2
     AND (-- facilities
        array_length($11::bigint[], 1) IS NULL
        OR f.facilities_amenities::bigint[] && $11::bigint[]
    )
    AND (--  amenities
        array_length($12::bigint[], 1) IS NULL
        OR am.facilities_amenities::bigint[] && $12::bigint[]
    )
    AND
    (CASE WHEN ARRAY_LENGTH($13::bigint [],1) IS NULL THEN TRUE ELSE
            p.property_rank = ANY ($13::bigint []) END)
    AND
        (case WHEN $14::VARCHAR= '' then true else $14= any(downpayment.percentages) END)
    AND
          pv.status  not in (1,6,5)
    AND
    	(case WHEN $15::BIGINT= 0 then true else (pv.facts->>'life_style')::BIGINT= $15::BIGINT end)
    AND
        (CASE WHEN  ARRAY_LENGTH($16::BIGINT[],1) IS NULL then true else gpt."usage"= ANY($16::BIGINT[]) end) -- commercial, residential, agricultural, industrial
    AND
        (CASE WHEN $17::bigint=0 THEN TRUE ELSE p.property_type_id= $17::bigint END) -- lux , ind,etc
    AND
        (CASE WHEN $18::varchar='' THEN TRUE ELSE pv.ref_no= $18::varchar END)
    AND 
        (CASE WHEN  ARRAY_LENGTH($19::bigint[],1) IS NULL then true else pv.agent_id= ANY($19::bigint[]) end)
    AND
        (CASE WHEN ARRAY_LENGTH($20::bigint[],1) IS NULL THEN TRUE ELSE p.company_id= ANY($20::bigint[]) END)
    AND 
        (ARRAY_LENGTH($4::BIGINT[], 1) IS NULL OR pv.category = ANY($4::BIGINT[]))  -- rent sale swap
    AND
        (CASE WHEN ARRAY_LENGTH($21::VARCHAR[], 1) IS NULL --keywords
        THEN TRUE ELSE
        pv.ref_no ILIKE ANY($21::VARCHAR[])
        OR
        pv.title ILIKE ANY($21::VARCHAR[])
        OR pv.title_arabic ILIKE ANY($21::VARCHAR[])
        OR pv.description ILIKE ANY($21::VARCHAR[])
        OR st."state" ILIKE ANY($21::VARCHAR[])
        OR ci.city ILIKE ANY($21::VARCHAR[])
        OR com.community ILIKE ANY($21::VARCHAR[])
        OR subcom.sub_community ILIKE ANY($21::VARCHAR[])
        OR gpt."type" ILIKE ANY($21::VARCHAR[])
        END) 
    AND
        (CASE WHEN  $22::bigint=0 THEN TRUE ELSE a.countries_id = $22::bigint end) 
    AND
        (CASE WHEN  $23::bigint=0 THEN TRUE ELSE a.states_id = $23::bigint end)
    AND    -- location
        (CASE WHEN $24::bigint=0 THEN TRUE ELSE a.cities_id= $24::bigint END)
    AND
        (CASE WHEN $25::bigint=0 THEN TRUE ELSE a.communities_id= $25::bigint END)
    AND
        (CASE WHEN $26::bigint=0 THEN TRUE ELSE a.sub_communities_id= $26::bigint END)
    AND
        (CASE WHEN $27::bigint=0 THEN TRUE ELSE a.property_map_location_id= $27::bigint END)
    -- facts start
    AND
        (CASE WHEN $28::bigint IS NULL THEN
            TRUE
        WHEN $28::bigint = 0 THEN
            TRUE
        ELSE
            (p.facts->>'completion_status')::bigint = $28::bigint
        END)
    AND
        (case  WHEN $29::bool= false then true else (p.facts->>'roi')::bool = $29::bool end)
    AND
        (CASE WHEN $30::bool IS NULL OR $30::bool = false THEN true ELSE pv.exclusive = $30::bool END)
    AND
        (case  WHEN $31::bool= false then true else (pv.facts->>'investment')::bool = $31::bool end)
    AND
    (CASE WHEN $32::float IS NULL THEN
            TRUE
        WHEN $32::float = 0.0 THEN
            TRUE
        ELSE
            (p.facts->>'completion_percentage')::float >= $32::float
        END
        AND
        CASE WHEN $33::float IS NULL THEN
            TRUE
        WHEN $33::float = 0.0 THEN
            TRUE
        ELSE
            (p.facts->>'completion_percentage')::float <= $33::float
        END)
     AND
        (CASE WHEN ARRAY_LENGTH($34::bigint[], 1) IS NULL THEN TRUE ELSE  (pv.facts->>'rent_type')::bigint = ANY($34::bigint[]) END)
    AND
        (CASE WHEN $35::timestamp IS NULL THEN TRUE ELSE (p.facts->>'handover_date')::timestamp = $35::timestamp END)
    AND
        (CASE WHEN $36::timestamp IS NULL THEN TRUE ELSE (p.facts->>'completion_date')::timestamptz = $36::timestamp END)
    AND
        (CASE WHEN ARRAY_LENGTH($37::bigint[], 1) IS NULL THEN TRUE ELSE  (p.facts->>'service_charge')::bigint = ANY($37::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($38::VARCHAR[], 1) IS NULL THEN TRUE ELSE (p.facts->>'bedroom')::varchar = ANY($38::VARCHAR[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($39::bigint[], 1) IS NULL THEN TRUE ELSE (p.facts->>'bathroom')::bigint = ANY($39::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($40::bigint[], 1) IS NULL THEN TRUE ELSE (p.facts->>'no_of_floor')::bigint = ANY($40::bigint[]) END)   
    AND
        (CASE WHEN ARRAY_LENGTH($41::bigint[], 1) IS NULL THEN TRUE ELSE (p.facts->>'furnished')::bigint = ANY($41::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($42::bigint[], 1) IS NULL THEN TRUE ELSE (p.facts->>'ownership')::bigint = ANY($42::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($43::bigint[], 1) IS NULL THEN TRUE ELSE (p.facts->>'parking')::bigint = ANY($43::bigint[]) END)
    AND -- build up area
        (CASE WHEN $44::float IS NULL THEN
            TRUE
        WHEN $44::float = 0.0 THEN
            TRUE
        ELSE
            (p.facts->>'built_up_area')::float >= $44::float
        END
        AND
        CASE WHEN $45::float IS NULL THEN
            TRUE
        WHEN $45::float = 0.0 THEN
            TRUE
        ELSE
            (p.facts->>'built_up_area')::float <= $45::float
        END)    
    AND -- plot area
    (CASE WHEN $46::float IS NULL THEN
                TRUE
            WHEN $46::float = 0.0 THEN
                TRUE
            ELSE
                (p.facts->>'plot_area')::float >= $46::float
            END
            -- max plot area
            AND CASE WHEN $47::float IS NULL THEN
                TRUE
            WHEN $47::float = 0.0 THEN
                TRUE
            ELSE
                (p.facts->>'plot_area')::float <= $47::float
            END)
    AND 
        (CASE WHEN $48::float IS NULL THEN
                TRUE
            WHEN $48::float = 0.0 THEN
                TRUE
            ELSE
                (p.facts->>'price')::float >= $48::float
            END
            -- max plot area
            AND CASE WHEN $49::float IS NULL THEN
                TRUE
            WHEN  $49::float = 0.0 THEN
                TRUE
            ELSE
                (p.facts->>'price')::float <=  $49::float
            END)
    AND 
    (pma1.media IS NOT NULL OR pma2.media IS NOT NULL)
    AND
       CASE 
        -- If media parameter is empty, return TRUE (so it matches all rows)
        WHEN ARRAY_LENGTH($50::BIGINT[], 1) IS NULL THEN TRUE
        ELSE EXISTS (
            SELECT pt
            FROM unnest(COALESCE(pma1.media, pma2.media)) AS pt
            WHERE EXISTS (
                SELECT 1
                FROM unnest($50::BIGINT[]) AS search_terms
                WHERE pt = search_terms
            )
        )
        END
`

type LatestFilterePropertiesCountParams struct {
	PhasesEntityType           int64            `json:"phases_entity_type"`
	PropertyversionsEntityType int64            `json:"propertyversions_entity_type"`
	PropertyEntityType         int64            `json:"property_entity_type"`
	Category                   []int64          `json:"category"`
	Hotdeal                    pgtype.Bool      `json:"hotdeal"`
	IsVerified                 pgtype.Bool      `json:"is_verified"`
	Views                      []int64          `json:"views"`
	PhaseID                    int64            `json:"phase_id"`
	DesiredCountries           []int64          `json:"desired_countries"`
	BrokerCompanyID            []int64          `json:"broker_company_id"`
	Facilities                 []int64          `json:"facilities"`
	Amenities                  []int64          `json:"amenities"`
	PropertyRank               []int64          `json:"property_rank"`
	Downpayment                string           `json:"downpayment"`
	LifeStyle                  int64            `json:"life_style"`
	PropertyUsage              []int64          `json:"property_usage"`
	PropertyTypes              int64            `json:"property_types"`
	RefNo                      string           `json:"ref_no"`
	AgentID                    []int64          `json:"agent_id"`
	DeveloperCompanyID         []int64          `json:"developer_company_id"`
	Search                     []string         `json:"search"`
	CountryID                  int64            `json:"country_id"`
	StatesID                   int64            `json:"states_id"`
	CityID                     int64            `json:"city_id"`
	CommunitiesID              int64            `json:"communities_id"`
	SubCommunitiesID           int64            `json:"sub_communities_id"`
	PropertyMapLocationID      int64            `json:"property_map_location_id"`
	CompletionStatus           int64            `json:"completion_status"`
	IsLeased                   pgtype.Bool      `json:"is_leased"`
	IsExclusive                pgtype.Bool      `json:"is_exclusive"`
	IsInvestment               pgtype.Bool      `json:"is_investment"`
	MinCompletionPercentage    float64          `json:"min_completion_percentage"`
	MaxCompletionPercentage    float64          `json:"max_completion_percentage"`
	RentType                   []int64          `json:"rent_type"`
	HandoverDate               pgtype.Timestamp `json:"handover_date"`
	CompletionDate             pgtype.Timestamp `json:"completion_date"`
	ServiceCharge              []int64          `json:"service_charge"`
	Bedroom                    []string         `json:"bedroom"`
	Bathroom                   []int64          `json:"bathroom"`
	NoOfFloor                  []int64          `json:"no_of_floor"`
	Furnished                  []int64          `json:"furnished"`
	Ownership                  []int64          `json:"ownership"`
	Parking                    []int64          `json:"parking"`
	MinBuiltUpArea             float64          `json:"min_built_up_area"`
	MaxBuiltUpArea             float64          `json:"max_built_up_area"`
	MinPlotArea                float64          `json:"min_plot_area"`
	MaxPlotArea                float64          `json:"max_plot_area"`
	MinPrice                   float64          `json:"min_price"`
	MaxPrice                   float64          `json:"max_price"`
	Media                      []int64          `json:"media"`
	PlatformUser               int64            `json:"platform_user"`
}

// Streamlined property media with direct coalescing
// Optimized downpayment calculation
// Optimized desired countries
// Pre-filtered wishlist check
func (q *Queries) LatestFilterePropertiesCount(ctx context.Context, arg LatestFilterePropertiesCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, latestFilterePropertiesCount,
		arg.PhasesEntityType,
		arg.PropertyversionsEntityType,
		arg.PropertyEntityType,
		arg.Category,
		arg.Hotdeal,
		arg.IsVerified,
		arg.Views,
		arg.PhaseID,
		arg.DesiredCountries,
		arg.BrokerCompanyID,
		arg.Facilities,
		arg.Amenities,
		arg.PropertyRank,
		arg.Downpayment,
		arg.LifeStyle,
		arg.PropertyUsage,
		arg.PropertyTypes,
		arg.RefNo,
		arg.AgentID,
		arg.DeveloperCompanyID,
		arg.Search,
		arg.CountryID,
		arg.StatesID,
		arg.CityID,
		arg.CommunitiesID,
		arg.SubCommunitiesID,
		arg.PropertyMapLocationID,
		arg.CompletionStatus,
		arg.IsLeased,
		arg.IsExclusive,
		arg.IsInvestment,
		arg.MinCompletionPercentage,
		arg.MaxCompletionPercentage,
		arg.RentType,
		arg.HandoverDate,
		arg.CompletionDate,
		arg.ServiceCharge,
		arg.Bedroom,
		arg.Bathroom,
		arg.NoOfFloor,
		arg.Furnished,
		arg.Ownership,
		arg.Parking,
		arg.MinBuiltUpArea,
		arg.MaxBuiltUpArea,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Media,
		arg.PlatformUser,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}
