// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: social_media_profile.sql

package sqlc

import (
	"context"
)

const createSocialMediaProfile = `-- name: CreateSocialMediaProfile :one
INSERT INTO social_media_profile(
    social_media_name,
    social_media_url,
    entity_type_id,
    entity_id
)VALUES(
    $1, $2, $3, $4
)RETURNING id, social_media_name, social_media_url, entity_type_id, entity_id
`

type CreateSocialMediaProfileParams struct {
	SocialMediaName string `json:"social_media_name"`
	SocialMediaUrl  string `json:"social_media_url"`
	EntityTypeID    int64  `json:"entity_type_id"`
	EntityID        int64  `json:"entity_id"`
}

func (q *Queries) CreateSocialMediaProfile(ctx context.Context, arg CreateSocialMediaProfileParams) (SocialMediaProfile, error) {
	row := q.db.QueryRow(ctx, createSocialMediaProfile,
		arg.SocialMediaName,
		arg.SocialMediaUrl,
		arg.EntityTypeID,
		arg.EntityID,
	)
	var i SocialMediaProfile
	err := row.Scan(
		&i.ID,
		&i.SocialMediaName,
		&i.SocialMediaUrl,
		&i.EntityTypeID,
		&i.EntityID,
	)
	return i, err
}

const createSocialMediaProfileBulk = `-- name: CreateSocialMediaProfileBulk :exec
INSERT INTO social_media_profile(
    social_media_name,
    social_media_url,
    entity_type_id,
    entity_id
)VALUES(
   unnest($1::text[]),
   unnest($2::text[]),
   $3,
   $4
)
`

type CreateSocialMediaProfileBulkParams struct {
	SocialMediaName []string `json:"social_media_name"`
	SocialMediaUrl  []string `json:"social_media_url"`
	EntityTypeID    int64    `json:"entity_type_id"`
	EntityID        int64    `json:"entity_id"`
}

func (q *Queries) CreateSocialMediaProfileBulk(ctx context.Context, arg CreateSocialMediaProfileBulkParams) error {
	_, err := q.db.Exec(ctx, createSocialMediaProfileBulk,
		arg.SocialMediaName,
		arg.SocialMediaUrl,
		arg.EntityTypeID,
		arg.EntityID,
	)
	return err
}

const deleteSocialMediaProfilesByEntityAndEntityTypeId = `-- name: DeleteSocialMediaProfilesByEntityAndEntityTypeId :exec
DELETE FROM social_media_profile
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteSocialMediaProfilesByEntityAndEntityTypeId(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, deleteSocialMediaProfilesByEntityAndEntityTypeId, ids)
	return err
}

const getSocialMediaProfilesByEntityAndEntityTypeId = `-- name: GetSocialMediaProfilesByEntityAndEntityTypeId :many
SELECT id, social_media_name, social_media_url, entity_type_id, entity_id FROM social_media_profile
WHERE entity_type_id = $2 AND entity_id = $1
`

type GetSocialMediaProfilesByEntityAndEntityTypeIdParams struct {
	EntityID     int64 `json:"entity_id"`
	EntityTypeID int64 `json:"entity_type_id"`
}

func (q *Queries) GetSocialMediaProfilesByEntityAndEntityTypeId(ctx context.Context, arg GetSocialMediaProfilesByEntityAndEntityTypeIdParams) ([]SocialMediaProfile, error) {
	rows, err := q.db.Query(ctx, getSocialMediaProfilesByEntityAndEntityTypeId, arg.EntityID, arg.EntityTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SocialMediaProfile
	for rows.Next() {
		var i SocialMediaProfile
		if err := rows.Scan(
			&i.ID,
			&i.SocialMediaName,
			&i.SocialMediaUrl,
			&i.EntityTypeID,
			&i.EntityID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSocialMediaProfile = `-- name: UpdateSocialMediaProfile :one
Update social_media_profile
SET  social_media_url = $4
WHERE entity_type_id = $3 AND entity_id = $1 AND LOWER(social_media_profile.social_media_name) = LOWER($2)
RETURNING id, social_media_name, social_media_url, entity_type_id, entity_id
`

type UpdateSocialMediaProfileParams struct {
	EntityID       int64  `json:"entity_id"`
	Lower          string `json:"lower"`
	EntityTypeID   int64  `json:"entity_type_id"`
	SocialMediaUrl string `json:"social_media_url"`
}

func (q *Queries) UpdateSocialMediaProfile(ctx context.Context, arg UpdateSocialMediaProfileParams) (SocialMediaProfile, error) {
	row := q.db.QueryRow(ctx, updateSocialMediaProfile,
		arg.EntityID,
		arg.Lower,
		arg.EntityTypeID,
		arg.SocialMediaUrl,
	)
	var i SocialMediaProfile
	err := row.Scan(
		&i.ID,
		&i.SocialMediaName,
		&i.SocialMediaUrl,
		&i.EntityTypeID,
		&i.EntityID,
	)
	return i, err
}
