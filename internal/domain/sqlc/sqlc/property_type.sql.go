// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_type.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPropertyType = `-- name: AddPropertyType :exec
INSERT INTO global_property_type (
 type,
 code,
 property_type_facts,
 listing_facts,
 usage,
 created_at,
 updated_at,
 status,
 icon, 
 is_project,
 type_ar
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8,$9,$10, $11
)
`

type AddPropertyTypeParams struct {
	Type              string      `json:"type"`
	Code              string      `json:"code"`
	PropertyTypeFacts []byte      `json:"property_type_facts"`
	ListingFacts      []int64     `json:"listing_facts"`
	Usage             int64       `json:"usage"`
	CreatedAt         time.Time   `json:"created_at"`
	UpdatedAt         time.Time   `json:"updated_at"`
	Status            int64       `json:"status"`
	Icon              pgtype.Text `json:"icon"`
	IsProject         pgtype.Bool `json:"is_project"`
	TypeAr            pgtype.Text `json:"type_ar"`
}

func (q *Queries) AddPropertyType(ctx context.Context, arg AddPropertyTypeParams) error {
	_, err := q.db.Exec(ctx, addPropertyType,
		arg.Type,
		arg.Code,
		arg.PropertyTypeFacts,
		arg.ListingFacts,
		arg.Usage,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.Icon,
		arg.IsProject,
		arg.TypeAr,
	)
	return err
}

const changeStatusForPropertyType = `-- name: ChangeStatusForPropertyType :exec
UPDATE global_property_type
SET
    status= $2, 
    updated_at=$3
WHERE id=$1
`

type ChangeStatusForPropertyTypeParams struct {
	ID        int64     `json:"id"`
	Status    int64     `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ChangeStatusForPropertyType(ctx context.Context, arg ChangeStatusForPropertyTypeParams) error {
	_, err := q.db.Exec(ctx, changeStatusForPropertyType, arg.ID, arg.Status, arg.UpdatedAt)
	return err
}

const getAllActivePropertyTypes = `-- name: GetAllActivePropertyTypes :many
SELECT id, type, code, property_type_facts, listing_facts, usage, created_at, updated_at, status, icon, is_project, type_ar FROM global_property_type WHERE status = 2
`

func (q *Queries) GetAllActivePropertyTypes(ctx context.Context) ([]GlobalPropertyType, error) {
	rows, err := q.db.Query(ctx, getAllActivePropertyTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalPropertyType
	for rows.Next() {
		var i GlobalPropertyType
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Code,
			&i.PropertyTypeFacts,
			&i.ListingFacts,
			&i.Usage,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Icon,
			&i.IsProject,
			&i.TypeAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertiesTypeSettingsCount = `-- name: GetPropertiesTypeSettingsCount :one
SELECT
   COUNT(id)
FROM
    global_property_type
WHERE status= $1::BIGINT
`

func (q *Queries) GetPropertiesTypeSettingsCount(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getPropertiesTypeSettingsCount, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPropertiesTypeSittings = `-- name: GetPropertiesTypeSittings :many
SELECT
    id,
    type,
    code,
    usage,
    icon,
    status, 
    updated_at, 
    is_project,
    type_ar
FROM
    global_property_type
WHERE status= $1::BIGINT
ORDER BY updated_at DESC
LIMIT $3
OFFSET $2
`

type GetPropertiesTypeSittingsParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetPropertiesTypeSittingsRow struct {
	ID        int64       `json:"id"`
	Type      string      `json:"type"`
	Code      string      `json:"code"`
	Usage     int64       `json:"usage"`
	Icon      pgtype.Text `json:"icon"`
	Status    int64       `json:"status"`
	UpdatedAt time.Time   `json:"updated_at"`
	IsProject pgtype.Bool `json:"is_project"`
	TypeAr    pgtype.Text `json:"type_ar"`
}

func (q *Queries) GetPropertiesTypeSittings(ctx context.Context, arg GetPropertiesTypeSittingsParams) ([]GetPropertiesTypeSittingsRow, error) {
	rows, err := q.db.Query(ctx, getPropertiesTypeSittings, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPropertiesTypeSittingsRow
	for rows.Next() {
		var i GetPropertiesTypeSittingsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Code,
			&i.Usage,
			&i.Icon,
			&i.Status,
			&i.UpdatedAt,
			&i.IsProject,
			&i.TypeAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyTypeSettings = `-- name: GetPropertyTypeSettings :one
SELECT id, type, code, property_type_facts, listing_facts, usage, created_at, updated_at, status, icon, is_project, type_ar FROM global_property_type WHERE id=$1 AND status!=6
`

func (q *Queries) GetPropertyTypeSettings(ctx context.Context, id int64) (GlobalPropertyType, error) {
	row := q.db.QueryRow(ctx, getPropertyTypeSettings, id)
	var i GlobalPropertyType
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Code,
		&i.PropertyTypeFacts,
		&i.ListingFacts,
		&i.Usage,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Icon,
		&i.IsProject,
		&i.TypeAr,
	)
	return i, err
}

const propertyTypeExistsInTables = `-- name: PropertyTypeExistsInTables :one
SELECT 
    CAST(
        (
            (SELECT COUNT(*) FROM property WHERE property.property_type_id = $1::BIGINT) + 
            (SELECT COUNT(*) FROM property_type_unit_type WHERE property_type_unit_type.property_type_id = $1::BIGINT) 
        ) AS BIGINT
    ) AS total_count
`

func (q *Queries) PropertyTypeExistsInTables(ctx context.Context, propertyTypeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, propertyTypeExistsInTables, propertyTypeID)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const updatePropertyTypeSettings = `-- name: UpdatePropertyTypeSettings :exec
UPDATE global_property_type
SET 
    type = $1, 
    code =  $2,
    property_type_facts = $3,
    usage = $4,
    updated_at = $5,
    icon = $6, 
    is_project=$7,
    type_ar = $8,
    listing_facts = $9
WHERE 
    id = $10::BIGINT AND status!=6
`

type UpdatePropertyTypeSettingsParams struct {
	Type              string      `json:"type"`
	Code              string      `json:"code"`
	PropertyTypeFacts []byte      `json:"property_type_facts"`
	Usage             int64       `json:"usage"`
	UpdatedAt         time.Time   `json:"updated_at"`
	Icon              pgtype.Text `json:"icon"`
	IsProject         pgtype.Bool `json:"is_project"`
	TypeAr            pgtype.Text `json:"type_ar"`
	ListingFacts      []int64     `json:"listing_facts"`
	PropertyTypeID    int64       `json:"property_type_id"`
}

func (q *Queries) UpdatePropertyTypeSettings(ctx context.Context, arg UpdatePropertyTypeSettingsParams) error {
	_, err := q.db.Exec(ctx, updatePropertyTypeSettings,
		arg.Type,
		arg.Code,
		arg.PropertyTypeFacts,
		arg.Usage,
		arg.UpdatedAt,
		arg.Icon,
		arg.IsProject,
		arg.TypeAr,
		arg.ListingFacts,
		arg.PropertyTypeID,
	)
	return err
}
