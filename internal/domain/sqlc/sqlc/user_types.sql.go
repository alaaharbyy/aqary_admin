// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_types.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserType = `-- name: CreateUserType :one
INSERT INTO user_types (
    user_type,
    user_type_ar
)VALUES (
    $1,$2
) RETURNING id, user_type, created_at, updated_at, user_type_ar
`

type CreateUserTypeParams struct {
	UserType   string      `json:"user_type"`
	UserTypeAr pgtype.Text `json:"user_type_ar"`
}

func (q *Queries) CreateUserType(ctx context.Context, arg CreateUserTypeParams) (UserType, error) {
	row := q.db.QueryRow(ctx, createUserType, arg.UserType, arg.UserTypeAr)
	var i UserType
	err := row.Scan(
		&i.ID,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserTypeAr,
	)
	return i, err
}

const deleteUserType = `-- name: DeleteUserType :exec
DELETE FROM user_types
Where id = $1
`

func (q *Queries) DeleteUserType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserType, id)
	return err
}

const getAddCompanyPermission = `-- name: GetAddCompanyPermission :one
SELECT id, title, sub_title, indicator, section_permission_id, created_at, updated_at FROM permissions
WHERE title % 'add company'
`

func (q *Queries) GetAddCompanyPermission(ctx context.Context) (Permission, error) {
	row := q.db.QueryRow(ctx, getAddCompanyPermission)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.SectionPermissionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUserType = `-- name: GetAllUserType :many
SELECT id, user_type, created_at, updated_at, user_type_ar FROM user_types
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllUserTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUserType(ctx context.Context, arg GetAllUserTypeParams) ([]UserType, error) {
	rows, err := q.db.Query(ctx, getAllUserType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserType
	for rows.Next() {
		var i UserType
		if err := rows.Scan(
			&i.ID,
			&i.UserType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserTypeAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserTypeWithoutPagination = `-- name: GetAllUserTypeWithoutPagination :many
SELECT id, user_type, created_at, updated_at, user_type_ar FROM user_types
ORDER BY id
`

func (q *Queries) GetAllUserTypeWithoutPagination(ctx context.Context) ([]UserType, error) {
	rows, err := q.db.Query(ctx, getAllUserTypeWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserType
	for rows.Next() {
		var i UserType
		if err := rows.Scan(
			&i.ID,
			&i.UserType,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserTypeAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanySectionPermission = `-- name: GetCompanySectionPermission :one
SELECT id, title, sub_title, indicator, created_at, updated_at FROM section_permission
Where title % 'companies' LIMIT 1
`

func (q *Queries) GetCompanySectionPermission(ctx context.Context) (SectionPermission, error) {
	row := q.db.QueryRow(ctx, getCompanySectionPermission)
	var i SectionPermission
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.SubTitle,
		&i.Indicator,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserType = `-- name: GetUserType :one
SELECT id, user_type, created_at, updated_at, user_type_ar FROM user_types 
WHERE id = $1
`

func (q *Queries) GetUserType(ctx context.Context, id int64) (UserType, error) {
	row := q.db.QueryRow(ctx, getUserType, id)
	var i UserType
	err := row.Scan(
		&i.ID,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserTypeAr,
	)
	return i, err
}

const updateUserType = `-- name: UpdateUserType :one
UPDATE user_types
SET 
    user_type = $2,
    user_type_ar = $3
Where id = $1
RETURNING id, user_type, created_at, updated_at, user_type_ar
`

type UpdateUserTypeParams struct {
	ID         int64       `json:"id"`
	UserType   string      `json:"user_type"`
	UserTypeAr pgtype.Text `json:"user_type_ar"`
}

func (q *Queries) UpdateUserType(ctx context.Context, arg UpdateUserTypeParams) (UserType, error) {
	row := q.db.QueryRow(ctx, updateUserType, arg.ID, arg.UserType, arg.UserTypeAr)
	var i UserType
	err := row.Scan(
		&i.ID,
		&i.UserType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserTypeAr,
	)
	return i, err
}
