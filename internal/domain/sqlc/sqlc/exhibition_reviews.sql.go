// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExhibitionReview = `-- name: CreateExhibitionReview :one
INSERT INTO exhibition_reviews (
	exhibition_id,
	reviewer,
	clean,
	location,
	facilities,
	securities,
	title,
	review,
	review_date
	)
VALUES (
	$1, 
	$2, 
	$3, 
	$4,
	$5, 
	$6, 
	$7, 
	$8,
	$9
	)RETURNING id, exhibition_id, reviewer, clean, location, facilities, securities, title, review, review_date
`

type CreateExhibitionReviewParams struct {
	ExhibitionID int64     `json:"exhibition_id"`
	Reviewer     int64     `json:"reviewer"`
	Clean        int32     `json:"clean"`
	Location     int32     `json:"location"`
	Facilities   int32     `json:"facilities"`
	Securities   int32     `json:"securities"`
	Title        string    `json:"title"`
	Review       string    `json:"review"`
	ReviewDate   time.Time `json:"review_date"`
}

func (q *Queries) CreateExhibitionReview(ctx context.Context, arg CreateExhibitionReviewParams) (ExhibitionReview, error) {
	row := q.db.QueryRow(ctx, createExhibitionReview,
		arg.ExhibitionID,
		arg.Reviewer,
		arg.Clean,
		arg.Location,
		arg.Facilities,
		arg.Securities,
		arg.Title,
		arg.Review,
		arg.ReviewDate,
	)
	var i ExhibitionReview
	err := row.Scan(
		&i.ID,
		&i.ExhibitionID,
		&i.Reviewer,
		&i.Clean,
		&i.Location,
		&i.Facilities,
		&i.Securities,
		&i.Title,
		&i.Review,
		&i.ReviewDate,
	)
	return i, err
}

const getAllExhibitionReviews = `-- name: GetAllExhibitionReviews :many
SELECT er.id,er.title,er.review,er.review_date,p.first_name,p.last_name,p.profile_image_url, (er.clean+er.facilities+er.location+er.securities)/4 AS "rating"
FROM exhibition_reviews er
INNER JOIN users u
		ON 	er.reviewer = u.id 
INNER JOIN profiles p 
	ON u.profiles_id=p.id 
ORDER BY er.id DESC 
LIMIT $1 
OFFSET $2
`

type GetAllExhibitionReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllExhibitionReviewsRow struct {
	ID              int64       `json:"id"`
	Title           string      `json:"title"`
	Review          string      `json:"review"`
	ReviewDate      time.Time   `json:"review_date"`
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	ProfileImageUrl pgtype.Text `json:"profile_image_url"`
	Rating          pgtype.Int8 `json:"rating"`
}

func (q *Queries) GetAllExhibitionReviews(ctx context.Context, arg GetAllExhibitionReviewsParams) ([]GetAllExhibitionReviewsRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionReviewsRow
	for rows.Next() {
		var i GetAllExhibitionReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Review,
			&i.ReviewDate,
			&i.FirstName,
			&i.LastName,
			&i.ProfileImageUrl,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllExhibitionsReviews = `-- name: GetAllExhibitionsReviews :many
SELECT id, exhibition_id, reviewer, clean, location, facilities, securities, title, review, review_date FROM exhibition_reviews
`

func (q *Queries) GetAllExhibitionsReviews(ctx context.Context) ([]ExhibitionReview, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionsReviews)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExhibitionReview
	for rows.Next() {
		var i ExhibitionReview
		if err := rows.Scan(
			&i.ID,
			&i.ExhibitionID,
			&i.Reviewer,
			&i.Clean,
			&i.Location,
			&i.Facilities,
			&i.Securities,
			&i.Title,
			&i.Review,
			&i.ReviewDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllReviewsForExhibition = `-- name: GetAllReviewsForExhibition :many
SELECT er.id,er.title,er.review,er.review_date,p.first_name,p.last_name,p.profile_image_url, (er.clean+er.facilities+er.location+er.securities)/4 AS "rating"
FROM exhibition_reviews er
INNER JOIN users u
		ON 	er.reviewer = u.id 
INNER JOIN profiles p 
	ON u.profiles_id=p.id 
WHERE er.exhibition_id=$1
ORDER BY er.id DESC 
LIMIT $2 
OFFSET $3
`

type GetAllReviewsForExhibitionParams struct {
	ExhibitionID int64 `json:"exhibition_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

type GetAllReviewsForExhibitionRow struct {
	ID              int64       `json:"id"`
	Title           string      `json:"title"`
	Review          string      `json:"review"`
	ReviewDate      time.Time   `json:"review_date"`
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	ProfileImageUrl pgtype.Text `json:"profile_image_url"`
	Rating          pgtype.Int8 `json:"rating"`
}

func (q *Queries) GetAllReviewsForExhibition(ctx context.Context, arg GetAllReviewsForExhibitionParams) ([]GetAllReviewsForExhibitionRow, error) {
	rows, err := q.db.Query(ctx, getAllReviewsForExhibition, arg.ExhibitionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReviewsForExhibitionRow
	for rows.Next() {
		var i GetAllReviewsForExhibitionRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Review,
			&i.ReviewDate,
			&i.FirstName,
			&i.LastName,
			&i.ProfileImageUrl,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionByIdWithNumberOfReviews = `-- name: GetExhibitionByIdWithNumberOfReviews :one
SELECT exhibitions.id, exhibitions.ref_no, exhibitions.is_verified, exhibitions.self_hosted, exhibitions.hosted_by_id, exhibitions.is_host_branch, exhibitions.exhibition_type, exhibitions.exhibition_category, exhibitions.title, exhibitions.start_date, exhibitions.end_date, exhibitions.countries_id, exhibitions.states_id, exhibitions.cities_id, exhibitions.community_id, exhibitions.specific_address, exhibitions.mobile, exhibitions.email, exhibitions.whatsapp, exhibitions.registration_link, exhibitions.registration_fees, exhibitions.event_banner_url, exhibitions.event_logo_url, exhibitions.promotion_video, exhibitions.description, exhibitions.description_ar, exhibitions.event_status, exhibitions.created_by, exhibitions.created_at, exhibitions.updated_at, exhibitions.hosted_company_type, exhibitions.facilities, exhibitions.no_of_booths, exhibitions.sub_communities_id, exhibitions.no_of_floors, exhibitions.location_url, exhibitions.addresses_id, (SELECT COUNT(exhibition_reviews.id) FROM exhibition_reviews WHERE exhibition_id=exhibitions.id) AS number_of_reviews
	FROM exhibitions 
WHERE 
	exhibitions.id=$1 AND event_status!=5
`

type GetExhibitionByIdWithNumberOfReviewsRow struct {
	ID                 int64         `json:"id"`
	RefNo              string        `json:"ref_no"`
	IsVerified         pgtype.Bool   `json:"is_verified"`
	SelfHosted         pgtype.Bool   `json:"self_hosted"`
	HostedByID         pgtype.Int8   `json:"hosted_by_id"`
	IsHostBranch       pgtype.Bool   `json:"is_host_branch"`
	ExhibitionType     int64         `json:"exhibition_type"`
	ExhibitionCategory int64         `json:"exhibition_category"`
	Title              string        `json:"title"`
	StartDate          time.Time     `json:"start_date"`
	EndDate            time.Time     `json:"end_date"`
	CountriesID        int64         `json:"countries_id"`
	StatesID           int64         `json:"states_id"`
	CitiesID           int64         `json:"cities_id"`
	CommunityID        int64         `json:"community_id"`
	SpecificAddress    string        `json:"specific_address"`
	Mobile             string        `json:"mobile"`
	Email              string        `json:"email"`
	Whatsapp           string        `json:"whatsapp"`
	RegistrationLink   string        `json:"registration_link"`
	RegistrationFees   pgtype.Float8 `json:"registration_fees"`
	EventBannerUrl     string        `json:"event_banner_url"`
	EventLogoUrl       string        `json:"event_logo_url"`
	PromotionVideo     pgtype.Text   `json:"promotion_video"`
	Description        string        `json:"description"`
	DescriptionAr      pgtype.Text   `json:"description_ar"`
	EventStatus        int64         `json:"event_status"`
	CreatedBy          int64         `json:"created_by"`
	CreatedAt          time.Time     `json:"created_at"`
	UpdatedAt          time.Time     `json:"updated_at"`
	HostedCompanyType  int64         `json:"hosted_company_type"`
	Facilities         []int64       `json:"facilities"`
	NoOfBooths         pgtype.Int8   `json:"no_of_booths"`
	SubCommunitiesID   int64         `json:"sub_communities_id"`
	NoOfFloors         pgtype.Int8   `json:"no_of_floors"`
	LocationUrl        string        `json:"location_url"`
	AddressesID        int64         `json:"addresses_id"`
	NumberOfReviews    int64         `json:"number_of_reviews"`
}

func (q *Queries) GetExhibitionByIdWithNumberOfReviews(ctx context.Context, id int64) (GetExhibitionByIdWithNumberOfReviewsRow, error) {
	row := q.db.QueryRow(ctx, getExhibitionByIdWithNumberOfReviews, id)
	var i GetExhibitionByIdWithNumberOfReviewsRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.IsVerified,
		&i.SelfHosted,
		&i.HostedByID,
		&i.IsHostBranch,
		&i.ExhibitionType,
		&i.ExhibitionCategory,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SpecificAddress,
		&i.Mobile,
		&i.Email,
		&i.Whatsapp,
		&i.RegistrationLink,
		&i.RegistrationFees,
		&i.EventBannerUrl,
		&i.EventLogoUrl,
		&i.PromotionVideo,
		&i.Description,
		&i.DescriptionAr,
		&i.EventStatus,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HostedCompanyType,
		&i.Facilities,
		&i.NoOfBooths,
		&i.SubCommunitiesID,
		&i.NoOfFloors,
		&i.LocationUrl,
		&i.AddressesID,
		&i.NumberOfReviews,
	)
	return i, err
}

const getExhibitionReviewByID = `-- name: GetExhibitionReviewByID :one
SELECT id, exhibition_id, reviewer, clean, location, facilities, securities, title, review, review_date 
FROM exhibition_reviews
WHERE id=$1
`

func (q *Queries) GetExhibitionReviewByID(ctx context.Context, id int64) (ExhibitionReview, error) {
	row := q.db.QueryRow(ctx, getExhibitionReviewByID, id)
	var i ExhibitionReview
	err := row.Scan(
		&i.ID,
		&i.ExhibitionID,
		&i.Reviewer,
		&i.Clean,
		&i.Location,
		&i.Facilities,
		&i.Securities,
		&i.Title,
		&i.Review,
		&i.ReviewDate,
	)
	return i, err
}

const getNumberOfAllExhibitionReviews = `-- name: GetNumberOfAllExhibitionReviews :one
SELECT COUNT(id) FROM exhibition_reviews WHERE exhibition_id = $1
`

func (q *Queries) GetNumberOfAllExhibitionReviews(ctx context.Context, exhibitionID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAllExhibitionReviews, exhibitionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateExhibitionReviewByID = `-- name: UpdateExhibitionReviewByID :one

UPDATE exhibition_reviews 

SET 

	clean=coalesce($4, clean),

	location=coalesce($5, location),

	facilities=coalesce($6, facilities),

	securities=coalesce($7, securities),

	title=coalesce($8, title),

	review=coalesce($9, review),

	review_date=$3

FROM (

	SELECT  exhibitions.id,exhibitions.event_status FROM exhibitions where exhibitions.id=$1

)x

WHERE exhibition_reviews.id=$2 AND x.event_status!=5

RETURNING x.id, event_status, exhibition_reviews.id, exhibition_id, reviewer, clean, location, facilities, securities, title, review, review_date
`

type UpdateExhibitionReviewByIDParams struct {
	ID         int64       `json:"id"`
	ID_2       int64       `json:"id_2"`
	ReviewDate time.Time   `json:"review_date"`
	Clean      pgtype.Int4 `json:"clean"`
	Location   pgtype.Int4 `json:"location"`
	Facilities pgtype.Int4 `json:"facilities"`
	Securities pgtype.Int4 `json:"securities"`
	Title      pgtype.Text `json:"title"`
	Review     pgtype.Text `json:"review"`
}

type UpdateExhibitionReviewByIDRow struct {
	ID           int64     `json:"id"`
	EventStatus  int64     `json:"event_status"`
	ID_2         int64     `json:"id_2"`
	ExhibitionID int64     `json:"exhibition_id"`
	Reviewer     int64     `json:"reviewer"`
	Clean        int32     `json:"clean"`
	Location     int32     `json:"location"`
	Facilities   int32     `json:"facilities"`
	Securities   int32     `json:"securities"`
	Title        string    `json:"title"`
	Review       string    `json:"review"`
	ReviewDate   time.Time `json:"review_date"`
}

func (q *Queries) UpdateExhibitionReviewByID(ctx context.Context, arg UpdateExhibitionReviewByIDParams) (UpdateExhibitionReviewByIDRow, error) {
	row := q.db.QueryRow(ctx, updateExhibitionReviewByID,
		arg.ID,
		arg.ID_2,
		arg.ReviewDate,
		arg.Clean,
		arg.Location,
		arg.Facilities,
		arg.Securities,
		arg.Title,
		arg.Review,
	)
	var i UpdateExhibitionReviewByIDRow
	err := row.Scan(
		&i.ID,
		&i.EventStatus,
		&i.ID_2,
		&i.ExhibitionID,
		&i.Reviewer,
		&i.Clean,
		&i.Location,
		&i.Facilities,
		&i.Securities,
		&i.Title,
		&i.Review,
		&i.ReviewDate,
	)
	return i, err
}
