// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: lead_property_filter.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const filterAgriculturalPropertiesForLead = `-- name: FilterAgriculturalPropertiesForLead :many
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM agricultural_freelancer_properties fp
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM agricultural_broker_agent_properties fp
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM agricultural_broker_agent_properties_branch fp
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM agricultural_owner_properties fp
LEFT JOIN agricultural_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6
`

type FilterAgriculturalPropertiesForLeadParams struct {
	Bathroom            pgtype.Int8 `json:"bathroom"`
	Bedroom             pgtype.Text `json:"bedroom"`
	MinArea             pgtype.Int8 `json:"min_area"`
	MaxArea             pgtype.Int8 `json:"max_area"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CountriesID         pgtype.Int8 `json:"countries_id"`
	StatesID            pgtype.Int8 `json:"states_id"`
	CitiesID            pgtype.Int8 `json:"cities_id"`
	Column9             []int64     `json:"column_9"`
	Column10            []int64     `json:"column_10"`
	IsLifeStyle         pgtype.Bool `json:"is_life_style"`
	DisablePropertyType pgtype.Bool `json:"disable_property_type"`
	DisableBath         pgtype.Bool `json:"disable_bath"`
	MinPrice            pgtype.Int8 `json:"min_price"`
	MaxPrice            pgtype.Int8 `json:"max_price"`
	DisableFilter       pgtype.Bool `json:"disable_filter"`
	DisableCountry      pgtype.Bool `json:"disable_country"`
	DisableState        pgtype.Bool `json:"disable_state"`
	DisableCity         pgtype.Bool `json:"disable_city"`
	DisableComm         pgtype.Bool `json:"disable_comm"`
	DisableSubComm      pgtype.Bool `json:"disable_sub_comm"`
}

type FilterAgriculturalPropertiesForLeadRow struct {
	Value int64  `json:"value"`
	RefNo string `json:"ref_no"`
	Label string `json:"label"`
}

func (q *Queries) FilterAgriculturalPropertiesForLead(ctx context.Context, arg FilterAgriculturalPropertiesForLeadParams) ([]FilterAgriculturalPropertiesForLeadRow, error) {
	rows, err := q.db.Query(ctx, filterAgriculturalPropertiesForLead,
		arg.Bathroom,
		arg.Bedroom,
		arg.MinArea,
		arg.MaxArea,
		arg.PropertyTypesID,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.Column9,
		arg.Column10,
		arg.IsLifeStyle,
		arg.DisablePropertyType,
		arg.DisableBath,
		arg.MinPrice,
		arg.MaxPrice,
		arg.DisableFilter,
		arg.DisableCountry,
		arg.DisableState,
		arg.DisableCity,
		arg.DisableComm,
		arg.DisableSubComm,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterAgriculturalPropertiesForLeadRow
	for rows.Next() {
		var i FilterAgriculturalPropertiesForLeadRow
		if err := rows.Scan(&i.Value, &i.RefNo, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterIndustrialPropertiesForLead = `-- name: FilterIndustrialPropertiesForLead :many
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM industrial_freelancer_properties fp
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM industrial_broker_agent_properties fp
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM industrial_broker_agent_properties_branch fp
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM industrial_owner_properties fp
LEFT JOIN industrial_properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6
`

type FilterIndustrialPropertiesForLeadParams struct {
	Bathroom            pgtype.Int8 `json:"bathroom"`
	Bedroom             pgtype.Text `json:"bedroom"`
	MinArea             pgtype.Int8 `json:"min_area"`
	MaxArea             pgtype.Int8 `json:"max_area"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CountriesID         pgtype.Int8 `json:"countries_id"`
	StatesID            pgtype.Int8 `json:"states_id"`
	CitiesID            pgtype.Int8 `json:"cities_id"`
	Column9             []int64     `json:"column_9"`
	Column10            []int64     `json:"column_10"`
	IsLifeStyle         pgtype.Bool `json:"is_life_style"`
	DisablePropertyType pgtype.Bool `json:"disable_property_type"`
	DisableBath         pgtype.Bool `json:"disable_bath"`
	MinPrice            pgtype.Int8 `json:"min_price"`
	MaxPrice            pgtype.Int8 `json:"max_price"`
	DisableFilter       pgtype.Bool `json:"disable_filter"`
	DisableCountry      pgtype.Bool `json:"disable_country"`
	DisableState        pgtype.Bool `json:"disable_state"`
	DisableCity         pgtype.Bool `json:"disable_city"`
	DisableComm         pgtype.Bool `json:"disable_comm"`
	DisableSubComm      pgtype.Bool `json:"disable_sub_comm"`
}

type FilterIndustrialPropertiesForLeadRow struct {
	Value int64  `json:"value"`
	RefNo string `json:"ref_no"`
	Label string `json:"label"`
}

func (q *Queries) FilterIndustrialPropertiesForLead(ctx context.Context, arg FilterIndustrialPropertiesForLeadParams) ([]FilterIndustrialPropertiesForLeadRow, error) {
	rows, err := q.db.Query(ctx, filterIndustrialPropertiesForLead,
		arg.Bathroom,
		arg.Bedroom,
		arg.MinArea,
		arg.MaxArea,
		arg.PropertyTypesID,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.Column9,
		arg.Column10,
		arg.IsLifeStyle,
		arg.DisablePropertyType,
		arg.DisableBath,
		arg.MinPrice,
		arg.MaxPrice,
		arg.DisableFilter,
		arg.DisableCountry,
		arg.DisableState,
		arg.DisableCity,
		arg.DisableComm,
		arg.DisableSubComm,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterIndustrialPropertiesForLeadRow
	for rows.Next() {
		var i FilterIndustrialPropertiesForLeadRow
		if err := rows.Scan(&i.Value, &i.RefNo, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterProjectPropertiesForLead = `-- name: FilterProjectPropertiesForLead :many
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM project_properties fp
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE (fp.property_types_id && $1::bigint[] AND (pf.life_style = 3 or $11::bool or pf.life_style is null) and (pf.life_style != 3 or NOT $11::bool or pf.life_style is null) and (pf.bathroom = $2 or $12::bool) 
and (pf.bedroom LIKE $3 or pf.bedroom = '%') and pf.min_area >= $4 and pf.max_area <= $5  and (pf.price >= $13 or $14::bool) and (pf.price <= $15 or $14::bool) OR $16::bool) and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6
`

type FilterProjectPropertiesForLeadParams struct {
	Column1        []int64       `json:"column_1"`
	Bathroom       pgtype.Int8   `json:"bathroom"`
	Bedroom        pgtype.Text   `json:"bedroom"`
	MinArea        pgtype.Float8 `json:"min_area"`
	MaxArea        pgtype.Float8 `json:"max_area"`
	CountriesID    pgtype.Int8   `json:"countries_id"`
	StatesID       pgtype.Int8   `json:"states_id"`
	CitiesID       pgtype.Int8   `json:"cities_id"`
	Column9        []int64       `json:"column_9"`
	Column10       []int64       `json:"column_10"`
	IsLifeStyle    pgtype.Bool   `json:"is_life_style"`
	DisableBath    pgtype.Bool   `json:"disable_bath"`
	MinPrice       pgtype.Float8 `json:"min_price"`
	DisablePrice   pgtype.Bool   `json:"disable_price"`
	MaxPrice       pgtype.Float8 `json:"max_price"`
	DisableFilter  pgtype.Bool   `json:"disable_filter"`
	DisableCountry pgtype.Bool   `json:"disable_country"`
	DisableState   pgtype.Bool   `json:"disable_state"`
	DisableCity    pgtype.Bool   `json:"disable_city"`
	DisableComm    pgtype.Bool   `json:"disable_comm"`
	DisableSubComm pgtype.Bool   `json:"disable_sub_comm"`
}

type FilterProjectPropertiesForLeadRow struct {
	Value int64  `json:"value"`
	RefNo string `json:"ref_no"`
	Label string `json:"label"`
}

func (q *Queries) FilterProjectPropertiesForLead(ctx context.Context, arg FilterProjectPropertiesForLeadParams) ([]FilterProjectPropertiesForLeadRow, error) {
	rows, err := q.db.Query(ctx, filterProjectPropertiesForLead,
		arg.Column1,
		arg.Bathroom,
		arg.Bedroom,
		arg.MinArea,
		arg.MaxArea,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.Column9,
		arg.Column10,
		arg.IsLifeStyle,
		arg.DisableBath,
		arg.MinPrice,
		arg.DisablePrice,
		arg.MaxPrice,
		arg.DisableFilter,
		arg.DisableCountry,
		arg.DisableState,
		arg.DisableCity,
		arg.DisableComm,
		arg.DisableSubComm,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterProjectPropertiesForLeadRow
	for rows.Next() {
		var i FilterProjectPropertiesForLeadRow
		if err := rows.Scan(&i.Value, &i.RefNo, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const filterPropertyHubPropertiesForLead = `-- name: FilterPropertyHubPropertiesForLead :many
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM freelancers_properties fp
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool) and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM broker_company_agent_properties fp
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM broker_company_agent_properties_branch fp
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6 
UNION
SELECT ROW_NUMBER() OVER (ORDER BY fp.ref_no) AS "value", fp.ref_no, fp.property_name as "label" FROM owner_properties fp
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id JOIN addresses a ON fp.addresses_id = a.id
WHERE ((pf.life_style = 3 or $11::bool) and (pf.life_style != 3 or NOT $11::bool) and (fp.property_types_id = $5 or $12::bool) and (pf.bathroom = $1 or $13::bool) 
and pf.bedroom LIKE $2 and pf.min_area >= $3 and pf.max_area <= $4  and pf.price >= $14 and pf.price <= $15 OR $16::bool)  and 
(fp.addresses_id IN  (select id from addresses where (addresses.countries_id = $6 or $17::bool) and ( addresses.states_id = $7 or $18::bool) and 
(addresses.cities_id = $8 or $19::bool) and (addresses.communities_id = ANY($9::bigint[]) or $20::bool) and (addresses.sub_communities_id = ANY($10::bigint[]) or $21::bool))) and fp.status != 6
`

type FilterPropertyHubPropertiesForLeadParams struct {
	Bathroom            pgtype.Int8   `json:"bathroom"`
	Bedroom             pgtype.Text   `json:"bedroom"`
	MinArea             pgtype.Float8 `json:"min_area"`
	MaxArea             pgtype.Float8 `json:"max_area"`
	PropertyTypesID     int64         `json:"property_types_id"`
	CountriesID         pgtype.Int8   `json:"countries_id"`
	StatesID            pgtype.Int8   `json:"states_id"`
	CitiesID            pgtype.Int8   `json:"cities_id"`
	Column9             []int64       `json:"column_9"`
	Column10            []int64       `json:"column_10"`
	IsLifeStyle         pgtype.Bool   `json:"is_life_style"`
	DisablePropertyType pgtype.Bool   `json:"disable_property_type"`
	DisableBath         pgtype.Bool   `json:"disable_bath"`
	MinPrice            pgtype.Float8 `json:"min_price"`
	MaxPrice            pgtype.Float8 `json:"max_price"`
	DisableFilter       pgtype.Bool   `json:"disable_filter"`
	DisableCountry      pgtype.Bool   `json:"disable_country"`
	DisableState        pgtype.Bool   `json:"disable_state"`
	DisableCity         pgtype.Bool   `json:"disable_city"`
	DisableComm         pgtype.Bool   `json:"disable_comm"`
	DisableSubComm      pgtype.Bool   `json:"disable_sub_comm"`
}

type FilterPropertyHubPropertiesForLeadRow struct {
	Value int64  `json:"value"`
	RefNo string `json:"ref_no"`
	Label string `json:"label"`
}

func (q *Queries) FilterPropertyHubPropertiesForLead(ctx context.Context, arg FilterPropertyHubPropertiesForLeadParams) ([]FilterPropertyHubPropertiesForLeadRow, error) {
	rows, err := q.db.Query(ctx, filterPropertyHubPropertiesForLead,
		arg.Bathroom,
		arg.Bedroom,
		arg.MinArea,
		arg.MaxArea,
		arg.PropertyTypesID,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.Column9,
		arg.Column10,
		arg.IsLifeStyle,
		arg.DisablePropertyType,
		arg.DisableBath,
		arg.MinPrice,
		arg.MaxPrice,
		arg.DisableFilter,
		arg.DisableCountry,
		arg.DisableState,
		arg.DisableCity,
		arg.DisableComm,
		arg.DisableSubComm,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterPropertyHubPropertiesForLeadRow
	for rows.Next() {
		var i FilterPropertyHubPropertiesForLeadRow
		if err := rows.Scan(&i.Value, &i.RefNo, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
