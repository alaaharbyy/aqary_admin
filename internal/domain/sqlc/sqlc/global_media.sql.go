// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: global_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfFileURLAlreadyExists = `-- name: CheckIfFileURLAlreadyExists :one
SELECT EXISTS (
    SELECT 1
    FROM global_media
    WHERE $1::VARCHAR = ANY(global_media.file_urls) AND 
    global_media.id != $2 AND global_media.gallery_type = $3 and global_media.media_type= $4
) AS string_exists
`

type CheckIfFileURLAlreadyExistsParams struct {
	Column1     string `json:"column_1"`
	ID          int64  `json:"id"`
	GalleryType string `json:"gallery_type"`
	MediaType   int64  `json:"media_type"`
}

func (q *Queries) CheckIfFileURLAlreadyExists(ctx context.Context, arg CheckIfFileURLAlreadyExistsParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, checkIfFileURLAlreadyExists,
		arg.Column1,
		arg.ID,
		arg.GalleryType,
		arg.MediaType,
	)
	var string_exists pgtype.Bool
	err := row.Scan(&string_exists)
	return string_exists, err
}

const createGlobalMedia = `-- name: CreateGlobalMedia :one
INSERT INTO global_media(
    file_urls, 
    gallery_type,
    gallery_type_ar,
    media_type,
    entity_id,
    entity_type_id
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5,
    $6
)RETURNING id, file_urls, gallery_type, media_type, entity_id, entity_type_id, created_at, updated_at, gallery_type_ar
`

type CreateGlobalMediaParams struct {
	FileUrls      []string    `json:"file_urls"`
	GalleryType   string      `json:"gallery_type"`
	GalleryTypeAr pgtype.Text `json:"gallery_type_ar"`
	MediaType     int64       `json:"media_type"`
	EntityID      int64       `json:"entity_id"`
	EntityTypeID  int64       `json:"entity_type_id"`
}

func (q *Queries) CreateGlobalMedia(ctx context.Context, arg CreateGlobalMediaParams) (GlobalMedium, error) {
	row := q.db.QueryRow(ctx, createGlobalMedia,
		arg.FileUrls,
		arg.GalleryType,
		arg.GalleryTypeAr,
		arg.MediaType,
		arg.EntityID,
		arg.EntityTypeID,
	)
	var i GlobalMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GalleryTypeAr,
	)
	return i, err
}

const deleteEntityGlobalMedia = `-- name: DeleteEntityGlobalMedia :exec
DELETE FROM global_media WHERE id=$1
`

func (q *Queries) DeleteEntityGlobalMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEntityGlobalMedia, id)
	return err
}

const deleteEntityGlobalMediaByMediaId = `-- name: DeleteEntityGlobalMediaByMediaId :one
DELETE FROM global_media WHERE global_media.id =$1 AND 
COALESCE((SELECT CASE  global_media.entity_type_id::BIGINT
               WHEN 1 THEN (SELECT projects.status::BIGINT FROM projects WHERE projects.id = global_media.entity_id::BIGINT)
               WHEN 2 THEN (SELECT phases.status::BIGINT FROM phases WHERE phases.id = global_media.entity_id::BIGINT)
               WHEN 3 THEN (SELECT property.status::BIGINT FROM property WHERE property.id = global_media.entity_id::BIGINT)
               --WHEN 4 THEN (SELECT exhibitions.event_status::BIGINT FROM exhibitions WHERE exhibitions.id = global_media.entity_id::BIGINT)
               WHEN 5 THEN (SELECT units.status::BIGINT FROM units WHERE units.id = global_media.entity_id::BIGINT)
               WHEN 6 THEN (SELECT companies.status::BIGINT FROM companies WHERE companies.id = global_media.entity_id::BIGINT)
               WHEN 7 THEN (SELECT 1 FROM profiles WHERE profiles.id = global_media.entity_id::BIGINT)
              -- WHEN 8 THEN (SELECT freelancers.status::BIGINT FROM freelancers WHERE freelancers.id = global_media.entity_id::BIGINT)
               WHEN 9 THEN (SELECT users.status::BIGINT FROM users WHERE users.id = global_media.entity_id::BIGINT)
               --WHEN 10 THEN (SELECT holiday_home.status::BIGINT FROM holiday_home WHERE holiday_home.id = global_media.entity_id::BIGINT)
               --WHEN 11 THEN (SELECT 1 FROM services WHERE services.id =global_media.entity_id::BIGINT)
               --WHEN 16 THEN (SELECT 1 FROM publish_listing WHERE publish_listing.id =global_media.entity_id::BIGINT)
                --WHEN 17 THEN (SELECT 1 FROM company_activities WHERE company_activities.id = global_media.entity_id::BIGINT)
                 WHEN 18 THEN (SELECT 1 FROM company_profiles WHERE company_profiles.id = global_media.entity_id::BIGINT)
               WHEN 19 THEN (SELECT 1 FROM company_profiles_projects WHERE company_profiles_projects.id = global_media.entity_id::BIGINT)
               WHEN 20 THEN (SELECT 1 FROM company_profiles_phases WHERE company_profiles_phases.id = global_media.entity_id::BIGINT)
               WHEN 21 THEN (SELECT 1 FROM community_guidelines WHERE community_guidelines.id = global_media.entity_id::BIGINT)
               WHEN 24 THEN (SELECT 1 FROM company_activities_detail WHERE company_activities_detail.id = global_media.entity_id::BIGINT)
               ELSE 0::BIGINT
           END),6::BIGINT) NOT IN (0,6)
RETURNING global_media.file_urls
`

func (q *Queries) DeleteEntityGlobalMediaByMediaId(ctx context.Context, id int64) ([]string, error) {
	row := q.db.QueryRow(ctx, deleteEntityGlobalMediaByMediaId, id)
	var file_urls []string
	err := row.Scan(&file_urls)
	return file_urls, err
}

const deleteEntityGlobalMediaByURL = `-- name: DeleteEntityGlobalMediaByURL :one
UPDATE global_media 
SET 
	file_urls = array_remove(file_urls, $2::VARCHAR),
	updated_at=$1 
WHERE 
	global_media.id= $3 AND $2::VARCHAR = ANY(file_urls) AND 
	COALESCE((SELECT CASE  global_media.entity_type_id::BIGINT
               WHEN 1 THEN (SELECT projects.status::BIGINT FROM projects WHERE projects.id = global_media.entity_id::BIGINT)
               WHEN 2 THEN (SELECT phases.status::BIGINT FROM phases WHERE phases.id = global_media.entity_id::BIGINT)
               WHEN 3 THEN (SELECT property.status::BIGINT FROM property WHERE property.id = global_media.entity_id::BIGINT)
               --WHEN 4 THEN (SELECT exhibitions.event_status::BIGINT FROM exhibitions WHERE exhibitions.id = global_media.entity_id::BIGINT)
               WHEN 5 THEN (SELECT units.status::BIGINT FROM units WHERE units.id = global_media.entity_id::BIGINT)
               WHEN 6 THEN (SELECT companies.status::BIGINT FROM companies WHERE companies.id = global_media.entity_id::BIGINT)
               WHEN 7 THEN (SELECT 1 FROM profiles WHERE profiles.id = global_media.entity_id::BIGINT)
               --WHEN 8 THEN (SELECT freelancers.status::BIGINT FROM freelancers WHERE freelancers.id = global_media.entity_id::BIGINT)
               WHEN 9 THEN (SELECT users.status::BIGINT FROM users WHERE users.id = global_media.entity_id::BIGINT)
               --WHEN 10 THEN (SELECT holiday_home.status::BIGINT FROM holiday_home WHERE holiday_home.id = global_media.entity_id::BIGINT)
               --WHEN 11 THEN (SELECT 1 FROM services WHERE services.id = global_media.entity_id::BIGINT)
               --WHEN 16 THEN (SELECT 1 FROM publish_listing WHERE publish_listing.id = global_media.entity_id::BIGINT)
               --WHEN 17 THEN (SELECT 1 FROM company_activities WHERE company_activities.id = @entity_id::BIGINT)
                 WHEN 18 THEN (SELECT 1 FROM company_profiles WHERE company_profiles.id = global_media.entity_id::BIGINT)
               WHEN 19 THEN (SELECT 1 FROM company_profiles_projects WHERE company_profiles_projects.id = global_media.entity_id::BIGINT)
               WHEN 20 THEN (SELECT 1 FROM company_profiles_phases WHERE company_profiles_phases.id = global_media.entity_id::BIGINT)
               WHEN 21 THEN (SELECT 1 FROM community_guidelines WHERE community_guidelines.id = $4::BIGINT)
               WHEN 24 THEN (SELECT 1 FROM company_activities_detail WHERE company_activities_detail.id = $4::BIGINT)
               ELSE 0::BIGINT
           END),6::BIGINT) NOT IN (0,6)
RETURNING id, file_urls, gallery_type, media_type, entity_id, entity_type_id, created_at, updated_at, gallery_type_ar
`

type DeleteEntityGlobalMediaByURLParams struct {
	UpdatedAt time.Time `json:"updated_at"`
	FileUrl   string    `json:"file_url"`
	MediaID   int64     `json:"media_id"`
	EntityID  int64     `json:"entity_id"`
}

func (q *Queries) DeleteEntityGlobalMediaByURL(ctx context.Context, arg DeleteEntityGlobalMediaByURLParams) (GlobalMedium, error) {
	row := q.db.QueryRow(ctx, deleteEntityGlobalMediaByURL,
		arg.UpdatedAt,
		arg.FileUrl,
		arg.MediaID,
		arg.EntityID,
	)
	var i GlobalMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GalleryTypeAr,
	)
	return i, err
}

const deleteXMLGlobalMedia = `-- name: DeleteXMLGlobalMedia :exec
DELETE FROM global_media
WHERE entity_type_id = $1
  AND entity_id = ANY($2::bigint[])
`

type DeleteXMLGlobalMediaParams struct {
	EntityTypeID int64   `json:"entity_type_id"`
	EntityIds    []int64 `json:"entity_ids"`
}

func (q *Queries) DeleteXMLGlobalMedia(ctx context.Context, arg DeleteXMLGlobalMediaParams) error {
	_, err := q.db.Exec(ctx, deleteXMLGlobalMedia, arg.EntityTypeID, arg.EntityIds)
	return err
}

const getAllParentCategoryFroImport = `-- name: GetAllParentCategoryFroImport :many
SELECT
    DISTINCT global_media.gallery_type,global_media.gallery_type_ar,
    entity_id AS parent_id, entity_type_id as parent_type_id
FROM 
    global_media
WHERE entity_type_id = $1 and entity_id = $2
`

type GetAllParentCategoryFroImportParams struct {
	EntityTypeID int64 `json:"entity_type_id"`
	EntityID     int64 `json:"entity_id"`
}

type GetAllParentCategoryFroImportRow struct {
	GalleryType   string      `json:"gallery_type"`
	GalleryTypeAr pgtype.Text `json:"gallery_type_ar"`
	ParentID      int64       `json:"parent_id"`
	ParentTypeID  int64       `json:"parent_type_id"`
}

func (q *Queries) GetAllParentCategoryFroImport(ctx context.Context, arg GetAllParentCategoryFroImportParams) ([]GetAllParentCategoryFroImportRow, error) {
	rows, err := q.db.Query(ctx, getAllParentCategoryFroImport, arg.EntityTypeID, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllParentCategoryFroImportRow
	for rows.Next() {
		var i GetAllParentCategoryFroImportRow
		if err := rows.Scan(
			&i.GalleryType,
			&i.GalleryTypeAr,
			&i.ParentID,
			&i.ParentTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllParentMediaTypeForImport = `-- name: GetAllParentMediaTypeForImport :many
SELECT DISTINCT global_media.media_type AS media_type_id, entity_type_id, entity_id
FROM global_media
WHERE global_media.gallery_type = $1 AND global_media.entity_type_id = $2 AND global_media.entity_id = $3
`

type GetAllParentMediaTypeForImportParams struct {
	GalleryType  string `json:"gallery_type"`
	EntityTypeID int64  `json:"entity_type_id"`
	EntityID     int64  `json:"entity_id"`
}

type GetAllParentMediaTypeForImportRow struct {
	MediaTypeID  int64 `json:"media_type_id"`
	EntityTypeID int64 `json:"entity_type_id"`
	EntityID     int64 `json:"entity_id"`
}

func (q *Queries) GetAllParentMediaTypeForImport(ctx context.Context, arg GetAllParentMediaTypeForImportParams) ([]GetAllParentMediaTypeForImportRow, error) {
	rows, err := q.db.Query(ctx, getAllParentMediaTypeForImport, arg.GalleryType, arg.EntityTypeID, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllParentMediaTypeForImportRow
	for rows.Next() {
		var i GetAllParentMediaTypeForImportRow
		if err := rows.Scan(&i.MediaTypeID, &i.EntityTypeID, &i.EntityID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntityIdGlobalMedia = `-- name: GetEntityIdGlobalMedia :many
SELECT global_media.id AS "global_media_id",global_media.media_type,global_media.gallery_type,global_media.gallery_type_ar, global_media.entity_id AS "entity_id" , global_media.entity_type_id AS "entity_type_id" ,global_media.created_at,global_media.updated_at,global_media.file_urls
FROM 
	global_media
WHERE 
	global_media.entity_id= $3::BIGINT AND global_media.entity_type_id= $4::BIGINT AND
	COALESCE((SELECT CASE  $4::BIGINT
               WHEN 1 THEN (SELECT projects.status::BIGINT FROM projects WHERE projects.id = $3::BIGINT)
               WHEN 2 THEN (SELECT phases.status::BIGINT FROM phases WHERE phases.id = $3::BIGINT)
               WHEN 3 THEN (SELECT property.status::BIGINT FROM property WHERE property.id = $3::BIGINT)
            --    WHEN 4 THEN (SELECT exhibitions.event_status::BIGINT FROM exhibitions WHERE exhibitions.id = @entity_id::BIGINT)
               WHEN 5 THEN (SELECT units.status::BIGINT FROM units WHERE units.id = $3::BIGINT)
               WHEN 6 THEN (SELECT companies.status::BIGINT FROM companies WHERE companies.id = $3::BIGINT)
               WHEN 7 THEN (SELECT 1 FROM profiles WHERE profiles.id = $3::BIGINT)
            --    WHEN 8 THEN (SELECT freelancers.status::BIGINT FROM freelancers WHERE freelancers.id = @entity_id::BIGINT)
               WHEN 9 THEN (SELECT users.status::BIGINT FROM users WHERE users.id = $3::BIGINT)
            --    WHEN 10 THEN (SELECT holiday_home.status::BIGINT FROM holiday_home WHERE holiday_home.id = @entity_id::BIGINT)
            --    WHEN 11 THEN (SELECT 1 FROM services WHERE services.id = @entity_id::BIGINT)
            --    WHEN 16 THEN (SELECT 1 FROM publish_listing WHERE publish_listing.id = @entity_id::BIGINT)
            --    WHEN 17 THEN (SELECT 1 FROM company_activities WHERE company_activities.id = @entity_id::BIGINT)
               WHEN 18 THEN (SELECT 1 FROM company_profiles WHERE company_profiles.id = $3::BIGINT)
               WHEN 19 THEN (SELECT 1 FROM company_profiles_projects WHERE company_profiles_projects.id = $3::BIGINT)
               WHEN 20 THEN (SELECT 1 FROM company_profiles_phases WHERE company_profiles_phases.id = $3::BIGINT)
               WHEN 21 THEN (SELECT 1 FROM community_guidelines WHERE community_guidelines.id = $3::BIGINT)
               WHEN 24 THEN (SELECT 1 FROM company_activities_detail WHERE company_activities_detail.id = $3::BIGINT)
               ELSE 0::BIGINT
           END),6::BIGINT) NOT IN(0,6)
ORDER BY 
	global_media.updated_at DESC
LIMIT $1 
OFFSET $2
`

type GetEntityIdGlobalMediaParams struct {
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
	EntityID   int64 `json:"entity_id"`
	EntityType int64 `json:"entity_type"`
}

type GetEntityIdGlobalMediaRow struct {
	GlobalMediaID int64       `json:"global_media_id"`
	MediaType     int64       `json:"media_type"`
	GalleryType   string      `json:"gallery_type"`
	GalleryTypeAr pgtype.Text `json:"gallery_type_ar"`
	EntityID      int64       `json:"entity_id"`
	EntityTypeID  int64       `json:"entity_type_id"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	FileUrls      []string    `json:"file_urls"`
}

func (q *Queries) GetEntityIdGlobalMedia(ctx context.Context, arg GetEntityIdGlobalMediaParams) ([]GetEntityIdGlobalMediaRow, error) {
	rows, err := q.db.Query(ctx, getEntityIdGlobalMedia,
		arg.Limit,
		arg.Offset,
		arg.EntityID,
		arg.EntityType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEntityIdGlobalMediaRow
	for rows.Next() {
		var i GetEntityIdGlobalMediaRow
		if err := rows.Scan(
			&i.GlobalMediaID,
			&i.MediaType,
			&i.GalleryType,
			&i.GalleryTypeAr,
			&i.EntityID,
			&i.EntityTypeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FileUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileUrlFromGlobalMedia = `-- name: GetFileUrlFromGlobalMedia :one
select file_urls from global_media  where media_type = $1 and entity_type_id=$2 and gallery_type=$3 and entity_id=$4
`

type GetFileUrlFromGlobalMediaParams struct {
	MediaType    int64  `json:"media_type"`
	EntityTypeID int64  `json:"entity_type_id"`
	GalleryType  string `json:"gallery_type"`
	EntityID     int64  `json:"entity_id"`
}

func (q *Queries) GetFileUrlFromGlobalMedia(ctx context.Context, arg GetFileUrlFromGlobalMediaParams) ([]string, error) {
	row := q.db.QueryRow(ctx, getFileUrlFromGlobalMedia,
		arg.MediaType,
		arg.EntityTypeID,
		arg.GalleryType,
		arg.EntityID,
	)
	var file_urls []string
	err := row.Scan(&file_urls)
	return file_urls, err
}

const getFileUrlFromGlobalMediaMultiple = `-- name: GetFileUrlFromGlobalMediaMultiple :many
select file_urls, media_type from global_media  where entity_type_id=$1 and gallery_type=$2 and entity_id=$3 AND media_type=$4
`

type GetFileUrlFromGlobalMediaMultipleParams struct {
	EntityTypeID int64  `json:"entity_type_id"`
	GalleryType  string `json:"gallery_type"`
	EntityID     int64  `json:"entity_id"`
	MediaType    int64  `json:"media_type"`
}

type GetFileUrlFromGlobalMediaMultipleRow struct {
	FileUrls  []string `json:"file_urls"`
	MediaType int64    `json:"media_type"`
}

func (q *Queries) GetFileUrlFromGlobalMediaMultiple(ctx context.Context, arg GetFileUrlFromGlobalMediaMultipleParams) ([]GetFileUrlFromGlobalMediaMultipleRow, error) {
	rows, err := q.db.Query(ctx, getFileUrlFromGlobalMediaMultiple,
		arg.EntityTypeID,
		arg.GalleryType,
		arg.EntityID,
		arg.MediaType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFileUrlFromGlobalMediaMultipleRow
	for rows.Next() {
		var i GetFileUrlFromGlobalMediaMultipleRow
		if err := rows.Scan(&i.FileUrls, &i.MediaType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalMedia = `-- name: GetGlobalMedia :one
WITH status_calculation AS (
     SELECT CASE  $3::BIGINT
               WHEN 1 THEN (SELECT projects.status::BIGINT FROM projects WHERE projects.id = $4::BIGINT)
               WHEN 2 THEN (SELECT phases.status::BIGINT FROM phases WHERE phases.id = $4::BIGINT)
               WHEN 3 THEN (SELECT property.status::BIGINT FROM property WHERE property.id = $4::BIGINT)
            --    WHEN 4 THEN (SELECT exhibitions.event_status::BIGINT FROM exhibitions WHERE exhibitions.id = @entity_id::BIGINT)
               WHEN 5 THEN (SELECT units.status::BIGINT FROM units WHERE units.id = $4::BIGINT)
               WHEN 6 THEN (SELECT companies.status::BIGINT FROM companies WHERE companies.id = $4::BIGINT)
               WHEN 7 THEN (SELECT 1 FROM profiles WHERE profiles.id = $4::BIGINT)
            --    WHEN 8 THEN (SELECT freelancers.status::BIGINT FROM freelancers WHERE freelancers.id = @entity_id::BIGINT)
               WHEN 9 THEN (SELECT users.status::BIGINT FROM users WHERE users.id = $4::BIGINT)
            --    WHEN 10 THEN (SELECT holiday_home.status::BIGINT FROM holiday_home WHERE holiday_home.id = @entity_id::BIGINT)
            --    WHEN 11 THEN (SELECT 1 FROM services WHERE services.id = @entity_id::BIGINT)
            --    WHEN 16 THEN (SELECT 1 FROM publish_listing WHERE publish_listing.id = @entity_id::BIGINT)
            --    WHEN 17 THEN (SELECT 1 FROM company_activities WHERE company_activities.id = @entity_id::BIGINT)
               WHEN 18 THEN (SELECT 1 FROM company_profiles WHERE company_profiles.id = $4::BIGINT)
               WHEN 19 THEN (SELECT 1 FROM company_profiles_projects WHERE company_profiles_projects.id = $4::BIGINT)
               WHEN 20 THEN (SELECT 1 FROM company_profiles_phases WHERE company_profiles_phases.id = $4::BIGINT)
               WHEN 21 THEN (SELECT 1 FROM community_guidelines WHERE community_guidelines.id = $4::BIGINT)
              WHEN 24 THEN (SELECT 1 FROM company_activities_detail WHERE company_activities_detail.id = $4::BIGINT)
               ELSE 0::BIGINT
           END AS status
)
SELECT 
    COALESCE(global_media.id, 0) AS "media_id",
    COALESCE(global_media.file_urls, ARRAY[]::VARCHAR[]) AS "file_urls",
    COALESCE(global_media.entity_id, 0) AS "entity_id",
    COALESCE(status_calculation.status,-1::BIGINT) AS "status"
FROM 
    status_calculation 
LEFT JOIN 
    global_media ON 
        global_media.entity_type_id =  $3::BIGINT 
        AND global_media.entity_id = $4::BIGINT 
        AND global_media.media_type = $1
        AND global_media.gallery_type = $2
        AND status_calculation.status NOT IN (-1,0,6)
`

type GetGlobalMediaParams struct {
	MediaType   int64  `json:"media_type"`
	GalleryType string `json:"gallery_type"`
	EntityType  int64  `json:"entity_type"`
	EntityID    int64  `json:"entity_id"`
}

type GetGlobalMediaRow struct {
	MediaID  int64    `json:"media_id"`
	FileUrls []string `json:"file_urls"`
	EntityID int64    `json:"entity_id"`
	Status   int64    `json:"status"`
}

func (q *Queries) GetGlobalMedia(ctx context.Context, arg GetGlobalMediaParams) (GetGlobalMediaRow, error) {
	row := q.db.QueryRow(ctx, getGlobalMedia,
		arg.MediaType,
		arg.GalleryType,
		arg.EntityType,
		arg.EntityID,
	)
	var i GetGlobalMediaRow
	err := row.Scan(
		&i.MediaID,
		&i.FileUrls,
		&i.EntityID,
		&i.Status,
	)
	return i, err
}

const getGlobalMediaById = `-- name: GetGlobalMediaById :one
select id, file_urls, gallery_type, media_type, entity_id, entity_type_id, created_at, updated_at, gallery_type_ar from global_media 
where id = $1
`

func (q *Queries) GetGlobalMediaById(ctx context.Context, id int64) (GlobalMedium, error) {
	row := q.db.QueryRow(ctx, getGlobalMediaById, id)
	var i GlobalMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GalleryTypeAr,
	)
	return i, err
}

const getGlobalMediaWithoutMediaType = `-- name: GetGlobalMediaWithoutMediaType :many
WITH status_calculation AS (
     SELECT CASE  $2::BIGINT
               WHEN 1 THEN (SELECT projects.status::BIGINT FROM projects WHERE projects.id = $3::BIGINT)
               WHEN 2 THEN (SELECT phases.status::BIGINT FROM phases WHERE phases.id = $3::BIGINT)
               WHEN 3 THEN (SELECT property.status::BIGINT FROM property WHERE property.id = $3::BIGINT)
            --    WHEN 4 THEN (SELECT exhibitions.event_status::BIGINT FROM exhibitions WHERE exhibitions.id = @entity_id::BIGINT)
               WHEN 5 THEN (SELECT units.status::BIGINT FROM units WHERE units.id = $3::BIGINT)
               WHEN 6 THEN (SELECT companies.status::BIGINT FROM companies WHERE companies.id = $3::BIGINT)
               WHEN 7 THEN (SELECT 1 FROM profiles WHERE profiles.id = $3::BIGINT)
            --    WHEN 8 THEN (SELECT freelancers.status::BIGINT FROM freelancers WHERE freelancers.id = @entity_id::BIGINT)
               WHEN 9 THEN (SELECT users.status::BIGINT FROM users WHERE users.id = $3::BIGINT)
            --    WHEN 10 THEN (SELECT holiday_home.status::BIGINT FROM holiday_home WHERE holiday_home.id = @entity_id::BIGINT)
            --    WHEN 11 THEN (SELECT 1 FROM services WHERE services.id = @entity_id::BIGINT)
            --    WHEN 16 THEN (SELECT 1 FROM publish_listing WHERE publish_listing.id = @entity_id::BIGINT)
            --    WHEN 17 THEN (SELECT 1 FROM company_activities WHERE company_activities.id = @entity_id::BIGINT)

               ELSE 0::BIGINT
           END AS status
)
SELECT 
    COALESCE(global_media.id, 0) AS "media_id",
    COALESCE(global_media.file_urls, ARRAY[]::VARCHAR[]) AS "file_urls",
    COALESCE(global_media.entity_id, 0) AS "entity_id",
    COALESCE(status_calculation.status,-1::BIGINT) AS "status"
FROM 
    status_calculation 
LEFT JOIN 
    global_media ON 
        global_media.entity_type_id =  $2::BIGINT 
        AND global_media.entity_id = $3::BIGINT 
        AND global_media.gallery_type = $1
        AND status_calculation.status NOT IN (-1,0,6)
`

type GetGlobalMediaWithoutMediaTypeParams struct {
	GalleryType string `json:"gallery_type"`
	EntityType  int64  `json:"entity_type"`
	EntityID    int64  `json:"entity_id"`
}

type GetGlobalMediaWithoutMediaTypeRow struct {
	MediaID  int64    `json:"media_id"`
	FileUrls []string `json:"file_urls"`
	EntityID int64    `json:"entity_id"`
	Status   int64    `json:"status"`
}

func (q *Queries) GetGlobalMediaWithoutMediaType(ctx context.Context, arg GetGlobalMediaWithoutMediaTypeParams) ([]GetGlobalMediaWithoutMediaTypeRow, error) {
	rows, err := q.db.Query(ctx, getGlobalMediaWithoutMediaType, arg.GalleryType, arg.EntityType, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalMediaWithoutMediaTypeRow
	for rows.Next() {
		var i GetGlobalMediaWithoutMediaTypeRow
		if err := rows.Scan(
			&i.MediaID,
			&i.FileUrls,
			&i.EntityID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfEntityIdGlobalMedia = `-- name: GetNumberOfEntityIdGlobalMedia :one
SELECT COUNT(*) 
FROM 
	global_media 
WHERE 
	entity_id= $1::BIGINT AND entity_type_id= $2::BIGINT
`

type GetNumberOfEntityIdGlobalMediaParams struct {
	EntityID   int64 `json:"entity_id"`
	EntityType int64 `json:"entity_type"`
}

func (q *Queries) GetNumberOfEntityIdGlobalMedia(ctx context.Context, arg GetNumberOfEntityIdGlobalMediaParams) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfEntityIdGlobalMedia, arg.EntityID, arg.EntityType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSumOfGlobalMediaByEntity = `-- name: GetSumOfGlobalMediaByEntity :one
SELECT
	COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
FROM
    global_media
WHERE entity_type_id = $1 and entity_id = $2
`

type GetSumOfGlobalMediaByEntityParams struct {
	EntityTypeID int64 `json:"entity_type_id"`
	EntityID     int64 `json:"entity_id"`
}

func (q *Queries) GetSumOfGlobalMediaByEntity(ctx context.Context, arg GetSumOfGlobalMediaByEntityParams) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfGlobalMediaByEntity, arg.EntityTypeID, arg.EntityID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const updateGlobalMedia = `-- name: UpdateGlobalMedia :one
Update global_media 
SET 
	file_urls=$1, 
	updated_at=$2 
WHERE 
	entity_type_id=$3 AND entity_id=$4 AND media_type=$5 AND gallery_type=$6
RETURNING id, file_urls, gallery_type, media_type, entity_id, entity_type_id, created_at, updated_at, gallery_type_ar
`

type UpdateGlobalMediaParams struct {
	FileUrls     []string  `json:"file_urls"`
	UpdatedAt    time.Time `json:"updated_at"`
	EntityTypeID int64     `json:"entity_type_id"`
	EntityID     int64     `json:"entity_id"`
	MediaType    int64     `json:"media_type"`
	GalleryType  string    `json:"gallery_type"`
}

func (q *Queries) UpdateGlobalMedia(ctx context.Context, arg UpdateGlobalMediaParams) (GlobalMedium, error) {
	row := q.db.QueryRow(ctx, updateGlobalMedia,
		arg.FileUrls,
		arg.UpdatedAt,
		arg.EntityTypeID,
		arg.EntityID,
		arg.MediaType,
		arg.GalleryType,
	)
	var i GlobalMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GalleryTypeAr,
	)
	return i, err
}
