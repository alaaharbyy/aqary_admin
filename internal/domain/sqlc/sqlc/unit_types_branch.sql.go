// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_types_branch.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUnitBranchType = `-- name: CreateUnitBranchType :one
INSERT INTO unit_types_branch (
 description,
 image_url,
 min_area,
 max_area,
 min_price,
 max_price,
 parking,
 balcony,
 properties_id,
 property,
 property_types_id,
 created_at,
 updated_at,
 title,
 bedrooms,
 description_ar,
 status,
 ref_no
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
) RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no
`

type CreateUnitBranchTypeParams struct {
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	RefNo           string      `json:"ref_no"`
}

func (q *Queries) CreateUnitBranchType(ctx context.Context, arg CreateUnitBranchTypeParams) (UnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, createUnitBranchType,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
		arg.DescriptionAr,
		arg.Status,
		arg.RefNo,
	)
	var i UnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}

const deleteUnitBranchType = `-- name: DeleteUnitBranchType :exec
DELETE FROM unit_types_branch
Where id = $1
`

func (q *Queries) DeleteUnitBranchType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUnitBranchType, id)
	return err
}

const getAllUnitBranchType = `-- name: GetAllUnitBranchType :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_types_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllUnitBranchTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUnitBranchType(ctx context.Context, arg GetAllUnitBranchTypeParams) ([]UnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllUnitBranchType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypesBranch
	for rows.Next() {
		var i UnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitBranchTypeByPropertyId = `-- name: GetAllUnitBranchTypeByPropertyId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_types_branch 
WHERE property = $1 AND properties_id = $2
`

type GetAllUnitBranchTypeByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllUnitBranchTypeByPropertyId(ctx context.Context, arg GetAllUnitBranchTypeByPropertyIdParams) ([]UnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllUnitBranchTypeByPropertyId, arg.Property, arg.PropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypesBranch
	for rows.Next() {
		var i UnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitBranchTypeByPropertyIdWithPagination = `-- name: GetAllUnitBranchTypeByPropertyIdWithPagination :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_types_branch 
WHERE property = $3 AND properties_id = $4  LIMIT $1 OFFSET $2
`

type GetAllUnitBranchTypeByPropertyIdWithPaginationParams struct {
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllUnitBranchTypeByPropertyIdWithPagination(ctx context.Context, arg GetAllUnitBranchTypeByPropertyIdWithPaginationParams) ([]UnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllUnitBranchTypeByPropertyIdWithPagination,
		arg.Limit,
		arg.Offset,
		arg.Property,
		arg.PropertiesID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypesBranch
	for rows.Next() {
		var i UnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeBranchByPropertyIdAndBedroom = `-- name: GetAllUnitTypeBranchByPropertyIdAndBedroom :many
SELECT unit_types_branch.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, unit_types_branch.created_at, unit_types_branch.updated_at, title, bedrooms, description_ar, unit_types_branch.status, ref_no, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, property_types.status, unit_types, icon FROM unit_types_branch 
INNER JOIN property_types On unit_types_branch.property_types_id = property_types.id
WHERE property = $1 AND properties_id = $2 AND property_types.id = $3 AND CASE WHEN bedrooms IS NULL THEN TRUE ELSE bedrooms ILIKE $4 END
`

type GetAllUnitTypeBranchByPropertyIdAndBedroomParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	ID           int64       `json:"id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
}

type GetAllUnitTypeBranchByPropertyIdAndBedroomRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	DescriptionAr       pgtype.Text `json:"description_ar"`
	Status              int64       `json:"status"`
	RefNo               string      `json:"ref_no"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status_2            int64       `json:"status_2"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllUnitTypeBranchByPropertyIdAndBedroom(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomParams) ([]GetAllUnitTypeBranchByPropertyIdAndBedroomRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeBranchByPropertyIdAndBedroom,
		arg.Property,
		arg.PropertiesID,
		arg.ID,
		arg.Bedrooms,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypeBranchByPropertyIdAndBedroomRow
	for rows.Next() {
		var i GetAllUnitTypeBranchByPropertyIdAndBedroomRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status_2,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeBranchByPropertyIdAndBedroomAndUnitId = `-- name: GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_types_branch
WHERE property = $1 AND properties_id = $2 AND  bedrooms  ILIKE  $3 AND unit_types_branch.id = $4
`

type GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitIdParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

func (q *Queries) GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitId(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitIdParams) ([]UnitTypesBranch, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeBranchByPropertyIdAndBedroomAndUnitId,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypesBranch
	for rows.Next() {
		var i UnitTypesBranch
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountUnitBranchTypeByPropertyIdWithPagination = `-- name: GetCountUnitBranchTypeByPropertyIdWithPagination :one
SELECT Count(*) FROM unit_types_branch 
WHERE property = $1 AND properties_id = $2
`

type GetCountUnitBranchTypeByPropertyIdWithPaginationParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetCountUnitBranchTypeByPropertyIdWithPagination(ctx context.Context, arg GetCountUnitBranchTypeByPropertyIdWithPaginationParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountUnitBranchTypeByPropertyIdWithPagination, arg.Property, arg.PropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnitBranchType = `-- name: GetUnitBranchType :one
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_types_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetUnitBranchType(ctx context.Context, limit int32) (UnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, getUnitBranchType, limit)
	var i UnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}

const updateUnitBranchType = `-- name: UpdateUnitBranchType :one
UPDATE unit_types_branch
SET   
  description = $2,
 image_url = $3,
 min_area = $4,
 max_area = $5,
 min_price = $6,
 max_price = $7,
 parking = $8,
 balcony = $9,
 properties_id  = $10,
 property = $11,
 property_types_id = $12,
 created_at= $13,
 updated_at = $14,
 title = $15,
 bedrooms = $16,
 description_ar = $17,
  status = $18,
  ref_no = $19
Where id = $1
RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no
`

type UpdateUnitBranchTypeParams struct {
	ID              int64       `json:"id"`
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	RefNo           string      `json:"ref_no"`
}

func (q *Queries) UpdateUnitBranchType(ctx context.Context, arg UpdateUnitBranchTypeParams) (UnitTypesBranch, error) {
	row := q.db.QueryRow(ctx, updateUnitBranchType,
		arg.ID,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
		arg.DescriptionAr,
		arg.Status,
		arg.RefNo,
	)
	var i UnitTypesBranch
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}
