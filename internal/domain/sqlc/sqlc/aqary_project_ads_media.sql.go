// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_project_ads_media.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const aqaryProjectAdsMediaDeleteStatusUpdate = `-- name: AqaryProjectAdsMediaDeleteStatusUpdate :one
UPDATE aqary_project_ads_media SET is_deleted = $2 WHERE id = $1 RETURNING id, aqary_project_ads, media_type, media_url, upload_date, is_deleted
`

type AqaryProjectAdsMediaDeleteStatusUpdateParams struct {
	ID        int64       `json:"id"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) AqaryProjectAdsMediaDeleteStatusUpdate(ctx context.Context, arg AqaryProjectAdsMediaDeleteStatusUpdateParams) (AqaryProjectAdsMedium, error) {
	row := q.db.QueryRow(ctx, aqaryProjectAdsMediaDeleteStatusUpdate, arg.ID, arg.IsDeleted)
	var i AqaryProjectAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryProjectAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const createAqaryProjectAdsMedia = `-- name: CreateAqaryProjectAdsMedia :one
INSERT INTO aqary_project_ads_media (aqary_project_ads,media_type,media_url,is_deleted)
VALUES ($1,$2,$3,false) RETURNING id, aqary_project_ads, media_type, media_url, upload_date, is_deleted
`

type CreateAqaryProjectAdsMediaParams struct {
	AqaryProjectAds int64  `json:"aqary_project_ads"`
	MediaType       int64  `json:"media_type"`
	MediaUrl        string `json:"media_url"`
}

func (q *Queries) CreateAqaryProjectAdsMedia(ctx context.Context, arg CreateAqaryProjectAdsMediaParams) (AqaryProjectAdsMedium, error) {
	row := q.db.QueryRow(ctx, createAqaryProjectAdsMedia, arg.AqaryProjectAds, arg.MediaType, arg.MediaUrl)
	var i AqaryProjectAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryProjectAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const deleteAqaryProjectAdsMedia = `-- name: DeleteAqaryProjectAdsMedia :one
DELETE FROM aqary_project_ads_media WHERE id = $1 RETURNING id, aqary_project_ads, media_type, media_url, upload_date, is_deleted
`

func (q *Queries) DeleteAqaryProjectAdsMedia(ctx context.Context, id int64) (AqaryProjectAdsMedium, error) {
	row := q.db.QueryRow(ctx, deleteAqaryProjectAdsMedia, id)
	var i AqaryProjectAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryProjectAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const deleteAqaryProjectAdsMediaByPostID = `-- name: DeleteAqaryProjectAdsMediaByPostID :many
DELETE FROM aqary_project_ads_media WHERE aqary_project_ads = $1 RETURNING id, aqary_project_ads, media_type, media_url, upload_date, is_deleted
`

func (q *Queries) DeleteAqaryProjectAdsMediaByPostID(ctx context.Context, aqaryProjectAds int64) ([]AqaryProjectAdsMedium, error) {
	rows, err := q.db.Query(ctx, deleteAqaryProjectAdsMediaByPostID, aqaryProjectAds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryProjectAdsMedium
	for rows.Next() {
		var i AqaryProjectAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryProjectAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAqaryProjectAdsMedia = `-- name: GetAllAqaryProjectAdsMedia :many
SELECT id, aqary_project_ads, media_type, media_url, upload_date, is_deleted FROM aqary_project_ads_media WHERE is_deleted = $3 LIMIT $1 OFFSET $2
`

type GetAllAqaryProjectAdsMediaParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAllAqaryProjectAdsMedia(ctx context.Context, arg GetAllAqaryProjectAdsMediaParams) ([]AqaryProjectAdsMedium, error) {
	rows, err := q.db.Query(ctx, getAllAqaryProjectAdsMedia, arg.Limit, arg.Offset, arg.IsDeleted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryProjectAdsMedium
	for rows.Next() {
		var i AqaryProjectAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryProjectAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryProjectAdsMediaByAd = `-- name: GetAqaryProjectAdsMediaByAd :many
SELECT id, aqary_project_ads, media_type, media_url, upload_date, is_deleted FROM aqary_project_ads_media WHERE aqary_project_ads = $3 AND is_deleted = $4 LIMIT $1 OFFSET $2
`

type GetAqaryProjectAdsMediaByAdParams struct {
	Limit           int32       `json:"limit"`
	Offset          int32       `json:"offset"`
	AqaryProjectAds int64       `json:"aqary_project_ads"`
	IsDeleted       pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAqaryProjectAdsMediaByAd(ctx context.Context, arg GetAqaryProjectAdsMediaByAdParams) ([]AqaryProjectAdsMedium, error) {
	rows, err := q.db.Query(ctx, getAqaryProjectAdsMediaByAd,
		arg.Limit,
		arg.Offset,
		arg.AqaryProjectAds,
		arg.IsDeleted,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryProjectAdsMedium
	for rows.Next() {
		var i AqaryProjectAdsMedium
		if err := rows.Scan(
			&i.ID,
			&i.AqaryProjectAds,
			&i.MediaType,
			&i.MediaUrl,
			&i.UploadDate,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryProjectAdsMediaByID = `-- name: GetAqaryProjectAdsMediaByID :one
SELECT id, aqary_project_ads, media_type, media_url, upload_date, is_deleted FROM aqary_project_ads_media WHERE id = $1 AND is_deleted = $2
`

type GetAqaryProjectAdsMediaByIDParams struct {
	ID        int64       `json:"id"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) GetAqaryProjectAdsMediaByID(ctx context.Context, arg GetAqaryProjectAdsMediaByIDParams) (AqaryProjectAdsMedium, error) {
	row := q.db.QueryRow(ctx, getAqaryProjectAdsMediaByID, arg.ID, arg.IsDeleted)
	var i AqaryProjectAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryProjectAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}

const updateAqaryProjectAdsMedia = `-- name: UpdateAqaryProjectAdsMedia :one
UPDATE aqary_project_ads_media SET aqary_project_ads = $2, media_type = $3, media_url=$4, is_deleted = $5 WHERE id = $1 RETURNING id, aqary_project_ads, media_type, media_url, upload_date, is_deleted
`

type UpdateAqaryProjectAdsMediaParams struct {
	ID              int64       `json:"id"`
	AqaryProjectAds int64       `json:"aqary_project_ads"`
	MediaType       int64       `json:"media_type"`
	MediaUrl        string      `json:"media_url"`
	IsDeleted       pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) UpdateAqaryProjectAdsMedia(ctx context.Context, arg UpdateAqaryProjectAdsMediaParams) (AqaryProjectAdsMedium, error) {
	row := q.db.QueryRow(ctx, updateAqaryProjectAdsMedia,
		arg.ID,
		arg.AqaryProjectAds,
		arg.MediaType,
		arg.MediaUrl,
		arg.IsDeleted,
	)
	var i AqaryProjectAdsMedium
	err := row.Scan(
		&i.ID,
		&i.AqaryProjectAds,
		&i.MediaType,
		&i.MediaUrl,
		&i.UploadDate,
		&i.IsDeleted,
	)
	return i, err
}
