// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: services_branch_companies_services.sql

package sqlc

import (
	"context"
	"time"
)

const createServicesCompaniesBranchesServices = `-- name: CreateServicesCompaniesBranchesServices :one
INSERT INTO services_branch_companies_services (
    service_company_branches_id,
    services_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4
) RETURNING id, service_company_branches_id, services_id, created_at, updated_at
`

type CreateServicesCompaniesBranchesServicesParams struct {
	ServiceCompanyBranchesID int64     `json:"service_company_branches_id"`
	ServicesID               int64     `json:"services_id"`
	CreatedAt                time.Time `json:"created_at"`
	UpdatedAt                time.Time `json:"updated_at"`
}

func (q *Queries) CreateServicesCompaniesBranchesServices(ctx context.Context, arg CreateServicesCompaniesBranchesServicesParams) (ServicesBranchCompaniesService, error) {
	row := q.db.QueryRow(ctx, createServicesCompaniesBranchesServices,
		arg.ServiceCompanyBranchesID,
		arg.ServicesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ServicesBranchCompaniesService
	err := row.Scan(
		&i.ID,
		&i.ServiceCompanyBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllServicesCompaniesBranchesServicesByCompanyId = `-- name: DeleteAllServicesCompaniesBranchesServicesByCompanyId :exec

DELETE FROM services_branch_companies_services
WHERE service_company_branches_id = $1
`

// -- name: GetAllMainServicesAndServicesByServicesCompanyBranchId :many
// SELECT
//
//	main_services.id AS main_services_id,
//	main_services.title AS main_services,
//	services.id AS services_id,
//	services.title AS services
//
// FROM main_services
// INNER JOIN services ON services.main_services_id = main_services.id AND (services.status != 5 AND services.status != 6)
// INNER JOIN services_branch_companies_services ON services_branch_companies_services.services_id = services.id AND services_branch_companies_services.service_company_branches_id = $1
// WHERE main_services.status != 5 AND main_services.status != 6
// ORDER BY main_services_id DESC, services_id DESC;
func (q *Queries) DeleteAllServicesCompaniesBranchesServicesByCompanyId(ctx context.Context, serviceCompanyBranchesID int64) error {
	_, err := q.db.Exec(ctx, deleteAllServicesCompaniesBranchesServicesByCompanyId, serviceCompanyBranchesID)
	return err
}

const deleteServicesCompaniesBranchesServices = `-- name: DeleteServicesCompaniesBranchesServices :exec
DELETE FROM services_branch_companies_services
Where id = $1
`

func (q *Queries) DeleteServicesCompaniesBranchesServices(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServicesCompaniesBranchesServices, id)
	return err
}

const getAllServicesCompaniesBranchesServices = `-- name: GetAllServicesCompaniesBranchesServices :many
SELECT id, service_company_branches_id, services_id, created_at, updated_at FROM services_branch_companies_services
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllServicesCompaniesBranchesServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllServicesCompaniesBranchesServices(ctx context.Context, arg GetAllServicesCompaniesBranchesServicesParams) ([]ServicesBranchCompaniesService, error) {
	rows, err := q.db.Query(ctx, getAllServicesCompaniesBranchesServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesBranchCompaniesService
	for rows.Next() {
		var i ServicesBranchCompaniesService
		if err := rows.Scan(
			&i.ID,
			&i.ServiceCompanyBranchesID,
			&i.ServicesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountServicesCompaniesBranchesServicesByServiceId = `-- name: GetCountServicesCompaniesBranchesServicesByServiceId :one
SELECT Count(*) FROM services_branch_companies_services 
WHERE $1::bigint = ANY(services_id)
`

func (q *Queries) GetCountServicesCompaniesBranchesServicesByServiceId(ctx context.Context, dollar_1 int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountServicesCompaniesBranchesServicesByServiceId, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getServicesCompaniesBranchesServices = `-- name: GetServicesCompaniesBranchesServices :one
SELECT id, service_company_branches_id, services_id, created_at, updated_at FROM services_branch_companies_services 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetServicesCompaniesBranchesServices(ctx context.Context, limit int32) (ServicesBranchCompaniesService, error) {
	row := q.db.QueryRow(ctx, getServicesCompaniesBranchesServices, limit)
	var i ServicesBranchCompaniesService
	err := row.Scan(
		&i.ID,
		&i.ServiceCompanyBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServicesCompaniesBranchesServicesByServiceCompanyBranchId = `-- name: GetServicesCompaniesBranchesServicesByServiceCompanyBranchId :one
SELECT id, service_company_branches_id, services_id, created_at, updated_at FROM services_branch_companies_services 
WHERE service_company_branches_id = $3 LIMIT $1 OFFSET $2
`

type GetServicesCompaniesBranchesServicesByServiceCompanyBranchIdParams struct {
	Limit                    int32 `json:"limit"`
	Offset                   int32 `json:"offset"`
	ServiceCompanyBranchesID int64 `json:"service_company_branches_id"`
}

func (q *Queries) GetServicesCompaniesBranchesServicesByServiceCompanyBranchId(ctx context.Context, arg GetServicesCompaniesBranchesServicesByServiceCompanyBranchIdParams) (ServicesBranchCompaniesService, error) {
	row := q.db.QueryRow(ctx, getServicesCompaniesBranchesServicesByServiceCompanyBranchId, arg.Limit, arg.Offset, arg.ServiceCompanyBranchesID)
	var i ServicesBranchCompaniesService
	err := row.Scan(
		&i.ID,
		&i.ServiceCompanyBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServicesCompaniesBranchesServicesByServiceId = `-- name: GetServicesCompaniesBranchesServicesByServiceId :many
SELECT id, service_company_branches_id, services_id, created_at, updated_at FROM services_branch_companies_services 
WHERE $3::bigint = ANY(services_id) LIMIT $1 OFFSET $2
`

type GetServicesCompaniesBranchesServicesByServiceIdParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	Column3 int64 `json:"column_3"`
}

func (q *Queries) GetServicesCompaniesBranchesServicesByServiceId(ctx context.Context, arg GetServicesCompaniesBranchesServicesByServiceIdParams) ([]ServicesBranchCompaniesService, error) {
	rows, err := q.db.Query(ctx, getServicesCompaniesBranchesServicesByServiceId, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesBranchCompaniesService
	for rows.Next() {
		var i ServicesBranchCompaniesService
		if err := rows.Scan(
			&i.ID,
			&i.ServiceCompanyBranchesID,
			&i.ServicesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServicesCompaniesBranchesServices = `-- name: UpdateServicesCompaniesBranchesServices :one
UPDATE services_branch_companies_services
SET service_company_branches_id = $2,
    services_id = $3
Where id = $1
RETURNING id, service_company_branches_id, services_id, created_at, updated_at
`

type UpdateServicesCompaniesBranchesServicesParams struct {
	ID                       int64 `json:"id"`
	ServiceCompanyBranchesID int64 `json:"service_company_branches_id"`
	ServicesID               int64 `json:"services_id"`
}

func (q *Queries) UpdateServicesCompaniesBranchesServices(ctx context.Context, arg UpdateServicesCompaniesBranchesServicesParams) (ServicesBranchCompaniesService, error) {
	row := q.db.QueryRow(ctx, updateServicesCompaniesBranchesServices, arg.ID, arg.ServiceCompanyBranchesID, arg.ServicesID)
	var i ServicesBranchCompaniesService
	err := row.Scan(
		&i.ID,
		&i.ServiceCompanyBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
