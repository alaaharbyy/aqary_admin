// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers_bank_account_details.sql

package sqlc

import (
	"context"
	"time"
)

const createFreelancersBankAccountDetail = `-- name: CreateFreelancersBankAccountDetail :one
INSERT INTO freelancers_bank_account_details (
    account_name,
    account_number,
    iban,
    countries_id,
    currency_id,
    bank_name,
    branch,
    swift_code,
    freelancers_id,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5,$6,$7,$8, $9, $10, $11
) RETURNING id, account_name, account_number, iban, countries_id, currency_id, bank_name, branch, swift_code, freelancers_id, created_at, updated_at
`

type CreateFreelancersBankAccountDetailParams struct {
	AccountName   string    `json:"account_name"`
	AccountNumber string    `json:"account_number"`
	Iban          string    `json:"iban"`
	CountriesID   int64     `json:"countries_id"`
	CurrencyID    int64     `json:"currency_id"`
	BankName      string    `json:"bank_name"`
	Branch        string    `json:"branch"`
	SwiftCode     string    `json:"swift_code"`
	FreelancersID int64     `json:"freelancers_id"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) CreateFreelancersBankAccountDetail(ctx context.Context, arg CreateFreelancersBankAccountDetailParams) (FreelancersBankAccountDetail, error) {
	row := q.db.QueryRow(ctx, createFreelancersBankAccountDetail,
		arg.AccountName,
		arg.AccountNumber,
		arg.Iban,
		arg.CountriesID,
		arg.CurrencyID,
		arg.BankName,
		arg.Branch,
		arg.SwiftCode,
		arg.FreelancersID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FreelancersBankAccountDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.Iban,
		&i.CountriesID,
		&i.CurrencyID,
		&i.BankName,
		&i.Branch,
		&i.SwiftCode,
		&i.FreelancersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFreelancersBankAccountDetail = `-- name: DeleteFreelancersBankAccountDetail :exec
DELETE FROM freelancers_bank_account_details
Where id = $1
`

func (q *Queries) DeleteFreelancersBankAccountDetail(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancersBankAccountDetail, id)
	return err
}

const getAllFreelancersBankAccountDetail = `-- name: GetAllFreelancersBankAccountDetail :many
SELECT id, account_name, account_number, iban, countries_id, currency_id, bank_name, branch, swift_code, freelancers_id, created_at, updated_at FROM freelancers_bank_account_details
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllFreelancersBankAccountDetailParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancersBankAccountDetail(ctx context.Context, arg GetAllFreelancersBankAccountDetailParams) ([]FreelancersBankAccountDetail, error) {
	rows, err := q.db.Query(ctx, getAllFreelancersBankAccountDetail, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersBankAccountDetail
	for rows.Next() {
		var i FreelancersBankAccountDetail
		if err := rows.Scan(
			&i.ID,
			&i.AccountName,
			&i.AccountNumber,
			&i.Iban,
			&i.CountriesID,
			&i.CurrencyID,
			&i.BankName,
			&i.Branch,
			&i.SwiftCode,
			&i.FreelancersID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancersBankAccountDetails = `-- name: GetFreelancersBankAccountDetails :one
SELECT id, account_name, account_number, iban, countries_id, currency_id, bank_name, branch, swift_code, freelancers_id, created_at, updated_at FROM freelancers_bank_account_details 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetFreelancersBankAccountDetails(ctx context.Context, limit int32) (FreelancersBankAccountDetail, error) {
	row := q.db.QueryRow(ctx, getFreelancersBankAccountDetails, limit)
	var i FreelancersBankAccountDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.Iban,
		&i.CountriesID,
		&i.CurrencyID,
		&i.BankName,
		&i.Branch,
		&i.SwiftCode,
		&i.FreelancersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFreelancersBankAccountDetail = `-- name: UpdateFreelancersBankAccountDetail :one
UPDATE freelancers_bank_account_details
SET  account_name = $2,
    account_number = $3,
    iban = $4,
    countries_id = $5,
    currency_id = $6,
    bank_name = $7,
    branch = $8,
    swift_code = $9,
    freelancers_id = $10,
    updated_at = $11
Where id = $1
RETURNING id, account_name, account_number, iban, countries_id, currency_id, bank_name, branch, swift_code, freelancers_id, created_at, updated_at
`

type UpdateFreelancersBankAccountDetailParams struct {
	ID            int64     `json:"id"`
	AccountName   string    `json:"account_name"`
	AccountNumber string    `json:"account_number"`
	Iban          string    `json:"iban"`
	CountriesID   int64     `json:"countries_id"`
	CurrencyID    int64     `json:"currency_id"`
	BankName      string    `json:"bank_name"`
	Branch        string    `json:"branch"`
	SwiftCode     string    `json:"swift_code"`
	FreelancersID int64     `json:"freelancers_id"`
	UpdatedAt     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateFreelancersBankAccountDetail(ctx context.Context, arg UpdateFreelancersBankAccountDetailParams) (FreelancersBankAccountDetail, error) {
	row := q.db.QueryRow(ctx, updateFreelancersBankAccountDetail,
		arg.ID,
		arg.AccountName,
		arg.AccountNumber,
		arg.Iban,
		arg.CountriesID,
		arg.CurrencyID,
		arg.BankName,
		arg.Branch,
		arg.SwiftCode,
		arg.FreelancersID,
		arg.UpdatedAt,
	)
	var i FreelancersBankAccountDetail
	err := row.Scan(
		&i.ID,
		&i.AccountName,
		&i.AccountNumber,
		&i.Iban,
		&i.CountriesID,
		&i.CurrencyID,
		&i.BankName,
		&i.Branch,
		&i.SwiftCode,
		&i.FreelancersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
