// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertiesMedia = `-- name: CreatePropertiesMedia :one
INSERT INTO properties_media (
    file_urls,
    gallery_type,
    media_type,
    properties_id,
    property,
    created_at
)VALUES (
    $1, $2, $3,$4, $5, $6
) RETURNING id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at
`

type CreatePropertiesMediaParams struct {
	FileUrls     []string  `json:"file_urls"`
	GalleryType  string    `json:"gallery_type"`
	MediaType    int64     `json:"media_type"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreatePropertiesMedia(ctx context.Context, arg CreatePropertiesMediaParams) (PropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createPropertiesMedia,
		arg.FileUrls,
		arg.GalleryType,
		arg.MediaType,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
	)
	var i PropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePropertiesMedia = `-- name: DeletePropertiesMedia :exec





 
 


DELETE FROM properties_media
WHERE id = $1
`

// -- name: GetCountAllProjectPropertyMediaByPropertyId :one
// WITH x AS(
// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND image_url IS NOT NULL
// UNION ALL
// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND image360_url IS NOT NULL
// UNION ALL
// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND video_url IS NOT NULL
// UNION ALL
// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND panaroma_url IS NOT NULL
// ) SELECT COUNT(*) FROM x;
// -- name: GetProjectPropertyMediaByProjectId :many
// SELECT * FROM project_property_media
// WHERE projects_id = $1;
// -- name: GetAllProjectPropertyMedia :many
// SELECT * FROM project_property_media
// ORDER By id
// LIMIT $1
// OFFSET $2;
// -- name: GetAllProjectPropertyMediaImages :many
// SELECT image_url FROM project_property_media
// Where projects_id = $1
// LIMIT $2
// OFFSET $3;
// -- name: UpdateProjectPropertyMedia :one
// UPDATE project_property_media
// SET    image_url = $2,
//
//	image360_url = $3,
//	video_url = $4,
//	panaroma_url = $5,
//	 main_media_section = $6,
//	 projects_id = $7,
//	project_properties_id = $8,
//	created_at = $9,
//	updated_at = $10
//
// Where id = $1
// RETURNING *;
func (q *Queries) DeletePropertiesMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertiesMedia, id)
	return err
}

const getAllProjectPropertyMediaWithPagenation = `-- name: GetAllProjectPropertyMediaWithPagenation :many

SELECT id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at,COUNT(id) OVER() AS total_count FROM  properties_media 
WHERE properties_id = $3 AND property = 1
LIMIT $1 OFFSET $2
`

type GetAllProjectPropertyMediaWithPagenationParams struct {
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
	PropertiesID int64 `json:"properties_id"`
}

type GetAllProjectPropertyMediaWithPagenationRow struct {
	ID           int64     `json:"id"`
	FileUrls     []string  `json:"file_urls"`
	GalleryType  string    `json:"gallery_type"`
	MediaType    int64     `json:"media_type"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	TotalCount   int64     `json:"total_count"`
}

// -- name: GetAllProjectPropertyMediaByPropertyId :many
// SELECT * FROM project_property_media
// WHERE project_properties_id = $2 LIMIT $1;
func (q *Queries) GetAllProjectPropertyMediaWithPagenation(ctx context.Context, arg GetAllProjectPropertyMediaWithPagenationParams) ([]GetAllProjectPropertyMediaWithPagenationRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPropertyMediaWithPagenation, arg.Limit, arg.Offset, arg.PropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPropertyMediaWithPagenationRow
	for rows.Next() {
		var i GetAllProjectPropertyMediaWithPagenationRow
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectPropertyMediaWithoutPagenation = `-- name: GetAllProjectPropertyMediaWithoutPagenation :many
SELECT id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at FROM  properties_media 
WHERE properties_id = $1 AND property = 1
`

func (q *Queries) GetAllProjectPropertyMediaWithoutPagenation(ctx context.Context, propertiesID int64) ([]PropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllProjectPropertyMediaWithoutPagenation, propertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertiesMedium
	for rows.Next() {
		var i PropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectMediaByProjPropertyAndGalleryType = `-- name: GetProjectMediaByProjPropertyAndGalleryType :many
SELECT project_media.id, file_urls, gallery_type, media_type, project_media.projects_id, project_media.phases_id, project_properties_id, project_media.created_at, project_media.updated_at, project_properties.id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, project_properties.phases_id, property_types_id, project_properties.created_at, project_properties.updated_at, project_properties.projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public FROM project_media
INNER JOIN project_properties ON project_properties.id = $1 
AND 
CASE 
	WHEN project_properties.is_multiphase IS TRUE THEN project_properties.phases_id = project_media.phases_id 
	ELSE project_properties.projects_id = project_media.projects_id 
END AND project_media.gallery_type = $2
`

type GetProjectMediaByProjPropertyAndGalleryTypeParams struct {
	ProjectPropertyID int64  `json:"project_property_id"`
	GalleryType       string `json:"gallery_type"`
}

type GetProjectMediaByProjPropertyAndGalleryTypeRow struct {
	ID                   int64       `json:"id"`
	FileUrls             []string    `json:"file_urls"`
	GalleryType          string      `json:"gallery_type"`
	MediaType            int64       `json:"media_type"`
	ProjectsID           pgtype.Int8 `json:"projects_id"`
	PhasesID             pgtype.Int8 `json:"phases_id"`
	ProjectPropertiesID  pgtype.Int8 `json:"project_properties_id"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	ID_2                 int64       `json:"id_2"`
	PropertyName         string      `json:"property_name"`
	PropertyNameArabic   string      `json:"property_name_arabic"`
	Description          string      `json:"description"`
	DescriptionArabic    string      `json:"description_arabic"`
	Status               int64       `json:"status"`
	IsVerified           pgtype.Bool `json:"is_verified"`
	PropertyRank         int64       `json:"property_rank"`
	AmenitiesID          []int64     `json:"amenities_id"`
	AddressesID          int64       `json:"addresses_id"`
	PhasesID_2           pgtype.Int8 `json:"phases_id_2"`
	PropertyTypesID      []int64     `json:"property_types_id"`
	CreatedAt_2          time.Time   `json:"created_at_2"`
	UpdatedAt_2          time.Time   `json:"updated_at_2"`
	ProjectsID_2         int64       `json:"projects_id_2"`
	IsShowOwnerInfo      pgtype.Bool `json:"is_show_owner_info"`
	Property             int64       `json:"property"`
	LiveStatus           pgtype.Bool `json:"live_status"`
	CountriesID          int64       `json:"countries_id"`
	DeveloperCompaniesID int64       `json:"developer_companies_id"`
	RefNo                string      `json:"ref_no"`
	UsersID              int64       `json:"users_id"`
	OwnerUsersID         pgtype.Int8 `json:"owner_users_id"`
	IsMultiphase         pgtype.Bool `json:"is_multiphase"`
	PropertyTitle        pgtype.Text `json:"property_title"`
	Notes                pgtype.Text `json:"notes"`
	NotesArabic          pgtype.Text `json:"notes_arabic"`
	IsNotesPublic        pgtype.Bool `json:"is_notes_public"`
}

func (q *Queries) GetProjectMediaByProjPropertyAndGalleryType(ctx context.Context, arg GetProjectMediaByProjPropertyAndGalleryTypeParams) ([]GetProjectMediaByProjPropertyAndGalleryTypeRow, error) {
	rows, err := q.db.Query(ctx, getProjectMediaByProjPropertyAndGalleryType, arg.ProjectPropertyID, arg.GalleryType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectMediaByProjPropertyAndGalleryTypeRow
	for rows.Next() {
		var i GetProjectMediaByProjPropertyAndGalleryTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID_2,
			&i.PropertyTypesID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.ProjectsID_2,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPhaseGalleryTypeByProjProperty = `-- name: GetProjectPhaseGalleryTypeByProjProperty :many
SELECT DISTINCT(gallery_type) FROM project_media
INNER JOIN project_properties ON project_properties.id = $1 
AND 
CASE 
	WHEN project_properties.is_multiphase IS TRUE THEN project_properties.phases_id = project_media.phases_id 
	ELSE project_properties.projects_id = project_media.projects_id 
END
`

func (q *Queries) GetProjectPhaseGalleryTypeByProjProperty(ctx context.Context, projectPropertyID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getProjectPhaseGalleryTypeByProjProperty, projectPropertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var gallery_type string
		if err := rows.Scan(&gallery_type); err != nil {
			return nil, err
		}
		items = append(items, gallery_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPropertiesMedia = `-- name: GetProjectPropertiesMedia :one
SELECT properties_media.id, properties_media.file_urls, properties_media.gallery_type, properties_media.media_type, properties_media.properties_id, properties_media.property, properties_media.created_at, properties_media.updated_at,project_properties.property_name 
FROM properties_media 
INNER JOIN project_properties ON project_properties.id = properties_media.properties_id AND properties_media.property = 1
WHERE properties_media.id = $1 LIMIT 1
`

type GetProjectPropertiesMediaRow struct {
	ID           int64     `json:"id"`
	FileUrls     []string  `json:"file_urls"`
	GalleryType  string    `json:"gallery_type"`
	MediaType    int64     `json:"media_type"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	PropertyName string    `json:"property_name"`
}

func (q *Queries) GetProjectPropertiesMedia(ctx context.Context, id int64) (GetProjectPropertiesMediaRow, error) {
	row := q.db.QueryRow(ctx, getProjectPropertiesMedia, id)
	var i GetProjectPropertiesMediaRow
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PropertyName,
	)
	return i, err
}

const getProjectPropertyMediaByIdAndGalleryAndMediaType = `-- name: GetProjectPropertyMediaByIdAndGalleryAndMediaType :one
SELECT id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at FROM properties_media 
WHERE properties_id = $1 AND property = 1 AND gallery_type = $2 AND media_type = $3 LIMIT 1
`

type GetProjectPropertyMediaByIdAndGalleryAndMediaTypeParams struct {
	PropertiesID int64  `json:"properties_id"`
	GalleryType  string `json:"gallery_type"`
	MediaType    int64  `json:"media_type"`
}

func (q *Queries) GetProjectPropertyMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetProjectPropertyMediaByIdAndGalleryAndMediaTypeParams) (PropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getProjectPropertyMediaByIdAndGalleryAndMediaType, arg.PropertiesID, arg.GalleryType, arg.MediaType)
	var i PropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertiesMedia = `-- name: GetPropertiesMedia :one
SELECT id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at FROM properties_media 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPropertiesMedia(ctx context.Context, id int64) (PropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getPropertiesMedia, id)
	var i PropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSumOfProjectPropertyMedia = `-- name: GetSumOfProjectPropertyMedia :one




SELECT
	COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
FROM
    properties_media
WHERE
    properties_id = $1 AND property = 1
`

// -- name: GetAllProjectPropertiesMainMediaSectionById :many
// With x As (
//
//	SELECT  main_media_section FROM project_property_media
//	WHERE project_property_media.project_properties_id = $1
//
// ) SELECT * From x;
// -- name: GetAllProjectPropertiesByMainMediaSectionAndId :one
// with x As (
//
//	SELECT * FROM project_property_media
//	WHERE main_media_section = $2 AND project_properties_id = $1
//
// ) SELECT * From x;
func (q *Queries) GetSumOfProjectPropertyMedia(ctx context.Context, propertiesID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfProjectPropertyMedia, propertiesID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const updatePropertiesMediaFiles = `-- name: UpdatePropertiesMediaFiles :one
UPDATE properties_media
SET file_urls = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, file_urls, gallery_type, media_type, properties_id, property, created_at, updated_at
`

type UpdatePropertiesMediaFilesParams struct {
	ID        int64     `json:"id"`
	FileUrls  []string  `json:"file_urls"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePropertiesMediaFiles(ctx context.Context, arg UpdatePropertiesMediaFilesParams) (PropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updatePropertiesMediaFiles, arg.ID, arg.FileUrls, arg.UpdatedAt)
	var i PropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
