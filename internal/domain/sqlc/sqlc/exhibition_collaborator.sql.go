// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition_collaborator.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExhibitionCollaborator = `-- name: CreateExhibitionCollaborator :one
INSERT INTO exhibition_collaborators (
    collaborator_type,
    exhibitions_id,
    company_name,
    company_website,
    company_logo,
    cover_image,
    booth_no,
    is_deleted,
    created_at
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9
)RETURNING id, collaborator_type, exhibitions_id, company_name, company_website, company_logo, cover_image, is_deleted, created_at, booth_no
`

type CreateExhibitionCollaboratorParams struct {
	CollaboratorType int64       `json:"collaborator_type"`
	ExhibitionsID    int64       `json:"exhibitions_id"`
	CompanyName      string      `json:"company_name"`
	CompanyWebsite   pgtype.Text `json:"company_website"`
	CompanyLogo      string      `json:"company_logo"`
	CoverImage       pgtype.Text `json:"cover_image"`
	BoothNo          pgtype.Text `json:"booth_no"`
	IsDeleted        pgtype.Bool `json:"is_deleted"`
	CreatedAt        time.Time   `json:"created_at"`
}

func (q *Queries) CreateExhibitionCollaborator(ctx context.Context, arg CreateExhibitionCollaboratorParams) (ExhibitionCollaborator, error) {
	row := q.db.QueryRow(ctx, createExhibitionCollaborator,
		arg.CollaboratorType,
		arg.ExhibitionsID,
		arg.CompanyName,
		arg.CompanyWebsite,
		arg.CompanyLogo,
		arg.CoverImage,
		arg.BoothNo,
		arg.IsDeleted,
		arg.CreatedAt,
	)
	var i ExhibitionCollaborator
	err := row.Scan(
		&i.ID,
		&i.CollaboratorType,
		&i.ExhibitionsID,
		&i.CompanyName,
		&i.CompanyWebsite,
		&i.CompanyLogo,
		&i.CoverImage,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.BoothNo,
	)
	return i, err
}

const deleteExhibitionByID = `-- name: DeleteExhibitionByID :exec
UPDATE exhibitions AS e
SET event_status = 5
WHERE e.id = $1 AND e.event_status != 5
RETURNING id
`

func (q *Queries) DeleteExhibitionByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExhibitionByID, id)
	return err
}

const deleteExhibitionCollaboratorByID = `-- name: DeleteExhibitionCollaboratorByID :exec
UPDATE  exhibition_collaborators 
SET is_deleted =true 
WHERE id=$1 AND is_deleted!=true
RETURNING id
`

func (q *Queries) DeleteExhibitionCollaboratorByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExhibitionCollaboratorByID, id)
	return err
}

const getAllExhibitionCollaborators = `-- name: GetAllExhibitionCollaborators :many
SELECT ec.id, ec.collaborator_type, ec.exhibitions_id, ec.company_name, ec.company_website, ec.company_logo, ec.cover_image, ec.is_deleted, ec.created_at, ec.booth_no
FROM exhibition_collaborators ec
INNER JOIN exhibitions
ON exhibitions.id = ec.exhibitions_id AND exhibitions.event_status !=5
WHERE is_deleted!=true AND collaborator_type = $3
ORDER BY ec.id DESC 
LIMIT $1 
OFFSET $2
`

type GetAllExhibitionCollaboratorsParams struct {
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
	CollaboratorType int64 `json:"collaborator_type"`
}

func (q *Queries) GetAllExhibitionCollaborators(ctx context.Context, arg GetAllExhibitionCollaboratorsParams) ([]ExhibitionCollaborator, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionCollaborators, arg.Limit, arg.Offset, arg.CollaboratorType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExhibitionCollaborator
	for rows.Next() {
		var i ExhibitionCollaborator
		if err := rows.Scan(
			&i.ID,
			&i.CollaboratorType,
			&i.ExhibitionsID,
			&i.CompanyName,
			&i.CompanyWebsite,
			&i.CompanyLogo,
			&i.CoverImage,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.BoothNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionCollaboratorByID = `-- name: GetExhibitionCollaboratorByID :one
SELECT exhibition_collaborators.id, exhibition_collaborators.collaborator_type, exhibition_collaborators.exhibitions_id, exhibition_collaborators.company_name, exhibition_collaborators.company_website, exhibition_collaborators.company_logo, exhibition_collaborators.cover_image, exhibition_collaborators.is_deleted, exhibition_collaborators.created_at, exhibition_collaborators.booth_no
FROM exhibition_collaborators
INNER JOIN exhibitions 
ON exhibitions.id = exhibition_collaborators.exhibitions_id AND exhibitions.event_status !=5 
WHERE exhibition_collaborators.id =$1 AND is_deleted!=true
`

func (q *Queries) GetExhibitionCollaboratorByID(ctx context.Context, id int64) (ExhibitionCollaborator, error) {
	row := q.db.QueryRow(ctx, getExhibitionCollaboratorByID, id)
	var i ExhibitionCollaborator
	err := row.Scan(
		&i.ID,
		&i.CollaboratorType,
		&i.ExhibitionsID,
		&i.CompanyName,
		&i.CompanyWebsite,
		&i.CompanyLogo,
		&i.CoverImage,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.BoothNo,
	)
	return i, err
}

const getNumberOfExhibitionCollaborators = `-- name: GetNumberOfExhibitionCollaborators :one
SELECT COUNT(exhibition_collaborators.id) 
FROM exhibition_collaborators 
INNER JOIN exhibitions 
ON exhibition_collaborators.exhibitions_id =  exhibitions.id AND exhibitions.event_status!=5
WHERE is_deleted!=true AND collaborator_type=$1
`

func (q *Queries) GetNumberOfExhibitionCollaborators(ctx context.Context, collaboratorType int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfExhibitionCollaborators, collaboratorType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateExhibitionCollaboratorByID = `-- name: UpdateExhibitionCollaboratorByID :one
UPDATE exhibition_collaborators
SET 
    collaborator_type = $2,
    exhibitions_id = $3,
    company_name = $4,
    company_website = $5,
    company_logo = $6,
    cover_image = $7,
    booth_no=$8
WHERE
    id = $1 AND is_deleted!=true 
RETURNING id, collaborator_type, exhibitions_id, company_name, company_website, company_logo, cover_image, is_deleted, created_at, booth_no
`

type UpdateExhibitionCollaboratorByIDParams struct {
	ID               int64       `json:"id"`
	CollaboratorType int64       `json:"collaborator_type"`
	ExhibitionsID    int64       `json:"exhibitions_id"`
	CompanyName      string      `json:"company_name"`
	CompanyWebsite   pgtype.Text `json:"company_website"`
	CompanyLogo      string      `json:"company_logo"`
	CoverImage       pgtype.Text `json:"cover_image"`
	BoothNo          pgtype.Text `json:"booth_no"`
}

func (q *Queries) UpdateExhibitionCollaboratorByID(ctx context.Context, arg UpdateExhibitionCollaboratorByIDParams) (ExhibitionCollaborator, error) {
	row := q.db.QueryRow(ctx, updateExhibitionCollaboratorByID,
		arg.ID,
		arg.CollaboratorType,
		arg.ExhibitionsID,
		arg.CompanyName,
		arg.CompanyWebsite,
		arg.CompanyLogo,
		arg.CoverImage,
		arg.BoothNo,
	)
	var i ExhibitionCollaborator
	err := row.Scan(
		&i.ID,
		&i.CollaboratorType,
		&i.ExhibitionsID,
		&i.CompanyName,
		&i.CompanyWebsite,
		&i.CompanyLogo,
		&i.CoverImage,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.BoothNo,
	)
	return i, err
}
