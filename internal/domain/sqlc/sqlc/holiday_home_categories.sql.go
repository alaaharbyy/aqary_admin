// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_categories.sql

package sqlc

import (
	"context"
)

const holidayHomeCategoryWithCount = `-- name: HolidayHomeCategoryWithCount :many
SELECT 
    hhc.title,
    COUNT(hh.id) AS total_holiday_homes
FROM 
    holiday_home_categories hhc
JOIN 
    holiday_home hh
ON 
    hhc.id = ANY (hh.holiday_home_categories)
GROUP BY 
    hhc.title
HAVING 
    COUNT(hh.id) > 0
ORDER BY 
    total_holiday_homes DESC
`

type HolidayHomeCategoryWithCountRow struct {
	Title             string `json:"title"`
	TotalHolidayHomes int64  `json:"total_holiday_homes"`
}

func (q *Queries) HolidayHomeCategoryWithCount(ctx context.Context) ([]HolidayHomeCategoryWithCountRow, error) {
	rows, err := q.db.Query(ctx, holidayHomeCategoryWithCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeCategoryWithCountRow
	for rows.Next() {
		var i HolidayHomeCategoryWithCountRow
		if err := rows.Scan(&i.Title, &i.TotalHolidayHomes); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
