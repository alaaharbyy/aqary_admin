// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: community_guide_subinsight.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommunityGuideSubinsight = `-- name: CreateCommunityGuideSubinsight :one
INSERT INTO community_guidelines_subinsight (
    insight_id,
    subinsight_name,
    subinsight_name_ar,
    icon,
    description_text,
    status,
    created_at,
    update_at

) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, insight_id, subinsight_name, subinsight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type CreateCommunityGuideSubinsightParams struct {
	InsightID        int64       `json:"insight_id"`
	SubinsightName   string      `json:"subinsight_name"`
	SubinsightNameAr string      `json:"subinsight_name_ar"`
	Icon             string      `json:"icon"`
	DescriptionText  pgtype.Text `json:"description_text"`
	Status           int64       `json:"status"`
	CreatedAt        time.Time   `json:"created_at"`
	UpdateAt         time.Time   `json:"update_at"`
}

func (q *Queries) CreateCommunityGuideSubinsight(ctx context.Context, arg CreateCommunityGuideSubinsightParams) (CommunityGuidelinesSubinsight, error) {
	row := q.db.QueryRow(ctx, createCommunityGuideSubinsight,
		arg.InsightID,
		arg.SubinsightName,
		arg.SubinsightNameAr,
		arg.Icon,
		arg.DescriptionText,
		arg.Status,
		arg.CreatedAt,
		arg.UpdateAt,
	)
	var i CommunityGuidelinesSubinsight
	err := row.Scan(
		&i.ID,
		&i.InsightID,
		&i.SubinsightName,
		&i.SubinsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const getCommunityGuideSubinsight = `-- name: GetCommunityGuideSubinsight :one
SELECT 
 community_guidelines_subinsight.id, community_guidelines_subinsight.insight_id, community_guidelines_subinsight.subinsight_name, community_guidelines_subinsight.subinsight_name_ar, community_guidelines_subinsight.icon, community_guidelines_subinsight.description_text, community_guidelines_subinsight.status, community_guidelines_subinsight.created_at, community_guidelines_subinsight.update_at, community_guidelines_subinsight.deleted_at
FROM community_guidelines_subinsight
WHERE id=$1
`

type GetCommunityGuideSubinsightRow struct {
	CommunityGuidelinesSubinsight CommunityGuidelinesSubinsight `json:"community_guidelines_subinsight"`
}

func (q *Queries) GetCommunityGuideSubinsight(ctx context.Context, id int64) (GetCommunityGuideSubinsightRow, error) {
	row := q.db.QueryRow(ctx, getCommunityGuideSubinsight, id)
	var i GetCommunityGuideSubinsightRow
	err := row.Scan(
		&i.CommunityGuidelinesSubinsight.ID,
		&i.CommunityGuidelinesSubinsight.InsightID,
		&i.CommunityGuidelinesSubinsight.SubinsightName,
		&i.CommunityGuidelinesSubinsight.SubinsightNameAr,
		&i.CommunityGuidelinesSubinsight.Icon,
		&i.CommunityGuidelinesSubinsight.DescriptionText,
		&i.CommunityGuidelinesSubinsight.Status,
		&i.CommunityGuidelinesSubinsight.CreatedAt,
		&i.CommunityGuidelinesSubinsight.UpdateAt,
		&i.CommunityGuidelinesSubinsight.DeletedAt,
	)
	return i, err
}

const getCommunityGuideSubinsights = `-- name: GetCommunityGuideSubinsights :many
SELECT 
 community_guidelines_subinsight.id, community_guidelines_subinsight.insight_id, community_guidelines_subinsight.subinsight_name, community_guidelines_subinsight.subinsight_name_ar, community_guidelines_subinsight.icon, community_guidelines_subinsight.description_text, community_guidelines_subinsight.status, community_guidelines_subinsight.created_at, community_guidelines_subinsight.update_at, community_guidelines_subinsight.deleted_at
FROM community_guidelines_subinsight 
JOIN community_guidelines_insight ON community_guidelines_insight.id=community_guidelines_subinsight.insight_id
WHERE community_guidelines_insight.id= any($1::bigint[])  and community_guidelines_insight.status not in (5,6) 
and community_guidelines_subinsight.status not in (5,6)
LIMIT $3
OFFSET $2
`

type GetCommunityGuideSubinsightsParams struct {
	InsightIds []int64     `json:"insight_ids"`
	Offset     pgtype.Int4 `json:"offset"`
	Limit      pgtype.Int4 `json:"limit"`
}

type GetCommunityGuideSubinsightsRow struct {
	CommunityGuidelinesSubinsight CommunityGuidelinesSubinsight `json:"community_guidelines_subinsight"`
}

func (q *Queries) GetCommunityGuideSubinsights(ctx context.Context, arg GetCommunityGuideSubinsightsParams) ([]GetCommunityGuideSubinsightsRow, error) {
	rows, err := q.db.Query(ctx, getCommunityGuideSubinsights, arg.InsightIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommunityGuideSubinsightsRow
	for rows.Next() {
		var i GetCommunityGuideSubinsightsRow
		if err := rows.Scan(
			&i.CommunityGuidelinesSubinsight.ID,
			&i.CommunityGuidelinesSubinsight.InsightID,
			&i.CommunityGuidelinesSubinsight.SubinsightName,
			&i.CommunityGuidelinesSubinsight.SubinsightNameAr,
			&i.CommunityGuidelinesSubinsight.Icon,
			&i.CommunityGuidelinesSubinsight.DescriptionText,
			&i.CommunityGuidelinesSubinsight.Status,
			&i.CommunityGuidelinesSubinsight.CreatedAt,
			&i.CommunityGuidelinesSubinsight.UpdateAt,
			&i.CommunityGuidelinesSubinsight.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommunityGuideSubinsightsCount = `-- name: GetCommunityGuideSubinsightsCount :one
SELECT 
 count(community_guidelines_subinsight)
FROM community_guidelines_subinsight 
JOIN community_guidelines_insight ON community_guidelines_insight.id=community_guidelines_subinsight.insight_id
WHERE community_guidelines_insight.id= any($1::bigint[])   and community_guidelines_insight.status not in (5,6) 
and community_guidelines_subinsight.status not in (5,6)
`

func (q *Queries) GetCommunityGuideSubinsightsCount(ctx context.Context, insightIds []int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCommunityGuideSubinsightsCount, insightIds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeletedCommunityGuideSubinsights = `-- name: GetDeletedCommunityGuideSubinsights :many
SELECT 
 community_guidelines_subinsight.id, community_guidelines_subinsight.insight_id, community_guidelines_subinsight.subinsight_name, community_guidelines_subinsight.subinsight_name_ar, community_guidelines_subinsight.icon, community_guidelines_subinsight.description_text, community_guidelines_subinsight.status, community_guidelines_subinsight.created_at, community_guidelines_subinsight.update_at, community_guidelines_subinsight.deleted_at
FROM community_guidelines_subinsight  
JOIN community_guidelines_insight ON community_guidelines_insight.id=community_guidelines_subinsight.insight_id
WHERE community_guidelines_insight.id= any($1::bigint[]) 
AND community_guidelines_subinsight.status=6
LIMIT $3
OFFSET $2
`

type GetDeletedCommunityGuideSubinsightsParams struct {
	InsightIds []int64     `json:"insight_ids"`
	Offset     pgtype.Int4 `json:"offset"`
	Limit      pgtype.Int4 `json:"limit"`
}

type GetDeletedCommunityGuideSubinsightsRow struct {
	CommunityGuidelinesSubinsight CommunityGuidelinesSubinsight `json:"community_guidelines_subinsight"`
}

func (q *Queries) GetDeletedCommunityGuideSubinsights(ctx context.Context, arg GetDeletedCommunityGuideSubinsightsParams) ([]GetDeletedCommunityGuideSubinsightsRow, error) {
	rows, err := q.db.Query(ctx, getDeletedCommunityGuideSubinsights, arg.InsightIds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeletedCommunityGuideSubinsightsRow
	for rows.Next() {
		var i GetDeletedCommunityGuideSubinsightsRow
		if err := rows.Scan(
			&i.CommunityGuidelinesSubinsight.ID,
			&i.CommunityGuidelinesSubinsight.InsightID,
			&i.CommunityGuidelinesSubinsight.SubinsightName,
			&i.CommunityGuidelinesSubinsight.SubinsightNameAr,
			&i.CommunityGuidelinesSubinsight.Icon,
			&i.CommunityGuidelinesSubinsight.DescriptionText,
			&i.CommunityGuidelinesSubinsight.Status,
			&i.CommunityGuidelinesSubinsight.CreatedAt,
			&i.CommunityGuidelinesSubinsight.UpdateAt,
			&i.CommunityGuidelinesSubinsight.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeletedCommunityGuideSubinsightsCount = `-- name: GetDeletedCommunityGuideSubinsightsCount :one
SELECT 
 count(community_guidelines_subinsight) 
FROM community_guidelines_subinsight  
JOIN community_guidelines_insight ON community_guidelines_insight.id=community_guidelines_subinsight.insight_id
WHERE community_guidelines_insight.id= any($1::bigint[]) 
AND community_guidelines_subinsight.status=6
`

func (q *Queries) GetDeletedCommunityGuideSubinsightsCount(ctx context.Context, insightIds []int64) (int64, error) {
	row := q.db.QueryRow(ctx, getDeletedCommunityGuideSubinsightsCount, insightIds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCommunityGuideSubinsight = `-- name: UpdateCommunityGuideSubinsight :one
UPDATE community_guidelines_subinsight
SET 
  subinsight_name=$1,
  subinsight_name_ar=$2,
  icon=$3,
  description_text=$4,
  update_at=$5
WHERE id=$6
RETURNING id, insight_id, subinsight_name, subinsight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type UpdateCommunityGuideSubinsightParams struct {
	SubinsightName   string      `json:"subinsight_name"`
	SubinsightNameAr string      `json:"subinsight_name_ar"`
	Icon             string      `json:"icon"`
	DescriptionText  pgtype.Text `json:"description_text"`
	UpdateAt         time.Time   `json:"update_at"`
	ID               int64       `json:"id"`
}

func (q *Queries) UpdateCommunityGuideSubinsight(ctx context.Context, arg UpdateCommunityGuideSubinsightParams) (CommunityGuidelinesSubinsight, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuideSubinsight,
		arg.SubinsightName,
		arg.SubinsightNameAr,
		arg.Icon,
		arg.DescriptionText,
		arg.UpdateAt,
		arg.ID,
	)
	var i CommunityGuidelinesSubinsight
	err := row.Scan(
		&i.ID,
		&i.InsightID,
		&i.SubinsightName,
		&i.SubinsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateCommunityGuideSubinsightStatus = `-- name: UpdateCommunityGuideSubinsightStatus :one
UPDATE community_guidelines_subinsight
SET 
    status=$1,
    update_at=$2,
    deleted_at=$3
WHERE id=$4
RETURNING id, insight_id, subinsight_name, subinsight_name_ar, icon, description_text, status, created_at, update_at, deleted_at
`

type UpdateCommunityGuideSubinsightStatusParams struct {
	Status    int64              `json:"status"`
	UpdateAt  time.Time          `json:"update_at"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateCommunityGuideSubinsightStatus(ctx context.Context, arg UpdateCommunityGuideSubinsightStatusParams) (CommunityGuidelinesSubinsight, error) {
	row := q.db.QueryRow(ctx, updateCommunityGuideSubinsightStatus,
		arg.Status,
		arg.UpdateAt,
		arg.DeletedAt,
		arg.ID,
	)
	var i CommunityGuidelinesSubinsight
	err := row.Scan(
		&i.ID,
		&i.InsightID,
		&i.SubinsightName,
		&i.SubinsightNameAr,
		&i.Icon,
		&i.DescriptionText,
		&i.Status,
		&i.CreatedAt,
		&i.UpdateAt,
		&i.DeletedAt,
	)
	return i, err
}
