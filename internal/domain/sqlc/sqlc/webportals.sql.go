// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: webportals.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const countAllWebportal = `-- name: CountAllWebportal :one
SELECT Count(*) FROM webportals
Where  created_by =  $1
`

func (q *Queries) CountAllWebportal(ctx context.Context, createdBy int64) (int64, error) {
	row := q.db.QueryRow(ctx, countAllWebportal, createdBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWebportal = `-- name: CreateWebportal :one
INSERT INTO webportals (
    portal_name, contact_person, portal_url, portal_subscription, publish_status,
    description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_by
)
VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by
`

type CreateWebportalParams struct {
	PortalName         string      `json:"portal_name"`
	ContactPerson      string      `json:"contact_person"`
	PortalUrl          string      `json:"portal_url"`
	PortalSubscription int64       `json:"portal_subscription"`
	PublishStatus      string      `json:"publish_status"`
	Description        string      `json:"description"`
	IsFavorite         pgtype.Bool `json:"is_favorite"`
	XmlStructure       int64       `json:"xml_structure"`
	XmlFileUrl         string      `json:"xml_file_url"`
	PortalLogoUrl      string      `json:"portal_logo_url"`
	CreatedBy          int64       `json:"created_by"`
}

// Create a new webportal
func (q *Queries) CreateWebportal(ctx context.Context, arg CreateWebportalParams) (Webportal, error) {
	row := q.db.QueryRow(ctx, createWebportal,
		arg.PortalName,
		arg.ContactPerson,
		arg.PortalUrl,
		arg.PortalSubscription,
		arg.PublishStatus,
		arg.Description,
		arg.IsFavorite,
		arg.XmlStructure,
		arg.XmlFileUrl,
		arg.PortalLogoUrl,
		arg.CreatedBy,
	)
	var i Webportal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.ContactPerson,
		&i.PortalUrl,
		&i.PortalSubscription,
		&i.PublishStatus,
		&i.Description,
		&i.IsFavorite,
		&i.XmlStructure,
		&i.XmlFileUrl,
		&i.PortalLogoUrl,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const deleteWebportal = `-- name: DeleteWebportal :exec
DELETE FROM webportals
WHERE id = $1
`

// Delete a webportal
func (q *Queries) DeleteWebportal(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWebportal, id)
	return err
}

const getAllWebportal = `-- name: GetAllWebportal :many
WITH total_count_cte AS (
    SELECT COUNT(*) AS total_count
    FROM "webportals"
)
SELECT id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by,
      (SELECT total_count FROM total_count_cte) AS total_count
FROM webportals
ORDER BY created_at DESC LIMIT COALESCE(NULLIF($1, 0), NULL) OFFSET COALESCE(NULLIF($2, 0), 0)
`

type GetAllWebportalParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

type GetAllWebportalRow struct {
	ID                 int64       `json:"id"`
	PortalName         string      `json:"portal_name"`
	ContactPerson      string      `json:"contact_person"`
	PortalUrl          string      `json:"portal_url"`
	PortalSubscription int64       `json:"portal_subscription"`
	PublishStatus      string      `json:"publish_status"`
	Description        string      `json:"description"`
	IsFavorite         pgtype.Bool `json:"is_favorite"`
	XmlStructure       int64       `json:"xml_structure"`
	XmlFileUrl         string      `json:"xml_file_url"`
	PortalLogoUrl      string      `json:"portal_logo_url"`
	CreatedAt          time.Time   `json:"created_at"`
	CreatedBy          int64       `json:"created_by"`
	TotalCount         int64       `json:"total_count"`
}

// Where  created_by =  $3
func (q *Queries) GetAllWebportal(ctx context.Context, arg GetAllWebportalParams) ([]GetAllWebportalRow, error) {
	rows, err := q.db.Query(ctx, getAllWebportal, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWebportalRow
	for rows.Next() {
		var i GetAllWebportalRow
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.ContactPerson,
			&i.PortalUrl,
			&i.PortalSubscription,
			&i.PublishStatus,
			&i.Description,
			&i.IsFavorite,
			&i.XmlStructure,
			&i.XmlFileUrl,
			&i.PortalLogoUrl,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWebportalWithoutPagination = `-- name: GetAllWebportalWithoutPagination :many
SELECT id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by FROM webportals
Where  created_by =  $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllWebportalWithoutPagination(ctx context.Context, createdBy int64) ([]Webportal, error) {
	rows, err := q.db.Query(ctx, getAllWebportalWithoutPagination, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Webportal
	for rows.Next() {
		var i Webportal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.ContactPerson,
			&i.PortalUrl,
			&i.PortalSubscription,
			&i.PublishStatus,
			&i.Description,
			&i.IsFavorite,
			&i.XmlStructure,
			&i.XmlFileUrl,
			&i.PortalLogoUrl,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWebportals = `-- name: GetAllWebportals :many
SELECT id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by FROM webportals ORDER BY created_at DESC
`

func (q *Queries) GetAllWebportals(ctx context.Context) ([]Webportal, error) {
	rows, err := q.db.Query(ctx, getAllWebportals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Webportal
	for rows.Next() {
		var i Webportal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.ContactPerson,
			&i.PortalUrl,
			&i.PortalSubscription,
			&i.PublishStatus,
			&i.Description,
			&i.IsFavorite,
			&i.XmlStructure,
			&i.XmlFileUrl,
			&i.PortalLogoUrl,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWebportalsForPublishWebportalByIds = `-- name: GetAllWebportalsForPublishWebportalByIds :many
SELECT id,portal_name,portal_logo_url FROM webportals
WHERE id = ANY($1::bigint[])
ORDER BY ARRAY_POSITION($1::bigint[], id)
`

type GetAllWebportalsForPublishWebportalByIdsRow struct {
	ID            int64  `json:"id"`
	PortalName    string `json:"portal_name"`
	PortalLogoUrl string `json:"portal_logo_url"`
}

func (q *Queries) GetAllWebportalsForPublishWebportalByIds(ctx context.Context, dollar_1 []int64) ([]GetAllWebportalsForPublishWebportalByIdsRow, error) {
	rows, err := q.db.Query(ctx, getAllWebportalsForPublishWebportalByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllWebportalsForPublishWebportalByIdsRow
	for rows.Next() {
		var i GetAllWebportalsForPublishWebportalByIdsRow
		if err := rows.Scan(&i.ID, &i.PortalName, &i.PortalLogoUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebportalByID = `-- name: GetWebportalByID :one
SELECT id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by FROM webportals
WHERE id = $1
`

// Get a webportal by ID
func (q *Queries) GetWebportalByID(ctx context.Context, id int64) (Webportal, error) {
	row := q.db.QueryRow(ctx, getWebportalByID, id)
	var i Webportal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.ContactPerson,
		&i.PortalUrl,
		&i.PortalSubscription,
		&i.PublishStatus,
		&i.Description,
		&i.IsFavorite,
		&i.XmlStructure,
		&i.XmlFileUrl,
		&i.PortalLogoUrl,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const updateWebportal = `-- name: UpdateWebportal :one
UPDATE webportals
SET portal_name = $2, contact_person = $3, portal_url = $4, portal_subscription = $5,
    publish_status = $6, description = $7, is_favorite = $8, xml_structure = $9,
    xml_file_url = $10, portal_logo_url = $11
WHERE id = $1
RETURNING id, portal_name, contact_person, portal_url, portal_subscription, publish_status, description, is_favorite, xml_structure, xml_file_url, portal_logo_url, created_at, created_by
`

type UpdateWebportalParams struct {
	ID                 int64       `json:"id"`
	PortalName         string      `json:"portal_name"`
	ContactPerson      string      `json:"contact_person"`
	PortalUrl          string      `json:"portal_url"`
	PortalSubscription int64       `json:"portal_subscription"`
	PublishStatus      string      `json:"publish_status"`
	Description        string      `json:"description"`
	IsFavorite         pgtype.Bool `json:"is_favorite"`
	XmlStructure       int64       `json:"xml_structure"`
	XmlFileUrl         string      `json:"xml_file_url"`
	PortalLogoUrl      string      `json:"portal_logo_url"`
}

// Update a webportal
func (q *Queries) UpdateWebportal(ctx context.Context, arg UpdateWebportalParams) (Webportal, error) {
	row := q.db.QueryRow(ctx, updateWebportal,
		arg.ID,
		arg.PortalName,
		arg.ContactPerson,
		arg.PortalUrl,
		arg.PortalSubscription,
		arg.PublishStatus,
		arg.Description,
		arg.IsFavorite,
		arg.XmlStructure,
		arg.XmlFileUrl,
		arg.PortalLogoUrl,
	)
	var i Webportal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.ContactPerson,
		&i.PortalUrl,
		&i.PortalSubscription,
		&i.PublishStatus,
		&i.Description,
		&i.IsFavorite,
		&i.XmlStructure,
		&i.XmlFileUrl,
		&i.PortalLogoUrl,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
