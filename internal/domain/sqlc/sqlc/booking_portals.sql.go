// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking_portals.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBookingPortal = `-- name: CreateBookingPortal :one
INSERT INTO booking_portals (
portal_name, 
portal_url, 
portal_logo, 
status
)
VALUES ($1, $2, $3, $4) RETURNING id, portal_name, portal_url, portal_logo, created_at, updated_at, status
`

type CreateBookingPortalParams struct {
	PortalName string `json:"portal_name"`
	PortalUrl  string `json:"portal_url"`
	PortalLogo string `json:"portal_logo"`
	Status     int64  `json:"status"`
}

func (q *Queries) CreateBookingPortal(ctx context.Context, arg CreateBookingPortalParams) (BookingPortal, error) {
	row := q.db.QueryRow(ctx, createBookingPortal,
		arg.PortalName,
		arg.PortalUrl,
		arg.PortalLogo,
		arg.Status,
	)
	var i BookingPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const deleteBookingPortal = `-- name: DeleteBookingPortal :exec
DELETE From booking_portals WHERE id = $1
`

func (q *Queries) DeleteBookingPortal(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBookingPortal, id)
	return err
}

const getAllBookingPortal = `-- name: GetAllBookingPortal :many
SELECT id, portal_name, portal_url, portal_logo, created_at, updated_at, status From booking_portals  WHERE status != 6 ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllBookingPortalParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBookingPortal(ctx context.Context, arg GetAllBookingPortalParams) ([]BookingPortal, error) {
	rows, err := q.db.Query(ctx, getAllBookingPortal, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingPortal
	for rows.Next() {
		var i BookingPortal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBookingPortalWithoutPg = `-- name: GetAllBookingPortalWithoutPg :many
SELECT id, portal_name, portal_url, portal_logo, created_at, updated_at, status From booking_portals WHERE status != 6  Order by Id DESC
`

func (q *Queries) GetAllBookingPortalWithoutPg(ctx context.Context) ([]BookingPortal, error) {
	rows, err := q.db.Query(ctx, getAllBookingPortalWithoutPg)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingPortal
	for rows.Next() {
		var i BookingPortal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookingPortal = `-- name: GetBookingPortal :one
SELECT id, portal_name, portal_url, portal_logo, created_at, updated_at, status From booking_portals WHERE id = $1 and status != 6
`

func (q *Queries) GetBookingPortal(ctx context.Context, id int64) (BookingPortal, error) {
	row := q.db.QueryRow(ctx, getBookingPortal, id)
	var i BookingPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getBookingPortalByID = `-- name: GetBookingPortalByID :one
SELECT id, portal_name, portal_url, portal_logo, created_at, updated_at, status FROM booking_portals WHERE id = $1 and status != 6
`

func (q *Queries) GetBookingPortalByID(ctx context.Context, id int64) (BookingPortal, error) {
	row := q.db.QueryRow(ctx, getBookingPortalByID, id)
	var i BookingPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getBookingPortalsbByName = `-- name: GetBookingPortalsbByName :many
select id, portal_name, portal_url, portal_logo, created_at, updated_at, status from booking_portals where portal_name ILIKE $1 OR portal_url ILIKE $2
`

type GetBookingPortalsbByNameParams struct {
	PortalName string `json:"portal_name"`
	PortalUrl  string `json:"portal_url"`
}

func (q *Queries) GetBookingPortalsbByName(ctx context.Context, arg GetBookingPortalsbByNameParams) ([]BookingPortal, error) {
	rows, err := q.db.Query(ctx, getBookingPortalsbByName, arg.PortalName, arg.PortalUrl)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingPortal
	for rows.Next() {
		var i BookingPortal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountBookingPortal = `-- name: GetCountBookingPortal :many
SELECT count(*) From booking_portals WHERE status != 6
`

func (q *Queries) GetCountBookingPortal(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCountBookingPortal)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookingPortal = `-- name: UpdateBookingPortal :one
UPDATE booking_portals 
SET
portal_name = $1, 
portal_url = $2, 
portal_logo = $3,
updated_at = $4,
status = $5
WHERE id = $6 RETURNING id, portal_name, portal_url, portal_logo, created_at, updated_at, status
`

type UpdateBookingPortalParams struct {
	PortalName string             `json:"portal_name"`
	PortalUrl  string             `json:"portal_url"`
	PortalLogo string             `json:"portal_logo"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	Status     int64              `json:"status"`
	ID         int64              `json:"id"`
}

func (q *Queries) UpdateBookingPortal(ctx context.Context, arg UpdateBookingPortalParams) (BookingPortal, error) {
	row := q.db.QueryRow(ctx, updateBookingPortal,
		arg.PortalName,
		arg.PortalUrl,
		arg.PortalLogo,
		arg.UpdatedAt,
		arg.Status,
		arg.ID,
	)
	var i BookingPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateBookingPortalStatus = `-- name: UpdateBookingPortalStatus :one
UPDATE booking_portals 
SET
status=$2 
WHERE id =$1
RETURNING id, portal_name, portal_url, portal_logo, created_at, updated_at, status
`

type UpdateBookingPortalStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBookingPortalStatus(ctx context.Context, arg UpdateBookingPortalStatusParams) (BookingPortal, error) {
	row := q.db.QueryRow(ctx, updateBookingPortalStatus, arg.ID, arg.Status)
	var i BookingPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
