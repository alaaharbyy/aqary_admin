// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
   users_id,
   refresh_token,
   is_blocked,
   expired_at,
   created_at,
   updated_at
)VALUES (
    $1, $2, $3,$4, $5, $6
) RETURNING id, users_id, refresh_token, is_blocked, expired_at, created_at, updated_at
`

type CreateSessionParams struct {
	UsersID      int64       `json:"users_id"`
	RefreshToken string      `json:"refresh_token"`
	IsBlocked    pgtype.Bool `json:"is_blocked"`
	ExpiredAt    time.Time   `json:"expired_at"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UsersID,
		arg.RefreshToken,
		arg.IsBlocked,
		arg.ExpiredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
Where id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getAllSession = `-- name: GetAllSession :many
SELECT id, users_id, refresh_token, is_blocked, expired_at, created_at, updated_at FROM sessions
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllSessionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSession(ctx context.Context, arg GetAllSessionParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, getAllSession, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.RefreshToken,
			&i.IsBlocked,
			&i.ExpiredAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT id, users_id, refresh_token, is_blocked, expired_at, created_at, updated_at FROM sessions 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetSession(ctx context.Context, limit int32) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, limit)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET   users_id = $2,
   refresh_token = $3,
   is_blocked = $4,
   expired_at = $5,
   created_at = $6,
   updated_at = $7
Where id = $1
RETURNING id, users_id, refresh_token, is_blocked, expired_at, created_at, updated_at
`

type UpdateSessionParams struct {
	ID           int64       `json:"id"`
	UsersID      int64       `json:"users_id"`
	RefreshToken string      `json:"refresh_token"`
	IsBlocked    pgtype.Bool `json:"is_blocked"`
	ExpiredAt    time.Time   `json:"expired_at"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession,
		arg.ID,
		arg.UsersID,
		arg.RefreshToken,
		arg.IsBlocked,
		arg.ExpiredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
