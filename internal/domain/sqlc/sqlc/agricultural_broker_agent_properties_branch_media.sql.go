// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_broker_agent_properties_branch_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalBrokerAgentPropertyBranchMedia = `-- name: CreateAgriculturalBrokerAgentPropertyBranchMedia :one
INSERT INTO agricultural_broker_agent_properties_branch_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    agricultural_broker_agent_properties_branch_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch
`

type CreateAgriculturalBrokerAgentPropertyBranchMediaParams struct {
	ImageUrl                                  []string    `json:"image_url"`
	Image360Url                               []string    `json:"image360_url"`
	VideoUrl                                  []string    `json:"video_url"`
	PanaromaUrl                               []string    `json:"panaroma_url"`
	MainMediaSection                          string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalBrokerAgentPropertyBranchMedia(ctx context.Context, arg CreateAgriculturalBrokerAgentPropertyBranchMediaParams) (AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, createAgriculturalBrokerAgentPropertyBranchMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalBrokerAgentPropertiesBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalBrokerAgentPropertyBranchMedia = `-- name: DeleteAgriculturalBrokerAgentPropertyBranchMedia :exec
DELETE FROM agricultural_broker_agent_properties_branch_media
Where id = $1
`

func (q *Queries) DeleteAgriculturalBrokerAgentPropertyBranchMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalBrokerAgentPropertyBranchMedia, id)
	return err
}

const getAgriculturalBrokerAgentPropertyBranchMedia = `-- name: GetAgriculturalBrokerAgentPropertyBranchMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_branch_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalBrokerAgentPropertyBranchMedia(ctx context.Context, limit int32) (AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyBranchMedia, limit)
	var i AgriculturalBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection = `-- name: GetAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_branch_media
WHERE agricultural_broker_agent_properties_branch_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSectionParams struct {
	AgriculturalBrokerAgentPropertiesBranchID int64  `json:"agricultural_broker_agent_properties_branch_id"`
	Lower                                     string `json:"lower"`
}

func (q *Queries) GetAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSectionParams) (AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection, arg.AgriculturalBrokerAgentPropertiesBranchID, arg.Lower)
	var i AgriculturalBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerAgentPropertyBranchMedia = `-- name: GetAllAgriculturalBrokerAgentPropertyBranchMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_branch_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalBrokerAgentPropertyBranchMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyBranchMedia(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyBranchMediaParams) ([]AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyBranchMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesBranchMedium
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesBranchMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalBrokerAgentPropertiesBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalBrokerAgentPropertyBranchMediaByPropertyId = `-- name: GetAllAgriculturalBrokerAgentPropertyBranchMediaByPropertyId :many
Select id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch from agricultural_broker_agent_properties_branch_media
WHERE agricultural_broker_agent_properties_branch_id = $1 ORDER BY id
`

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyBranchMediaByPropertyId(ctx context.Context, agriculturalBrokerAgentPropertiesBranchID int64) ([]AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyBranchMediaByPropertyId, agriculturalBrokerAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesBranchMedium
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesBranchMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AgriculturalBrokerAgentPropertiesBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndId = `-- name: GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM agricultural_broker_agent_properties_branch_media
 WHERE main_media_section = $2 AND agricultural_broker_agent_properties_branch_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch From x
`

type GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndIdParams struct {
	AgriculturalBrokerAgentPropertiesBranchID int64  `json:"agricultural_broker_agent_properties_branch_id"`
	MainMediaSection                          string `json:"main_media_section"`
}

type GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndIdRow struct {
	ID                                        int64       `json:"id"`
	ImageUrl                                  []string    `json:"image_url"`
	Image360Url                               []string    `json:"image360_url"`
	VideoUrl                                  []string    `json:"video_url"`
	PanaromaUrl                               []string    `json:"panaroma_url"`
	MainMediaSection                          string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndIdParams) (GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndId, arg.AgriculturalBrokerAgentPropertiesBranchID, arg.MainMediaSection)
	var i GetAllAgriculturalBrokerCompanyBranchPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerCompanyBranchPropertiesMainMediaSectionById = `-- name: GetAllAgriculturalBrokerCompanyBranchPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM agricultural_broker_agent_properties_branch_media
 WHERE agricultural_broker_agent_properties_branch_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllAgriculturalBrokerCompanyBranchPropertiesMainMediaSectionById(ctx context.Context, agriculturalBrokerAgentPropertiesBranchID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerCompanyBranchPropertiesMainMediaSectionById, agriculturalBrokerAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalBrokerAgentPropertyBranchMedia = `-- name: UpdateAgriculturalBrokerAgentPropertyBranchMedia :one
UPDATE agricultural_broker_agent_properties_branch_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    agricultural_broker_agent_properties_branch_id = $7,
    created_at = $8,
    updated_at = $9,
    is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, agricultural_broker_agent_properties_branch_id, created_at, updated_at, is_branch
`

type UpdateAgriculturalBrokerAgentPropertyBranchMediaParams struct {
	ID                                        int64       `json:"id"`
	ImageUrl                                  []string    `json:"image_url"`
	Image360Url                               []string    `json:"image360_url"`
	VideoUrl                                  []string    `json:"video_url"`
	PanaromaUrl                               []string    `json:"panaroma_url"`
	MainMediaSection                          string      `json:"main_media_section"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalBrokerAgentPropertyBranchMedia(ctx context.Context, arg UpdateAgriculturalBrokerAgentPropertyBranchMediaParams) (AgriculturalBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalBrokerAgentPropertyBranchMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AgriculturalBrokerAgentPropertiesBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
