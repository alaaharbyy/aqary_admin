// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agent_reviews.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAgentReviewsForAgentCount = `-- name: GetAgentReviewsForAgentCount :one
SELECT    
count(*)
FROM agent_reviews ar
LEFT JOIN broker_company_agents bca ON bca.id = ar.agent_id AND ar.is_branch = false AND bca.broker_companies_id = ar.companies_id
LEFT JOIN broker_company_branches_agents bcba ON bcba.id = ar.agent_id AND ar.is_branch = true AND bcba.broker_companies_branches_id = ar.companies_id
WHERE COALESCE(bca.users_id, bcba.users_id) = $1
`

func (q *Queries) GetAgentReviewsForAgentCount(ctx context.Context, usersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAgentReviewsForAgentCount, usersID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAgentsReviewsCountForAdmin = `-- name: GetAgentsReviewsCountForAdmin :one
SELECT 
   count(*)
FROM agent_reviews ar
JOIN (
   
        SELECT id AS company_id, 1 AS company_type, FALSE AS is_branch, users_id,company_name FROM broker_companies
        WHERE broker_companies.users_id = $1
        UNION ALL
        SELECT id AS company_id, 1 AS company_type, TRUE AS is_branch, users_id,company_name FROM broker_companies_branches
        WHERE broker_companies_branches.users_id =$1
     
) AS x
ON ar.companies_id = x.company_id AND ar.is_branch = x.is_branch
`

func (q *Queries) GetAgentsReviewsCountForAdmin(ctx context.Context, usersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAgentsReviewsCountForAdmin, usersID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAgentsReviewsForCompanyCount = `-- name: GetAgentsReviewsForCompanyCount :one
SELECT 
  count(*)
FROM agent_reviews ar 
where ar.companies_id=$1 and ar.is_branch=$2
`

type GetAgentsReviewsForCompanyCountParams struct {
	CompaniesID int64       `json:"companies_id"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAgentsReviewsForCompanyCount(ctx context.Context, arg GetAgentsReviewsForCompanyCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAgentsReviewsForCompanyCount, arg.CompaniesID, arg.IsBranch)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllAgentReviews = `-- name: GetAllAgentReviews :many
SELECT 
    ar.id as agent_review_id,
    u.username as reviewer_username,
    ar.reviewer AS reviewer_user_id,
    p.first_name as agent_first_name,
    p.last_name as agent_last_name, 
    ar.agent_id,
    ar.agent_knowledge,
    ar.agent_expertise,
    ar.agent_responsiveness,
    ar.agent_negotiation,
    ar.review,
    COALESCE(bc.company_name, bcb.company_name) AS company_name
FROM agent_reviews ar 
JOIN users as u ON ar.reviewer=u.id
JOIN profiles as p ON p.id=ar.agent_id
LEFT JOIN broker_companies bc ON ar.companies_id = bc.id AND ar.is_branch = false
LEFT JOIN broker_companies_branches bcb ON ar.companies_id = bcb.id AND ar.is_branch = true
LIMIT $1
OFFSET $2
`

type GetAllAgentReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAgentReviewsRow struct {
	AgentReviewID       int64  `json:"agent_review_id"`
	ReviewerUsername    string `json:"reviewer_username"`
	ReviewerUserID      int64  `json:"reviewer_user_id"`
	AgentFirstName      string `json:"agent_first_name"`
	AgentLastName       string `json:"agent_last_name"`
	AgentID             int64  `json:"agent_id"`
	AgentKnowledge      int32  `json:"agent_knowledge"`
	AgentExpertise      int32  `json:"agent_expertise"`
	AgentResponsiveness int32  `json:"agent_responsiveness"`
	AgentNegotiation    int32  `json:"agent_negotiation"`
	Review              string `json:"review"`
	CompanyName         string `json:"company_name"`
}

func (q *Queries) GetAllAgentReviews(ctx context.Context, arg GetAllAgentReviewsParams) ([]GetAllAgentReviewsRow, error) {
	rows, err := q.db.Query(ctx, getAllAgentReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgentReviewsRow
	for rows.Next() {
		var i GetAllAgentReviewsRow
		if err := rows.Scan(
			&i.AgentReviewID,
			&i.ReviewerUsername,
			&i.ReviewerUserID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.AgentID,
			&i.AgentKnowledge,
			&i.AgentExpertise,
			&i.AgentResponsiveness,
			&i.AgentNegotiation,
			&i.Review,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgentReviewsForAgent = `-- name: GetAllAgentReviewsForAgent :many
SELECT    
    ar.id as agent_review_id,
    -- reviewer details
    ar.reviewer AS reviewer_user_id,
    u.username as reviewer_username,
    u.email as reviewer_email,
    -- agent details
    ar.agent_id,
    COALESCE(bca.users_id, bcba.users_id) AS agent_user_id,
    COALESCE(bca.broker_companies_id, bcba.broker_companies_branches_id) AS companies_id,
    p.first_name as agent_first_name,
    p.last_name as agent_last_name,    
    -- review details
    ar.agent_knowledge,
    ar.agent_expertise,
    ar.agent_responsiveness,
    ar.agent_negotiation,
    ar.review,
   ar.proof_images,
   ar.title
FROM agent_reviews ar
JOIN users u on u.id=ar.reviewer
JOIN users ua on ua.id=$3
JOIN profiles p on p.id=ua.profiles_id
LEFT JOIN broker_company_agents bca ON bca.id = ar.agent_id AND ar.is_branch = false AND bca.broker_companies_id = ar.companies_id
LEFT JOIN broker_company_branches_agents bcba ON bcba.id = ar.agent_id AND ar.is_branch = true AND bcba.broker_companies_branches_id = ar.companies_id
WHERE COALESCE(bca.users_id, bcba.users_id) = $3
ORDER BY ar.id DESC
LIMIT $1
OFFSET $2
`

type GetAllAgentReviewsForAgentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	ID     int64 `json:"id"`
}

type GetAllAgentReviewsForAgentRow struct {
	AgentReviewID       int64       `json:"agent_review_id"`
	ReviewerUserID      int64       `json:"reviewer_user_id"`
	ReviewerUsername    string      `json:"reviewer_username"`
	ReviewerEmail       string      `json:"reviewer_email"`
	AgentID             int64       `json:"agent_id"`
	AgentUserID         int64       `json:"agent_user_id"`
	CompaniesID         pgtype.Int8 `json:"companies_id"`
	AgentFirstName      string      `json:"agent_first_name"`
	AgentLastName       string      `json:"agent_last_name"`
	AgentKnowledge      int32       `json:"agent_knowledge"`
	AgentExpertise      int32       `json:"agent_expertise"`
	AgentResponsiveness int32       `json:"agent_responsiveness"`
	AgentNegotiation    int32       `json:"agent_negotiation"`
	Review              string      `json:"review"`
	ProofImages         []string    `json:"proof_images"`
	Title               pgtype.Text `json:"title"`
}

func (q *Queries) GetAllAgentReviewsForAgent(ctx context.Context, arg GetAllAgentReviewsForAgentParams) ([]GetAllAgentReviewsForAgentRow, error) {
	rows, err := q.db.Query(ctx, getAllAgentReviewsForAgent, arg.Limit, arg.Offset, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgentReviewsForAgentRow
	for rows.Next() {
		var i GetAllAgentReviewsForAgentRow
		if err := rows.Scan(
			&i.AgentReviewID,
			&i.ReviewerUserID,
			&i.ReviewerUsername,
			&i.ReviewerEmail,
			&i.AgentID,
			&i.AgentUserID,
			&i.CompaniesID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.AgentKnowledge,
			&i.AgentExpertise,
			&i.AgentResponsiveness,
			&i.AgentNegotiation,
			&i.Review,
			&i.ProofImages,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgentsReviewsForAdmin = `-- name: GetAllAgentsReviewsForAdmin :many
SELECT 
    -- company details
    ar.companies_id,
    j.company_name,
    --reviewer details
    ar.reviewer AS reviewer_user_id,
    u.username as reviewer_username,
    u.email as reviewer_email,
     --agent details
     COALESCE(bca.users_id, bcba.users_id) as agent_user_id,
    p.first_name as agent_first_name,
    p.last_name as agent_last_name, 
    -- review details
    ar.id as agent_review_id,
    ar.agent_id,
    ar.agent_knowledge,
    ar.agent_expertise,
    ar.agent_responsiveness,
    ar.agent_negotiation,
    ar.review ,
   ar.proof_images,
   ar.title
FROM agent_reviews ar
JOIN users u on u.id=ar.reviewer
LEFT JOIN broker_company_agents bca ON bca.id = ar.agent_id AND ar.is_branch = false AND bca.broker_companies_id = ar.companies_id
LEFT JOIN broker_company_branches_agents bcba ON bcba.id = ar.agent_id AND ar.is_branch = true AND bcba.broker_companies_branches_id = ar.companies_id
JOIN (
        SELECT id AS company_id, 1 AS company_type, FALSE AS is_branch, users_id,company_name FROM broker_companies
        WHERE broker_companies.users_id = $1
        UNION ALL
        SELECT id AS company_id, 1 AS company_type, TRUE AS is_branch, users_id,company_name FROM broker_companies_branches
        WHERE broker_companies_branches.users_id = $1
) AS j
ON ar.companies_id = j.company_id AND ar.is_branch = j.is_branch
left JOIN users ua ON ua.id = COALESCE(bca.users_id, bcba.users_id)
left JOIN profiles p ON p.id = ua.profiles_id
order by j.company_id
LIMIT $2
OFFSET $3
`

type GetAllAgentsReviewsForAdminParams struct {
	UsersID int64 `json:"users_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetAllAgentsReviewsForAdminRow struct {
	CompaniesID         int64       `json:"companies_id"`
	CompanyName         string      `json:"company_name"`
	ReviewerUserID      int64       `json:"reviewer_user_id"`
	ReviewerUsername    string      `json:"reviewer_username"`
	ReviewerEmail       string      `json:"reviewer_email"`
	AgentUserID         int64       `json:"agent_user_id"`
	AgentFirstName      pgtype.Text `json:"agent_first_name"`
	AgentLastName       pgtype.Text `json:"agent_last_name"`
	AgentReviewID       int64       `json:"agent_review_id"`
	AgentID             int64       `json:"agent_id"`
	AgentKnowledge      int32       `json:"agent_knowledge"`
	AgentExpertise      int32       `json:"agent_expertise"`
	AgentResponsiveness int32       `json:"agent_responsiveness"`
	AgentNegotiation    int32       `json:"agent_negotiation"`
	Review              string      `json:"review"`
	ProofImages         []string    `json:"proof_images"`
	Title               pgtype.Text `json:"title"`
}

func (q *Queries) GetAllAgentsReviewsForAdmin(ctx context.Context, arg GetAllAgentsReviewsForAdminParams) ([]GetAllAgentsReviewsForAdminRow, error) {
	rows, err := q.db.Query(ctx, getAllAgentsReviewsForAdmin, arg.UsersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgentsReviewsForAdminRow
	for rows.Next() {
		var i GetAllAgentsReviewsForAdminRow
		if err := rows.Scan(
			&i.CompaniesID,
			&i.CompanyName,
			&i.ReviewerUserID,
			&i.ReviewerUsername,
			&i.ReviewerEmail,
			&i.AgentUserID,
			&i.AgentFirstName,
			&i.AgentLastName,
			&i.AgentReviewID,
			&i.AgentID,
			&i.AgentKnowledge,
			&i.AgentExpertise,
			&i.AgentResponsiveness,
			&i.AgentNegotiation,
			&i.Review,
			&i.ProofImages,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAgentReviews = `-- name: GetCountAgentReviews :one
SELECT COUNT(*) FROM agent_reviews
`

func (q *Queries) GetCountAgentReviews(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgentReviews)
	var count int64
	err := row.Scan(&count)
	return count, err
}
