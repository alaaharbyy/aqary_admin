// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_freelancer_properties.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalFreelancerProperty = `-- name: CreateAgriculturalFreelancerProperty :one
INSERT INTO agricultural_freelancer_properties (
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    status,
    created_at,
    updated_at,
    facilities_id,
    amenities_id,
    freelancers_id,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    developer_company_name,
    sub_developer_company_name,
    category,
    investment,
    contract_start_datetime,
    contract_end_datetime,
    amount,
    unit_types,
    users_id,
    property_name,
    owner_users_id
)VALUES (
     $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30
) RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type CreateAgriculturalFreelancerPropertyParams struct {
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	FreelancersID           int64              `json:"freelancers_id"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  int64              `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	PropertyName            string             `json:"property_name"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) CreateAgriculturalFreelancerProperty(ctx context.Context, arg CreateAgriculturalFreelancerPropertyParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, createAgriculturalFreelancerProperty,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.FreelancersID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.OwnerUsersID,
	)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const deleteAgriculturalFreelancerProperty = `-- name: DeleteAgriculturalFreelancerProperty :exec
DELETE FROM agricultural_freelancer_properties
Where id = $1
`

func (q *Queries) DeleteAgriculturalFreelancerProperty(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalFreelancerProperty, id)
	return err
}

const getAgriculturalFreelancerProperty = `-- name: GetAgriculturalFreelancerProperty :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id FROM agricultural_freelancer_properties 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalFreelancerProperty(ctx context.Context, limit int32) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, getAgriculturalFreelancerProperty, limit)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const getAllAgriculturalFreelancerProperty = `-- name: GetAllAgriculturalFreelancerProperty :many
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id FROM agricultural_freelancer_properties
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalFreelancerPropertyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalFreelancerProperty(ctx context.Context, arg GetAllAgriculturalFreelancerPropertyParams) ([]AgriculturalFreelancerProperty, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalFreelancerProperty, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalFreelancerProperty
	for rows.Next() {
		var i AgriculturalFreelancerProperty
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.FreelancersID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.OwnerUsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalFreelancerProperty = `-- name: UpdateAgriculturalFreelancerProperty :one
UPDATE agricultural_freelancer_properties
SET   property_title = $2,
    property_title_arabic = $3,
    description = $4,
    description_arabic = $5,
    is_verified = $6,
    property_rank = $7,
    addresses_id = $8,
    locations_id = $9,
    property_types_id = $10,
    status = $11,
    created_at = $12,
    updated_at = $13,
    facilities_id = $14,
    amenities_id = $15,
    freelancers_id = $16,
    is_show_owner_info = $17,
    property = $18,
    countries_id = $19,
    ref_no = $20,
    developer_company_name = $21,
    sub_developer_company_name = $22,
    category = $23,
    investment = $24,
    contract_start_datetime = $25,
    contract_end_datetime = $26,
    amount = $27,
    unit_types = $28,
    users_id = $29,
    property_name = $30,
    owner_users_id = $31
Where id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateAgriculturalFreelancerPropertyParams struct {
	ID                      int64              `json:"id"`
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	FreelancersID           int64              `json:"freelancers_id"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  int64              `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	PropertyName            string             `json:"property_name"`
	OwnerUsersID            pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) UpdateAgriculturalFreelancerProperty(ctx context.Context, arg UpdateAgriculturalFreelancerPropertyParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalFreelancerProperty,
		arg.ID,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.FreelancersID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.PropertyName,
		arg.OwnerUsersID,
	)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateAgriculturalFreelancerPropertyRank = `-- name: UpdateAgriculturalFreelancerPropertyRank :one
UPDATE agricultural_freelancer_properties SET property_rank = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateAgriculturalFreelancerPropertyRankParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateAgriculturalFreelancerPropertyRank(ctx context.Context, arg UpdateAgriculturalFreelancerPropertyRankParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalFreelancerPropertyRank, arg.ID, arg.PropertyRank)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateAgriculturalFreelancerPropertyStatus = `-- name: UpdateAgriculturalFreelancerPropertyStatus :one
UPDATE agricultural_freelancer_properties SET status = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateAgriculturalFreelancerPropertyStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateAgriculturalFreelancerPropertyStatus(ctx context.Context, arg UpdateAgriculturalFreelancerPropertyStatusParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalFreelancerPropertyStatus, arg.ID, arg.Status)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateAgriculturalFreelancerPropertyVerifyStatus = `-- name: UpdateAgriculturalFreelancerPropertyVerifyStatus :one
UPDATE agricultural_freelancer_properties SET is_verified = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateAgriculturalFreelancerPropertyVerifyStatusParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateAgriculturalFreelancerPropertyVerifyStatus(ctx context.Context, arg UpdateAgriculturalFreelancerPropertyVerifyStatusParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalFreelancerPropertyVerifyStatus, arg.ID, arg.IsVerified)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateAgriculureFreelancerPropertyStatus = `-- name: UpdateAgriculureFreelancerPropertyStatus :one
UPDATE agricultural_freelancer_properties Set status=$2 Where id=$1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateAgriculureFreelancerPropertyStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateAgriculureFreelancerPropertyStatus(ctx context.Context, arg UpdateAgriculureFreelancerPropertyStatusParams) (AgriculturalFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateAgriculureFreelancerPropertyStatus, arg.ID, arg.Status)
	var i AgriculturalFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}
