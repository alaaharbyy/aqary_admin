// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: routing_triggers.sql

package sqlc

import (
	"context"
	"time"
)

const createRoutingTrigger = `-- name: CreateRoutingTrigger :one
INSERT INTO routing_triggers (
    title,
    lead_activity,
    next_activity,
    interval,
    interval_type,
    added_by,
    created_at
) VALUES (
    $1, 
    $2, 
    $3, 
    $4, 
    $5, 
    $6, 
    $7  
) RETURNING id, title, lead_activity, next_activity, interval, interval_type, added_by, created_at
`

type CreateRoutingTriggerParams struct {
	Title        string    `json:"title"`
	LeadActivity int64     `json:"lead_activity"`
	NextActivity int64     `json:"next_activity"`
	Interval     int64     `json:"interval"`
	IntervalType int64     `json:"interval_type"`
	AddedBy      int64     `json:"added_by"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) CreateRoutingTrigger(ctx context.Context, arg CreateRoutingTriggerParams) (RoutingTrigger, error) {
	row := q.db.QueryRow(ctx, createRoutingTrigger,
		arg.Title,
		arg.LeadActivity,
		arg.NextActivity,
		arg.Interval,
		arg.IntervalType,
		arg.AddedBy,
		arg.CreatedAt,
	)
	var i RoutingTrigger
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.LeadActivity,
		&i.NextActivity,
		&i.Interval,
		&i.IntervalType,
		&i.AddedBy,
		&i.CreatedAt,
	)
	return i, err
}

const getAllRoutingTriggers = `-- name: GetAllRoutingTriggers :many
SELECT
    id,
    title,
    lead_activity,
    next_activity,
    interval,
    interval_type,
    added_by,
    created_at
FROM
    routing_triggers
ORDER BY
    id
LIMIT $1 OFFSET $2
`

type GetAllRoutingTriggersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllRoutingTriggers(ctx context.Context, arg GetAllRoutingTriggersParams) ([]RoutingTrigger, error) {
	rows, err := q.db.Query(ctx, getAllRoutingTriggers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RoutingTrigger
	for rows.Next() {
		var i RoutingTrigger
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.LeadActivity,
			&i.NextActivity,
			&i.Interval,
			&i.IntervalType,
			&i.AddedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllRoutingTriggers = `-- name: GetCountAllRoutingTriggers :one
SELECT
    count(*)
FROM
    routing_triggers
`

func (q *Queries) GetCountAllRoutingTriggers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllRoutingTriggers)
	var count int64
	err := row.Scan(&count)
	return count, err
}
