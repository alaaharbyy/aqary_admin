// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_booking_categories.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotelBookingCategory = `-- name: CreateHotelBookingCategory :one
insert into hotel_booking_categories (title,title_ar,status)
values($1, $2, $3) returning id, title, title_ar, status
`

type CreateHotelBookingCategoryParams struct {
	Title   string      `json:"title"`
	TitleAr pgtype.Text `json:"title_ar"`
	Status  int64       `json:"status"`
}

func (q *Queries) CreateHotelBookingCategory(ctx context.Context, arg CreateHotelBookingCategoryParams) (HotelBookingCategory, error) {
	row := q.db.QueryRow(ctx, createHotelBookingCategory, arg.Title, arg.TitleAr, arg.Status)
	var i HotelBookingCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const getHotelBookingCategories = `-- name: GetHotelBookingCategories :many
select id, title, title_ar, status 
from 
	hotel_booking_categories
WHERE 
	status!=6
ORDER BY id 
LIMIT $1
OFFSET $2
`

type GetHotelBookingCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetHotelBookingCategories(ctx context.Context, arg GetHotelBookingCategoriesParams) ([]HotelBookingCategory, error) {
	rows, err := q.db.Query(ctx, getHotelBookingCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HotelBookingCategory
	for rows.Next() {
		var i HotelBookingCategory
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingCategory = `-- name: GetHotelBookingCategory :one
select id, title, title_ar, status 
from 
	hotel_booking_categories 
where 
	id=$1 AND status!=6
`

func (q *Queries) GetHotelBookingCategory(ctx context.Context, id int64) (HotelBookingCategory, error) {
	row := q.db.QueryRow(ctx, getHotelBookingCategory, id)
	var i HotelBookingCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const getNumberOfHotelBookingCategories = `-- name: GetNumberOfHotelBookingCategories :one
SELECT COUNT(id)
FROM hotel_booking_categories
WHERE status!=6
`

func (q *Queries) GetNumberOfHotelBookingCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfHotelBookingCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateHotelBookingCategory = `-- name: UpdateHotelBookingCategory :one
update hotel_booking_categories
set 
	title=$2,
	title_ar=$3,
	status=$4
where 
	id=$1 AND status!=6
returning id, title, title_ar, status
`

type UpdateHotelBookingCategoryParams struct {
	ID      int64       `json:"id"`
	Title   string      `json:"title"`
	TitleAr pgtype.Text `json:"title_ar"`
	Status  int64       `json:"status"`
}

func (q *Queries) UpdateHotelBookingCategory(ctx context.Context, arg UpdateHotelBookingCategoryParams) (HotelBookingCategory, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingCategory,
		arg.ID,
		arg.Title,
		arg.TitleAr,
		arg.Status,
	)
	var i HotelBookingCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const updateHotelBookingCategoryStatus = `-- name: UpdateHotelBookingCategoryStatus :one
update hotel_booking_categories
set
status=$1
where id=$2
returning id, title, title_ar, status
`

type UpdateHotelBookingCategoryStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateHotelBookingCategoryStatus(ctx context.Context, arg UpdateHotelBookingCategoryStatusParams) (HotelBookingCategory, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingCategoryStatus, arg.Status, arg.ID)
	var i HotelBookingCategory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}
