// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_property_posts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addPost = `-- name: AddPost :one
INSERT INTO aqary_property_posts (ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by,is_property_branch,post_schema,property_hub_category, is_public, is_verified) VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10,$11,$12,$13, $14, $15) RETURNING id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, is_verified, post_schema, property_hub_category, is_public
`

type AddPostParams struct {
	RefNo               string      `json:"ref_no"`
	CompanyTypesID      int32       `json:"company_types_id"`
	CompaniesID         int64       `json:"companies_id"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Title               string      `json:"title"`
	PropertyUnitID      int64       `json:"property_unit_id"`
	PostCategory        string      `json:"post_category"`
	Description         string      `json:"description"`
	Tags                []int64     `json:"tags"`
	PostedBy            int64       `json:"posted_by"`
	IsPropertyBranch    pgtype.Bool `json:"is_property_branch"`
	PostSchema          string      `json:"post_schema"`
	PropertyHubCategory pgtype.Int8 `json:"property_hub_category"`
	IsPublic            pgtype.Bool `json:"is_public"`
	IsVerified          pgtype.Bool `json:"is_verified"`
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (AqaryPropertyPost, error) {
	row := q.db.QueryRow(ctx, addPost,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.PropertyUnitID,
		arg.PostCategory,
		arg.Description,
		arg.Tags,
		arg.PostedBy,
		arg.IsPropertyBranch,
		arg.PostSchema,
		arg.PropertyHubCategory,
		arg.IsPublic,
		arg.IsVerified,
	)
	var i AqaryPropertyPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.Title,
		&i.PropertyUnitID,
		&i.PostCategory,
		&i.Description,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPropertyBranch,
		&i.IsVerified,
		&i.PostSchema,
		&i.PropertyHubCategory,
		&i.IsPublic,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM aqary_property_posts WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getAllAqaryMediaPosts = `-- name: GetAllAqaryMediaPosts :many
WITH x AS (
SELECT 
	id,
	ref_no,
	company_types_id,
	companies_id,
	is_branch, 
	title,
	project_id AS project_or_property_unit_id,
	is_project_branch AS project_or_property_isBranch,
	'project' AS post_category,
	description,
	post_schema,
	tags,
	posted_by,
	date_posted,
	0 as property_hub_category
	FROM aqary_project_posts
	UNION ALL
	SELECT id,
	ref_no,
	company_types_id,
	companies_id,
	is_branch, 
	title,
	property_unit_id  AS project_or_property_unit_id,
	is_property_branch AS project_or_property_isBranch,
	post_category,
	description,
	post_schema,
	tags,
	posted_by,
	date_posted,
	property_hub_category FROM aqary_property_posts
) SELECT id, ref_no, company_types_id, companies_id, is_branch, title, project_or_property_unit_id, project_or_property_isbranch, post_category, description, post_schema, tags, posted_by, date_posted, property_hub_category FROM x LIMIT $1 OFFSET $2
`

type GetAllAqaryMediaPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAqaryMediaPostsRow struct {
	ID                        int64       `json:"id"`
	RefNo                     string      `json:"ref_no"`
	CompanyTypesID            int64       `json:"company_types_id"`
	CompaniesID               int64       `json:"companies_id"`
	IsBranch                  pgtype.Bool `json:"is_branch"`
	Title                     string      `json:"title"`
	ProjectOrPropertyUnitID   int64       `json:"project_or_property_unit_id"`
	ProjectOrPropertyIsbranch pgtype.Bool `json:"project_or_property_isbranch"`
	PostCategory              string      `json:"post_category"`
	Description               string      `json:"description"`
	PostSchema                string      `json:"post_schema"`
	Tags                      []int64     `json:"tags"`
	PostedBy                  int64       `json:"posted_by"`
	DatePosted                time.Time   `json:"date_posted"`
	PropertyHubCategory       pgtype.Int8 `json:"property_hub_category"`
}

func (q *Queries) GetAllAqaryMediaPosts(ctx context.Context, arg GetAllAqaryMediaPostsParams) ([]GetAllAqaryMediaPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllAqaryMediaPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAqaryMediaPostsRow
	for rows.Next() {
		var i GetAllAqaryMediaPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.Title,
			&i.ProjectOrPropertyUnitID,
			&i.ProjectOrPropertyIsbranch,
			&i.PostCategory,
			&i.Description,
			&i.PostSchema,
			&i.Tags,
			&i.PostedBy,
			&i.DatePosted,
			&i.PropertyHubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT app.id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, app.is_verified, post_schema, property_hub_category, is_public, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_posts app JOIN users u ON app.posted_by = u.id LIMIT $1 OFFSET $2
`

type GetAllPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPostsRow struct {
	ID                  int64              `json:"id"`
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      int32              `json:"company_types_id"`
	CompaniesID         int64              `json:"companies_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	Title               string             `json:"title"`
	PropertyUnitID      int64              `json:"property_unit_id"`
	PostCategory        string             `json:"post_category"`
	Description         string             `json:"description"`
	Tags                []int64            `json:"tags"`
	PostedBy            int64              `json:"posted_by"`
	DatePosted          time.Time          `json:"date_posted"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	PostSchema          string             `json:"post_schema"`
	PropertyHubCategory pgtype.Int8        `json:"property_hub_category"`
	IsPublic            pgtype.Bool        `json:"is_public"`
	ID_2                int64              `json:"id_2"`
	Email               string             `json:"email"`
	Username            string             `json:"username"`
	Password            string             `json:"password"`
	Status              int64              `json:"status"`
	RolesID             pgtype.Int8        `json:"roles_id"`
	UserTypesID         int64              `json:"user_types_id"`
	SocialLogin         pgtype.Text        `json:"social_login"`
	ShowHideDetails     pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince     pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2        pgtype.Bool        `json:"is_verified_2"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	PhoneNumber         pgtype.Text        `json:"phone_number"`
	IsPhoneVerified     pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany       pgtype.Int8        `json:"active_company"`
	CountryCode         pgtype.Int8        `json:"country_code"`
	ProfileViews        int64              `json:"profile_views"`
}

func (q *Queries) GetAllPosts(ctx context.Context, arg GetAllPostsParams) ([]GetAllPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsRow
	for rows.Next() {
		var i GetAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.Title,
			&i.PropertyUnitID,
			&i.PostCategory,
			&i.Description,
			&i.Tags,
			&i.PostedBy,
			&i.DatePosted,
			&i.IsPropertyBranch,
			&i.IsVerified,
			&i.PostSchema,
			&i.PropertyHubCategory,
			&i.IsPublic,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPostsByPostedBy = `-- name: GetAllPostsByPostedBy :many
SELECT app.id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, app.is_verified, post_schema, property_hub_category, is_public, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_posts app JOIN users u ON app.posted_by = u.id WHERE app.posted_by = $3 LIMIT $1 OFFSET $2
`

type GetAllPostsByPostedByParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	PostedBy int64 `json:"posted_by"`
}

type GetAllPostsByPostedByRow struct {
	ID                  int64              `json:"id"`
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      int32              `json:"company_types_id"`
	CompaniesID         int64              `json:"companies_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	Title               string             `json:"title"`
	PropertyUnitID      int64              `json:"property_unit_id"`
	PostCategory        string             `json:"post_category"`
	Description         string             `json:"description"`
	Tags                []int64            `json:"tags"`
	PostedBy            int64              `json:"posted_by"`
	DatePosted          time.Time          `json:"date_posted"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	PostSchema          string             `json:"post_schema"`
	PropertyHubCategory pgtype.Int8        `json:"property_hub_category"`
	IsPublic            pgtype.Bool        `json:"is_public"`
	ID_2                int64              `json:"id_2"`
	Email               string             `json:"email"`
	Username            string             `json:"username"`
	Password            string             `json:"password"`
	Status              int64              `json:"status"`
	RolesID             pgtype.Int8        `json:"roles_id"`
	UserTypesID         int64              `json:"user_types_id"`
	SocialLogin         pgtype.Text        `json:"social_login"`
	ShowHideDetails     pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince     pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2        pgtype.Bool        `json:"is_verified_2"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	PhoneNumber         pgtype.Text        `json:"phone_number"`
	IsPhoneVerified     pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany       pgtype.Int8        `json:"active_company"`
	CountryCode         pgtype.Int8        `json:"country_code"`
	ProfileViews        int64              `json:"profile_views"`
}

func (q *Queries) GetAllPostsByPostedBy(ctx context.Context, arg GetAllPostsByPostedByParams) ([]GetAllPostsByPostedByRow, error) {
	rows, err := q.db.Query(ctx, getAllPostsByPostedBy, arg.Limit, arg.Offset, arg.PostedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostsByPostedByRow
	for rows.Next() {
		var i GetAllPostsByPostedByRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.Title,
			&i.PropertyUnitID,
			&i.PostCategory,
			&i.Description,
			&i.Tags,
			&i.PostedBy,
			&i.DatePosted,
			&i.IsPropertyBranch,
			&i.IsVerified,
			&i.PostSchema,
			&i.PropertyHubCategory,
			&i.IsPublic,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPropertyPostsByPostedBy = `-- name: GetCountAllPropertyPostsByPostedBy :one
SELECT count(*) FROM aqary_property_posts  WHERE posted_by = $1
`

func (q *Queries) GetCountAllPropertyPostsByPostedBy(ctx context.Context, postedBy int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPropertyPostsByPostedBy, postedBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostByID = `-- name: GetPostByID :one
SELECT app.id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, app.is_verified, post_schema, property_hub_category, is_public, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_posts app JOIN users u ON app.posted_by = u.id WHERE app.id = $1 LIMIT 1
`

type GetPostByIDRow struct {
	ID                  int64              `json:"id"`
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      int32              `json:"company_types_id"`
	CompaniesID         int64              `json:"companies_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	Title               string             `json:"title"`
	PropertyUnitID      int64              `json:"property_unit_id"`
	PostCategory        string             `json:"post_category"`
	Description         string             `json:"description"`
	Tags                []int64            `json:"tags"`
	PostedBy            int64              `json:"posted_by"`
	DatePosted          time.Time          `json:"date_posted"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	PostSchema          string             `json:"post_schema"`
	PropertyHubCategory pgtype.Int8        `json:"property_hub_category"`
	IsPublic            pgtype.Bool        `json:"is_public"`
	ID_2                int64              `json:"id_2"`
	Email               string             `json:"email"`
	Username            string             `json:"username"`
	Password            string             `json:"password"`
	Status              int64              `json:"status"`
	RolesID             pgtype.Int8        `json:"roles_id"`
	UserTypesID         int64              `json:"user_types_id"`
	SocialLogin         pgtype.Text        `json:"social_login"`
	ShowHideDetails     pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince     pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2        pgtype.Bool        `json:"is_verified_2"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	PhoneNumber         pgtype.Text        `json:"phone_number"`
	IsPhoneVerified     pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany       pgtype.Int8        `json:"active_company"`
	CountryCode         pgtype.Int8        `json:"country_code"`
	ProfileViews        int64              `json:"profile_views"`
}

func (q *Queries) GetPostByID(ctx context.Context, id int64) (GetPostByIDRow, error) {
	row := q.db.QueryRow(ctx, getPostByID, id)
	var i GetPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.Title,
		&i.PropertyUnitID,
		&i.PostCategory,
		&i.Description,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPropertyBranch,
		&i.IsVerified,
		&i.PostSchema,
		&i.PropertyHubCategory,
		&i.IsPublic,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified_2,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const getPostByIDAndCategory = `-- name: GetPostByIDAndCategory :one
SELECT app.id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, app.is_verified, post_schema, property_hub_category, is_public, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_property_posts app JOIN users u ON app.posted_by = u.id WHERE app.id = $1 AND app.post_category = $2 LIMIT 1
`

type GetPostByIDAndCategoryParams struct {
	ID           int64  `json:"id"`
	PostCategory string `json:"post_category"`
}

type GetPostByIDAndCategoryRow struct {
	ID                  int64              `json:"id"`
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      int32              `json:"company_types_id"`
	CompaniesID         int64              `json:"companies_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	Title               string             `json:"title"`
	PropertyUnitID      int64              `json:"property_unit_id"`
	PostCategory        string             `json:"post_category"`
	Description         string             `json:"description"`
	Tags                []int64            `json:"tags"`
	PostedBy            int64              `json:"posted_by"`
	DatePosted          time.Time          `json:"date_posted"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	PostSchema          string             `json:"post_schema"`
	PropertyHubCategory pgtype.Int8        `json:"property_hub_category"`
	IsPublic            pgtype.Bool        `json:"is_public"`
	ID_2                int64              `json:"id_2"`
	Email               string             `json:"email"`
	Username            string             `json:"username"`
	Password            string             `json:"password"`
	Status              int64              `json:"status"`
	RolesID             pgtype.Int8        `json:"roles_id"`
	UserTypesID         int64              `json:"user_types_id"`
	SocialLogin         pgtype.Text        `json:"social_login"`
	ShowHideDetails     pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince     pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2        pgtype.Bool        `json:"is_verified_2"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	PhoneNumber         pgtype.Text        `json:"phone_number"`
	IsPhoneVerified     pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany       pgtype.Int8        `json:"active_company"`
	CountryCode         pgtype.Int8        `json:"country_code"`
	ProfileViews        int64              `json:"profile_views"`
}

func (q *Queries) GetPostByIDAndCategory(ctx context.Context, arg GetPostByIDAndCategoryParams) (GetPostByIDAndCategoryRow, error) {
	row := q.db.QueryRow(ctx, getPostByIDAndCategory, arg.ID, arg.PostCategory)
	var i GetPostByIDAndCategoryRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.Title,
		&i.PropertyUnitID,
		&i.PostCategory,
		&i.Description,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPropertyBranch,
		&i.IsVerified,
		&i.PostSchema,
		&i.PropertyHubCategory,
		&i.IsPublic,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified_2,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE aqary_property_posts SET ref_no = $2 ,company_types_id=$3,companies_id=$4,is_branch=$5,title=$6,property_unit_id=$7,
post_category=$8,description=$9,tags=$10,posted_by=$11,is_property_branch=$12,post_schema=$13,property_hub_category=$14 WHERE id = $1 RETURNING id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, is_verified, post_schema, property_hub_category, is_public
`

type UpdatePostParams struct {
	ID                  int64       `json:"id"`
	RefNo               string      `json:"ref_no"`
	CompanyTypesID      int32       `json:"company_types_id"`
	CompaniesID         int64       `json:"companies_id"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Title               string      `json:"title"`
	PropertyUnitID      int64       `json:"property_unit_id"`
	PostCategory        string      `json:"post_category"`
	Description         string      `json:"description"`
	Tags                []int64     `json:"tags"`
	PostedBy            int64       `json:"posted_by"`
	IsPropertyBranch    pgtype.Bool `json:"is_property_branch"`
	PostSchema          string      `json:"post_schema"`
	PropertyHubCategory pgtype.Int8 `json:"property_hub_category"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (AqaryPropertyPost, error) {
	row := q.db.QueryRow(ctx, updatePost,
		arg.ID,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.PropertyUnitID,
		arg.PostCategory,
		arg.Description,
		arg.Tags,
		arg.PostedBy,
		arg.IsPropertyBranch,
		arg.PostSchema,
		arg.PropertyHubCategory,
	)
	var i AqaryPropertyPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.Title,
		&i.PropertyUnitID,
		&i.PostCategory,
		&i.Description,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPropertyBranch,
		&i.IsVerified,
		&i.PostSchema,
		&i.PropertyHubCategory,
		&i.IsPublic,
	)
	return i, err
}

const updatePostIsVerified = `-- name: UpdatePostIsVerified :one
UPDATE aqary_property_posts SET is_verified = $2 WHERE id = $1 RETURNING id, ref_no, company_types_id, companies_id, is_branch, title, property_unit_id, post_category, description, tags, posted_by, date_posted, is_property_branch, is_verified, post_schema, property_hub_category, is_public
`

type UpdatePostIsVerifiedParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdatePostIsVerified(ctx context.Context, arg UpdatePostIsVerifiedParams) (AqaryPropertyPost, error) {
	row := q.db.QueryRow(ctx, updatePostIsVerified, arg.ID, arg.IsVerified)
	var i AqaryPropertyPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.Title,
		&i.PropertyUnitID,
		&i.PostCategory,
		&i.Description,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPropertyBranch,
		&i.IsVerified,
		&i.PostSchema,
		&i.PropertyHubCategory,
		&i.IsPublic,
	)
	return i, err
}
