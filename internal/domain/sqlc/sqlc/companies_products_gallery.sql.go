// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: companies_products_gallery.sql

package sqlc

import (
	"context"
)

const createCompaniesProductsGallery = `-- name: CreateCompaniesProductsGallery :one
INSERT INTO companies_products_gallery (
    companies_products_id,
    image_url,
    video_url,
    image360_url
) VALUES (
    $1, $2, $3, $4
) RETURNING id, companies_products_id, image_url, video_url, image360_url, created_at
`

type CreateCompaniesProductsGalleryParams struct {
	CompaniesProductsID int64    `json:"companies_products_id"`
	ImageUrl            []string `json:"image_url"`
	VideoUrl            []string `json:"video_url"`
	Image360Url         []string `json:"image360_url"`
}

func (q *Queries) CreateCompaniesProductsGallery(ctx context.Context, arg CreateCompaniesProductsGalleryParams) (CompaniesProductsGallery, error) {
	row := q.db.QueryRow(ctx, createCompaniesProductsGallery,
		arg.CompaniesProductsID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Image360Url,
	)
	var i CompaniesProductsGallery
	err := row.Scan(
		&i.ID,
		&i.CompaniesProductsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Image360Url,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompaniesProductsGallery = `-- name: UpdateCompaniesProductsGallery :one
UPDATE companies_products_gallery
SET
    image_url = $2,
    video_url = $3,
    image360_url = $4
WHERE
    id = $1
RETURNING id, companies_products_id, image_url, video_url, image360_url, created_at
`

type UpdateCompaniesProductsGalleryParams struct {
	ID          int64    `json:"id"`
	ImageUrl    []string `json:"image_url"`
	VideoUrl    []string `json:"video_url"`
	Image360Url []string `json:"image360_url"`
}

func (q *Queries) UpdateCompaniesProductsGallery(ctx context.Context, arg UpdateCompaniesProductsGalleryParams) (CompaniesProductsGallery, error) {
	row := q.db.QueryRow(ctx, updateCompaniesProductsGallery,
		arg.ID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Image360Url,
	)
	var i CompaniesProductsGallery
	err := row.Scan(
		&i.ID,
		&i.CompaniesProductsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Image360Url,
		&i.CreatedAt,
	)
	return i, err
}

const updateCompaniesProductsGalleryByCompaniesId = `-- name: UpdateCompaniesProductsGalleryByCompaniesId :one
UPDATE companies_products_gallery
SET
    image_url = $2,
    video_url = $3,
    image360_url = $4
WHERE
    companies_products_id = $1
RETURNING id, companies_products_id, image_url, video_url, image360_url, created_at
`

type UpdateCompaniesProductsGalleryByCompaniesIdParams struct {
	CompaniesProductsID int64    `json:"companies_products_id"`
	ImageUrl            []string `json:"image_url"`
	VideoUrl            []string `json:"video_url"`
	Image360Url         []string `json:"image360_url"`
}

func (q *Queries) UpdateCompaniesProductsGalleryByCompaniesId(ctx context.Context, arg UpdateCompaniesProductsGalleryByCompaniesIdParams) (CompaniesProductsGallery, error) {
	row := q.db.QueryRow(ctx, updateCompaniesProductsGalleryByCompaniesId,
		arg.CompaniesProductsID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Image360Url,
	)
	var i CompaniesProductsGallery
	err := row.Scan(
		&i.ID,
		&i.CompaniesProductsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Image360Url,
		&i.CreatedAt,
	)
	return i, err
}
