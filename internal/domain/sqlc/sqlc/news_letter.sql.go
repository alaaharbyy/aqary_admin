// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: news_letter.sql

package sqlc

import (
	"context"
)

const getAllActiveNewsLetterSubscribers = `-- name: GetAllActiveNewsLetterSubscribers :many
 
SELECT  
	ns.id, ns.email, ns.is_subscribed, ns.company_id,
	u.username,
	u.email
FROM newsletter_subscribers ns
JOIN users u ON ns.subscriber=u.id
WHERE ns.is_active=TRUE 
ORDER BY ns.id DESC
LIMIT $1
OFFSET $2
`

type GetAllActiveNewsLetterSubscribersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllActiveNewsLetterSubscribersRow struct {
	ID           int64  `json:"id"`
	Email        string `json:"email"`
	IsSubscribed bool   `json:"is_subscribed"`
	CompanyID    int64  `json:"company_id"`
	Username     string `json:"username"`
	Email_2      string `json:"email_2"`
}

func (q *Queries) GetAllActiveNewsLetterSubscribers(ctx context.Context, arg GetAllActiveNewsLetterSubscribersParams) ([]GetAllActiveNewsLetterSubscribersRow, error) {
	rows, err := q.db.Query(ctx, getAllActiveNewsLetterSubscribers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllActiveNewsLetterSubscribersRow
	for rows.Next() {
		var i GetAllActiveNewsLetterSubscribersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.IsSubscribed,
			&i.CompanyID,
			&i.Username,
			&i.Email_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewsLetterSubscribersCount = `-- name: GetNewsLetterSubscribersCount :one
 
SELECT  
	COUNT(*) 
FROM newsletter_subscribers 
WHERE is_active=TRUE
`

func (q *Queries) GetNewsLetterSubscribersCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNewsLetterSubscribersCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
