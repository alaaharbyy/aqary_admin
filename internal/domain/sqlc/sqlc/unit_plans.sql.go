// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createUnitPlans = `-- name: CreateUnitPlans :one
INSERT INTO unit_plans (
    img_url,
    title,
    units_id,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5
) RETURNING id, img_url, title, units_id, created_at, updated_at
`

type CreateUnitPlansParams struct {
	ImgUrl    []string  `json:"img_url"`
	Title     string    `json:"title"`
	UnitsID   int64     `json:"units_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUnitPlans(ctx context.Context, arg CreateUnitPlansParams) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, createUnitPlans,
		arg.ImgUrl,
		arg.Title,
		arg.UnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUnitPlans = `-- name: DeleteUnitPlans :exec
DELETE FROM unit_plans
Where id = $1
`

func (q *Queries) DeleteUnitPlans(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUnitPlans, id)
	return err
}

const deleteUnitPlansSingleFile = `-- name: DeleteUnitPlansSingleFile :one
UPDATE unit_plans
SET img_url = array_remove(img_url, $2::VARCHAR)
WHERE id = $1
RETURNING id, img_url, title, units_id, created_at, updated_at
`

type DeleteUnitPlansSingleFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteUnitPlansSingleFile(ctx context.Context, arg DeleteUnitPlansSingleFileParams) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, deleteUnitPlansSingleFile, arg.ID, arg.Fileurl)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUnitPlansByUnit = `-- name: GetAllUnitPlansByUnit :many
SELECT id, img_url, title, units_id, created_at, updated_at FROM unit_plans
WHERE units_id = $3
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllUnitPlansByUnitParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	UnitsID int64 `json:"units_id"`
}

func (q *Queries) GetAllUnitPlansByUnit(ctx context.Context, arg GetAllUnitPlansByUnitParams) ([]UnitPlan, error) {
	rows, err := q.db.Query(ctx, getAllUnitPlansByUnit, arg.Limit, arg.Offset, arg.UnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitPlan
	for rows.Next() {
		var i UnitPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.UnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitPlansByUnitWithoutPagination = `-- name: GetAllUnitPlansByUnitWithoutPagination :many
SELECT id, img_url, title, units_id, created_at, updated_at FROM unit_plans
WHERE units_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetAllUnitPlansByUnitWithoutPagination(ctx context.Context, unitsID int64) ([]UnitPlan, error) {
	rows, err := q.db.Query(ctx, getAllUnitPlansByUnitWithoutPagination, unitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitPlan
	for rows.Next() {
		var i UnitPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.UnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllUnitPlansByUnit = `-- name: GetCountAllUnitPlansByUnit :one
SELECT COUNT(*) FROM unit_plans
WHERE units_id = $1
`

func (q *Queries) GetCountAllUnitPlansByUnit(ctx context.Context, unitsID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllUnitPlansByUnit, unitsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnitPlans = `-- name: GetUnitPlans :one
SELECT id, img_url, title, units_id, created_at, updated_at FROM unit_plans 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUnitPlans(ctx context.Context, id int64) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, getUnitPlans, id)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUnitPlansByTitleAndUnitId = `-- name: GetUnitPlansByTitleAndUnitId :one
SELECT id, img_url, title, units_id, created_at, updated_at FROM unit_plans 
WHERE title ILIKE $1 AND units_id = $2 LIMIT 1
`

type GetUnitPlansByTitleAndUnitIdParams struct {
	Title   string `json:"title"`
	UnitsID int64  `json:"units_id"`
}

func (q *Queries) GetUnitPlansByTitleAndUnitId(ctx context.Context, arg GetUnitPlansByTitleAndUnitIdParams) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, getUnitPlansByTitleAndUnitId, arg.Title, arg.UnitsID)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnitPlans = `-- name: UpdateUnitPlans :one
UPDATE unit_plans
SET img_url = $2,
    title = $3,
    units_id = $4,
    created_at = $5,
    updated_at = $6
WHERE id = $1
RETURNING id, img_url, title, units_id, created_at, updated_at
`

type UpdateUnitPlansParams struct {
	ID        int64     `json:"id"`
	ImgUrl    []string  `json:"img_url"`
	Title     string    `json:"title"`
	UnitsID   int64     `json:"units_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUnitPlans(ctx context.Context, arg UpdateUnitPlansParams) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, updateUnitPlans,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.UnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUnitPlansUrls = `-- name: UpdateUnitPlansUrls :one
UPDATE unit_plans
SET img_url = $2,
updated_at = $3
WHERE id = $1
RETURNING id, img_url, title, units_id, created_at, updated_at
`

type UpdateUnitPlansUrlsParams struct {
	ID        int64     `json:"id"`
	ImgUrl    []string  `json:"img_url"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateUnitPlansUrls(ctx context.Context, arg UpdateUnitPlansUrlsParams) (UnitPlan, error) {
	row := q.db.QueryRow(ctx, updateUnitPlansUrls, arg.ID, arg.ImgUrl, arg.UpdatedAt)
	var i UnitPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.UnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
