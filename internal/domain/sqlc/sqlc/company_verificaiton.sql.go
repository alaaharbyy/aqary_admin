// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_verificaiton.sql

package sqlc

import (
	"context"
	"time"
)

const createSubscriberVerification = `-- name: CreateSubscriberVerification :one


INSERT INTO company_verification(
 entity_type_id,
 entity_id,
 verification_type,
 verification,
 response_date,
 updated_by,
 notes,
 created_at
)VALUES(
  $1, $2, $3, $4, $5, $6, $7, $8 
)RETURNING id, entity_type_id, entity_id, verification_type, verification, response_date, updated_by, notes, created_at
`

type CreateSubscriberVerificationParams struct {
	EntityTypeID     int64     `json:"entity_type_id"`
	EntityID         int64     `json:"entity_id"`
	VerificationType int64     `json:"verification_type"`
	Verification     int32     `json:"verification"`
	ResponseDate     time.Time `json:"response_date"`
	UpdatedBy        int64     `json:"updated_by"`
	Notes            string    `json:"notes"`
	CreatedAt        time.Time `json:"created_at"`
}

// -- name: GetUserLicenseVerification :one
// SELECT * FROM company_verification
// WHERE  company_verification.entity_id = $1 AND company_verification.contract_file = $2;
//
//	contract_file,
//	contract_upload_date,
//	uploaded_by,
//	upload_notes,
//	draft_contract
func (q *Queries) CreateSubscriberVerification(ctx context.Context, arg CreateSubscriberVerificationParams) (CompanyVerification, error) {
	row := q.db.QueryRow(ctx, createSubscriberVerification,
		arg.EntityTypeID,
		arg.EntityID,
		arg.VerificationType,
		arg.Verification,
		arg.ResponseDate,
		arg.UpdatedBy,
		arg.Notes,
		arg.CreatedAt,
	)
	var i CompanyVerification
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.VerificationType,
		&i.Verification,
		&i.ResponseDate,
		&i.UpdatedBy,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const createUserVerification = `-- name: CreateUserVerification :one
INSERT INTO company_verification(
 entity_type_id,
 entity_id,
 verification_type,
 verification,
 response_date,
 updated_by,
 notes,
 created_at
)VALUES(
  $1, $2, $3, $4, $5, $6, $7, $8
)RETURNING id, entity_type_id, entity_id, verification_type, verification, response_date, updated_by, notes, created_at
`

type CreateUserVerificationParams struct {
	EntityTypeID     int64     `json:"entity_type_id"`
	EntityID         int64     `json:"entity_id"`
	VerificationType int64     `json:"verification_type"`
	Verification     int32     `json:"verification"`
	ResponseDate     time.Time `json:"response_date"`
	UpdatedBy        int64     `json:"updated_by"`
	Notes            string    `json:"notes"`
	CreatedAt        time.Time `json:"created_at"`
}

// contract_file,
// contract_upload_date,
// uploaded_by,
// upload_notes,
func (q *Queries) CreateUserVerification(ctx context.Context, arg CreateUserVerificationParams) (CompanyVerification, error) {
	row := q.db.QueryRow(ctx, createUserVerification,
		arg.EntityTypeID,
		arg.EntityID,
		arg.VerificationType,
		arg.Verification,
		arg.ResponseDate,
		arg.UpdatedBy,
		arg.Notes,
		arg.CreatedAt,
	)
	var i CompanyVerification
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.VerificationType,
		&i.Verification,
		&i.ResponseDate,
		&i.UpdatedBy,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const getCompanyVerificationByEntity = `-- name: GetCompanyVerificationByEntity :one
SELECT id, entity_type_id, entity_id, verification_type, verification, response_date, updated_by, notes, created_at FROM company_verification
WHERE  company_verification.entity_id = $1 AND company_verification.entity_type_id = $2 
AND company_verification.verification =$3
`

type GetCompanyVerificationByEntityParams struct {
	EntityID     int64 `json:"entity_id"`
	EntityTypeID int64 `json:"entity_type_id"`
	Verification int32 `json:"verification"`
}

func (q *Queries) GetCompanyVerificationByEntity(ctx context.Context, arg GetCompanyVerificationByEntityParams) (CompanyVerification, error) {
	row := q.db.QueryRow(ctx, getCompanyVerificationByEntity, arg.EntityID, arg.EntityTypeID, arg.Verification)
	var i CompanyVerification
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.VerificationType,
		&i.Verification,
		&i.ResponseDate,
		&i.UpdatedBy,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserVerification = `-- name: UpdateUserVerification :one
Update company_verification 
SET 
 entity_type_id = $2,
 entity_id = $3,
 verification_type = $4,
 verification = $5,
 response_date = $6,
 updated_by = $7,
 notes = $8
Where id = $1
RETURNING id, entity_type_id, entity_id, verification_type, verification, response_date, updated_by, notes, created_at
`

type UpdateUserVerificationParams struct {
	ID               int64     `json:"id"`
	EntityTypeID     int64     `json:"entity_type_id"`
	EntityID         int64     `json:"entity_id"`
	VerificationType int64     `json:"verification_type"`
	Verification     int32     `json:"verification"`
	ResponseDate     time.Time `json:"response_date"`
	UpdatedBy        int64     `json:"updated_by"`
	Notes            string    `json:"notes"`
}

// contract_file = $9,
// contract_upload_date = $9,
// uploaded_by = $10,
// upload_notes = $11
func (q *Queries) UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) (CompanyVerification, error) {
	row := q.db.QueryRow(ctx, updateUserVerification,
		arg.ID,
		arg.EntityTypeID,
		arg.EntityID,
		arg.VerificationType,
		arg.Verification,
		arg.ResponseDate,
		arg.UpdatedBy,
		arg.Notes,
	)
	var i CompanyVerification
	err := row.Scan(
		&i.ID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.VerificationType,
		&i.Verification,
		&i.ResponseDate,
		&i.UpdatedBy,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
