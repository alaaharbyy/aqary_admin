// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_completion_history.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProjectCompletionHistory = `-- name: CreateProjectCompletionHistory :one
INSERT INTO  project_completion_history (
    projects_id,
    phases_id,
    completion_percentage,
    completion_percentage_date,
    created_at,
    updated_at
) VALUES(
    $1, $2 ,$3, $4, $5, $6
) RETURNING id, projects_id, phases_id, completion_percentage, completion_percentage_date, created_at, updated_at
`

type CreateProjectCompletionHistoryParams struct {
	ProjectsID               int64       `json:"projects_id"`
	PhasesID                 pgtype.Int8 `json:"phases_id"`
	CompletionPercentage     float64     `json:"completion_percentage"`
	CompletionPercentageDate time.Time   `json:"completion_percentage_date"`
	CreatedAt                time.Time   `json:"created_at"`
	UpdatedAt                time.Time   `json:"updated_at"`
}

func (q *Queries) CreateProjectCompletionHistory(ctx context.Context, arg CreateProjectCompletionHistoryParams) (ProjectCompletionHistory, error) {
	row := q.db.QueryRow(ctx, createProjectCompletionHistory,
		arg.ProjectsID,
		arg.PhasesID,
		arg.CompletionPercentage,
		arg.CompletionPercentageDate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ProjectCompletionHistory
	err := row.Scan(
		&i.ID,
		&i.ProjectsID,
		&i.PhasesID,
		&i.CompletionPercentage,
		&i.CompletionPercentageDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
