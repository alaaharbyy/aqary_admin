// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_properties_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createAgriculturalPropertyPlan = `-- name: CreateAgriculturalPropertyPlan :one
INSERT INTO agricultural_properties_plans (
    img_url,
    title,
    properties_id,
    property,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type CreateAgriculturalPropertyPlanParams struct {
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateAgriculturalPropertyPlan(ctx context.Context, arg CreateAgriculturalPropertyPlanParams) (AgriculturalPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, createAgriculturalPropertyPlan,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AgriculturalPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgriculturalPropertyPlan = `-- name: DeleteAgriculturalPropertyPlan :exec
DELETE FROM agricultural_properties_plans
Where id = $1
`

func (q *Queries) DeleteAgriculturalPropertyPlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalPropertyPlan, id)
	return err
}

const getAgriculturalPropertyPlan = `-- name: GetAgriculturalPropertyPlan :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgriculturalPropertyPlan(ctx context.Context, id int64) (AgriculturalPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlan, id)
	var i AgriculturalPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgriculturalPropertyPlanByPropertiesIDAndTitle = `-- name: GetAgriculturalPropertyPlanByPropertiesIDAndTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans WHERE properties_id=$1 AND LOWER(title)=LOWER($2)
`

type GetAgriculturalPropertyPlanByPropertiesIDAndTitleParams struct {
	PropertiesID int64  `json:"properties_id"`
	Lower        string `json:"lower"`
}

func (q *Queries) GetAgriculturalPropertyPlanByPropertiesIDAndTitle(ctx context.Context, arg GetAgriculturalPropertyPlanByPropertiesIDAndTitleParams) (AgriculturalPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlanByPropertiesIDAndTitle, arg.PropertiesID, arg.Lower)
	var i AgriculturalPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgriculturalPropertyPlanByTitle = `-- name: GetAgriculturalPropertyPlanByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans
WHERE title ILIKE $1 AND properties_id = $2 AND property = $3
`

type GetAgriculturalPropertyPlanByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetAgriculturalPropertyPlanByTitle(ctx context.Context, arg GetAgriculturalPropertyPlanByTitleParams) (AgriculturalPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlanByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i AgriculturalPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAgriculturalPropertyPlan = `-- name: GetAllAgriculturalPropertyPlan :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalPropertyPlanParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyPlan(ctx context.Context, arg GetAllAgriculturalPropertyPlanParams) ([]AgriculturalPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlan, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlan
	for rows.Next() {
		var i AgriculturalPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanByPropertiesID = `-- name: GetAllAgriculturalPropertyPlanByPropertiesID :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans
where properties_id = $1
LIMIT $2
OFFSET $3
`

type GetAllAgriculturalPropertyPlanByPropertiesIDParams struct {
	PropertiesID int64 `json:"properties_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanByPropertiesID(ctx context.Context, arg GetAllAgriculturalPropertyPlanByPropertiesIDParams) ([]AgriculturalPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanByPropertiesID, arg.PropertiesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlan
	for rows.Next() {
		var i AgriculturalPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanByPropertiesIDAndProperty = `-- name: GetAllAgriculturalPropertyPlanByPropertiesIDAndProperty :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans
where properties_id = $1 and property = $2
`

type GetAllAgriculturalPropertyPlanByPropertiesIDAndPropertyParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanByPropertiesIDAndProperty(ctx context.Context, arg GetAllAgriculturalPropertyPlanByPropertiesIDAndPropertyParams) ([]AgriculturalPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanByPropertiesIDAndProperty, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlan
	for rows.Next() {
		var i AgriculturalPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanByPropertiesIDAndTitle = `-- name: GetAllAgriculturalPropertyPlanByPropertiesIDAndTitle :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans WHERE properties_id=$1 AND LOWER(title)=LOWER($2)
`

type GetAllAgriculturalPropertyPlanByPropertiesIDAndTitleParams struct {
	PropertiesID int64  `json:"properties_id"`
	Lower        string `json:"lower"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanByPropertiesIDAndTitle(ctx context.Context, arg GetAllAgriculturalPropertyPlanByPropertiesIDAndTitleParams) ([]AgriculturalPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanByPropertiesIDAndTitle, arg.PropertiesID, arg.Lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlan
	for rows.Next() {
		var i AgriculturalPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanWithoutPagination = `-- name: GetAllAgriculturalPropertyPlanWithoutPagination :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans
ORDER BY id
`

func (q *Queries) GetAllAgriculturalPropertyPlanWithoutPagination(ctx context.Context) ([]AgriculturalPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlan
	for rows.Next() {
		var i AgriculturalPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalPropertyPlan = `-- name: UpdateAgriculturalPropertyPlan :one
UPDATE agricultural_properties_plans
SET img_url = $2,
    title = $3,
    properties_id = $4,
    property = $5,
    created_at = $6,
    updated_at = $7
Where id = $1
RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type UpdateAgriculturalPropertyPlanParams struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAgriculturalPropertyPlan(ctx context.Context, arg UpdateAgriculturalPropertyPlanParams) (AgriculturalPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalPropertyPlan,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AgriculturalPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
