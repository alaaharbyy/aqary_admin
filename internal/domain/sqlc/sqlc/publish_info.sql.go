// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: publish_info.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPublishInfo = `-- name: CreatePublishInfo :one
INSERT INTO publish_info(
company_types_id,
companies_id,
is_branch,
is_project,
project_id,
is_property,
is_property_branch,
is_unit_branch,
unit_id,
owners_info,
unit_no,
price,
social_media_platfrom,
web_portals,
created_at,
created_by,
phase_id,
is_enabled,
property_id
) VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
)RETURNING id, company_types_id, companies_id, is_branch, is_project, project_id, is_property, is_property_branch, is_unit_branch, unit_id, owners_info, unit_no, price, social_media_platfrom, web_portals, created_at, created_by, phase_id, is_enabled, property_id
`

type CreatePublishInfoParams struct {
	CompanyTypesID      pgtype.Int8   `json:"company_types_id"`
	CompaniesID         pgtype.Int8   `json:"companies_id"`
	IsBranch            pgtype.Bool   `json:"is_branch"`
	IsProject           pgtype.Bool   `json:"is_project"`
	ProjectID           pgtype.Int8   `json:"project_id"`
	IsProperty          pgtype.Bool   `json:"is_property"`
	IsPropertyBranch    pgtype.Bool   `json:"is_property_branch"`
	IsUnitBranch        pgtype.Bool   `json:"is_unit_branch"`
	UnitID              pgtype.Int8   `json:"unit_id"`
	OwnersInfo          pgtype.Bool   `json:"owners_info"`
	UnitNo              pgtype.Bool   `json:"unit_no"`
	Price               pgtype.Bool   `json:"price"`
	SocialMediaPlatfrom []string      `json:"social_media_platfrom"`
	WebPortals          []int64       `json:"web_portals"`
	CreatedAt           time.Time     `json:"created_at"`
	CreatedBy           int64         `json:"created_by"`
	PhaseID             pgtype.Int8   `json:"phase_id"`
	IsEnabled           []pgtype.Bool `json:"is_enabled"`
	PropertyID          pgtype.Int8   `json:"property_id"`
}

func (q *Queries) CreatePublishInfo(ctx context.Context, arg CreatePublishInfoParams) (PublishInfo, error) {
	row := q.db.QueryRow(ctx, createPublishInfo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.IsProject,
		arg.ProjectID,
		arg.IsProperty,
		arg.IsPropertyBranch,
		arg.IsUnitBranch,
		arg.UnitID,
		arg.OwnersInfo,
		arg.UnitNo,
		arg.Price,
		arg.SocialMediaPlatfrom,
		arg.WebPortals,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.PhaseID,
		arg.IsEnabled,
		arg.PropertyID,
	)
	var i PublishInfo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProject,
		&i.ProjectID,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.IsUnitBranch,
		&i.UnitID,
		&i.OwnersInfo,
		&i.UnitNo,
		&i.Price,
		&i.SocialMediaPlatfrom,
		&i.WebPortals,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.PhaseID,
		&i.IsEnabled,
		&i.PropertyID,
	)
	return i, err
}

const deletePublishInfoByProject = `-- name: DeletePublishInfoByProject :exec
DELETE FROM publish_info
WHERE 
CASE 
WHEN is_project = TRUE AND phase_id IS NULL AND project_id = $1
THEN TRUE
ELSE is_project = TRUE AND phase_id = $2 AND project_id = $1
END
`

type DeletePublishInfoByProjectParams struct {
	ProjectID pgtype.Int8 `json:"project_id"`
	PhaseID   pgtype.Int8 `json:"phase_id"`
}

func (q *Queries) DeletePublishInfoByProject(ctx context.Context, arg DeletePublishInfoByProjectParams) error {
	_, err := q.db.Exec(ctx, deletePublishInfoByProject, arg.ProjectID, arg.PhaseID)
	return err
}

const getPublishInfoByProjectAndPhaseID = `-- name: GetPublishInfoByProjectAndPhaseID :one
SELECT id, company_types_id, companies_id, is_branch, is_project, project_id, is_property, is_property_branch, is_unit_branch, unit_id, owners_info, unit_no, price, social_media_platfrom, web_portals, created_at, created_by, phase_id, is_enabled, property_id FROM publish_info 
WHERE 
CASE
WHEN is_project = TRUE AND project_id = $1 AND phase_id IS NULL THEN TRUE
ELSE is_project = TRUE AND project_id = $1 AND phase_id = $2 END
`

type GetPublishInfoByProjectAndPhaseIDParams struct {
	ProjectID pgtype.Int8 `json:"project_id"`
	PhaseID   pgtype.Int8 `json:"phase_id"`
}

func (q *Queries) GetPublishInfoByProjectAndPhaseID(ctx context.Context, arg GetPublishInfoByProjectAndPhaseIDParams) (PublishInfo, error) {
	row := q.db.QueryRow(ctx, getPublishInfoByProjectAndPhaseID, arg.ProjectID, arg.PhaseID)
	var i PublishInfo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProject,
		&i.ProjectID,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.IsUnitBranch,
		&i.UnitID,
		&i.OwnersInfo,
		&i.UnitNo,
		&i.Price,
		&i.SocialMediaPlatfrom,
		&i.WebPortals,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.PhaseID,
		&i.IsEnabled,
		&i.PropertyID,
	)
	return i, err
}

const getPublishInfoByProjectPropertyId = `-- name: GetPublishInfoByProjectPropertyId :one
SELECT id, company_types_id, companies_id, is_branch, is_project, project_id, is_property, is_property_branch, is_unit_branch, unit_id, owners_info, unit_no, price, social_media_platfrom, web_portals, created_at, created_by, phase_id, is_enabled, property_id FROM publish_info 
WHERE is_property = TRUE AND property_id = $1
`

func (q *Queries) GetPublishInfoByProjectPropertyId(ctx context.Context, propertyID pgtype.Int8) (PublishInfo, error) {
	row := q.db.QueryRow(ctx, getPublishInfoByProjectPropertyId, propertyID)
	var i PublishInfo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProject,
		&i.ProjectID,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.IsUnitBranch,
		&i.UnitID,
		&i.OwnersInfo,
		&i.UnitNo,
		&i.Price,
		&i.SocialMediaPlatfrom,
		&i.WebPortals,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.PhaseID,
		&i.IsEnabled,
		&i.PropertyID,
	)
	return i, err
}

const updatePublichInfoIsEnableCheck = `-- name: UpdatePublichInfoIsEnableCheck :one
UPDATE publish_info 
SET is_enabled = $2 
WHERE id = $1
RETURNING id, company_types_id, companies_id, is_branch, is_project, project_id, is_property, is_property_branch, is_unit_branch, unit_id, owners_info, unit_no, price, social_media_platfrom, web_portals, created_at, created_by, phase_id, is_enabled, property_id
`

type UpdatePublichInfoIsEnableCheckParams struct {
	ID        int64         `json:"id"`
	IsEnabled []pgtype.Bool `json:"is_enabled"`
}

func (q *Queries) UpdatePublichInfoIsEnableCheck(ctx context.Context, arg UpdatePublichInfoIsEnableCheckParams) (PublishInfo, error) {
	row := q.db.QueryRow(ctx, updatePublichInfoIsEnableCheck, arg.ID, arg.IsEnabled)
	var i PublishInfo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProject,
		&i.ProjectID,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.IsUnitBranch,
		&i.UnitID,
		&i.OwnersInfo,
		&i.UnitNo,
		&i.Price,
		&i.SocialMediaPlatfrom,
		&i.WebPortals,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.PhaseID,
		&i.IsEnabled,
		&i.PropertyID,
	)
	return i, err
}

const updatePublichInfoWebPortals = `-- name: UpdatePublichInfoWebPortals :one
UPDATE publish_info SET web_portals = $2, is_enabled = $3 WHERE id =  $1 RETURNING id, company_types_id, companies_id, is_branch, is_project, project_id, is_property, is_property_branch, is_unit_branch, unit_id, owners_info, unit_no, price, social_media_platfrom, web_portals, created_at, created_by, phase_id, is_enabled, property_id
`

type UpdatePublichInfoWebPortalsParams struct {
	ID         int64         `json:"id"`
	WebPortals []int64       `json:"web_portals"`
	IsEnabled  []pgtype.Bool `json:"is_enabled"`
}

func (q *Queries) UpdatePublichInfoWebPortals(ctx context.Context, arg UpdatePublichInfoWebPortalsParams) (PublishInfo, error) {
	row := q.db.QueryRow(ctx, updatePublichInfoWebPortals, arg.ID, arg.WebPortals, arg.IsEnabled)
	var i PublishInfo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProject,
		&i.ProjectID,
		&i.IsProperty,
		&i.IsPropertyBranch,
		&i.IsUnitBranch,
		&i.UnitID,
		&i.OwnersInfo,
		&i.UnitNo,
		&i.Price,
		&i.SocialMediaPlatfrom,
		&i.WebPortals,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.PhaseID,
		&i.IsEnabled,
		&i.PropertyID,
	)
	return i, err
}
