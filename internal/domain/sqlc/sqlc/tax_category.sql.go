// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tax_category.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaxCategory = `-- name: CreateTaxCategory :one
INSERT INTO tax_category (
  tax_code,
  tax_title,
  tax_description)
VALUES ($1, $2, $3) RETURNING id, tax_code, tax_title, tax_description
`

type CreateTaxCategoryParams struct {
	TaxCode        pgtype.Text `json:"tax_code"`
	TaxTitle       string      `json:"tax_title"`
	TaxDescription string      `json:"tax_description"`
}

func (q *Queries) CreateTaxCategory(ctx context.Context, arg CreateTaxCategoryParams) (TaxCategory, error) {
	row := q.db.QueryRow(ctx, createTaxCategory, arg.TaxCode, arg.TaxTitle, arg.TaxDescription)
	var i TaxCategory
	err := row.Scan(
		&i.ID,
		&i.TaxCode,
		&i.TaxTitle,
		&i.TaxDescription,
	)
	return i, err
}

const deleteTaxCategory = `-- name: DeleteTaxCategory :exec
DELETE FROM tax_category where id = $1
`

func (q *Queries) DeleteTaxCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTaxCategory, id)
	return err
}

const getAllTaxCategory = `-- name: GetAllTaxCategory :many
SELECT id, tax_code, tax_title, tax_description FROM tax_category
`

func (q *Queries) GetAllTaxCategory(ctx context.Context) ([]TaxCategory, error) {
	rows, err := q.db.Query(ctx, getAllTaxCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxCategory
	for rows.Next() {
		var i TaxCategory
		if err := rows.Scan(
			&i.ID,
			&i.TaxCode,
			&i.TaxTitle,
			&i.TaxDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTaxCategoryByTaxCode = `-- name: GetAllTaxCategoryByTaxCode :many
SELECT id, tax_code, tax_title, tax_description FROM tax_category WHERE tax_code = $1
`

func (q *Queries) GetAllTaxCategoryByTaxCode(ctx context.Context, taxCode pgtype.Text) ([]TaxCategory, error) {
	rows, err := q.db.Query(ctx, getAllTaxCategoryByTaxCode, taxCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxCategory
	for rows.Next() {
		var i TaxCategory
		if err := rows.Scan(
			&i.ID,
			&i.TaxCode,
			&i.TaxTitle,
			&i.TaxDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTaxCategoryWithPg = `-- name: GetAllTaxCategoryWithPg :many
SELECT id, tax_code, tax_title, tax_description FROM tax_category LIMIT $1 OFFSET $2
`

type GetAllTaxCategoryWithPgParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTaxCategoryWithPg(ctx context.Context, arg GetAllTaxCategoryWithPgParams) ([]TaxCategory, error) {
	rows, err := q.db.Query(ctx, getAllTaxCategoryWithPg, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxCategory
	for rows.Next() {
		var i TaxCategory
		if err := rows.Scan(
			&i.ID,
			&i.TaxCode,
			&i.TaxTitle,
			&i.TaxDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaxCategoryById = `-- name: GetTaxCategoryById :one
SELECT id, tax_code, tax_title, tax_description FROM tax_category WHERE id = $1
`

func (q *Queries) GetTaxCategoryById(ctx context.Context, id int64) (TaxCategory, error) {
	row := q.db.QueryRow(ctx, getTaxCategoryById, id)
	var i TaxCategory
	err := row.Scan(
		&i.ID,
		&i.TaxCode,
		&i.TaxTitle,
		&i.TaxDescription,
	)
	return i, err
}

const updateTaxCategory = `-- name: UpdateTaxCategory :one
UPDATE tax_category 
SET
   tax_code = $1, 
   tax_title = $2,
   tax_description = $3
WHERE id = $4
RETURNING id, tax_code, tax_title, tax_description
`

type UpdateTaxCategoryParams struct {
	TaxCode        pgtype.Text `json:"tax_code"`
	TaxTitle       string      `json:"tax_title"`
	TaxDescription string      `json:"tax_description"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateTaxCategory(ctx context.Context, arg UpdateTaxCategoryParams) (TaxCategory, error) {
	row := q.db.QueryRow(ctx, updateTaxCategory,
		arg.TaxCode,
		arg.TaxTitle,
		arg.TaxDescription,
		arg.ID,
	)
	var i TaxCategory
	err := row.Scan(
		&i.ID,
		&i.TaxCode,
		&i.TaxTitle,
		&i.TaxDescription,
	)
	return i, err
}
