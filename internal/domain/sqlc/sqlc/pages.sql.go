// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pages.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPageContent = `-- name: CreatePageContent :one
INSERT INTO page_contents (content_category, title,contents, status,content_ref_id,media_type,media_url)
VALUES ($1, $2, $3,$4,$5,$6,$7)
RETURNING id, content_category, content_ref_id, title, contents, media_type, media_url, status
`

type CreatePageContentParams struct {
	ContentCategory int64       `json:"content_category"`
	Title           string      `json:"title"`
	Contents        string      `json:"contents"`
	Status          int64       `json:"status"`
	ContentRefID    int64       `json:"content_ref_id"`
	MediaType       pgtype.Int8 `json:"media_type"`
	MediaUrl        pgtype.Text `json:"media_url"`
}

func (q *Queries) CreatePageContent(ctx context.Context, arg CreatePageContentParams) (PageContent, error) {
	row := q.db.QueryRow(ctx, createPageContent,
		arg.ContentCategory,
		arg.Title,
		arg.Contents,
		arg.Status,
		arg.ContentRefID,
		arg.MediaType,
		arg.MediaUrl,
	)
	var i PageContent
	err := row.Scan(
		&i.ID,
		&i.ContentCategory,
		&i.ContentRefID,
		&i.Title,
		&i.Contents,
		&i.MediaType,
		&i.MediaUrl,
		&i.Status,
	)
	return i, err
}

const createPageOrAdvertisment = `-- name: CreatePageOrAdvertisment :one
INSERT INTO pages
(title, page_category, page_type, wysiwyg, status, created_at,updated_at)
VALUES
($1, $2, $3, $4, $5, $6,$7)
RETURNING id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
`

type CreatePageOrAdvertismentParams struct {
	Title        string             `json:"title"`
	PageCategory int64              `json:"page_category"`
	PageType     int64              `json:"page_type"`
	Wysiwyg      string             `json:"wysiwyg"`
	Status       int64              `json:"status"`
	CreatedAt    time.Time          `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreatePageOrAdvertisment(ctx context.Context, arg CreatePageOrAdvertismentParams) (Page, error) {
	row := q.db.QueryRow(ctx, createPageOrAdvertisment,
		arg.Title,
		arg.PageCategory,
		arg.PageType,
		arg.Wysiwyg,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PageCategory,
		&i.PageType,
		&i.Wysiwyg,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPageContents = `-- name: GetAllPageContents :many
SELECT id, content_category, content_ref_id, title, contents, media_type, media_url, status
FROM page_contents
WHERE status!=3 AND content_category=$1
ORDER BY id DESC
LIMIT $3 OFFSET $2
`

type GetAllPageContentsParams struct {
	ContentCategory int64 `json:"content_category"`
	Offset          int32 `json:"offset"`
	Limit           int32 `json:"limit"`
}

func (q *Queries) GetAllPageContents(ctx context.Context, arg GetAllPageContentsParams) ([]PageContent, error) {
	rows, err := q.db.Query(ctx, getAllPageContents, arg.ContentCategory, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PageContent
	for rows.Next() {
		var i PageContent
		if err := rows.Scan(
			&i.ID,
			&i.ContentCategory,
			&i.ContentRefID,
			&i.Title,
			&i.Contents,
			&i.MediaType,
			&i.MediaUrl,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPages = `-- name: GetAllPages :many
 
SELECT id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
FROM pages
WHERE status!=3 AND page_category=1
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type GetAllPagesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: UpdatePage :one
// UPDATE pages
// SET title = $1,
//
//	page_type = $2,
//	description = $3,
//	status = $4,
//	updated_at = $5
//
// WHERE id = $6
// RETURNING *;
func (q *Queries) GetAllPages(ctx context.Context, arg GetAllPagesParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, getAllPages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PageCategory,
			&i.PageType,
			&i.Wysiwyg,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPageContent = `-- name: GetCountPageContent :one
SELECT COUNT(*)
FROM page_contents
WHERE status!=3 AND content_category=$1
`

func (q *Queries) GetCountPageContent(ctx context.Context, contentCategory int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountPageContent, contentCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountPages = `-- name: GetCountPages :one
SELECT COUNT(*)
FROM pages
WHERE status!=3 AND page_category=1
`

func (q *Queries) GetCountPages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountPages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPageContentByID = `-- name: GetPageContentByID :one
SELECT id, content_category, content_ref_id, title, contents, media_type, media_url, status
FROM page_contents
WHERE id = $1
`

func (q *Queries) GetPageContentByID(ctx context.Context, id int64) (PageContent, error) {
	row := q.db.QueryRow(ctx, getPageContentByID, id)
	var i PageContent
	err := row.Scan(
		&i.ID,
		&i.ContentCategory,
		&i.ContentRefID,
		&i.Title,
		&i.Contents,
		&i.MediaType,
		&i.MediaUrl,
		&i.Status,
	)
	return i, err
}

const getSinglePage = `-- name: GetSinglePage :one
SELECT
id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
FROM
    pages
WHERE
    id = $1
AND page_category=1
`

func (q *Queries) GetSinglePage(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRow(ctx, getSinglePage, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PageCategory,
		&i.PageType,
		&i.Wysiwyg,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePageContent = `-- name: UpdatePageContent :one
UPDATE page_contents
SET content_category = $1,
    title = $2, 
    contents=$3,
    content_ref_id=$4,
    media_type=$5,
    media_url=$6,
    status = $7
WHERE id = $8
RETURNING id, content_category, content_ref_id, title, contents, media_type, media_url, status
`

type UpdatePageContentParams struct {
	ContentCategory int64       `json:"content_category"`
	Title           string      `json:"title"`
	Contents        string      `json:"contents"`
	ContentRefID    int64       `json:"content_ref_id"`
	MediaType       pgtype.Int8 `json:"media_type"`
	MediaUrl        pgtype.Text `json:"media_url"`
	Status          int64       `json:"status"`
	ID              int64       `json:"id"`
}

func (q *Queries) UpdatePageContent(ctx context.Context, arg UpdatePageContentParams) (PageContent, error) {
	row := q.db.QueryRow(ctx, updatePageContent,
		arg.ContentCategory,
		arg.Title,
		arg.Contents,
		arg.ContentRefID,
		arg.MediaType,
		arg.MediaUrl,
		arg.Status,
		arg.ID,
	)
	var i PageContent
	err := row.Scan(
		&i.ID,
		&i.ContentCategory,
		&i.ContentRefID,
		&i.Title,
		&i.Contents,
		&i.MediaType,
		&i.MediaUrl,
		&i.Status,
	)
	return i, err
}

const updatePageContentStatus = `-- name: UpdatePageContentStatus :one
UPDATE page_contents
SET status = $1
WHERE id = $2 
RETURNING id, content_category, content_ref_id, title, contents, media_type, media_url, status
`

type UpdatePageContentStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdatePageContentStatus(ctx context.Context, arg UpdatePageContentStatusParams) (PageContent, error) {
	row := q.db.QueryRow(ctx, updatePageContentStatus, arg.Status, arg.ID)
	var i PageContent
	err := row.Scan(
		&i.ID,
		&i.ContentCategory,
		&i.ContentRefID,
		&i.Title,
		&i.Contents,
		&i.MediaType,
		&i.MediaUrl,
		&i.Status,
	)
	return i, err
}

const updatePageOrAdvertisment = `-- name: UpdatePageOrAdvertisment :one
UPDATE pages
SET
  title = $1,
  page_category = $2,
  page_type = $3,
  wysiwyg = $4,
  status = $5,
  updated_at = $6
WHERE id = $7
RETURNING id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
`

type UpdatePageOrAdvertismentParams struct {
	Title        string             `json:"title"`
	PageCategory int64              `json:"page_category"`
	PageType     int64              `json:"page_type"`
	Wysiwyg      string             `json:"wysiwyg"`
	Status       int64              `json:"status"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ID           int64              `json:"id"`
}

func (q *Queries) UpdatePageOrAdvertisment(ctx context.Context, arg UpdatePageOrAdvertismentParams) (Page, error) {
	row := q.db.QueryRow(ctx, updatePageOrAdvertisment,
		arg.Title,
		arg.PageCategory,
		arg.PageType,
		arg.Wysiwyg,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PageCategory,
		&i.PageType,
		&i.Wysiwyg,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePageStatus = `-- name: UpdatePageStatus :one
 
UPDATE pages
SET 
status=$1
WHERE id=$2 
RETURNING id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
`

type UpdatePageStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdatePageStatus(ctx context.Context, arg UpdatePageStatusParams) (Page, error) {
	row := q.db.QueryRow(ctx, updatePageStatus, arg.Status, arg.ID)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PageCategory,
		&i.PageType,
		&i.Wysiwyg,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
