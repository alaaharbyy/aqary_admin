// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllProjectUnitReviews = `-- name: GetAllProjectUnitReviews :many
select
ur.id, ur.ref_no, ur.units_id, ur.clean, ur.location, ur.facilities, ur.securities, ur.description, ur.reviewer, ur.review_date, ur.proof_images, ur.title,
u.username,
u.email,
pp.property,
pp.projects_id,
pp.id as properties_id,
un.id as units_id
from project_properties pp 
join units un on un.properties_id=pp.id
join units_reviews ur on ur.units_id=un.id
JOIN users u on u.id=ur.reviewer
where pp.users_id=$3
order by ur.id DESC
LIMIT $1 OFFSET $2
`

type GetAllProjectUnitReviewsParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	UsersID int64 `json:"users_id"`
}

type GetAllProjectUnitReviewsRow struct {
	ID           int64       `json:"id"`
	RefNo        string      `json:"ref_no"`
	UnitsID      int64       `json:"units_id"`
	Clean        int32       `json:"clean"`
	Location     int64       `json:"location"`
	Facilities   int64       `json:"facilities"`
	Securities   int32       `json:"securities"`
	Description  string      `json:"description"`
	Reviewer     int64       `json:"reviewer"`
	ReviewDate   time.Time   `json:"review_date"`
	ProofImages  []string    `json:"proof_images"`
	Title        pgtype.Text `json:"title"`
	Username     string      `json:"username"`
	Email        string      `json:"email"`
	Property     int64       `json:"property"`
	ProjectsID   int64       `json:"projects_id"`
	PropertiesID int64       `json:"properties_id"`
	UnitsID_2    int64       `json:"units_id_2"`
}

func (q *Queries) GetAllProjectUnitReviews(ctx context.Context, arg GetAllProjectUnitReviewsParams) ([]GetAllProjectUnitReviewsRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectUnitReviews, arg.Limit, arg.Offset, arg.UsersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectUnitReviewsRow
	for rows.Next() {
		var i GetAllProjectUnitReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.UnitsID,
			&i.Clean,
			&i.Location,
			&i.Facilities,
			&i.Securities,
			&i.Description,
			&i.Reviewer,
			&i.ReviewDate,
			&i.ProofImages,
			&i.Title,
			&i.Username,
			&i.Email,
			&i.Property,
			&i.ProjectsID,
			&i.PropertiesID,
			&i.UnitsID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountProjectUnitReviews = `-- name: GetCountProjectUnitReviews :one

select
count(*)
from project_properties pp 
join units un on un.properties_id=pp.id
join units_reviews ur on ur.units_id=un.id
where pp.users_id=$1
`

func (q *Queries) GetCountProjectUnitReviews(ctx context.Context, usersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProjectUnitReviews, usersID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
