// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_portals.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addJobPortal = `-- name: AddJobPortal :one
INSERT INTO job_portals
(portal_name,
portal_url,
portal_logo,
created_at,
status,
updated_at
)VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, portal_name, portal_url, portal_logo, created_at, status, updated_at
`

type AddJobPortalParams struct {
	PortalName string             `json:"portal_name"`
	PortalUrl  string             `json:"portal_url"`
	PortalLogo string             `json:"portal_logo"`
	CreatedAt  time.Time          `json:"created_at"`
	Status     int64              `json:"status"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) AddJobPortal(ctx context.Context, arg AddJobPortalParams) (JobPortal, error) {
	row := q.db.QueryRow(ctx, addJobPortal,
		arg.PortalName,
		arg.PortalUrl,
		arg.PortalLogo,
		arg.CreatedAt,
		arg.Status,
		arg.UpdatedAt,
	)
	var i JobPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllJobPortals = `-- name: GetAllJobPortals :many
SELECT id, portal_name, portal_url, portal_logo, created_at, status, updated_at FROM job_portals
WHERE status!=5 AND status!=6
ORDER BY updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllJobPortalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllJobPortals(ctx context.Context, arg GetAllJobPortalsParams) ([]JobPortal, error) {
	rows, err := q.db.Query(ctx, getAllJobPortals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobPortal
	for rows.Next() {
		var i JobPortal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.CreatedAt,
			&i.Status,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllJobPortals = `-- name: GetCountAllJobPortals :one
SELECT COUNT(*) FROM job_portals WHERE status!=5 AND status!=6
`

func (q *Queries) GetCountAllJobPortals(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllJobPortals)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleJobPortalByName = `-- name: GetSingleJobPortalByName :many
SELECT id, portal_name, portal_url, portal_logo, created_at, status, updated_at FROM job_portals
WHERE portal_name=$1
`

func (q *Queries) GetSingleJobPortalByName(ctx context.Context, portalName string) ([]JobPortal, error) {
	rows, err := q.db.Query(ctx, getSingleJobPortalByName, portalName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobPortal
	for rows.Next() {
		var i JobPortal
		if err := rows.Scan(
			&i.ID,
			&i.PortalName,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.CreatedAt,
			&i.Status,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleJobPortals = `-- name: GetSingleJobPortals :one
SELECT id, portal_name, portal_url, portal_logo, created_at, status, updated_at FROM job_portals 
WHERE id=$1
`

func (q *Queries) GetSingleJobPortals(ctx context.Context, id int64) (JobPortal, error) {
	row := q.db.QueryRow(ctx, getSingleJobPortals, id)
	var i JobPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const updateJobPortal = `-- name: UpdateJobPortal :one
UPDATE job_portals
SET
portal_name=$1,
portal_url=$2,
portal_logo=$3,
updated_at=$4
WHERE id=$5 AND status!=5 AND status!=6
RETURNING id, portal_name, portal_url, portal_logo, created_at, status, updated_at
`

type UpdateJobPortalParams struct {
	PortalName string             `json:"portal_name"`
	PortalUrl  string             `json:"portal_url"`
	PortalLogo string             `json:"portal_logo"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
	ID         int64              `json:"id"`
}

func (q *Queries) UpdateJobPortal(ctx context.Context, arg UpdateJobPortalParams) (JobPortal, error) {
	row := q.db.QueryRow(ctx, updateJobPortal,
		arg.PortalName,
		arg.PortalUrl,
		arg.PortalLogo,
		arg.UpdatedAt,
		arg.ID,
	)
	var i JobPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const updateJobPortalStatus = `-- name: UpdateJobPortalStatus :one
UPDATE job_portals
SET
  status=$1
WHERE 
  id=$2
RETURNING id, portal_name, portal_url, portal_logo, created_at, status, updated_at
`

type UpdateJobPortalStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateJobPortalStatus(ctx context.Context, arg UpdateJobPortalStatusParams) (JobPortal, error) {
	row := q.db.QueryRow(ctx, updateJobPortalStatus, arg.Status, arg.ID)
	var i JobPortal
	err := row.Scan(
		&i.ID,
		&i.PortalName,
		&i.PortalUrl,
		&i.PortalLogo,
		&i.CreatedAt,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}
