// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agent_subscription_quota.sql

package sqlc

import (
	"context"
	"time"
)

const createAgentSubscriptionQuota = `-- name: CreateAgentSubscriptionQuota :one
INSERT INTO agent_subscription_quota (
     standard,
     featured,
     premium,
     top_deal,
     created_at,
     updated_at,
     broker_company_agents_id,
     ref_no
)VALUES (
    $1, $2, $3, $4 , $5, $6, $7, $8
) RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no
`

type CreateAgentSubscriptionQuotaParams struct {
	Standard              int64     `json:"standard"`
	Featured              int64     `json:"featured"`
	Premium               int64     `json:"premium"`
	TopDeal               int64     `json:"top_deal"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
	BrokerCompanyAgentsID int64     `json:"broker_company_agents_id"`
	RefNo                 string    `json:"ref_no"`
}

func (q *Queries) CreateAgentSubscriptionQuota(ctx context.Context, arg CreateAgentSubscriptionQuotaParams) (AgentSubscriptionQuotum, error) {
	row := q.db.QueryRow(ctx, createAgentSubscriptionQuota,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentsID,
		arg.RefNo,
	)
	var i AgentSubscriptionQuotum
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentsID,
		&i.RefNo,
	)
	return i, err
}

const deleteAgentSubscriptionQuota = `-- name: DeleteAgentSubscriptionQuota :exec
DELETE FROM agent_subscription_quota
Where id = $1
`

func (q *Queries) DeleteAgentSubscriptionQuota(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgentSubscriptionQuota, id)
	return err
}

const getAgentSubscriptionQuota = `-- name: GetAgentSubscriptionQuota :one
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no FROM agent_subscription_quota 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgentSubscriptionQuota(ctx context.Context, limit int32) (AgentSubscriptionQuotum, error) {
	row := q.db.QueryRow(ctx, getAgentSubscriptionQuota, limit)
	var i AgentSubscriptionQuotum
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentsID,
		&i.RefNo,
	)
	return i, err
}

const getAgentSubscriptionQuotaByBrokerCompanyAgentID = `-- name: GetAgentSubscriptionQuotaByBrokerCompanyAgentID :one
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no FROM agent_subscription_quota
Where broker_company_agents_id = $1
`

func (q *Queries) GetAgentSubscriptionQuotaByBrokerCompanyAgentID(ctx context.Context, brokerCompanyAgentsID int64) (AgentSubscriptionQuotum, error) {
	row := q.db.QueryRow(ctx, getAgentSubscriptionQuotaByBrokerCompanyAgentID, brokerCompanyAgentsID)
	var i AgentSubscriptionQuotum
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentsID,
		&i.RefNo,
	)
	return i, err
}

const getAllAgentSubscriptionQuota = `-- name: GetAllAgentSubscriptionQuota :many
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no FROM agent_subscription_quota
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgentSubscriptionQuotaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgentSubscriptionQuota(ctx context.Context, arg GetAllAgentSubscriptionQuotaParams) ([]AgentSubscriptionQuotum, error) {
	rows, err := q.db.Query(ctx, getAllAgentSubscriptionQuota, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgentSubscriptionQuotum
	for rows.Next() {
		var i AgentSubscriptionQuotum
		if err := rows.Scan(
			&i.ID,
			&i.Standard,
			&i.Featured,
			&i.Premium,
			&i.TopDeal,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyAgentsID,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgentSubscriptionQuota = `-- name: UpdateAgentSubscriptionQuota :one
UPDATE agent_subscription_quota
SET standard = $2,
     featured = $3,
     premium = $4,
     top_deal = $5,
     created_at = $6,
     updated_at = $7,
     broker_company_agents_id = $8,
     ref_no= $9
Where id = $1
RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no
`

type UpdateAgentSubscriptionQuotaParams struct {
	ID                    int64     `json:"id"`
	Standard              int64     `json:"standard"`
	Featured              int64     `json:"featured"`
	Premium               int64     `json:"premium"`
	TopDeal               int64     `json:"top_deal"`
	CreatedAt             time.Time `json:"created_at"`
	UpdatedAt             time.Time `json:"updated_at"`
	BrokerCompanyAgentsID int64     `json:"broker_company_agents_id"`
	RefNo                 string    `json:"ref_no"`
}

func (q *Queries) UpdateAgentSubscriptionQuota(ctx context.Context, arg UpdateAgentSubscriptionQuotaParams) (AgentSubscriptionQuotum, error) {
	row := q.db.QueryRow(ctx, updateAgentSubscriptionQuota,
		arg.ID,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentsID,
		arg.RefNo,
	)
	var i AgentSubscriptionQuotum
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentsID,
		&i.RefNo,
	)
	return i, err
}

const updateAgentSubscriptionQuotaByBrokerCompanyAgentID = `-- name: UpdateAgentSubscriptionQuotaByBrokerCompanyAgentID :one
UPDATE agent_subscription_quota
SET  standard = $2,
    featured = $3,
    premium = $4,
    top_deal = $5,
    updated_at = $6
Where  broker_company_agents_id = $1
RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_agents_id, ref_no
`

type UpdateAgentSubscriptionQuotaByBrokerCompanyAgentIDParams struct {
	BrokerCompanyAgentsID int64     `json:"broker_company_agents_id"`
	Standard              int64     `json:"standard"`
	Featured              int64     `json:"featured"`
	Premium               int64     `json:"premium"`
	TopDeal               int64     `json:"top_deal"`
	UpdatedAt             time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAgentSubscriptionQuotaByBrokerCompanyAgentID(ctx context.Context, arg UpdateAgentSubscriptionQuotaByBrokerCompanyAgentIDParams) (AgentSubscriptionQuotum, error) {
	row := q.db.QueryRow(ctx, updateAgentSubscriptionQuotaByBrokerCompanyAgentID,
		arg.BrokerCompanyAgentsID,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.UpdatedAt,
	)
	var i AgentSubscriptionQuotum
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentsID,
		&i.RefNo,
	)
	return i, err
}
