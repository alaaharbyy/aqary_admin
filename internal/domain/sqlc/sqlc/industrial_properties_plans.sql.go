// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_properties_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createIndustrailPropertyPlan = `-- name: CreateIndustrailPropertyPlan :one
INSERT INTO industrial_properties_plans (
    img_url,
    title,
    properties_id,
    property,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type CreateIndustrailPropertyPlanParams struct {
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateIndustrailPropertyPlan(ctx context.Context, arg CreateIndustrailPropertyPlanParams) (IndustrialPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, createIndustrailPropertyPlan,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IndustrialPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIndustrailPropertyPlan = `-- name: DeleteIndustrailPropertyPlan :exec
DELETE FROM industrial_properties_plans
Where id = $1
`

func (q *Queries) DeleteIndustrailPropertyPlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrailPropertyPlan, id)
	return err
}

const getAllIndustrailPropertyPlan = `-- name: GetAllIndustrailPropertyPlan :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrailPropertyPlanParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrailPropertyPlan(ctx context.Context, arg GetAllIndustrailPropertyPlanParams) ([]IndustrialPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllIndustrailPropertyPlan, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlan
	for rows.Next() {
		var i IndustrialPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrailPropertyPlanWithoutPagination = `-- name: GetAllIndustrailPropertyPlanWithoutPagination :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans
ORDER BY id
`

func (q *Queries) GetAllIndustrailPropertyPlanWithoutPagination(ctx context.Context) ([]IndustrialPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllIndustrailPropertyPlanWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlan
	for rows.Next() {
		var i IndustrialPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialPropertyPlanById = `-- name: GetAllIndustrialPropertyPlanById :many
 SELECT id, img_url, title, properties_id, property, created_at, updated_at 
 FROM industrial_properties_plans 
WHERE properties_id = $1 AND property = $2
`

type GetAllIndustrialPropertyPlanByIdParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

func (q *Queries) GetAllIndustrialPropertyPlanById(ctx context.Context, arg GetAllIndustrialPropertyPlanByIdParams) ([]IndustrialPropertiesPlan, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertyPlanById, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlan
	for rows.Next() {
		var i IndustrialPropertiesPlan
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrailPropertyPlan = `-- name: GetIndustrailPropertyPlan :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIndustrailPropertyPlan(ctx context.Context, id int64) (IndustrialPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, getIndustrailPropertyPlan, id)
	var i IndustrialPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIndustrialPropertyPlanByTitle = `-- name: GetIndustrialPropertyPlanByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans 
WHERE title ILIKE $1 AND properties_id = $2 AND property = $3
`

type GetIndustrialPropertyPlanByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetIndustrialPropertyPlanByTitle(ctx context.Context, arg GetIndustrialPropertyPlanByTitleParams) (IndustrialPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, getIndustrialPropertyPlanByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i IndustrialPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIndustrailPropertyPlan = `-- name: UpdateIndustrailPropertyPlan :one
UPDATE industrial_properties_plans
SET img_url = $2,
    title = $3,
    properties_id = $4,
    property = $5,
    created_at = $6,
    updated_at = $7
Where id = $1
RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type UpdateIndustrailPropertyPlanParams struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateIndustrailPropertyPlan(ctx context.Context, arg UpdateIndustrailPropertyPlanParams) (IndustrialPropertiesPlan, error) {
	row := q.db.QueryRow(ctx, updateIndustrailPropertyPlan,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IndustrialPropertiesPlan
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
