// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: listing_problems_report.sql

package sqlc

import (
	"context"
	"time"
)

const createListingProblemsReport = `-- name: CreateListingProblemsReport :one
INSERT INTO listing_problems_report (
    unit_id,
    unit_reference_table,
    reason,
    message,
    company_id,
    company_type,
    profiles_id,
    created_at,
    updated_at,
    ref_no,
    users_id
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, unit_id, unit_reference_table, reason, message, company_id, company_type, profiles_id, created_at, updated_at, ref_no, users_id
`

type CreateListingProblemsReportParams struct {
	UnitID             int64     `json:"unit_id"`
	UnitReferenceTable string    `json:"unit_reference_table"`
	Reason             string    `json:"reason"`
	Message            string    `json:"message"`
	CompanyID          int64     `json:"company_id"`
	CompanyType        int64     `json:"company_type"`
	ProfilesID         int64     `json:"profiles_id"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
	RefNo              string    `json:"ref_no"`
	UsersID            int64     `json:"users_id"`
}

func (q *Queries) CreateListingProblemsReport(ctx context.Context, arg CreateListingProblemsReportParams) (ListingProblemsReport, error) {
	row := q.db.QueryRow(ctx, createListingProblemsReport,
		arg.UnitID,
		arg.UnitReferenceTable,
		arg.Reason,
		arg.Message,
		arg.CompanyID,
		arg.CompanyType,
		arg.ProfilesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.UsersID,
	)
	var i ListingProblemsReport
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.UnitReferenceTable,
		&i.Reason,
		&i.Message,
		&i.CompanyID,
		&i.CompanyType,
		&i.ProfilesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.UsersID,
	)
	return i, err
}

const deleteListingProblemsReport = `-- name: DeleteListingProblemsReport :exec
DELETE FROM listing_problems_report
Where id = $1
`

func (q *Queries) DeleteListingProblemsReport(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteListingProblemsReport, id)
	return err
}

const getAllListingProblemsReport = `-- name: GetAllListingProblemsReport :many
SELECT id, unit_id, unit_reference_table, reason, message, company_id, company_type, profiles_id, created_at, updated_at, ref_no, users_id FROM listing_problems_report
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllListingProblemsReportParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllListingProblemsReport(ctx context.Context, arg GetAllListingProblemsReportParams) ([]ListingProblemsReport, error) {
	rows, err := q.db.Query(ctx, getAllListingProblemsReport, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListingProblemsReport
	for rows.Next() {
		var i ListingProblemsReport
		if err := rows.Scan(
			&i.ID,
			&i.UnitID,
			&i.UnitReferenceTable,
			&i.Reason,
			&i.Message,
			&i.CompanyID,
			&i.CompanyType,
			&i.ProfilesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListingProblemsReport = `-- name: GetListingProblemsReport :one
SELECT id, unit_id, unit_reference_table, reason, message, company_id, company_type, profiles_id, created_at, updated_at, ref_no, users_id FROM listing_problems_report
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetListingProblemsReport(ctx context.Context, limit int32) (ListingProblemsReport, error) {
	row := q.db.QueryRow(ctx, getListingProblemsReport, limit)
	var i ListingProblemsReport
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.UnitReferenceTable,
		&i.Reason,
		&i.Message,
		&i.CompanyID,
		&i.CompanyType,
		&i.ProfilesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.UsersID,
	)
	return i, err
}

const updateListingProblemsReport = `-- name: UpdateListingProblemsReport :one
UPDATE listing_problems_report
SET   unit_id = $2,
    unit_reference_table = $3,
    reason = $4,
    message = $5,
    company_id = $6,
    company_type = $7,
    profiles_id = $8,
    created_at = $9,
    updated_at = $10,
    ref_no = $11,
    users_id = $12
Where id = $1
RETURNING id, unit_id, unit_reference_table, reason, message, company_id, company_type, profiles_id, created_at, updated_at, ref_no, users_id
`

type UpdateListingProblemsReportParams struct {
	ID                 int64     `json:"id"`
	UnitID             int64     `json:"unit_id"`
	UnitReferenceTable string    `json:"unit_reference_table"`
	Reason             string    `json:"reason"`
	Message            string    `json:"message"`
	CompanyID          int64     `json:"company_id"`
	CompanyType        int64     `json:"company_type"`
	ProfilesID         int64     `json:"profiles_id"`
	CreatedAt          time.Time `json:"created_at"`
	UpdatedAt          time.Time `json:"updated_at"`
	RefNo              string    `json:"ref_no"`
	UsersID            int64     `json:"users_id"`
}

func (q *Queries) UpdateListingProblemsReport(ctx context.Context, arg UpdateListingProblemsReportParams) (ListingProblemsReport, error) {
	row := q.db.QueryRow(ctx, updateListingProblemsReport,
		arg.ID,
		arg.UnitID,
		arg.UnitReferenceTable,
		arg.Reason,
		arg.Message,
		arg.CompanyID,
		arg.CompanyType,
		arg.ProfilesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.UsersID,
	)
	var i ListingProblemsReport
	err := row.Scan(
		&i.ID,
		&i.UnitID,
		&i.UnitReferenceTable,
		&i.Reason,
		&i.Message,
		&i.CompanyID,
		&i.CompanyType,
		&i.ProfilesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.UsersID,
	)
	return i, err
}
