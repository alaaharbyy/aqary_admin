// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_company_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeveloperCompanyReview = `-- name: CreateDeveloperCompanyReview :one
INSERT INTO developer_company_reviews (
    rating,
    review,
    profiles_id,
    status,
    developer_companies_id,
    created_at,
    updated_at,
    users_id

)VALUES (
      $1 ,$2, $3, $4, $5, $6, $7, $8
) RETURNING id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id
`

type CreateDeveloperCompanyReviewParams struct {
	Rating               string    `json:"rating"`
	Review               string    `json:"review"`
	ProfilesID           int64     `json:"profiles_id"`
	Status               int64     `json:"status"`
	DeveloperCompaniesID int64     `json:"developer_companies_id"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	UsersID              int64     `json:"users_id"`
}

func (q *Queries) CreateDeveloperCompanyReview(ctx context.Context, arg CreateDeveloperCompanyReviewParams) (DeveloperCompanyReview, error) {
	row := q.db.QueryRow(ctx, createDeveloperCompanyReview,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteDeveloperCompanyReview = `-- name: DeleteDeveloperCompanyReview :exec
DELETE FROM developer_company_reviews
Where id = $1
`

func (q *Queries) DeleteDeveloperCompanyReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperCompanyReview, id)
	return err
}

const getAllDeveloperCompanyReview = `-- name: GetAllDeveloperCompanyReview :many
SELECT id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id FROM developer_company_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperCompanyReviewParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperCompanyReview(ctx context.Context, arg GetAllDeveloperCompanyReviewParams) ([]DeveloperCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyReview, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompanyReview
	for rows.Next() {
		var i DeveloperCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyReviewByCompanyId = `-- name: GetAllDeveloperCompanyReviewByCompanyId :many
SELECT id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id FROM developer_company_reviews
Where developer_companies_id = $1
LIMIT $2
OFFSET $3
`

type GetAllDeveloperCompanyReviewByCompanyIdParams struct {
	DeveloperCompaniesID int64 `json:"developer_companies_id"`
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperCompanyReviewByCompanyId(ctx context.Context, arg GetAllDeveloperCompanyReviewByCompanyIdParams) ([]DeveloperCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyReviewByCompanyId, arg.DeveloperCompaniesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompanyReview
	for rows.Next() {
		var i DeveloperCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgDeveloperCompanyReviews = `-- name: GetAvgDeveloperCompanyReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1)  FROM developer_company_reviews WHERE developer_companies_id = $1
`

func (q *Queries) GetAvgDeveloperCompanyReviews(ctx context.Context, developerCompaniesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgDeveloperCompanyReviews, developerCompaniesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getDeveloperCompanyReview = `-- name: GetDeveloperCompanyReview :one
SELECT id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id FROM developer_company_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDeveloperCompanyReview(ctx context.Context, limit int32) (DeveloperCompanyReview, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyReview, limit)
	var i DeveloperCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getDeveloperCompanyReviewByCompanyId = `-- name: GetDeveloperCompanyReviewByCompanyId :one
SELECT id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id FROM developer_company_reviews 
WHERE developer_companies_id = $3 LIMIT $1 OFFSET $2
`

type GetDeveloperCompanyReviewByCompanyIdParams struct {
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
	DeveloperCompaniesID int64 `json:"developer_companies_id"`
}

func (q *Queries) GetDeveloperCompanyReviewByCompanyId(ctx context.Context, arg GetDeveloperCompanyReviewByCompanyIdParams) (DeveloperCompanyReview, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyReviewByCompanyId, arg.Limit, arg.Offset, arg.DeveloperCompaniesID)
	var i DeveloperCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const updateDeveloperCompanyReview = `-- name: UpdateDeveloperCompanyReview :one
UPDATE developer_company_reviews
SET  rating =$2,
    review =$3,
     profiles_id = $4,
    status = $5,
    developer_companies_id = $6,
    created_at = $7,
    updated_at = $8,
    users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, developer_companies_id, created_at, updated_at, users_id
`

type UpdateDeveloperCompanyReviewParams struct {
	ID                   int64     `json:"id"`
	Rating               string    `json:"rating"`
	Review               string    `json:"review"`
	ProfilesID           int64     `json:"profiles_id"`
	Status               int64     `json:"status"`
	DeveloperCompaniesID int64     `json:"developer_companies_id"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	UsersID              int64     `json:"users_id"`
}

func (q *Queries) UpdateDeveloperCompanyReview(ctx context.Context, arg UpdateDeveloperCompanyReviewParams) (DeveloperCompanyReview, error) {
	row := q.db.QueryRow(ctx, updateDeveloperCompanyReview,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
