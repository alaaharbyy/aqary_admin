// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_unit_types.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalPropertyUnitTypes = `-- name: CreateAgriculturalPropertyUnitTypes :one
INSERT INTO agricultural_unit_types (
     description,
     image_url,
     min_area,
     max_area,
     min_price,
     max_price,
     parking,
     balcony,
     properties_id,
     property,
     property_types_id,
     created_at,
     updated_at,
     title,
     bedrooms
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
) RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms
`

type CreateAgriculturalPropertyUnitTypesParams struct {
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
}

func (q *Queries) CreateAgriculturalPropertyUnitTypes(ctx context.Context, arg CreateAgriculturalPropertyUnitTypesParams) (AgriculturalUnitType, error) {
	row := q.db.QueryRow(ctx, createAgriculturalPropertyUnitTypes,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
	)
	var i AgriculturalUnitType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}

const deleteAgriculturalPropertyUnitTypes = `-- name: DeleteAgriculturalPropertyUnitTypes :exec
DELETE FROM agricultural_unit_types
Where id = $1
`

func (q *Queries) DeleteAgriculturalPropertyUnitTypes(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalPropertyUnitTypes, id)
	return err
}

const deleteAgriculturalUnitType = `-- name: DeleteAgriculturalUnitType :exec
DELETE FROM agricultural_unit_types
Where id = $1
`

func (q *Queries) DeleteAgriculturalUnitType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalUnitType, id)
	return err
}

const getAgriculturalPropertyUnitTypes = `-- name: GetAgriculturalPropertyUnitTypes :one
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgriculturalPropertyUnitTypes(ctx context.Context, id int64) (AgriculturalUnitType, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyUnitTypes, id)
	var i AgriculturalUnitType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}

const getAgriculturalUnitTypesByPropertiesIdAndProperty = `-- name: GetAgriculturalUnitTypesByPropertiesIdAndProperty :many
SELECT property_types.id AS property_type_id,
property_types."type" AS property_type,is_residential,
is_commercial,property_types.property_type_facts_id
FROM agricultural_unit_types
LEFT JOIN property_types ON agricultural_unit_types.property_types_id = property_types.id
WHERE properties_id =$1 AND property = $2
`

type GetAgriculturalUnitTypesByPropertiesIdAndPropertyParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

type GetAgriculturalUnitTypesByPropertiesIdAndPropertyRow struct {
	PropertyTypeID      pgtype.Int8 `json:"property_type_id"`
	PropertyType        pgtype.Text `json:"property_type"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
}

func (q *Queries) GetAgriculturalUnitTypesByPropertiesIdAndProperty(ctx context.Context, arg GetAgriculturalUnitTypesByPropertiesIdAndPropertyParams) ([]GetAgriculturalUnitTypesByPropertiesIdAndPropertyRow, error) {
	rows, err := q.db.Query(ctx, getAgriculturalUnitTypesByPropertiesIdAndProperty, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAgriculturalUnitTypesByPropertiesIdAndPropertyRow
	for rows.Next() {
		var i GetAgriculturalUnitTypesByPropertiesIdAndPropertyRow
		if err := rows.Scan(
			&i.PropertyTypeID,
			&i.PropertyType,
			&i.IsResidential,
			&i.IsCommercial,
			&i.PropertyTypeFactsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAgriculturalUnitTypesNamesByPropertiesIdAndPropertyType = `-- name: GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyType :many
SELECT
agricultural_unit_types.id,
title,
bedrooms
FROM
agricultural_unit_types
LEFT JOIN property_types ON property_types.id = agricultural_unit_types.property_types_id
WHERE
properties_id = $1
AND property = $2
AND property_types_id = $3
`

type GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeParams struct {
	PropertiesID    int64 `json:"properties_id"`
	Property        int64 `json:"property"`
	PropertyTypesID int64 `json:"property_types_id"`
}

type GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeRow struct {
	ID       int64       `json:"id"`
	Title    string      `json:"title"`
	Bedrooms pgtype.Text `json:"bedrooms"`
}

func (q *Queries) GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyType(ctx context.Context, arg GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeParams) ([]GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeRow, error) {
	rows, err := q.db.Query(ctx, getAgriculturalUnitTypesNamesByPropertiesIdAndPropertyType, arg.PropertiesID, arg.Property, arg.PropertyTypesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeRow
	for rows.Next() {
		var i GetAgriculturalUnitTypesNamesByPropertiesIdAndPropertyTypeRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Bedrooms); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyUnitTypes = `-- name: GetAllAgriculturalPropertyUnitTypes :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalPropertyUnitTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyUnitTypes(ctx context.Context, arg GetAllAgriculturalPropertyUnitTypesParams) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyUnitTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyUnitTypesWithoutPagination = `-- name: GetAllAgriculturalPropertyUnitTypesWithoutPagination :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
ORDER BY id
`

func (q *Queries) GetAllAgriculturalPropertyUnitTypesWithoutPagination(ctx context.Context) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyUnitTypesWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalUnitTypeByPropertyId = `-- name: GetAllAgriculturalUnitTypeByPropertyId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
WHERE property = $1 AND properties_id = $2
`

type GetAllAgriculturalUnitTypeByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllAgriculturalUnitTypeByPropertyId(ctx context.Context, arg GetAllAgriculturalUnitTypeByPropertyIdParams) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalUnitTypeByPropertyId, arg.Property, arg.PropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalUnitTypeByPropertyIdAndBedroom = `-- name: GetAllAgriculturalUnitTypeByPropertyIdAndBedroom :many
SELECT agricultural_unit_types.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, agricultural_unit_types.created_at, agricultural_unit_types.updated_at, title, bedrooms, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, status, unit_types, icon FROM agricultural_unit_types
INNER JOIN property_types On agricultural_unit_types.property_types_id = property_types.id
WHERE property = $1 AND properties_id = $2 AND  bedrooms  ILIKE  $3 AND property_types.id = $4
`

type GetAllAgriculturalUnitTypeByPropertyIdAndBedroomParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

type GetAllAgriculturalUnitTypeByPropertyIdAndBedroomRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status              int64       `json:"status"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllAgriculturalUnitTypeByPropertyIdAndBedroom(ctx context.Context, arg GetAllAgriculturalUnitTypeByPropertyIdAndBedroomParams) ([]GetAllAgriculturalUnitTypeByPropertyIdAndBedroomRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalUnitTypeByPropertyIdAndBedroom,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalUnitTypeByPropertyIdAndBedroomRow
	for rows.Next() {
		var i GetAllAgriculturalUnitTypeByPropertyIdAndBedroomRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitId = `-- name: GetAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
WHERE property = $1 AND properties_id = $2 AND  bedrooms  ILIKE  $3 AND agricultural_unit_types.id = $4
`

type GetAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitIdParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

func (q *Queries) GetAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitId(ctx context.Context, arg GetAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitIdParams) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalUnitTypeByPropertyIdAndBedroomAndUnitId,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroom = `-- name: GetAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroom :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
WHERE property = $1 AND properties_id = $2 AND id = $3 AND bedrooms = $4
`

type GetAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroomParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	ID           int64       `json:"id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
}

func (q *Queries) GetAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroom(ctx context.Context, arg GetAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroomParams) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalUnitTypeByPropertyIdByAgriculturalUnitTypeAndBedroom,
		arg.Property,
		arg.PropertiesID,
		arg.ID,
		arg.Bedrooms,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalUnitTypeByPropertyIdWithPagination = `-- name: GetAllAgriculturalUnitTypeByPropertyIdWithPagination :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms FROM agricultural_unit_types
WHERE property = $3 AND properties_id = $4  LIMIT $1 OFFSET $2
`

type GetAllAgriculturalUnitTypeByPropertyIdWithPaginationParams struct {
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllAgriculturalUnitTypeByPropertyIdWithPagination(ctx context.Context, arg GetAllAgriculturalUnitTypeByPropertyIdWithPaginationParams) ([]AgriculturalUnitType, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalUnitTypeByPropertyIdWithPagination,
		arg.Limit,
		arg.Offset,
		arg.Property,
		arg.PropertiesID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalUnitType
	for rows.Next() {
		var i AgriculturalUnitType
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCountAgriculturalUnitTypeByPropertyId = `-- name: GetAllCountAgriculturalUnitTypeByPropertyId :one
SELECT COUNT(*) FROM agricultural_unit_types
WHERE property = $1 AND properties_id = $2
`

type GetAllCountAgriculturalUnitTypeByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllCountAgriculturalUnitTypeByPropertyId(ctx context.Context, arg GetAllCountAgriculturalUnitTypeByPropertyIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountAgriculturalUnitTypeByPropertyId, arg.Property, arg.PropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAgriculturalUnitTypeByPropertyId = `-- name: GetCountAgriculturalUnitTypeByPropertyId :one
SELECT COUNT(*) FROM agricultural_unit_types
WHERE property = $1 AND properties_id = $2
`

type GetCountAgriculturalUnitTypeByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetCountAgriculturalUnitTypeByPropertyId(ctx context.Context, arg GetCountAgriculturalUnitTypeByPropertyIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgriculturalUnitTypeByPropertyId, arg.Property, arg.PropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateAgriculturalPropertyUnitTypes = `-- name: UpdateAgriculturalPropertyUnitTypes :one
UPDATE agricultural_unit_types
SET  description = $2,
     image_url = $3,
     min_area = $4,
     max_area = $5,
     min_price = $6,
     max_price = $7,
     parking = $8,
     balcony = $9,
     properties_id = $10,
     property = $11,
     property_types_id = $12,
     created_at = $13,
     updated_at = $14,
     title = $15,
     bedrooms = $16
Where id = $1
RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms
`

type UpdateAgriculturalPropertyUnitTypesParams struct {
	ID              int64       `json:"id"`
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
}

func (q *Queries) UpdateAgriculturalPropertyUnitTypes(ctx context.Context, arg UpdateAgriculturalPropertyUnitTypesParams) (AgriculturalUnitType, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalPropertyUnitTypes,
		arg.ID,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Bedrooms,
	)
	var i AgriculturalUnitType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
	)
	return i, err
}
