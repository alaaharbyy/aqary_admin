// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	ActivateSubscriptionOrder(ctx context.Context, arg ActivateSubscriptionOrderParams) (SubscriptionOrder, error)
	AddDraftContractFile(ctx context.Context, arg AddDraftContractFileParams) error
	AddFinalContractFile(ctx context.Context, arg AddFinalContractFileParams) error
	AddGlobalTag(ctx context.Context, arg AddGlobalTagParams) (GlobalTagging, error)
	AddJobPortal(ctx context.Context, arg AddJobPortalParams) (JobPortal, error)
	AddPost(ctx context.Context, arg AddPostParams) (AqaryPropertyPost, error)
	AddPostedCareerPortal(ctx context.Context, arg AddPostedCareerPortalParams) (PostedCareerPortal, error)
	AddProjectAd(ctx context.Context, arg AddProjectAdParams) (AqaryProjectAd, error)
	AddProjectPost(ctx context.Context, arg AddProjectPostParams) (AqaryProjectPost, error)
	AddPropertyAd(ctx context.Context, arg AddPropertyAdParams) (AqaryPropertyAd, error)
	AddPropertyType(ctx context.Context, arg AddPropertyTypeParams) error
	AddUnitType(ctx context.Context, arg AddUnitTypeParams) error
	AqaryProjectAdsMediaDeleteStatusUpdate(ctx context.Context, arg AqaryProjectAdsMediaDeleteStatusUpdateParams) (AqaryProjectAdsMedium, error)
	AqaryPropertyAdsMediaDeleteStatusUpdate(ctx context.Context, arg AqaryPropertyAdsMediaDeleteStatusUpdateParams) (AqaryPropertyAdsMedium, error)
	BulkDeleteCompanyUserExpertise(ctx context.Context, arg BulkDeleteCompanyUserExpertiseParams) error
	BulkUpdateProjectsRefreshedAt(ctx context.Context, arg BulkUpdateProjectsRefreshedAtParams) ([]int64, error)
	BulkUpdatePropertyVersionsRefreshedAt(ctx context.Context, arg BulkUpdatePropertyVersionsRefreshedAtParams) ([]int64, error)
	BulkUpdateRefreshSchedule(ctx context.Context, arg BulkUpdateRefreshScheduleParams) error
	BulkUpdateUnitVersionsRefreshedAt(ctx context.Context, arg BulkUpdateUnitVersionsRefreshedAtParams) ([]int64, error)
	// -- name: GetCareerActivitiesCount :one
	// SELECT COUNT(*) FROM careers c
	// JOIN careers_activities ca ON c.id=ca.ref_activity_id
	// WHERE c.employers_id=$1 ;
	// WITH
	// candidate_count AS (
	//     SELECT
	//         c.careers_id,
	//         COUNT(c.id) AS count
	//     FROM
	//         candidates c
	//     JOIN
	//         applicants a ON c.applicants_id = a.id
	//     JOIN
	//         careers car ON c.careers_id = car.id
	//     WHERE
	//         c.application_status != 6 AND (car.career_status != 6 AND car.career_status != 5)
	//     GROUP BY
	//         c.careers_id
	// )
	// LEFT JOIN
	//     candidate_count cc ON cr.id = cc.careers_id
	// JOIN
	//     employers e ON cr.employers_id = e.id
	CareersAdvancedSearch(ctx context.Context, arg CareersAdvancedSearchParams) ([]CareersAdvancedSearchRow, error)
	// JOIN
	CareersAdvancedSearchCount(ctx context.Context, arg CareersAdvancedSearchCountParams) (int64, error)
	ChangeEntitiesPropertiesExclusivity(ctx context.Context, arg ChangeEntitiesPropertiesExclusivityParams) ([]int64, error)
	ChangePhaseExclusivity(ctx context.Context, arg ChangePhaseExclusivityParams) error
	ChangeProjectExclusivity(ctx context.Context, arg ChangeProjectExclusivityParams) error
	ChangeProjectPhasesExclusivity(ctx context.Context, arg ChangeProjectPhasesExclusivityParams) ([]int64, error)
	ChangePropertiesUnitsExclusivity(ctx context.Context, arg ChangePropertiesUnitsExclusivityParams) error
	ChangePropertyExclusivity(ctx context.Context, arg ChangePropertyExclusivityParams) error
	ChangeStatusAqaryGuide(ctx context.Context, arg ChangeStatusAqaryGuideParams) error
	ChangeStatusForPropertyType(ctx context.Context, arg ChangeStatusForPropertyTypeParams) error
	ChangeStatusForUnitType(ctx context.Context, arg ChangeStatusForUnitTypeParams) error
	ChangeStatusOfBlogByID(ctx context.Context, arg ChangeStatusOfBlogByIDParams) (Blog, error)
	ChangeStatusOfCompanyCategory(ctx context.Context, arg ChangeStatusOfCompanyCategoryParams) (CompanyCategory, error)
	ChangeStatusOfExhibitionByID(ctx context.Context, arg ChangeStatusOfExhibitionByIDParams) error
	ChangeStatusOfPlatformUserByUserName(ctx context.Context, arg ChangeStatusOfPlatformUserByUserNameParams) (pgtype.Int8, error)
	ChangeStatusOfTower(ctx context.Context, arg ChangeStatusOfTowerParams) (Tower, error)
	ChangeStatusSubscriptionCost(ctx context.Context, arg ChangeStatusSubscriptionCostParams) error
	ChangeStatusSubscriptionProductions(ctx context.Context, arg ChangeStatusSubscriptionProductionsParams) (SubscriptionProduct, error)
	ChangeUnitExclusivity(ctx context.Context, arg ChangeUnitExclusivityParams) error
	CheckExistingEntity(ctx context.Context, arg CheckExistingEntityParams) (CheckExistingEntityRow, error)
	CheckExistingRefreshSchedule(ctx context.Context, arg CheckExistingRefreshScheduleParams) (CheckExistingRefreshScheduleRow, error)
	CheckExitingompanyUserExpertise(ctx context.Context, arg CheckExitingompanyUserExpertiseParams) (int64, error)
	CheckIfAllFacilitiesAmenitiesAreCorrect(ctx context.Context, facilitiesAmenitiesList []int64) ([]int64, error)
	CheckIfCategoryIsExist(ctx context.Context, id int64) (bool, error)
	CheckIfFacilitiesAmenitiesHasCategoryID(ctx context.Context, categories int64) (pgtype.Int8, error)
	CheckIfFacilityAmenityIsInUse(ctx context.Context, facilityAmenityID int64) (bool, error)
	CheckIfPropertyTypeExists(ctx context.Context, dollar_1 int64) (pgtype.Bool, error)
	CheckIfSubscriptionOrderExistBySubscriberId(ctx context.Context, arg CheckIfSubscriptionOrderExistBySubscriberIdParams) (SubscriptionOrder, error)
	CheckIfUnitBelongToProject(ctx context.Context, arg CheckIfUnitBelongToProjectParams) (CheckIfUnitBelongToProjectRow, error)
	CheckIfUnitExistByRefNo(ctx context.Context, refNo string) (bool, error)
	CheckIfUnitNoExist(ctx context.Context, arg CheckIfUnitNoExistParams) (bool, error)
	CheckIfUnitTypeExists(ctx context.Context, dollar_1 int64) (pgtype.Bool, error)
	CheckIfXMLCompanyProfilePhaseExist(ctx context.Context, refNumber string) (bool, error)
	CheckIfXMLCompanyProfileProjectExist(ctx context.Context, refNumber string) (bool, error)
	CheckIsValidToShare(ctx context.Context, arg CheckIsValidToShareParams) (bool, error)
	CheckLeadProperty(ctx context.Context, arg CheckLeadPropertyParams) (LeadsProperty, error)
	CheckOtherContact(ctx context.Context, arg CheckOtherContactParams) (ContactsOtherContact, error)
	CheckProfileLanguageExists(ctx context.Context, arg CheckProfileLanguageExistsParams) (CheckProfileLanguageExistsRow, error)
	CheckProfileNationalityExists(ctx context.Context, arg CheckProfileNationalityExistsParams) (CheckProfileNationalityExistsRow, error)
	// SELECT
	//    count(se.id)
	// FROM sharing_entities AS se
	// JOIN sharing ON sharing.id=se.sharing_id
	// JOIN projects ON projects.id=sharing.entity_id and sharing.entity_type_id= @project_entity::bigint
	// LEFT join phases AS ph ON
	// 	(CASE
	//             WHEN se.entity_type = @phase_entity::BIGINT AND se.phase_id is null and se.property_id is null THEN ph.id = se.entity_id
	//             WHEN se.entity_type =  @property_entity::bigint and se.property_id is null and se.phase_id is not null THEN ph.id = se.phase_id
	//         END)
	// LEFT join property AS p ON
	// 	(CASE
	//             WHEN se.entity_type = @property_entity::BIGINT AND se.property_id is null and se.phase_id is not null THEN p.id = se.entity_id
	//             WHEN se.entity_type = @unit_entity::bigint and se.property_id is not null and se.phase_id is null THEN p.id = se.property_id
	//         END)
	// LEFT JOIN units on units.id=se.entity_id and se.entity_type= @unit_entity::bigint
	// WHERE
	//     se.sharing_id= @sharing_id::bigint
	// AND
	// 	se.entity_type= @entity_type_id::bigint
	// AND
	// 	(case when @phase_id::bigint= 0 then true else se.phase_id= @phase_id end )
	// AND
	// 	(case when @property_id::bigint= 0 then true else se.property_id= @property_id end )
	// ;
	CheckSharingBySharedTo(ctx context.Context, arg CheckSharingBySharedToParams) (CheckSharingBySharedToRow, error)
	CheckUnitTypeIfExists(ctx context.Context, unitTypeIds []int64) ([]int64, error)
	CompanyCategoryExistsInActivity(ctx context.Context, companyCategoryID int64) (int64, error)
	ConvertExistingReaction(ctx context.Context, arg ConvertExistingReactionParams) (FaqUserReaction, error)
	CountActivitiesByType(ctx context.Context, arg CountActivitiesByTypeParams) (int64, error)
	CountAllCompanyUsersByStatus(ctx context.Context, arg CountAllCompanyUsersByStatusParams) (int64, error)
	CountAllFAQs(ctx context.Context, dollar_1 string) (int64, error)
	CountAllFreelanceUsers(ctx context.Context, search interface{}) (int64, error)
	CountAllOwnerUsers(ctx context.Context, search interface{}) (int64, error)
	CountAllProjectPhaseSharing(ctx context.Context, arg CountAllProjectPhaseSharingParams) (int64, error)
	//          AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	//     AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	CountAllProjectPhaseSharingWithMe(ctx context.Context, arg CountAllProjectPhaseSharingWithMeParams) (int64, error)
	CountAllProjectPropertyUnitSharing(ctx context.Context, arg CountAllProjectPropertyUnitSharingParams) (int64, error)
	CountAllProjectPropertyUnitSharingWithMe(ctx context.Context, arg CountAllProjectPropertyUnitSharingWithMeParams) (int64, error)
	CountAllProjectSharing(ctx context.Context, arg CountAllProjectSharingParams) (int64, error)
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	CountAllProjectSharingWithMe(ctx context.Context, arg CountAllProjectSharingWithMeParams) (int64, error)
	CountAllShareRequestByOwnerID(ctx context.Context, ownerID pgtype.Int8) (int64, error)
	CountAllSharedPhases(ctx context.Context, arg CountAllSharedPhasesParams) (int64, error)
	CountAllSubSection(ctx context.Context) (int64, error)
	CountAllWebportal(ctx context.Context, createdBy int64) (int64, error)
	CountAuctionDocumentsByAuctionID(ctx context.Context, auctionID pgtype.Int8) (int64, error)
	CountAuctionMediaRecordByAuctionID(ctx context.Context, auctionID int64) (int64, error)
	CountAuctionPartners(ctx context.Context, arg CountAuctionPartnersParams) (int64, error)
	CountAuctionPlansByAuctionID(ctx context.Context, auctionID pgtype.Int8) (int64, error)
	CountAuctions(ctx context.Context, arg CountAuctionsParams) (int64, error)
	CountBannerPlanCosts(ctx context.Context) (int64, error)
	CountChangesByActivityID(ctx context.Context, arg CountChangesByActivityIDParams) (int64, error)
	CountDeletedAuctionPartners(ctx context.Context, dollar_1 string) (int64, error)
	CountDeletedAuctions(ctx context.Context, dollar_1 string) (int64, error)
	CountDeletedFaqs(ctx context.Context, dollar_1 string) (int64, error)
	CountFilterHolidayHome(ctx context.Context, arg CountFilterHolidayHomeParams) (int64, error)
	// FROM
	//     x
	//     INNER JOIN project_properties pp ON x.property_id = pp.id;
	CountProjectPropertySharing(ctx context.Context, arg CountProjectPropertySharingParams) (int64, error)
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE @user_id::bigint = created_by END
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE @user_id::bigint = created_by END
	CountProjectPropertySharingWithMe(ctx context.Context, arg CountProjectPropertySharingWithMeParams) (int64, error)
	CountSharingEntityIDsByEntityType(ctx context.Context, arg CountSharingEntityIDsByEntityTypeParams) (int64, error)
	CountSubscriptionsPrice(ctx context.Context) (int64, error)
	CreateActivityChange(ctx context.Context, arg CreateActivityChangeParams) (AuctionsActivityChange, error)
	CreateActivityChanges(ctx context.Context, arg CreateActivityChangesParams) (ActivityChange, error)
	CreateActivityDetails(ctx context.Context, arg CreateActivityDetailsParams) (ContactsActivityDetail, error)
	CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error)
	CreateAdvertisment(ctx context.Context, arg CreateAdvertismentParams) (Advertisement, error)
	CreateAgentProducts(ctx context.Context, arg CreateAgentProductsParams) (AgentProduct, error)
	CreateAgentRoute(ctx context.Context, arg CreateAgentRouteParams) (AgentRoute, error)
	CreateAgentSubscriptionQuota(ctx context.Context, arg CreateAgentSubscriptionQuotaParams) (AgentSubscriptionQuotum, error)
	CreateAgentSubscriptionQuotaBranch(ctx context.Context, arg CreateAgentSubscriptionQuotaBranchParams) (AgentSubscriptionQuotaBranch, error)
	CreateApplicant(ctx context.Context, arg CreateApplicantParams) (Applicant, error)
	CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error)
	CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error)
	CreateApprovalForRequest(ctx context.Context, arg CreateApprovalForRequestParams) (int64, error)
	CreateAqaryGuide(ctx context.Context, arg CreateAqaryGuideParams) error
	CreateAqaryMediaRections(ctx context.Context, arg CreateAqaryMediaRectionsParams) (AqaryMediaLike, error)
	CreateAqaryProjectAdsMedia(ctx context.Context, arg CreateAqaryProjectAdsMediaParams) (AqaryProjectAdsMedium, error)
	CreateAqaryPropertyAdsMedia(ctx context.Context, arg CreateAqaryPropertyAdsMediaParams) (AqaryPropertyAdsMedium, error)
	CreateAuction(ctx context.Context, arg CreateAuctionParams) (Auction, error)
	CreateAuctionActivity(ctx context.Context, arg CreateAuctionActivityParams) (AuctionsActivity, error)
	// query.sql
	CreateAuctionDocument(ctx context.Context, arg CreateAuctionDocumentParams) (AuctionsDocument, error)
	CreateAuctionMedia(ctx context.Context, arg CreateAuctionMediaParams) (AuctionsMedium, error)
	CreateAuctionPartner(ctx context.Context, arg CreateAuctionPartnerParams) (AuctionsPartner, error)
	CreateAuctionPlan(ctx context.Context, arg CreateAuctionPlanParams) (AuctionsPlan, error)
	// query.sql
	// Insert a new addresses
	CreateAuctionsAddresses(ctx context.Context, arg CreateAuctionsAddressesParams) (AuctionsAddress, error)
	CreateAuctionsUnitFact(ctx context.Context, arg CreateAuctionsUnitFactParams) (AuctionsUnitFact, error)
	CreateAuctionsUnits(ctx context.Context, arg CreateAuctionsUnitsParams) (AuctionsUnit, error)
	CreateBank(ctx context.Context, arg CreateBankParams) (BankListing, error)
	CreateBankAccountDetails(ctx context.Context, arg CreateBankAccountDetailsParams) (BankAccountDetail, error)
	CreateBankBranch(ctx context.Context, arg CreateBankBranchParams) (BankBranch, error)
	CreateBanner(ctx context.Context, arg CreateBannerParams) (Banner, error)
	CreateBannerCriteria(ctx context.Context, arg CreateBannerCriteriaParams) (BannerCriterium, error)
	CreateBannerOrder(ctx context.Context, arg CreateBannerOrderParams) (pgtype.Int8, error)
	CreateBannerPlanCost(ctx context.Context, arg CreateBannerPlanCostParams) (int64, error)
	CreateBannerPlanPackage(ctx context.Context, arg CreateBannerPlanPackageParams) error
	CreateBannerType(ctx context.Context, arg CreateBannerTypeParams) (BannerType, error)
	CreateBenefit(ctx context.Context, arg CreateBenefitParams) (Benefit, error)
	CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error)
	CreateBlogCategory(ctx context.Context, arg CreateBlogCategoryParams) (BlogCategory, error)
	CreateBookingActivity(ctx context.Context, arg CreateBookingActivityParams) (BookingActivity, error)
	CreateBookingPortal(ctx context.Context, arg CreateBookingPortalParams) (BookingPortal, error)
	CreateBrokerAgent(ctx context.Context, arg CreateBrokerAgentParams) (BrokerCompanyAgent, error)
	CreateBrokerAgentReviews(ctx context.Context, arg CreateBrokerAgentReviewsParams) (BrokerAgentReview, error)
	CreateBrokerBranchAgent(ctx context.Context, arg CreateBrokerBranchAgentParams) (BrokerCompanyBranchesAgent, error)
	CreateBrokerBranchAgentReviews(ctx context.Context, arg CreateBrokerBranchAgentReviewsParams) (BrokerBranchAgentReview, error)
	CreateBrokerBranchCompany(ctx context.Context, arg CreateBrokerBranchCompanyParams) (BrokerCompaniesBranch, error)
	CreateBrokerBranchCompanyReviews(ctx context.Context, arg CreateBrokerBranchCompanyReviewsParams) (BrokerBranchCompanyReview, error)
	CreateBrokerCompaniesBranchesServices(ctx context.Context, arg CreateBrokerCompaniesBranchesServicesParams) (BrokerCompaniesBranchesService, error)
	CreateBrokerCompany(ctx context.Context, arg CreateBrokerCompanyParams) (BrokerCompany, error)
	CreateBrokerCompanyAgentProperty(ctx context.Context, arg CreateBrokerCompanyAgentPropertyParams) (BrokerCompanyAgentProperty, error)
	CreateBrokerCompanyAgentPropertyBranch(ctx context.Context, arg CreateBrokerCompanyAgentPropertyBranchParams) (BrokerCompanyAgentPropertiesBranch, error)
	CreateBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg CreateBrokerCompanyAgentPropertyBranchDocumentParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error)
	CreateBrokerCompanyAgentPropertyBranchMedia(ctx context.Context, arg CreateBrokerCompanyAgentPropertyBranchMediaParams) (BrokerCompanyAgentPropertiesMediaBranch, error)
	CreateBrokerCompanyAgentPropertyDocument(ctx context.Context, arg CreateBrokerCompanyAgentPropertyDocumentParams) (BrokerCompanyAgentPropertiesDocument, error)
	CreateBrokerCompanyAgentPropertyMedia(ctx context.Context, arg CreateBrokerCompanyAgentPropertyMediaParams) (BrokerCompanyAgentPropertiesMedium, error)
	CreateBrokerCompanyReview(ctx context.Context, arg CreateBrokerCompanyReviewParams) (BrokerCompanyReview, error)
	CreateBuildingReviews(ctx context.Context, arg CreateBuildingReviewsParams) (BuildingReview, error)
	CreateBulkFacilityAmenityForEntity(ctx context.Context, arg CreateBulkFacilityAmenityForEntityParams) error
	CreateCandidateMilstone(ctx context.Context, arg CreateCandidateMilstoneParams) (CandidatesMilestone, error)
	CreateCareerSpecialization(ctx context.Context, arg CreateCareerSpecializationParams) (Specialization, error)
	CreateCategorySettings(ctx context.Context, arg CreateCategorySettingsParams) error
	CreateCity(ctx context.Context, arg CreateCityParams) (City, error)
	CreateCityGuide(ctx context.Context, arg CreateCityGuideParams) (pgtype.Int8, error)
	CreateCollectionName(ctx context.Context, arg CreateCollectionNameParams) (CollectionName, error)
	CreateCommunity(ctx context.Context, arg CreateCommunityParams) (Community, error)
	CreateCommunityGuideSubinsight(ctx context.Context, arg CreateCommunityGuideSubinsightParams) (CommunityGuidelinesSubinsight, error)
	CreateCommunityGuidelineInsight(ctx context.Context, arg CreateCommunityGuidelineInsightParams) (CommunityGuidelinesInsight, error)
	CreateCommunityGuidelines(ctx context.Context, arg CreateCommunityGuidelinesParams) (CommunityGuideline, error)
	CreateCommunitySettings(ctx context.Context, arg CreateCommunitySettingsParams) (pgtype.Int8, error)
	CreateCompanies(ctx context.Context, arg CreateCompaniesParams) (Company, error)
	CreateCompaniesActivitiesHistory(ctx context.Context, arg CreateCompaniesActivitiesHistoryParams) (CompaniesActivitiesHistory, error)
	CreateCompaniesFileViewHistory(ctx context.Context, arg CreateCompaniesFileViewHistoryParams) (CompaniesFileviewHistory, error)
	CreateCompaniesLeadership(ctx context.Context, arg CreateCompaniesLeadershipParams) (CompaniesLeadership, error)
	CreateCompaniesProductsGallery(ctx context.Context, arg CreateCompaniesProductsGalleryParams) (CompaniesProductsGallery, error)
	CreateCompanyActivities(ctx context.Context, arg CreateCompanyActivitiesParams) (CompanyActivity, error)
	CreateCompanyActivityDetail(ctx context.Context, arg CreateCompanyActivityDetailParams) (CompanyActivitiesDetail, error)
	CreateCompanyCategory(ctx context.Context, arg CreateCompanyCategoryParams) (CompanyCategory, error)
	CreateCompanyProduct(ctx context.Context, arg CreateCompanyProductParams) (CompaniesProduct, error)
	CreateCompanyProfilePhase(ctx context.Context, arg CreateCompanyProfilePhaseParams) (CompanyProfilesPhase, error)
	CreateCompanyProfiles(ctx context.Context, arg CreateCompanyProfilesParams) (CompanyProfile, error)
	CreateCompanyProfilesProjects(ctx context.Context, arg CreateCompanyProfilesProjectsParams) (CompanyProfilesProject, error)
	CreateCompanyReject(ctx context.Context, arg CreateCompanyRejectParams) (CompanyReject, error)
	CreateCompanyType(ctx context.Context, arg CreateCompanyTypeParams) (CompanyType, error)
	CreateCompanyUser(ctx context.Context, arg CreateCompanyUserParams) (CompanyUser, error)
	//--------------- company_user_expertise
	CreateCompanyUserExpertise(ctx context.Context, arg CreateCompanyUserExpertiseParams) (int64, error)
	CreateCompanyVideo(ctx context.Context, arg CreateCompanyVideoParams) (CompanyVideo, error)
	CreateConnectionsSettings(ctx context.Context, arg CreateConnectionsSettingsParams) (ConnectionsSetting, error)
	CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error)
	CreateContactActivityHeader(ctx context.Context, arg CreateContactActivityHeaderParams) (ContactsActivityHeader, error)
	CreateContactNotes(ctx context.Context, arg CreateContactNotesParams) (ContactsAccess, error)
	CreateContactShareableDetails(ctx context.Context, arg CreateContactShareableDetailsParams) (ShareableContactDetail, error)
	CreateContactsAddress(ctx context.Context, arg CreateContactsAddressParams) (ContactsAddress, error)
	CreateContactsCompanyDetails(ctx context.Context, arg CreateContactsCompanyDetailsParams) (ContactsCompanyDetail, error)
	CreateContactsDocument(ctx context.Context, arg CreateContactsDocumentParams) (ContactsDocument, error)
	CreateContactsIndividualDetail(ctx context.Context, arg CreateContactsIndividualDetailParams) (ContactsIndividualDetail, error)
	CreateContactsOtherContact(ctx context.Context, arg CreateContactsOtherContactParams) (ContactsOtherContact, error)
	CreateContactsTransaction(ctx context.Context, arg CreateContactsTransactionParams) (ContactsTransaction, error)
	CreateContracts(ctx context.Context, arg CreateContractsParams) (Contract, error)
	CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error)
	CreateCountryGuide(ctx context.Context, arg CreateCountryGuideParams) (pgtype.Int8, error)
	CreateCountrySettings(ctx context.Context, arg CreateCountrySettingsParams) error
	CreateCurrency(ctx context.Context, arg CreateCurrencyParams) (Currency, error)
	CreateCurrencyNew(ctx context.Context, arg CreateCurrencyNewParams) (Currency, error)
	CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error)
	CreateDesignation(ctx context.Context, arg CreateDesignationParams) (Designation, error)
	CreateDeveloperBranchCompanyDirector(ctx context.Context, arg CreateDeveloperBranchCompanyDirectorParams) (DeveloperBranchCompanyDirector, error)
	CreateDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg CreateDeveloperBranchCompanyDirectorsReviewParams) (DeveloperBranchCompanyDirectorsReview, error)
	CreateDeveloperBranchCompanyReview(ctx context.Context, arg CreateDeveloperBranchCompanyReviewParams) (DeveloperBranchCompanyReview, error)
	CreateDeveloperCompany(ctx context.Context, arg CreateDeveloperCompanyParams) (DeveloperCompany, error)
	CreateDeveloperCompanyBranch(ctx context.Context, arg CreateDeveloperCompanyBranchParams) (DeveloperCompanyBranch, error)
	CreateDeveloperCompanyDirector(ctx context.Context, arg CreateDeveloperCompanyDirectorParams) (DeveloperCompanyDirector, error)
	CreateDeveloperCompanyDirectorReview(ctx context.Context, arg CreateDeveloperCompanyDirectorReviewParams) (DeveloperCompanyDirectorsReview, error)
	CreateDeveloperCompanyReview(ctx context.Context, arg CreateDeveloperCompanyReviewParams) (DeveloperCompanyReview, error)
	CreateDocumentCategory(ctx context.Context, arg CreateDocumentCategoryParams) error
	CreateDocumentsCategory(ctx context.Context, arg CreateDocumentsCategoryParams) (DocumentsCategory, error)
	CreateDocumentsSubCategory(ctx context.Context, arg CreateDocumentsSubCategoryParams) (DocumentsSubcategory, error)
	CreateDropDownCategories(ctx context.Context, categoryName string) (DropdownCategory, error)
	CreateDropDownItems(ctx context.Context, arg CreateDropDownItemsParams) (DropdownItem, error)
	CreateEntityServiceLocation(ctx context.Context, arg CreateEntityServiceLocationParams) (EntityServiceLocation, error)
	CreateExchangeOfferCategory(ctx context.Context, arg CreateExchangeOfferCategoryParams) (ExchangeOfferCategory, error)
	CreateExhibition(ctx context.Context, arg CreateExhibitionParams) (Exhibition, error)
	CreateExhibitionBooth(ctx context.Context, arg CreateExhibitionBoothParams) (ExhibitionBooth, error)
	CreateExhibitionClient(ctx context.Context, arg CreateExhibitionClientParams) (ExhibitionClient, error)
	CreateExhibitionCollaborator(ctx context.Context, arg CreateExhibitionCollaboratorParams) (ExhibitionCollaborator, error)
	CreateExhibitionReview(ctx context.Context, arg CreateExhibitionReviewParams) (ExhibitionReview, error)
	CreateExhibitionService(ctx context.Context, arg CreateExhibitionServiceParams) (ExhibitionService, error)
	CreateExhibitionsMedia(ctx context.Context, arg CreateExhibitionsMediaParams) (ExhibitionsMedium, error)
	CreateExpertise(ctx context.Context, arg CreateExpertiseParams) (int64, error)
	CreateExternalSharing(ctx context.Context, arg CreateExternalSharingParams) (ExternalSharing, error)
	CreateFAQ(ctx context.Context, arg CreateFAQParams) (AuctionsFaq, error)
	CreateFacilityAmenity(ctx context.Context, arg CreateFacilityAmenityParams) (FacilitiesAmenity, error)
	// unit id
	CreateFacilityAmenityForEntity(ctx context.Context, arg CreateFacilityAmenityForEntityParams) (FacilitiesAmenitiesEntity, error)
	CreateFacts(ctx context.Context, arg CreateFactsParams) (Fact, error)
	CreateFieldOfStudy(ctx context.Context, arg CreateFieldOfStudyParams) (FieldOfStudy, error)
	CreateFinancialProviders(ctx context.Context, arg CreateFinancialProvidersParams) (FinancialProvider, error)
	CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follower, error)
	CreateIndustry(ctx context.Context, arg CreateIndustryParams) (Industry, error)
	CreateInitialOrderPaymentBulk(ctx context.Context, arg CreateInitialOrderPaymentBulkParams) error
	CreateInternalSharing(ctx context.Context, arg CreateInternalSharingParams) (InternalSharing, error)
	CreateInternationalContent(ctx context.Context, arg CreateInternationalContentParams) (InternationalContent, error)
	CreateLanguage(ctx context.Context, arg CreateLanguageParams) (AllLanguage, error)
	CreateLead(ctx context.Context, arg CreateLeadParams) (Lead, error)
	CreateLeadCreation(ctx context.Context, arg CreateLeadCreationParams) (LeadsCreation, error)
	CreateLeadDetails(ctx context.Context, arg CreateLeadDetailsParams) (Lead, error)
	CreateLeadDocument(ctx context.Context, arg CreateLeadDocumentParams) (LeadsDocument, error)
	CreateLeadNotification(ctx context.Context, arg CreateLeadNotificationParams) (LeadsNotification, error)
	CreateLeadProgress(ctx context.Context, arg CreateLeadProgressParams) (LeadsProgress, error)
	CreateLeadProperties(ctx context.Context, arg CreateLeadPropertiesParams) (LeadsProperty, error)
	CreateLeaders(ctx context.Context, arg CreateLeadersParams) (Leader, error)
	CreateLicense(ctx context.Context, arg CreateLicenseParams) (License, error)
	CreateListingProblemsReport(ctx context.Context, arg CreateListingProblemsReportParams) (ListingProblemsReport, error)
	CreateLocation(ctx context.Context, arg CreateLocationParams) (Location, error)
	CreateLuxuryBrand(ctx context.Context, arg CreateLuxuryBrandParams) (LuxuryBrand, error)
	CreateMangementActivities(ctx context.Context, arg CreateMangementActivitiesParams) (ManagementActivity, error)
	CreateMapSearch(ctx context.Context, arg CreateMapSearchParams) (MapSearch, error)
	CreateNewCareer(ctx context.Context, arg CreateNewCareerParams) (Career, error)
	CreateNewFaq(ctx context.Context, arg CreateNewFaqParams) (Faq, error)
	CreateNewLeadGeneralRequest(ctx context.Context, arg CreateNewLeadGeneralRequestParams) (LeadGeneralRequest, error)
	CreateNewsLetterSubscribers(ctx context.Context, arg CreateNewsLetterSubscribersParams) error
	CreateOpenHouse(ctx context.Context, arg CreateOpenHouseParams) (Openhouse, error)
	CreateOpenhouseAppointment(ctx context.Context, arg CreateOpenhouseAppointmentParams) (Appointment, error)
	CreateOrderPayment(ctx context.Context, arg CreateOrderPaymentParams) (Payment, error)
	CreateOwnerProperties(ctx context.Context, arg CreateOwnerPropertiesParams) (OwnerProperty, error)
	CreateOwnerPropertyDocument(ctx context.Context, arg CreateOwnerPropertyDocumentParams) (OwnerPropertiesDocument, error)
	CreateOwnerPropertyMedia(ctx context.Context, arg CreateOwnerPropertyMediaParams) (OwnerPropertiesMedium, error)
	CreatePageContent(ctx context.Context, arg CreatePageContentParams) (PageContent, error)
	CreatePageOrAdvertisment(ctx context.Context, arg CreatePageOrAdvertismentParams) (Page, error)
	CreatePaymentPlan(ctx context.Context, arg CreatePaymentPlanParams) (PaymentPlan, error)
	CreatePaymentPlanPackages(ctx context.Context, arg CreatePaymentPlanPackagesParams) (PaymentPlansPackage, error)
	CreatePendingApproval(ctx context.Context, arg CreatePendingApprovalParams) error
	CreatePendingApprovalAfterRejection(ctx context.Context, arg CreatePendingApprovalAfterRejectionParams) error
	CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error)
	CreatePhases(ctx context.Context, arg CreatePhasesParams) (Phase, error)
	CreatePhasesDocuments(ctx context.Context, arg CreatePhasesDocumentsParams) (PhasesDocument, error)
	CreatePhasesFacts(ctx context.Context, arg CreatePhasesFactsParams) (PhasesFact, error)
	CreatePhasesMedia(ctx context.Context, arg CreatePhasesMediaParams) (ProjectMedium, error)
	CreatePhasesPlans(ctx context.Context, arg CreatePhasesPlansParams) (PhasesPlan, error)
	CreatePlanInstallment(ctx context.Context, arg CreatePlanInstallmentParams) (PlanInstallment, error)
	CreatePlatformUser(ctx context.Context, arg CreatePlatformUserParams) (PlatformUser, error)
	CreatePostedHotelBooking(ctx context.Context, arg CreatePostedHotelBookingParams) (PostedHotelBooking, error)
	CreatePostedHotelComment(ctx context.Context, arg CreatePostedHotelCommentParams) (PostedHotelComment, error)
	CreatePostedHotelMedia(ctx context.Context, arg CreatePostedHotelMediaParams) (PostedHotelMedium, error)
	CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) (ProductCategory, error)
	CreateProfession(ctx context.Context, arg CreateProfessionParams) (Profession, error)
	CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error)
	CreateProfileLanguage(ctx context.Context, arg CreateProfileLanguageParams) (ProfileLanguage, error)
	CreateProfileNationalities(ctx context.Context, arg CreateProfileNationalitiesParams) (ProfileNationality, error)
	CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error)
	CreateProjectActivitiesHistory(ctx context.Context, arg CreateProjectActivitiesHistoryParams) (ProjectActivitiesHistory, error)
	CreateProjectCompletionHistory(ctx context.Context, arg CreateProjectCompletionHistoryParams) (ProjectCompletionHistory, error)
	CreateProjectDocuments(ctx context.Context, arg CreateProjectDocumentsParams) (ProjectDocument, error)
	CreateProjectFileViewHistory(ctx context.Context, arg CreateProjectFileViewHistoryParams) (ProjectFileviewHistory, error)
	CreateProjectFinancialProviders(ctx context.Context, arg CreateProjectFinancialProvidersParams) (ProjectFinancialProvider, error)
	CreateProjectMedia(ctx context.Context, arg CreateProjectMediaParams) (ProjectMedium, error)
	CreateProjectPlan(ctx context.Context, arg CreateProjectPlanParams) (ProjectPlan, error)
	CreateProjectPostMedia(ctx context.Context, arg CreateProjectPostMediaParams) (AqaryProjectPostMedium, error)
	CreateProjectPromotions(ctx context.Context, arg CreateProjectPromotionsParams) (ProjectPromotion, error)
	CreateProjectProperties(ctx context.Context, arg CreateProjectPropertiesParams) (ProjectProperty, error)
	CreateProjectPropertyDocument(ctx context.Context, arg CreateProjectPropertyDocumentParams) (ProjectPropertiesDocument, error)
	CreateProjectRequests(ctx context.Context, arg CreateProjectRequestsParams) (ProjectRequest, error)
	CreateProjectReview(ctx context.Context, arg CreateProjectReviewParams) (ProjectReview, error)
	CreateProjectVideo(ctx context.Context, arg CreateProjectVideoParams) (ProjectVideo, error)
	CreatePromotionType(ctx context.Context, arg CreatePromotionTypeParams) (PromotionType, error)
	CreatePropertiesFact(ctx context.Context, arg CreatePropertiesFactParams) (AuctionsPropertiesFact, error)
	CreatePropertiesMedia(ctx context.Context, arg CreatePropertiesMediaParams) (PropertiesMedium, error)
	CreateProperty(ctx context.Context, arg CreatePropertyParams) (AuctionsProperty, error)
	CreatePropertyBranchPlan(ctx context.Context, arg CreatePropertyBranchPlanParams) (PropertiesPlansBranch, error)
	CreatePropertyFact(ctx context.Context, arg CreatePropertyFactParams) (PropertiesFact, error)
	CreatePropertyHubActivity(ctx context.Context, arg CreatePropertyHubActivityParams) (PropertyHubActivity, error)
	CreatePropertyMapLocation(ctx context.Context, arg CreatePropertyMapLocationParams) (PropertiesMapLocation, error)
	CreatePropertyMapLocationInBulk(ctx context.Context, arg CreatePropertyMapLocationInBulkParams) error
	CreatePropertyPlan(ctx context.Context, arg CreatePropertyPlanParams) (PropertiesPlan, error)
	CreatePropertyPostMedia(ctx context.Context, arg CreatePropertyPostMediaParams) (AqaryPropertyPostMedium, error)
	CreatePropertyType(ctx context.Context, arg CreatePropertyTypeParams) (PropertyType, error)
	CreatePropertyTypeFacts(ctx context.Context, arg CreatePropertyTypeFactsParams) (PropertyTypeFact, error)
	CreatePropertyTypeUnitType(ctx context.Context, arg CreatePropertyTypeUnitTypeParams) ([]PropertyTypeUnitType, error)
	CreatePropertyUnitComment(ctx context.Context, arg CreatePropertyUnitCommentParams) (PropertyUnitComment, error)
	CreatePropertyUnitLike(ctx context.Context, arg CreatePropertyUnitLikeParams) (PropertyUnitLike, error)
	CreatePropertyUnitSaved(ctx context.Context, arg CreatePropertyUnitSavedParams) (PropertyUnitSaved, error)
	CreatePropertyVideo(ctx context.Context, arg CreatePropertyVideoParams) (PropertiesVideo, error)
	CreatePublish(ctx context.Context, arg CreatePublishParams) (PublishListing, error)
	CreatePublishGallery(ctx context.Context, arg CreatePublishGalleryParams) (PublishGallery, error)
	CreatePublishInfo(ctx context.Context, arg CreatePublishInfoParams) (PublishInfo, error)
	CreatePublishPlan(ctx context.Context, arg CreatePublishPlanParams) (PublishPlan, error)
	CreatePublishedDoc(ctx context.Context, arg CreatePublishedDocParams) (PublishedDoc, error)
	CreateRanks(ctx context.Context, arg CreateRanksParams) (Rank, error)
	CreateRealEstateAgents(ctx context.Context, arg CreateRealEstateAgentsParams) (RealEstateAgent, error)
	CreateRefreshSchedule(ctx context.Context, arg CreateRefreshScheduleParams) (int64, error)
	CreateRentPropertyMediaBranch(ctx context.Context, arg CreateRentPropertyMediaBranchParams) (RentPropertyMediaBranch, error)
	CreateRentPropertyUnitPlan(ctx context.Context, arg CreateRentPropertyUnitPlanParams) (RentPropertyUnitPlan, error)
	CreateReport(ctx context.Context, arg CreateReportParams) (Report, error)
	CreateRequestApproval(ctx context.Context, arg CreateRequestApprovalParams) (int64, error)
	CreateRequestApprovalData(ctx context.Context, arg CreateRequestApprovalDataParams) error
	CreateRequestType(ctx context.Context, arg CreateRequestTypeParams) (RequestsType, error)
	CreateReservationRequest(ctx context.Context, arg CreateReservationRequestParams) (ReservationRequest, error)
	CreateReviewTerm(ctx context.Context, arg CreateReviewTermParams) (int64, error)
	CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error)
	CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolesPermission, error)
	CreateRoomType(ctx context.Context, arg CreateRoomTypeParams) (RoomType, error)
	CreateRoutingTrigger(ctx context.Context, arg CreateRoutingTriggerParams) (RoutingTrigger, error)
	CreateSalePropertyMedia(ctx context.Context, arg CreateSalePropertyMediaParams) (SalePropertyMedium, error)
	CreateSalePropertyMediaBranch(ctx context.Context, arg CreateSalePropertyMediaBranchParams) (SalePropertyMediaBranch, error)
	CreateSalePropertyUnitPlan(ctx context.Context, arg CreateSalePropertyUnitPlanParams) (SalePropertyUnitPlan, error)
	CreateScheduleView(ctx context.Context, arg CreateScheduleViewParams) (ScheduleView, error)
	CreateSectionPermission(ctx context.Context, arg CreateSectionPermissionParams) (SectionPermission, error)
	CreateService(ctx context.Context, arg CreateServiceParams) (Service, error)
	CreateServiceBranchCompany(ctx context.Context, arg CreateServiceBranchCompanyParams) (ServiceCompanyBranch, error)
	CreateServiceBranchCompanyReviews(ctx context.Context, arg CreateServiceBranchCompanyReviewsParams) (ServiceBranchCompanyReview, error)
	CreateServiceCompaniesReviews(ctx context.Context, arg CreateServiceCompaniesReviewsParams) (ServicesCompaniesReview, error)
	CreateServiceRequest(ctx context.Context, arg CreateServiceRequestParams) (ServiceRequest, error)
	CreateServiceRequestHistory(ctx context.Context, arg CreateServiceRequestHistoryParams) (ServiceRequestHistory, error)
	CreateServicesCompaniesBranchesServices(ctx context.Context, arg CreateServicesCompaniesBranchesServicesParams) (ServicesBranchCompaniesService, error)
	CreateServicesCompany(ctx context.Context, arg CreateServicesCompanyParams) (ServicesCompany, error)
	CreateServicesPromotions(ctx context.Context, arg CreateServicesPromotionsParams) (ServicePromotion, error)
	CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error)
	CreateShareDoc(ctx context.Context, arg CreateShareDocParams) (SharedDoc, error)
	CreateShareRequest(ctx context.Context, arg CreateShareRequestParams) (ShareRequest, error)
	CreateSharedDocuments(ctx context.Context, arg CreateSharedDocumentsParams) (SharedDocument, error)
	//------------------------------------- Start Sharing  -------------------------------------------------------
	CreateSharing(ctx context.Context, arg CreateSharingParams) (Sharing, error)
	CreateSharingEntity(ctx context.Context, arg CreateSharingEntityParams) error
	CreateSignUpUser(ctx context.Context, arg CreateSignUpUserParams) (User, error)
	CreateSingleShareDoc(ctx context.Context, arg CreateSingleShareDocParams) (SingleShareDoc, error)
	CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error)
	CreateSocialMediaProfile(ctx context.Context, arg CreateSocialMediaProfileParams) (SocialMediaProfile, error)
	CreateSocialMediaProfileBulk(ctx context.Context, arg CreateSocialMediaProfileBulkParams) error
	CreateState(ctx context.Context, arg CreateStateParams) (State, error)
	CreateStateGuide(ctx context.Context, arg CreateStateGuideParams) (pgtype.Int8, error)
	CreateStateLicenseFields(ctx context.Context, arg CreateStateLicenseFieldsParams) (StateLicenseField, error)
	CreateSubCommunity(ctx context.Context, arg CreateSubCommunityParams) (SubCommunity, error)
	CreateSubCommunityGuideline(ctx context.Context, arg CreateSubCommunityGuidelineParams) (SubCommunityGuideline, error)
	CreateSubCommunitySettings(ctx context.Context, arg CreateSubCommunitySettingsParams) (pgtype.Int8, error)
	CreateSubDocumentCategory(ctx context.Context, arg CreateSubDocumentCategoryParams) (pgtype.Int8, error)
	CreateSubSection(ctx context.Context, arg CreateSubSectionParams) (SubSection, error)
	// -- name: GetUserLicenseVerification :one
	// SELECT * FROM company_verification
	// WHERE  company_verification.entity_id = $1 AND company_verification.contract_file = $2;
	//  contract_file,
	//  contract_upload_date,
	//  uploaded_by,
	//  upload_notes,
	//  draft_contract
	CreateSubscriberVerification(ctx context.Context, arg CreateSubscriberVerificationParams) (CompanyVerification, error)
	CreateSubscriptionCost(ctx context.Context, arg CreateSubscriptionCostParams) error
	// Create a new subscription order and return the inserted row
	CreateSubscriptionOrder(ctx context.Context, arg CreateSubscriptionOrderParams) (SubscriptionOrder, error)
	// Create a new subscription package
	CreateSubscriptionPackage(ctx context.Context, arg CreateSubscriptionPackageParams) (SubscriptionPackage, error)
	CreateSubscriptionPrice(ctx context.Context, arg CreateSubscriptionPriceParams) (SubscriptionsPrice, error)
	CreateSubscriptionProduction(ctx context.Context, arg CreateSubscriptionProductionParams) error
	CreateTags(ctx context.Context, tagName string) (Tag, error)
	CreateTaxCategory(ctx context.Context, arg CreateTaxCategoryParams) (TaxCategory, error)
	CreateTaxMangement(ctx context.Context, arg CreateTaxMangementParams) (TaxManagement, error)
	CreateTaxMangementActivities(ctx context.Context, arg CreateTaxMangementActivitiesParams) (TaxManagementActivity, error)
	CreateTimeSlots(ctx context.Context, arg CreateTimeSlotsParams) (Timeslot, error)
	CreateTimeSlotsForSV(ctx context.Context, arg CreateTimeSlotsForSVParams) (Timeslot, error)
	CreateToggleCheck(ctx context.Context, arg CreateToggleCheckParams) (TogglesCheck, error)
	CreateTower(ctx context.Context, arg CreateTowerParams) (Tower, error)
	CreateTowerMedia(ctx context.Context, arg CreateTowerMediaParams) (TowerMedium, error)
	CreateUnitBranchType(ctx context.Context, arg CreateUnitBranchTypeParams) (UnitTypesBranch, error)
	CreateUnitFact(ctx context.Context, arg CreateUnitFactParams) (UnitFact, error)
	CreateUnitMedia(ctx context.Context, arg CreateUnitMediaParams) (UnitMedium, error)
	CreateUnitPlans(ctx context.Context, arg CreateUnitPlansParams) (UnitPlan, error)
	CreateUnitType(ctx context.Context, arg CreateUnitTypeParams) (UnitTypeDetail, error)
	CreateUnitVersion(ctx context.Context, arg CreateUnitVersionParams) (UnitVersion, error)
	CreateUnits(ctx context.Context, arg CreateUnitsParams) (Unit, error)
	CreateUnitsDocuments(ctx context.Context, arg CreateUnitsDocumentsParams) (UnitsDocument, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	CreateUserPermission(ctx context.Context, arg CreateUserPermissionParams) (UserCompanyPermission, error)
	CreateUserPermissionTest(ctx context.Context, arg CreateUserPermissionTestParams) (UserCompanyPermissionsTest, error)
	CreateUserType(ctx context.Context, arg CreateUserTypeParams) (UserType, error)
	//  contract_file,
	//  contract_upload_date,
	//  uploaded_by,
	//  upload_notes,
	CreateUserVerification(ctx context.Context, arg CreateUserVerificationParams) (CompanyVerification, error)
	CreateViews(ctx context.Context, arg CreateViewsParams) (View, error)
	CreateWaitingListRequest(ctx context.Context, arg CreateWaitingListRequestParams) error
	// Create a new webportal
	CreateWebportal(ctx context.Context, arg CreateWebportalParams) (Webportal, error)
	CreateWishlist(ctx context.Context, arg CreateWishlistParams) (pgtype.Int8, error)
	CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error)
	// approve companies profiles
	CreateXMLPlans(ctx context.Context, arg CreateXMLPlansParams) error
	CreateXMLURL(ctx context.Context, arg CreateXMLURLParams) (XmlUrl, error)
	// First delete the share_requests
	// Then delete the shared_documents
	// Finally delete the sharing record
	DeleteASharing(ctx context.Context, arg DeleteASharingParams) (Sharing, error)
	DeleteAddress(ctx context.Context, id int64) error
	DeleteAgentSubscriptionQuota(ctx context.Context, id int64) error
	DeleteAgentSubscriptionQuotaBranch(ctx context.Context, id int64) error
	// -- name: GetAllMainServicesAndServicesByBrokerCompanyBranchId :many
	// SELECT
	// 	main_services.id AS main_services_id,
	// 	main_services.title AS main_services,
	// 	services.id AS services_id,
	// 	services.title AS services
	// FROM main_services
	// INNER JOIN services ON services.main_services_id = main_services.id AND (services.status != 5 AND services.status != 6)
	// INNER JOIN broker_companies_branches_services ON broker_companies_branches_services.services_id = services.id AND broker_companies_branches_services.broker_companies_branches_id = $1
	// WHERE main_services.status != 5 AND main_services.status != 6
	// ORDER BY main_services_id DESC, services_id DESC;
	DeleteAllBrokerCompaniesBranchesServicesByCompanyId(ctx context.Context, brokerCompaniesBranchesID int64) error
	DeleteAllLicensesByIds(ctx context.Context, ids []int64) error
	DeleteAllPlanInstallmentsByIDs(ctx context.Context, dollar_1 []int64) error
	DeleteAllProjectPromotionsByPromotionTypeId(ctx context.Context, promotionTypesID int64) error
	// -- name: GetAllMainServicesAndServicesByServicesCompanyBranchId :many
	// SELECT
	// 	main_services.id AS main_services_id,
	// 	main_services.title AS main_services,
	// 	services.id AS services_id,
	// 	services.title AS services
	// FROM main_services
	// INNER JOIN services ON services.main_services_id = main_services.id AND (services.status != 5 AND services.status != 6)
	// INNER JOIN services_branch_companies_services ON services_branch_companies_services.services_id = services.id AND services_branch_companies_services.service_company_branches_id = $1
	// WHERE main_services.status != 5 AND main_services.status != 6
	// ORDER BY main_services_id DESC, services_id DESC;
	DeleteAllServicesCompaniesBranchesServicesByCompanyId(ctx context.Context, serviceCompanyBranchesID int64) error
	DeleteAllSubSection(ctx context.Context, dollar_1 []int64) error
	DeleteAqaryProjectAdsMedia(ctx context.Context, id int64) (AqaryProjectAdsMedium, error)
	DeleteAqaryProjectAdsMediaByPostID(ctx context.Context, aqaryProjectAds int64) ([]AqaryProjectAdsMedium, error)
	DeleteAqaryProjectPostMedia(ctx context.Context, id int64) (AqaryProjectPostMedium, error)
	DeleteAqaryProjectPostMediaByPostID(ctx context.Context, aqaryProjectPosts int64) ([]AqaryProjectPostMedium, error)
	DeleteAqaryPropertyAdsMedia(ctx context.Context, id int64) (AqaryPropertyAdsMedium, error)
	DeleteAqaryPropertyAdsMediaByAdID(ctx context.Context, aqaryPropertyAds int64) ([]AqaryPropertyAdsMedium, error)
	DeleteAqaryPropertyPostMediaByPostID(ctx context.Context, aqaryPropertyPostsID int64) ([]AqaryPropertyPostMedium, error)
	DeleteAqaryPropertyPostMediaByPostId(ctx context.Context, id int64) (AqaryPropertyPostMedium, error)
	DeleteAuctionDocument(ctx context.Context, id int64) error
	DeleteAuctionMedia(ctx context.Context, id int64) error
	DeleteAuctionPlan(ctx context.Context, id int64) error
	DeleteBankAccountDetails(ctx context.Context, id int64) error
	DeleteBanner(ctx context.Context, id int64) error
	DeleteBannerCriteria(ctx context.Context, id int64) error
	DeleteBannerPlanCost(ctx context.Context, id int64) error
	DeleteBannerType(ctx context.Context, id int64) error
	DeleteBlogByID(ctx context.Context, id int64) error
	DeleteBlogCategoryByID(ctx context.Context, id int64) error
	DeleteBookingPortal(ctx context.Context, id int64) error
	DeleteBrokerAgent(ctx context.Context, id int64) error
	DeleteBrokerAgentReviews(ctx context.Context, id int64) error
	DeleteBrokerBranchAgent(ctx context.Context, id int64) error
	DeleteBrokerBranchAgentReviews(ctx context.Context, id int64) error
	DeleteBrokerBranchCompanyReviews(ctx context.Context, id int64) error
	DeleteBrokerCompaniesBranchesServices(ctx context.Context, id int64) error
	DeleteBrokerCompany(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentProperty(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentPropertyBranch(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentPropertyBranchMedia(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentPropertyDocument(ctx context.Context, id int64) error
	DeleteBrokerCompanyAgentPropertyMedia(ctx context.Context, id int64) error
	DeleteBrokerCompanyBranch(ctx context.Context, id int64) error
	DeleteBrokerCompanyReview(ctx context.Context, id int64) error
	DeleteBuildingReviews(ctx context.Context, id int64) error
	DeleteCareerByID(ctx context.Context, arg DeleteCareerByIDParams) error
	DeleteCategorySettingsByID(ctx context.Context, id int64) (pgtype.Int8, error)
	DeleteCity(ctx context.Context, id int64) error
	DeleteCollectionName(ctx context.Context, id int64) error
	DeleteCommunity(ctx context.Context, id int64) error
	DeleteCompaniesLeadership(ctx context.Context, id int64) error
	DeleteCompanyProduct(ctx context.Context, id int64) error
	DeleteCompanyProfileByID(ctx context.Context, id int64) error
	DeleteCompanyProfileProject(ctx context.Context, id int64) error
	DeleteCompanyType(ctx context.Context, id int64) error
	// -- name: UpdateCompanyUserStatus :one
	// UPDATE company_users
	// SET
	//    status = $2
	// Where id = $1
	// RETURNING *;
	DeleteCompanyUser(ctx context.Context, id int64) error
	DeleteCompanyUserExpertise(ctx context.Context, id int64) error
	DeleteCompanyVideo(ctx context.Context, id int64) (CompanyVideo, error)
	DeleteConnectionsSettings(ctx context.Context, id int64) error
	DeleteContactDocument(ctx context.Context, id int64) error
	DeleteCountry(ctx context.Context, id int64) error
	DeleteCurrency(ctx context.Context, id int64) error
	DeleteDepartment(ctx context.Context, arg DeleteDepartmentParams) error
	DeleteDesignation(ctx context.Context, id int64) error
	//
	DeleteDeveloperBranchCompanyDirector(ctx context.Context, id int64) error
	DeleteDeveloperBranchCompanyDirectorsReview(ctx context.Context, id int64) error
	DeleteDeveloperBranchCompanyReview(ctx context.Context, id int64) error
	DeleteDeveloperCompany(ctx context.Context, id int64) error
	DeleteDeveloperCompanyBranch(ctx context.Context, id int64) error
	DeleteDeveloperCompanyDirector(ctx context.Context, id int64) error
	DeleteDeveloperCompanyDirectorReview(ctx context.Context, id int64) error
	DeleteDeveloperCompanyReview(ctx context.Context, id int64) error
	DeleteDocumentsCategory(ctx context.Context, id int64) error
	DeleteDocumentsSubCategory(ctx context.Context, id int64) error
	DeleteDropDownCategories(ctx context.Context) (DropdownCategory, error)
	DeleteDropDownItems(ctx context.Context, id int64) (DropdownItem, error)
	DeleteEntityServiceLocation(ctx context.Context, id int64) error
	DeleteExchangeOfferCategory(ctx context.Context, id int64) error
	DeleteExhibitionBooth(ctx context.Context, id int64) error
	DeleteExhibitionByID(ctx context.Context, id int64) error
	DeleteExhibitionClientByID(ctx context.Context, id int64) error
	DeleteExhibitionCollaboratorByID(ctx context.Context, id int64) error
	DeleteExhibitionMedia(ctx context.Context, id int64) error
	DeleteExhibitionMediaByExhibitionIdMediaGalleryType(ctx context.Context, id int64) (ExhibitionsMedium, error)
	// -- name: GetAllParentJobCategoriesWithSubcategoryCount :many
	// WITH SubcategoryCount AS (
	//     SELECT
	//         parent_category_id,
	//         COUNT(*) AS subcategory_count
	//     FROM
	//         job_categories
	//     WHERE
	//         status != 5 AND status != 6
	//     GROUP BY
	//         parent_category_id
	// )
	// SELECT
	//     jc.id,
	//     -- jc.ref_no,
	//     jc.parent_category_id,
	//     jc.category_name,
	//     jc.description,
	//     -- jc.company_types_id,
	//     -- jc.companies_id,
	//     -- jc.is_branch,
	//     jc.category_image,
	//     jc.created_at,
	//     jc.created_by,
	//     jc.status,
	//     jc.company_name,
	//     COALESCE(sc.subcategory_count, 0) AS subcategory_count
	// FROM
	//     job_categories jc
	// LEFT JOIN
	//     SubcategoryCount sc ON jc.id = sc.parent_category_id
	// WHERE
	//     jc.parent_category_id = 0
	//     AND jc.status != 5
	//     AND jc.status != 6
	// ORDER BY
	//     jc.id DESC;
	DeleteExhibitionMediaByURL(ctx context.Context, arg DeleteExhibitionMediaByURLParams) (ExhibitionsMedium, error)
	DeleteExhibitionQueryByID(ctx context.Context, id int64) error
	DeleteExhibitionServiceByID(ctx context.Context, id int64) error
	DeleteExternalSharing(ctx context.Context, arg DeleteExternalSharingParams) error
	DeleteFacilityAmenity(ctx context.Context, id int64) error
	DeleteFacilityAmenityEntityRecord(ctx context.Context, id int64) error
	DeleteFacilityAmenityForEntity(ctx context.Context, arg DeleteFacilityAmenityForEntityParams) error
	DeleteFactByID(ctx context.Context, id int64) error
	DeleteFinancialProvider(ctx context.Context, id int64) (string, error)
	DeleteFollowerByID(ctx context.Context, id int64) error
	DeleteFollowerByUserAndFollowersID(ctx context.Context, arg DeleteFollowerByUserAndFollowersIDParams) error
	DeleteFollowersByUserId(ctx context.Context, userID int64) error
	DeleteFollowingByFollowersId(ctx context.Context, followersID int64) error
	DeleteInternalSharing(ctx context.Context, arg DeleteInternalSharingParams) error
	DeleteInternationalContent(ctx context.Context, id int64) error
	DeleteJobCategory(ctx context.Context, id int64) (JobCategory, error)
	DeleteLanguage(ctx context.Context, id int64) error
	DeleteLeadDocumentByDocumentId(ctx context.Context, id int64) error
	DeleteLeadPropertyByLeadId(ctx context.Context, id int64) error
	DeleteLeaders(ctx context.Context, id int64) error
	DeleteListingProblemsReport(ctx context.Context, id int64) error
	DeleteLocation(ctx context.Context, id int64) error
	DeleteLuxuryBrand(ctx context.Context, id int64) error
	DeleteMangementActivities(ctx context.Context, id int64) error
	DeleteMapSearch(ctx context.Context, id int64) (MapSearch, error)
	DeleteOnePermissionInRole(ctx context.Context, arg DeleteOnePermissionInRoleParams) (RolesPermission, error)
	DeleteOneRentPropertyMediaBranchImages360ByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchImages360ByIdAndFileParams) (RentPropertyMediaBranch, error)
	DeleteOneRentPropertyMediaBranchImagesByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchImagesByIdAndFileParams) (RentPropertyMediaBranch, error)
	DeleteOneRentPropertyMediaBranchPanaromaByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchPanaromaByIdAndFileParams) (RentPropertyMediaBranch, error)
	DeleteOneRentPropertyMediaBranchVideoByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchVideoByIdAndFileParams) (RentPropertyMediaBranch, error)
	DeleteOneSalePropertyMediaBranchImages360ByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchImages360ByIdAndFileParams) (SalePropertyMediaBranch, error)
	DeleteOneSalePropertyMediaBranchImagesByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchImagesByIdAndFileParams) (SalePropertyMediaBranch, error)
	DeleteOneSalePropertyMediaBranchPanaromaByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchPanaromaByIdAndFileParams) (SalePropertyMediaBranch, error)
	DeleteOneSalePropertyMediaBranchVideoByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchVideoByIdAndFileParams) (SalePropertyMediaBranch, error)
	DeleteOneSalePropertyMediaImages360ByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaImages360ByIdAndFileParams) (SalePropertyMedium, error)
	DeleteOneSalePropertyMediaImagesByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaImagesByIdAndFileParams) (SalePropertyMedium, error)
	DeleteOneSalePropertyMediaPanaromaByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaPanaromaByIdAndFileParams) (SalePropertyMedium, error)
	DeleteOneSalePropertyMediaVideoByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaVideoByIdAndFileParams) (SalePropertyMedium, error)
	DeleteOneUnitDocByIdAndFile(ctx context.Context, arg DeleteOneUnitDocByIdAndFileParams) (UnitsDocument, error)
	DeleteOneUnitMediaFileByIdAndFile(ctx context.Context, arg DeleteOneUnitMediaFileByIdAndFileParams) (UnitMedium, error)
	DeleteOwnerProperties(ctx context.Context, id int64) error
	DeleteOwnerPropertyDocument(ctx context.Context, id int64) error
	DeleteOwnerPropertyMedia(ctx context.Context, id int64) error
	DeletePaymentPlanByID(ctx context.Context, id int64) error
	DeletePaymentPlanPackagesByID(ctx context.Context, id int64) error
	DeletePermission(ctx context.Context, id int64) error
	DeletePhaseFactById(ctx context.Context, id int64) error
	DeletePhases(ctx context.Context, id int64) error
	DeletePhasesDocuments(ctx context.Context, id int64) error
	DeletePhasesMedia(ctx context.Context, id int64) error
	DeletePhasesPlans(ctx context.Context, id int64) error
	DeletePlanInstallmentByID(ctx context.Context, id int64) error
	DeletePost(ctx context.Context, id int64) error
	DeletePostedHotelBookingMediaById(ctx context.Context, id int64) error
	DeleteProductCategory(ctx context.Context, id int64) error
	DeleteProfile(ctx context.Context, id int64) error
	DeleteProfileLanguage(ctx context.Context, profilesID int64) ([]ProfileLanguage, error)
	DeleteProfileLanguageList(ctx context.Context, arg DeleteProfileLanguageListParams) error
	DeleteProfileNationalities(ctx context.Context, profilesID int64) ([]ProfileNationality, error)
	DeleteProfileNationalityList(ctx context.Context, arg DeleteProfileNationalityListParams) error
	DeleteProjPlan(ctx context.Context, id int64) error
	DeleteProjectAd(ctx context.Context, id int64) error
	DeleteProjectAndPhaseFinancialProvider(ctx context.Context, arg DeleteProjectAndPhaseFinancialProviderParams) (int64, error)
	DeleteProjectDocuments(ctx context.Context, id int64) error
	DeleteProjectMedia(ctx context.Context, id int64) error
	DeleteProjectPhaseRelatedData(ctx context.Context, phaseID pgtype.Int8) (int64, error)
	DeleteProjectPost(ctx context.Context, id int64) error
	DeleteProjectPromotions(ctx context.Context, id int64) error
	DeleteProjectProperties(ctx context.Context, id int64) error
	DeleteProjectPropertyDocument(ctx context.Context, id int64) error
	DeleteProjectPropertyRelatedData(ctx context.Context, propertyID pgtype.Int8) (int64, error)
	// WITH deleted_internal_sharing AS (
	//     DELETE FROM internal_sharing
	//     WHERE
	//          internal_sharing.is_property = TRUE   AND
	//          internal_sharing.project_id = (SELECT project_id FROM internal_sharing WHERE internal_sharing.property_id = $1)
	//     RETURNING *
	// ),
	// deleted_shared_doc AS (
	//     DELETE FROM shared_doc
	//     WHERE
	//        shared_doc.is_property = TRUE AND
	//        shared_doc.project_id  = (SELECT project_id FROM shared_doc WHERE shared_doc.property_id = $1)
	//   RETURNING *
	// ),
	// deleted_external_sharing AS (
	//     DELETE FROM external_sharing
	//     WHERE
	//         external_sharing.is_property = TRUE AND
	//         external_sharing.project_id = (SELECT project_id FROM external_sharing WHERE external_sharing.property_id = $1)
	//     RETURNING *
	// ),
	// deleted_publish_plan AS (
	//     DELETE FROM publish_plan
	//     WHERE
	//     publish_plan.publish_listing_id IN (
	//         SELECT publish_listing.id FROM publish_listing
	//         WHERE
	//             publish_listing.is_property = TRUE AND
	//             publish_listing.project_id = (SELECT project_id FROM publish_listing WHERE  publish_listing.property_id = $1)
	//     )
	//     RETURNING *
	// ),
	// deleted_publish_gallery AS (
	//     DELETE FROM publish_gallery
	//     WHERE publish_gallery.publish_listing_id IN (
	//         SELECT publish_listing.id FROM publish_listing
	//         WHERE
	//            publish_listing.is_property = TRUE AND
	//            publish_listing.project_id = (SELECT project_id FROM publish_listing WHERE publish_listing.property_id = $1)
	//     )
	//     RETURNING *
	// ),
	// deleted_publish_listing AS (
	//     DELETE FROM publish_listing
	//     WHERE
	//     publish_listing.is_property = TRUE AND
	//     publish_listing.project_id = (SELECT project_id FROM publish_listing WHERE publish_listing.property_id = $1)
	//     RETURNING *
	// )
	// SELECT
	//     (SELECT count(*) FROM deleted_internal_sharing) +
	//     (SELECT count(*) FROM deleted_shared_doc) +
	//     (SELECT count(*) FROM deleted_external_sharing) +
	//     (SELECT count(*) FROM deleted_publish_plan) +
	//     (SELECT count(*) FROM deleted_publish_gallery) +
	//     (SELECT count(*) FROM deleted_publish_listing) AS total_deleted;
	DeleteProjectPropertyUnitRelatedData(ctx context.Context, arg DeleteProjectPropertyUnitRelatedDataParams) (int64, error)
	DeleteProjectRelatedData(ctx context.Context, arg DeleteProjectRelatedDataParams) (int64, error)
	DeleteProjectRequests(ctx context.Context, id int64) error
	DeleteProjectSharedDoc(ctx context.Context, projectID pgtype.Int8) error
	DeleteProjectVideo(ctx context.Context, id int64) (ProjectVideo, error)
	DeletePromotionType(ctx context.Context, id int64) error
	// -- name: GetCountAllProjectPropertyMediaByPropertyId :one
	// WITH x AS(
	// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND image_url IS NOT NULL
	// UNION ALL
	// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND image360_url IS NOT NULL
	// UNION ALL
	// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND video_url IS NOT NULL
	// UNION ALL
	// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,project_properties_id,projects_id FROM  project_property_media WHERE project_property_media.project_properties_id = $1 AND panaroma_url IS NOT NULL
	// ) SELECT COUNT(*) FROM x;
	// -- name: GetProjectPropertyMediaByProjectId :many
	// SELECT * FROM project_property_media
	// WHERE projects_id = $1;
	// -- name: GetAllProjectPropertyMedia :many
	// SELECT * FROM project_property_media
	// ORDER By id
	// LIMIT $1
	// OFFSET $2;
	// -- name: GetAllProjectPropertyMediaImages :many
	// SELECT image_url FROM project_property_media
	// Where projects_id = $1
	// LIMIT $2
	// OFFSET $3;
	// -- name: UpdateProjectPropertyMedia :one
	// UPDATE project_property_media
	// SET    image_url = $2,
	//     image360_url = $3,
	//     video_url = $4,
	//     panaroma_url = $5,
	//      main_media_section = $6,
	//      projects_id = $7,
	//     project_properties_id = $8,
	//     created_at = $9,
	//     updated_at = $10
	// Where id = $1
	// RETURNING *;
	DeletePropertiesMedia(ctx context.Context, id int64) error
	DeletePropertyAd(ctx context.Context, id int64) error
	DeletePropertyBranchPlan(ctx context.Context, id int64) error
	DeletePropertyFact(ctx context.Context, id int64) error
	DeletePropertyHubActivities(ctx context.Context, id int64) error
	DeletePropertyHubActivity(ctx context.Context, id int64) error
	DeletePropertyPlan(ctx context.Context, id int64) error
	DeletePropertyType(ctx context.Context, id int64) error
	DeletePropertyTypeFacts(ctx context.Context, id int64) error
	DeletePropertyUnitComment(ctx context.Context, id int64) error
	DeletePropertyUnitLike(ctx context.Context, id int64) error
	DeletePropertyUnitSaved(ctx context.Context, id int64) error
	DeletePropertyVideo(ctx context.Context, id int64) (PropertiesVideo, error)
	DeletePublishByID(ctx context.Context, id int64) error
	DeletePublishGalleryByID(ctx context.Context, id int64) error
	DeletePublishInfoByProject(ctx context.Context, arg DeletePublishInfoByProjectParams) error
	DeletePublishedDocByProject(ctx context.Context, projectsID pgtype.Int8) error
	DeleteRanks(ctx context.Context, id int64) error
	DeleteRealEstateAgent(ctx context.Context, id int64) error
	DeleteRentPropertyMediaBranch(ctx context.Context, id int64) error
	DeleteRentPropertyUnitPlan(ctx context.Context, id int64) error
	DeleteRentPropertyUnitPlanSingleFile(ctx context.Context, arg DeleteRentPropertyUnitPlanSingleFileParams) (RentPropertyUnitPlan, error)
	// -- name: UpdateReport :one
	// UPDATE reports
	// SET
	//     entity_id = $2,
	//     entity_type_id = $3,
	//     category = $4,
	//     message = $5,
	//     status = $6,
	//     updated_at = $7
	// WHERE id = $1
	// RETURNING *;
	DeleteReport(ctx context.Context, id int64) error
	DeleteRequestType(ctx context.Context, id int64) error
	DeleteReservationRequest(ctx context.Context, id int32) error
	DeleteRestoreCommunitySettings(ctx context.Context, arg DeleteRestoreCommunitySettingsParams) error
	DeleteRestoreCountrySettings(ctx context.Context, arg DeleteRestoreCountrySettingsParams) error
	DeleteRestoreDocumentCategory(ctx context.Context, arg DeleteRestoreDocumentCategoryParams) (int64, error)
	DeleteRestoreReviewTerm(ctx context.Context, arg DeleteRestoreReviewTermParams) (int64, error)
	DeleteRestoreSubCommunitySettings(ctx context.Context, arg DeleteRestoreSubCommunitySettingsParams) (int64, error)
	DeleteRestoreSubDocumentCategory(ctx context.Context, arg DeleteRestoreSubDocumentCategoryParams) (int64, error)
	DeleteRole(ctx context.Context, arg DeleteRoleParams) error
	DeleteRolePermission(ctx context.Context, rolesID int64) error
	DeleteSalePropertyMedia(ctx context.Context, id int64) error
	DeleteSalePropertyMediaBranch(ctx context.Context, id int64) error
	DeleteSalePropertyUnitPlan(ctx context.Context, id int64) error
	DeleteSalePropertyUnitPlanSingleFile(ctx context.Context, arg DeleteSalePropertyUnitPlanSingleFileParams) (SalePropertyUnitPlan, error)
	DeleteSectionPermission(ctx context.Context, id int64) error
	DeleteServiceBranchCompanyReviews(ctx context.Context, id int64) error
	DeleteServiceCompaniesReviews(ctx context.Context, id int64) error
	DeleteServiceCompanyBranch(ctx context.Context, id int64) error
	DeleteServiceRequest(ctx context.Context, id int64) error
	DeleteServicesCompaniesBranchesServices(ctx context.Context, id int64) error
	DeleteServicesCompany(ctx context.Context, id int64) error
	DeleteSession(ctx context.Context, id int64) error
	DeleteSingleContactsOtherContact(ctx context.Context, id int64) error
	DeleteSocialConnectionByID(ctx context.Context, id int64) error
	// -- name: GetSingleOneWaySocialConnection :one
	// SELECT *
	// FROM social_connections
	// WHERE
	//     ("user_id" = $1 AND "requested_by" = $2) LIMIT 1;
	// AND user_id = $2
	DeleteSocialConnectionByUserIdAndRequesteBy(ctx context.Context, arg DeleteSocialConnectionByUserIdAndRequesteByParams) error
	DeleteSocialMediaProfilesByEntityAndEntityTypeId(ctx context.Context, ids []int64) error
	DeleteState(ctx context.Context, id int64) error
	DeleteStateLicenseFieldsByNames(ctx context.Context, arg DeleteStateLicenseFieldsByNamesParams) error
	DeleteSubCommunity(ctx context.Context, id int64) error
	DeleteSubCommunityGuideline(ctx context.Context, id int64) error
	DeleteSubSection(ctx context.Context, id int64) error
	// Delete a subscription order by ID
	DeleteSubscriptionOrder(ctx context.Context, id int64) error
	DeleteSubscriptionOrderPayments(ctx context.Context, orderNo string) error
	// Delete a subscription package by ID
	DeleteSubscriptionPackage(ctx context.Context, id int64) error
	DeleteSubscriptionPrice(ctx context.Context, arg DeleteSubscriptionPriceParams) (SubscriptionsPrice, error)
	DeleteTag(ctx context.Context, id int64) (Tag, error)
	DeleteTaxCategory(ctx context.Context, id int64) error
	DeleteTaxMangement(ctx context.Context, id int64) error
	DeleteTaxMangementActivities(ctx context.Context, id int64) error
	DeleteUnitBranchType(ctx context.Context, id int64) error
	DeleteUnitFact(ctx context.Context, id int64) error
	DeleteUnitMedia(ctx context.Context, id int64) error
	DeleteUnitPlans(ctx context.Context, id int64) error
	DeleteUnitPlansSingleFile(ctx context.Context, arg DeleteUnitPlansSingleFileParams) (UnitPlan, error)
	DeleteUnitType(ctx context.Context, id int64) error
	DeleteUnitTypesByPropertyTypeId(ctx context.Context, propertyTypeID int64) error
	DeleteUnitTypesByPropertyTypeUnitTypeId(ctx context.Context, ids []int64) error
	DeleteUnitsDocuments(ctx context.Context, id int64) error
	DeleteUser(ctx context.Context, id int64) error
	DeleteUserType(ctx context.Context, id int64) error
	DeleteViews(ctx context.Context, arg DeleteViewsParams) error
	// Delete a webportal
	DeleteWebportal(ctx context.Context, id int64) error
	DeleteWishlist(ctx context.Context, id int64) (pgtype.Int8, error)
	DeleteWorkflow(ctx context.Context, id int64) error
	DeleteXMLAddresses(ctx context.Context, idsToDelete []int64) error
	DeleteXMLBulkCompanyProfilePhases(ctx context.Context, ids []int64) error
	DeleteXMLBulkLocation(ctx context.Context, idsToDelete []int64) error
	DeleteXMLFacilityAmenityForEntity(ctx context.Context, arg DeleteXMLFacilityAmenityForEntityParams) error
	DeleteXMLPlansByEntity(ctx context.Context, arg DeleteXMLPlansByEntityParams) error
	DeleteXMLProperties(ctx context.Context, idsToDelete []int64) error
	DeleteXMLPropertyVersions(ctx context.Context, idsToDelete []int64) error
	DeleteXMLURL(ctx context.Context, id int64) error
	DeleteXMLUnitVersions(ctx context.Context, idsToDelete []int64) error
	DeleteXMLUnits(ctx context.Context, idsToDelete []int64) error
	DisableExpiredExclusivePropertyVersions(ctx context.Context) error
	DisableExpiredExclusiveUnitVersions(ctx context.Context) error
	DoesExhibitionExist(ctx context.Context, id int64) (int64, error)
	EditContactsOtherContact(ctx context.Context, arg EditContactsOtherContactParams) error
	ExitingCityGuide(ctx context.Context, arg ExitingCityGuideParams) (pgtype.Bool, error)
	ExitingCityGuideByStatus(ctx context.Context, arg ExitingCityGuideByStatusParams) (pgtype.Bool, error)
	ExitingCountryGuide(ctx context.Context, arg ExitingCountryGuideParams) (pgtype.Bool, error)
	ExitingCountryGuideByStatus(ctx context.Context, arg ExitingCountryGuideByStatusParams) (pgtype.Bool, error)
	ExitingExpertise(ctx context.Context, arg ExitingExpertiseParams) (pgtype.Bool, error)
	ExitingExpertiseByStatus(ctx context.Context, arg ExitingExpertiseByStatusParams) (pgtype.Bool, error)
	ExitingStateGuide(ctx context.Context, arg ExitingStateGuideParams) (pgtype.Bool, error)
	ExitingStateGuideByStatus(ctx context.Context, arg ExitingStateGuideByStatusParams) (pgtype.Bool, error)
	FetchbuttonPermissionForSubSectionsForUser(ctx context.Context, arg FetchbuttonPermissionForSubSectionsForUserParams) ([]SubSection, error)
	FilterAgriculturalPropertiesForLead(ctx context.Context, arg FilterAgriculturalPropertiesForLeadParams) ([]FilterAgriculturalPropertiesForLeadRow, error)
	FilterBrokerCompanies(ctx context.Context, arg FilterBrokerCompaniesParams) ([]FilterBrokerCompaniesRow, error)
	FilterCountCommercialLuxuryProperties(ctx context.Context, arg FilterCountCommercialLuxuryPropertiesParams) ([]int64, error)
	FilterCountCommercialProperties(ctx context.Context, arg FilterCountCommercialPropertiesParams) (int64, error)
	FilterCountCompanies(ctx context.Context, arg FilterCountCompaniesParams) (int64, error)
	FilterCountLuxuryProperty(ctx context.Context, arg FilterCountLuxuryPropertyParams) ([]int64, error)
	// LEFT JOIN
	//     companies ON projects.developer_companies_id = companies.id
	// 	AND CASE
	//     WHEN @property_type::text[] IS NULL THEN TRUE
	//     ELSE EXISTS (
	//         SELECT 1
	//         FROM unnest(project_properties_agg.property_types_agg) AS pt
	//         WHERE EXISTS (
	//             SELECT 1
	//             FROM unnest(@property_type::text[]) AS search_terms
	//             WHERE pt ILIKE '%' || search_terms || '%'
	//         )
	//     )
	// END
	FilterCountProjects(ctx context.Context, arg FilterCountProjectsParams) (int64, error)
	// AND companies.status != 6;
	// 	AND CASE
	//     WHEN @property_type::text[] IS NULL THEN TRUE
	//     ELSE EXISTS (
	//         SELECT 1
	//         FROM unnest(project_properties_agg.property_types_agg) AS pt
	//         WHERE EXISTS (
	//             SELECT 1
	//             FROM unnest(@property_type::text[]) AS search_terms
	//             WHERE pt ILIKE '%' || search_terms || '%'
	//         )
	//     )
	// END
	FilterCountProjectsCommunity(ctx context.Context, arg FilterCountProjectsCommunityParams) (int64, error)
	//project Type
	// 	AND CASE
	//     WHEN @property_type::text[] IS NULL THEN TRUE
	//     ELSE EXISTS (
	//         SELECT 1
	//         FROM unnest(project_properties_agg.property_types_agg) AS pt
	//         WHERE EXISTS (
	//             SELECT 1
	//             FROM unnest(@property_type::text[]) AS search_terms
	//             WHERE pt ILIKE '%' || search_terms || '%'
	//         )
	//     )
	// END
	FilterCountProjectsState(ctx context.Context, arg FilterCountProjectsStateParams) (int64, error)
	// AND companies.status != 6;
	// LEFT JOIN
	//     properties_facts ON projects.id = properties_facts.project_id and properties_facts.is_project_fact = true
	// 	AND CASE
	//     WHEN @property_type::text[] IS NULL THEN TRUE
	//     ELSE EXISTS (
	//         SELECT 1
	//         FROM unnest(project_properties_agg.property_types_agg) AS pt
	//         WHERE EXISTS (
	//             SELECT 1
	//             FROM unnest(@property_type::text[]) AS search_terms
	//             WHERE pt ILIKE '%' || search_terms || '%'
	//         )
	//     )
	// END
	FilterCountProjectsSubCommunity(ctx context.Context, arg FilterCountProjectsSubCommunityParams) (int64, error)
	FilterCountPropertyHub(ctx context.Context, arg FilterCountPropertyHubParams) ([]int64, error)
	// -- name: GetCountDeveloperCompanyProjects :one
	// select count(*) from projects
	// where projects.developer_companies_id = $1 and projects.status != 5 and projects.status != 6;
	FilterDeveloperCompanies(ctx context.Context, arg FilterDeveloperCompaniesParams) ([]FilterDeveloperCompaniesRow, error)
	// -- name: SearchParentCategoriesByTitle :many
	// WITH SubcategoryCount AS (
	//     SELECT
	//         parent_category_id,
	//         COUNT(*) AS subcategory_count
	//     FROM
	//         job_categories
	//     WHERE
	//         status != 5 AND status != 6
	//     GROUP BY
	//         parent_category_id
	// )
	// SELECT
	//     jc.id,
	//     -- jc.ref_no,
	//     jc.parent_category_id,
	//     jc.category_name,
	//     jc.description,
	//     -- jc.company_types_id,
	//     -- jc.companies_id,
	//     -- jc.is_branch,
	//     jc.category_image,
	//     jc.created_at,
	//     jc.created_by,
	//     jc.status,
	//     jc.company_name,
	//     COALESCE(sc.subcategory_count, 0) AS subcategory_count
	// FROM
	//     job_categories jc
	// LEFT JOIN
	//     SubcategoryCount sc ON jc.id = sc.parent_category_id
	// WHERE
	//     jc.parent_category_id = 0
	//     AND jc.status != 5
	//     AND jc.status != 6
	//     AND jc.category_name ILIKE '%' || $1 || '%'
	// ORDER BY
	//     jc.id DESC;
	FilterExhibition(ctx context.Context, arg FilterExhibitionParams) ([]FilterExhibitionRow, error)
	FilterIndustrialPropertiesForLead(ctx context.Context, arg FilterIndustrialPropertiesForLeadParams) ([]FilterIndustrialPropertiesForLeadRow, error)
	FilterLuxuryProperties(ctx context.Context, arg FilterLuxuryPropertiesParams) ([]FilterLuxuryPropertiesRow, error)
	FilterProjectPropertiesForLead(ctx context.Context, arg FilterProjectPropertiesForLeadParams) ([]FilterProjectPropertiesForLeadRow, error)
	// LEFT JOIN
	//     companies ON projects.developer_companies_id = companies.id
	// 	AND CASE
	//     WHEN @property_type::text[] IS NULL THEN TRUE
	//     ELSE EXISTS (
	//         SELECT 1
	//         FROM unnest(project_properties_agg.property_types_agg) AS pt
	//         WHERE EXISTS (
	//             SELECT 1
	//             FROM unnest(@property_type::text[]) AS search_terms
	//             WHERE pt ILIKE '%' || search_terms || '%'
	//         )
	//     )
	// END
	FilterProjects(ctx context.Context, arg FilterProjectsParams) ([]FilterProjectsRow, error)
	FilterPropertyHub(ctx context.Context, arg FilterPropertyHubParams) ([]FilterPropertyHubRow, error)
	FilterPropertyHubPropertiesForLead(ctx context.Context, arg FilterPropertyHubPropertiesForLeadParams) ([]FilterPropertyHubPropertiesForLeadRow, error)
	GetACompanyByUserID(ctx context.Context, usersID int64) (GetACompanyByUserIDRow, error)
	// -- name: UpdateTypesRelatedCompanies :one
	//  WITH bc AS (
	//  UPDATE broker_companies
	//  SET main_services_id = null
	//  WHERE broker_companies.main_services_id = $1
	//  RETURNING *
	// ),
	//   dc AS (
	// UPDATE developer_companies
	//  SET  main_services_id = null
	//  WHERE developer_companies.main_services_id = $1
	//  RETURNING *
	// ),
	//   sc AS (
	// UPDATE services_companies
	//  SET  main_services_id = null
	//  WHERE services_companies.main_services_id = $1
	//  RETURNING *
	// ),
	//   bcb AS (
	// UPDATE broker_companies_branches
	//  SET main_services_id = null
	//  WHERE broker_companies_branches.main_services_id = $1
	//  RETURNING *
	// ),
	//   dcb AS (
	// UPDATE developer_company_branches
	//  SET  main_services_id = null
	//  WHERE developer_company_branches.main_services_id = $1
	//  RETURNING *
	// ),
	//   scb AS (
	// UPDATE service_company_branches
	//  SET   main_services_id = null
	//  WHERE  service_company_branches.main_services_id = $1
	//  RETURNING *
	// )
	// SELECT id, main_services_id FROM bc
	// UNION ALL
	// SELECT id, main_services_id FROM dc
	// UNION ALL
	// SELECT id, main_services_id FROM sc
	// UNION ALL
	// SELECT id, main_services_id FROM bcb
	// UNION ALL
	// SELECT id, main_services_id FROM dcb
	// UNION ALL
	// SELECT id, main_services_id FROM scb;
	GetACompanyMainInfo(ctx context.Context, companyID int64) (GetACompanyMainInfoRow, error)
	// SELECT * FROM sharing
	// WHERE
	//  CASE WHEN @created_by::bigint=0 THEN true ELSE sharing.created_by = @created_by::bigint END
	//  AND CASE WHEN @user_id::bigint=0 THEN true ELSE sharing.shared_to = @user_id::bigint END
	// AND sharing.entity_type_id = @entity_type_id LIMIT $1 OFFSET $2;
	GetASharing(ctx context.Context, arg GetASharingParams) (Sharing, error)
	GetASingleUserFromCompanies(ctx context.Context, arg GetASingleUserFromCompaniesParams) (GetASingleUserFromCompaniesRow, error)
	GetAUnitWithID(ctx context.Context, arg GetAUnitWithIDParams) (Unit, error)
	// SELECT COUNT(*) FROM unit_versions
	// INNER JOIN units ON unit_versions.unit_id = units.id
	// INNER JOIN addresses ON units.addresses_id = addresses.id
	// LEFT JOIN companies ON units.company_id = companies.id
	// WHERE unit_versions."type" = @type AND units.is_project_unit = @is_project_unit
	//   AND CASE WHEN @is_company_user != true THEN true ELSE companies.id = @company_id::bigint   END
	//   AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//   AND CASE WHEN @states_id::bigint = 0 Then true ELSE addresses.states_id = @states_id::bigint END
	//   AND CASE WHEN @cities_id::bigint = 0 Then true ELSE addresses.cities_id = @cities_id::bigint END
	//   AND CASE WHEN @communities_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//   AND CASE WHEN @sub_communities_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint END
	// AND CASE WHEN @status::bigint = 0 THEN (unit_versions.status != ALL(ARRAY[5,6])) ELSE (unit_versions.status =  @status) END;
	GetAUnitWithVersion(ctx context.Context, arg GetAUnitWithVersionParams) (GetAUnitWithVersionRow, error)
	// -- name: GetAllUsersFromCompanyIds :many
	// SELECT companies.users_id From companies
	// WHERE id = ANY(@companies_id::bigint[]);
	GetAUsersFromCompanyId(ctx context.Context, id int64) (int64, error)
	GetActiveCompanyCategoryByTypeId(ctx context.Context, companyType int64) ([]GetActiveCompanyCategoryByTypeIdRow, error)
	GetActiveContactById(ctx context.Context, id int64) (Contact, error)
	GetActiveCustomerByEmail(ctx context.Context, arg GetActiveCustomerByEmailParams) (PlatformUser, error)
	GetActiveGlobalPropertyTypeByType(ctx context.Context, arg GetActiveGlobalPropertyTypeByTypeParams) (GlobalPropertyType, error)
	GetActiveUnitTypeByTypeAndUsage(ctx context.Context, arg GetActiveUnitTypeByTypeAndUsageParams) (UnitType, error)
	GetActiveUsersByType(ctx context.Context, arg GetActiveUsersByTypeParams) ([]GetActiveUsersByTypeRow, error)
	GetActivitiesByType(ctx context.Context, arg GetActivitiesByTypeParams) ([]AuctionsActivity, error)
	GetActivityViewForPropertyHubActivitiesFileView(ctx context.Context, arg GetActivityViewForPropertyHubActivitiesFileViewParams) ([]GetActivityViewForPropertyHubActivitiesFileViewRow, error)
	GetActivityViewForPropertyHubActivitiesTransactions(ctx context.Context, arg GetActivityViewForPropertyHubActivitiesTransactionsParams) ([]GetActivityViewForPropertyHubActivitiesTransactionsRow, error)
	GetAddCompanyPermission(ctx context.Context) (Permission, error)
	GetAddress(ctx context.Context, limit int32) (Address, error)
	GetAddressAllDetailsByID(ctx context.Context, id int64) (GetAddressAllDetailsByIDRow, error)
	GetAddressByCountryId(ctx context.Context, arg GetAddressByCountryIdParams) (Address, error)
	// Get a addresses by ID
	GetAddressByID(ctx context.Context, id int64) (AuctionsAddress, error)
	GetAddressByUser(ctx context.Context, id int64) (Address, error)
	// SELECT COUNT(*) from users
	// WHERE status = 6;
	GetAdminUserByBrokerCompany(ctx context.Context, id int64) (GetAdminUserByBrokerCompanyRow, error)
	GetAdminUserByBrokerCompanyBranch(ctx context.Context, id int64) (GetAdminUserByBrokerCompanyBranchRow, error)
	//  p.description as pages_description,
	GetAdvertisementsByPageID(ctx context.Context, arg GetAdvertisementsByPageIDParams) ([]GetAdvertisementsByPageIDRow, error)
	GetAgentFromAll(ctx context.Context, id int64) (GetAgentFromAllRow, error)
	GetAgentProductByUserID(ctx context.Context, userID int64) ([]GetAgentProductByUserIDRow, error)
	GetAgentProducts(ctx context.Context, arg GetAgentProductsParams) (AgentProduct, error)
	GetAgentReviewsForAgentCount(ctx context.Context, usersID int64) (int64, error)
	GetAgentSubscriptionQuota(ctx context.Context, limit int32) (AgentSubscriptionQuotum, error)
	GetAgentSubscriptionQuotaBranch(ctx context.Context, limit int32) (AgentSubscriptionQuotaBranch, error)
	GetAgentSubscriptionQuotaBranchByBrokerCompanyAgentID(ctx context.Context, brokerCompanyBranchesAgentsID int64) (AgentSubscriptionQuotaBranch, error)
	GetAgentSubscriptionQuotaByBrokerCompanyAgentID(ctx context.Context, brokerCompanyAgentsID int64) (AgentSubscriptionQuotum, error)
	GetAgentsReviewsCountForAdmin(ctx context.Context, usersID int64) (int64, error)
	GetAgentsReviewsForCompanyCount(ctx context.Context, arg GetAgentsReviewsForCompanyCountParams) (int64, error)
	GetAll(ctx context.Context, arg GetAllParams) ([]ProjectPropertyUnit, error)
	GetAllActiveCompanyCategoryAndActivitiesByType(ctx context.Context, arg GetAllActiveCompanyCategoryAndActivitiesByTypeParams) ([]GetAllActiveCompanyCategoryAndActivitiesByTypeRow, error)
	// -- name: GetAllContacts :many
	// select c.id, c.users_id, c.ref_no, c.contact_category_id, c.salutation, c.name, c.lastname, c.all_languages_id, c.ejari, c.assigned_to, c.shared_with, c.remarks, c.is_blockedlisted, c.is_vip, c.correspondence, c.direct_markerting, c.status, c.created_by, c.contact_platform, c.created_at, c.updated_at, c.updated_by,
	//     scd.id, scd.contacts_id, scd.mobile, scd.mobile_share, scd.mobile2, scd.mobile2_share, scd.landline, scd.landline_share, scd.fax, scd.fax_share, scd.email, scd.email_share, scd.second_email, scd.second_email_share, scd.added_by, scd.created_at, scd.updated_at,
	//      COALESCE(ra.id, 0) AS ra_id, COALESCE(ra.contacts_id, 0) AS ra_contacts_id, COALESCE(ra.address_type_id, 0) AS ra_address_type_id, COALESCE(ra.address1, '') AS ra_address1, COALESCE(ra.address2, '') AS ra_address2, COALESCE(ra.countries_id, 0) AS ra_countries_id, COALESCE(ra.states_id, 0) AS ra_states_id, COALESCE(ra.cities_id, 0) AS ra_cities_id, COALESCE(ra.community_id, 0) AS ra_community_id, COALESCE(ra.sub_community_id, 0) AS ra_sub_community_id, COALESCE(ra.postal_code, 0) AS ra_postal_code,
	//     COALESCE(ca.id, 0) AS ca_id, COALESCE(ca.contacts_id, 0) AS ca_contacts_id, COALESCE(ca.address_type_id, 0) AS ca_address_type_id, COALESCE(ca.address1, '') AS ca_address1, COALESCE(ca.address2, '') AS ca_address2, COALESCE(ca.countries_id, 0) AS ca_countries_id, COALESCE(ca.states_id, 0) AS ca_states_id, COALESCE(ca.cities_id, 0) AS ca_cities_id, COALESCE(ca.community_id, 0) AS ca_community_id, COALESCE(ca.sub_community_id, 0) AS ca_sub_community_id, COALESCE(ca.postal_code, 0) AS ca_postal_code,ccd.id, ccd.contacts_id, ccd.companies_id, ccd.company_category, ccd.is_branch, ccd.no_of_employees, ccd.industry_id, ccd.no_local_business, ccd.retail_category_id, ccd.no_remote_business, ccd.nationality, ccd.license, ccd.issued_date, ccd.expiry_date, ccd.external_id,
	//     cid.id, cid.contacts_id, cid.comapanies_id, cid.company_category, cid.is_branch, cid.date_of_birth, cid.professions_id, cid.gender, cid.marital_status, cid.nationality, cid.id_type, cid.id_number, cid.id_country_id, cid.id_issued_date, cid.id_expiry_date, cid.passport_number, cid.passport_country_id, cid.passport_issued_date, cid.passport_expiry_date, cid.interests,
	//     cn1.country as resident_country,ci1.city as resident_city,
	//     st1."state" as resident_state, com1.community as resident_community,
	//     scom1.sub_community as resident_sub_community,
	//     cn2.country as company_country,ci2.city as company_city,
	//     st2."state" as company_state, com2.community as company_community,
	//     scom2.sub_community as company_sub_community,
	//     c.id AS contact_id,
	//     c.created_by AS contact_created_by,
	//     c.updated_by AS contact_updated_by,
	//     u_created_by.username AS created_by_username,
	//     u_updated_by.username AS updated_by_username,
	//     c.all_languages_id AS contact_all_languages_id,
	//     COALESCE(languages, '{}') AS languages,
	//     c.assigned_to AS contact_assigned_to,
	//     COALESCE(assigned_usernames, '{}') AS assigned_usernames,
	//     c.shared_with AS contact_shared_with,
	//     COALESCE(shared_usernames, '{}') AS shared_usernames,
	//         i.title as company_industry,
	//     n1.country as company_nationality,
	//     rct.title as company_retail_cateogry,
	//     p.title as individual_profession,
	//     n2.country as individual_nationality,
	//     idci.country as individual_country_id,
	//     pci.country as individual_passport_country
	// FROM "public"."contacts" c
	// LEFT JOIN "public"."shareable_contact_details" scd ON c.id = scd.contacts_id
	// LEFT JOIN contacts_address ra ON c.id = ra.contacts_id AND ra.address_type_id = 1
	// left join countries cn1 on ra.countries_id = cn1.id
	// left join cities ci1 on ra.cities_id = ci1.id
	// left join states st1 on ra.states_id = st1.id
	// left join communities com1 on ra.community_id = com1.id
	// LEFT join sub_communities scom1 on ra.sub_community_id = scom1.id
	// LEFT JOIN contacts_address ca ON c.id = ca.contacts_id AND ca.address_type_id = 2
	// left join countries cn2 on ra.countries_id = cn2.id
	// left join cities ci2 on ra.cities_id = ci2.id
	// left join states st2 on ra.states_id = st2.id
	// left join communities com2 on ra.community_id = com2.id
	// LEFT join sub_communities scom2 on ra.sub_community_id = scom2.id
	// LEFT JOIN contacts_company_details ccd ON c.id = ccd.contacts_id AND c.contact_category_id = 1
	// left join industry i on ccd.industry_id = i.id
	// left join countries n1 on ccd.nationality = n1.id
	// left join retail_category rct on ccd.retail_category_id = rct.id
	// LEFT JOIN contacts_individual_details cid ON c.id = cid.contacts_id AND c.contact_category_id = 2
	// left join professions p on cid.professions_id = p.id
	// left join countries n2 on cid.nationality = n2.id
	// left join countries idci on cid.id_country_id = idci.id
	// left join countries pci on cid.passport_country_id = pci.id
	//     LEFT JOIN "public"."users" u_created_by ON c.created_by = u_created_by.id
	//     LEFT JOIN "public"."users" u_updated_by ON c.updated_by = u_updated_by.id
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(al.language)::varchar[] AS languages
	//         FROM unnest(c.all_languages_id) AS lang_id
	//         JOIN "public"."all_languages" al ON lang_id = al.id
	//     ) AS languages ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(au.username)::varchar[] AS assigned_usernames
	//         FROM unnest(c.assigned_to) AS assigned_id
	//         JOIN "public"."users" au ON assigned_id = au.id
	//     ) AS assigned_usernames ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(su.username)::varchar[] AS shared_usernames
	//         FROM unnest(c.shared_with) AS shared_id
	//         JOIN "public"."users" su ON shared_id = su.id
	//     ) AS shared_usernames ON TRUE
	// WHERE c.status != 5 AND c.status != 6
	// ORDER BY c.updated_at DESC LIMIT $1 OFFSET $2;
	GetAllActiveContactsByCompanyId(ctx context.Context, arg GetAllActiveContactsByCompanyIdParams) ([]GetAllActiveContactsByCompanyIdRow, error)
	GetAllActiveNewsLetterSubscribers(ctx context.Context, arg GetAllActiveNewsLetterSubscribersParams) ([]GetAllActiveNewsLetterSubscribersRow, error)
	GetAllActivePropertyTypes(ctx context.Context) ([]GlobalPropertyType, error)
	GetAllActiveUnitTypes(ctx context.Context) ([]UnitType, error)
	GetAllActiveXMLUrls(ctx context.Context) ([]XmlUrl, error)
	GetAllActivityDetailsByContactActivityHeaderId(ctx context.Context, arg GetAllActivityDetailsByContactActivityHeaderIdParams) ([]GetAllActivityDetailsByContactActivityHeaderIdRow, error)
	GetAllAddress(ctx context.Context, arg GetAllAddressParams) ([]Address, error)
	GetAllAddressesByCities(ctx context.Context, citiesID pgtype.Int8) ([]int64, error)
	GetAllAddressesByCommunities(ctx context.Context, communitiesID pgtype.Int8) ([]int64, error)
	GetAllAddressesByState(ctx context.Context, statesID pgtype.Int8) ([]int64, error)
	GetAllAddressesBySubCommunities(ctx context.Context, subCommunitiesID pgtype.Int8) ([]int64, error)
	GetAllAdvertisments(ctx context.Context, arg GetAllAdvertismentsParams) ([]Page, error)
	GetAllAgentPerformance(ctx context.Context) ([]GetAllAgentPerformanceRow, error)
	GetAllAgentReviews(ctx context.Context, arg GetAllAgentReviewsParams) ([]GetAllAgentReviewsRow, error)
	GetAllAgentReviewsForAgent(ctx context.Context, arg GetAllAgentReviewsForAgentParams) ([]GetAllAgentReviewsForAgentRow, error)
	GetAllAgentRoutes(ctx context.Context, arg GetAllAgentRoutesParams) ([]GetAllAgentRoutesRow, error)
	GetAllAgentSubscriptionQuota(ctx context.Context, arg GetAllAgentSubscriptionQuotaParams) ([]AgentSubscriptionQuotum, error)
	GetAllAgentSubscriptionQuotaBranch(ctx context.Context, arg GetAllAgentSubscriptionQuotaBranchParams) ([]AgentSubscriptionQuotaBranch, error)
	GetAllAgentsReviewsForAdmin(ctx context.Context, arg GetAllAgentsReviewsForAdminParams) ([]GetAllAgentsReviewsForAdminRow, error)
	// -- name: CreateAmenities :one
	// INSERT INTO amenities (
	//     icon_url,
	//     title,
	//     created_at,
	//     updated_at,
	//     category_id
	// )VALUES (
	//    $1 ,$2, $3, $4, $5
	// ) RETURNING *;
	// -- name: GetAmenities :one
	// SELECT * FROM amenities
	// WHERE id = $1 LIMIT $1;
	// -- name: GetAmenitiesWithoutPagination :one
	// SELECT * FROM amenities ORDER BY id;
	// -- name: UpdateAmenities :one
	// UPDATE amenities
	// SET    icon_url = $2,
	//     title = $3,
	//     created_at = $4,
	//     updated_at = $5,
	//     category_id = $6
	// Where id = $1
	// RETURNING *;
	// -- name: DeleteAmenities :exec
	// DELETE FROM amenities
	// Where id = $1;
	// -- name: GetAllAmenitiesOrderByCat :many
	// SELECT amenities.*,facilities_amenities_categories.category FROM amenities LEFT JOIN facilities_amenities_categories ON facilities_amenities_categories.id = amenities.category_id
	// ORDER BY category_id LIMIT $1 OFFSET $2;
	// -- name: GetAllAmenitiesOrderByCatWithoutPagination :many
	// SELECT amenities.*,facilities_amenities_categories.category FROM amenities LEFT JOIN facilities_amenities_categories ON facilities_amenities_categories.id = amenities.category_id
	// ORDER BY category_id;
	GetAllAmenitiesById(ctx context.Context, arg GetAllAmenitiesByIdParams) ([]GetAllAmenitiesByIdRow, error)
	GetAllApplicants(ctx context.Context, arg GetAllApplicantsParams) ([]GetAllApplicantsRow, error)
	GetAllApplications(ctx context.Context, arg GetAllApplicationsParams) ([]GetAllApplicationsRow, error)
	GetAllAppoinment(ctx context.Context) ([]Appointment, error)
	GetAllAqaryDeletedUser(ctx context.Context, arg GetAllAqaryDeletedUserParams) ([]GetAllAqaryDeletedUserRow, error)
	GetAllAqaryDeletedUserWithoutPagination(ctx context.Context) ([]User, error)
	GetAllAqaryGuides(ctx context.Context, arg GetAllAqaryGuidesParams) ([]AqaryGuide, error)
	GetAllAqaryMediaAds(ctx context.Context, arg GetAllAqaryMediaAdsParams) ([]GetAllAqaryMediaAdsRow, error)
	GetAllAqaryMediaPosts(ctx context.Context, arg GetAllAqaryMediaPostsParams) ([]GetAllAqaryMediaPostsRow, error)
	GetAllAqaryProjectAdsMedia(ctx context.Context, arg GetAllAqaryProjectAdsMediaParams) ([]AqaryProjectAdsMedium, error)
	GetAllAqaryProjectPostMediaByPostId(ctx context.Context, arg GetAllAqaryProjectPostMediaByPostIdParams) ([]AqaryProjectPostMedium, error)
	GetAllAqaryPropertyAdsMedia(ctx context.Context, arg GetAllAqaryPropertyAdsMediaParams) ([]AqaryPropertyAdsMedium, error)
	GetAllAqaryPropertyPostMediaByPostId(ctx context.Context, arg GetAllAqaryPropertyPostMediaByPostIdParams) ([]AqaryPropertyPostMedium, error)
	GetAllAqaryUser(ctx context.Context, arg GetAllAqaryUserParams) ([]GetAllAqaryUserRow, error)
	GetAllAqaryUsersByCountryId(ctx context.Context, arg GetAllAqaryUsersByCountryIdParams) ([]GetAllAqaryUsersByCountryIdRow, error)
	GetAllAssignedAgents(ctx context.Context) (int64, error)
	GetAllAvailableTimeSlotsByProjectProperty(ctx context.Context, propertyID int64) ([]Timeslot, error)
	GetAllBanks(ctx context.Context) ([]Bank, error)
	// AND banner_order.status = @active_status::BIGINT;
	GetAllBannerOrder(ctx context.Context, arg GetAllBannerOrderParams) ([]GetAllBannerOrderRow, error)
	GetAllBannerPlanCostByID(ctx context.Context, id int64) (GetAllBannerPlanCostByIDRow, error)
	GetAllBannerPlanPackages(ctx context.Context, arg GetAllBannerPlanPackagesParams) ([]GetAllBannerPlanPackagesRow, error)
	GetAllBannerTypes(ctx context.Context, arg GetAllBannerTypesParams) ([]BannerType, error)
	GetAllBenefits(ctx context.Context, arg GetAllBenefitsParams) ([]GetAllBenefitsRow, error)
	GetAllBenefitsByCareer(ctx context.Context, career int64) ([]Benefit, error)
	// -- name: CreateBlogCategories :one
	// INSERT INTO blog_categories (
	//      category_title,
	//      category_title_ar,
	//      description,
	//      description_ar,
	//      status
	// )VALUES (
	//     $1, $2 ,$3,$4,$5
	// ) RETURNING *;
	GetAllBlogCategories(ctx context.Context, arg GetAllBlogCategoriesParams) ([]BlogCategory, error)
	GetAllBlogs(ctx context.Context, arg GetAllBlogsParams) ([]Blog, error)
	GetAllBlogsForManage(ctx context.Context, arg GetAllBlogsForManageParams) ([]GetAllBlogsForManageRow, error)
	GetAllBookingPortal(ctx context.Context, arg GetAllBookingPortalParams) ([]BookingPortal, error)
	GetAllBookingPortalWithoutPg(ctx context.Context) ([]BookingPortal, error)
	GetAllBranchBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllBranchBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllBranchBrokerAgentPropertyDocByPropertyIdRow, error)
	GetAllBrokerAgent(ctx context.Context, arg GetAllBrokerAgentParams) ([]BrokerCompanyAgent, error)
	GetAllBrokerAgentByCompanyId(ctx context.Context, arg GetAllBrokerAgentByCompanyIdParams) ([]BrokerCompanyAgent, error)
	GetAllBrokerAgentByCompanyIdWithoutLimit(ctx context.Context, brokerCompaniesID pgtype.Int8) ([]BrokerCompanyAgent, error)
	GetAllBrokerAgentNamesByBrokerCompId(ctx context.Context, id int64) ([]GetAllBrokerAgentNamesByBrokerCompIdRow, error)
	GetAllBrokerAgentNamesByBrokerCompIdWithPagination(ctx context.Context, arg GetAllBrokerAgentNamesByBrokerCompIdWithPaginationParams) ([]GetAllBrokerAgentNamesByBrokerCompIdWithPaginationRow, error)
	GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelance(ctx context.Context, id int64) ([]GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelanceRow, error)
	GetAllBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllBrokerAgentPropertyDocByPropertyIdRow, error)
	GetAllBrokerAgentReviews(ctx context.Context, arg GetAllBrokerAgentReviewsParams) ([]BrokerAgentReview, error)
	GetAllBrokerAgentReviewsByAgentId(ctx context.Context, arg GetAllBrokerAgentReviewsByAgentIdParams) ([]BrokerAgentReview, error)
	GetAllBrokerAgentReviewsDetails(ctx context.Context, arg GetAllBrokerAgentReviewsDetailsParams) ([]GetAllBrokerAgentReviewsDetailsRow, error)
	GetAllBrokerBranchAgent(ctx context.Context, arg GetAllBrokerBranchAgentParams) ([]BrokerCompanyBranchesAgent, error)
	GetAllBrokerBranchAgentReviews(ctx context.Context, arg GetAllBrokerBranchAgentReviewsParams) ([]BrokerBranchAgentReview, error)
	GetAllBrokerBranchCompanyReviews(ctx context.Context, arg GetAllBrokerBranchCompanyReviewsParams) ([]BrokerBranchCompanyReview, error)
	GetAllBrokerCompaniesBranchesServices(ctx context.Context, arg GetAllBrokerCompaniesBranchesServicesParams) ([]BrokerCompaniesBranchesService, error)
	GetAllBrokerCompaniesBranchesWithoutPagination(ctx context.Context) ([]BrokerCompaniesBranch, error)
	GetAllBrokerCompaniesByCountryAndState(ctx context.Context, arg GetAllBrokerCompaniesByCountryAndStateParams) ([]GetAllBrokerCompaniesByCountryAndStateRow, error)
	GetAllBrokerCompaniesWithoutPagination(ctx context.Context) ([]BrokerCompany, error)
	// -- name: GetBrokerCompanyByName :one
	// SELECT * FROM broker_companies
	// WHERE company_name ILIKE $1 LIMIT 1;
	GetAllBrokerCompany(ctx context.Context, arg GetAllBrokerCompanyParams) ([]BrokerCompany, error)
	GetAllBrokerCompanyAgentBranchPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllBrokerCompanyAgentBranchPropertiesByMainMediaSectionAndIdParams) (GetAllBrokerCompanyAgentBranchPropertiesByMainMediaSectionAndIdRow, error)
	GetAllBrokerCompanyAgentBranchPropertiesMainMediaSectionById(ctx context.Context, brokerCompanyAgentPropertiesBranchID int64) ([]string, error)
	GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdParams) (GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdRow, error)
	GetAllBrokerCompanyAgentPropertiesMainMediaSectionById(ctx context.Context, brokerCompanyAgentPropertiesID int64) ([]string, error)
	GetAllBrokerCompanyAgentProperty(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyParams) ([]BrokerCompanyAgentProperty, error)
	GetAllBrokerCompanyAgentPropertyBranch(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyBranchParams) ([]BrokerCompanyAgentPropertiesBranch, error)
	GetAllBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyBranchDocumentParams) ([]BrokerCompanyAgentPropertiesDocumentsBranch, error)
	GetAllBrokerCompanyAgentPropertyBranchMedia(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyBranchMediaParams) ([]BrokerCompanyAgentPropertiesMediaBranch, error)
	GetAllBrokerCompanyAgentPropertyBranchMediaById(ctx context.Context, brokerCompanyAgentPropertiesBranchID int64) ([]BrokerCompanyAgentPropertiesMediaBranch, error)
	GetAllBrokerCompanyAgentPropertyDocument(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyDocumentParams) ([]BrokerCompanyAgentPropertiesDocument, error)
	GetAllBrokerCompanyAgentPropertyMedia(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyMediaParams) ([]BrokerCompanyAgentPropertiesMedium, error)
	GetAllBrokerCompanyAgentPropertyMediaById(ctx context.Context, brokerCompanyAgentPropertiesID int64) ([]BrokerCompanyAgentPropertiesMedium, error)
	GetAllBrokerCompanyBranch(ctx context.Context, arg GetAllBrokerCompanyBranchParams) ([]BrokerCompaniesBranch, error)
	GetAllBrokerCompanyBranchByCompanyId(ctx context.Context, arg GetAllBrokerCompanyBranchByCompanyIdParams) ([]BrokerCompaniesBranch, error)
	GetAllBrokerCompanyByCountry(ctx context.Context, arg GetAllBrokerCompanyByCountryParams) ([]BrokerCompany, error)
	GetAllBrokerCompanyByCountryNotEqual(ctx context.Context, arg GetAllBrokerCompanyByCountryNotEqualParams) ([]BrokerCompany, error)
	// -- name: GetAllBrokerCompanyByMainServiceId :many
	// SELECT * FROM broker_companies
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetAllBrokerCompanyByRank(ctx context.Context, arg GetAllBrokerCompanyByRankParams) ([]BrokerCompany, error)
	GetAllBrokerCompanyByStatus(ctx context.Context, arg GetAllBrokerCompanyByStatusParams) ([]BrokerCompany, error)
	GetAllBrokerCompanyNames(ctx context.Context) ([]GetAllBrokerCompanyNamesRow, error)
	GetAllBrokerCompanyNamesByCityId(ctx context.Context, citiesID pgtype.Int8) ([]GetAllBrokerCompanyNamesByCityIdRow, error)
	GetAllBrokerCompanyNamesByStateId(ctx context.Context, statesID pgtype.Int8) ([]GetAllBrokerCompanyNamesByStateIdRow, error)
	GetAllBrokerCompanyNamesByStateOrCity(ctx context.Context, arg GetAllBrokerCompanyNamesByStateOrCityParams) ([]GetAllBrokerCompanyNamesByStateOrCityRow, error)
	GetAllBrokerCompanyReview(ctx context.Context, arg GetAllBrokerCompanyReviewParams) ([]BrokerCompanyReview, error)
	GetAllBrokerCompanyReviewByCountry(ctx context.Context, arg GetAllBrokerCompanyReviewByCountryParams) ([]BrokerCompanyReview, error)
	GetAllBuildingReviews(ctx context.Context, arg GetAllBuildingReviewsParams) ([]BuildingReview, error)
	GetAllCandidateMilstonesByCandId(ctx context.Context, candidatesID int64) ([]CandidatesMilestone, error)
	GetAllCareerActivityChanges(ctx context.Context, arg GetAllCareerActivityChangesParams) ([]ActivityChange, error)
	GetAllCareersForCatg(ctx context.Context, arg GetAllCareersForCatgParams) ([]Career, error)
	GetAllCategoriesSettings(ctx context.Context, arg GetAllCategoriesSettingsParams) ([]GetAllCategoriesSettingsRow, error)
	GetAllCitiesByCountry(ctx context.Context, id int64) ([]City, error)
	GetAllCititesByIds(ctx context.Context, dollar_1 []int64) ([]City, error)
	GetAllCity(ctx context.Context, arg GetAllCityParams) ([]GetAllCityRow, error)
	GetAllCollectionName(ctx context.Context, arg GetAllCollectionNameParams) ([]CollectionName, error)
	GetAllCollectionNameWithoutPagination(ctx context.Context, usersID int64) ([]CollectionName, error)
	GetAllCommunitiesByCountry(ctx context.Context, id int64) ([]Community, error)
	GetAllCommunitiesSettings(ctx context.Context, arg GetAllCommunitiesSettingsParams) ([]GetAllCommunitiesSettingsRow, error)
	GetAllCommunityByCitiesId(ctx context.Context, citiesID pgtype.Int8) ([]int64, error)
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	//  LEFT  JOIN branch_companies ON branch_companies.companies_id = c.id
	//    ELSE ''= @localize::varchar AND addresses.countries_id = @country_id::bigint END
	//    AND CASE WHEN @status::bigint = 0 THEN c.company_parent_id IS NULL ELSE true END
	GetAllCompanies(ctx context.Context, arg GetAllCompaniesParams) ([]GetAllCompaniesRow, error)
	GetAllCompaniesActivitiesHistory(ctx context.Context, arg GetAllCompaniesActivitiesHistoryParams) ([]GetAllCompaniesActivitiesHistoryRow, error)
	GetAllCompaniesFileViewHistory(ctx context.Context, arg GetAllCompaniesFileViewHistoryParams) ([]GetAllCompaniesFileViewHistoryRow, error)
	GetAllCompaniesLeadersByCompany(ctx context.Context, arg GetAllCompaniesLeadersByCompanyParams) ([]GetAllCompaniesLeadersByCompanyRow, error)
	GetAllCompaniesNameByCompanyType(ctx context.Context, companyType int64) ([]GetAllCompaniesNameByCompanyTypeRow, error)
	GetAllCompanyActivities(ctx context.Context, arg GetAllCompanyActivitiesParams) ([]GetAllCompanyActivitiesRow, error)
	GetAllCompanyCategories(ctx context.Context, arg GetAllCompanyCategoriesParams) ([]CompanyCategory, error)
	GetAllCompanyCategoriesCount(ctx context.Context, status int64) (int64, error)
	GetAllCompanyFromSharing(ctx context.Context, entityID int64) ([]GetAllCompanyFromSharingRow, error)
	GetAllCompanyName(ctx context.Context) ([]GetAllCompanyNameRow, error)
	GetAllCompanyNameWithBranches(ctx context.Context) ([]GetAllCompanyNameWithBranchesRow, error)
	// SELECT
	//     COUNT(id)
	// FROM companies
	// WHERE status = $1;
	// -- name: GetCompaniesByRank :many
	// SELECT c.id, c.company_name, c.company_type, c.logo_url, c.email, c.phone_number, c.status, c.company_rank,  c.addresses_id,  c.users_id, cl.commercial_license_no,
	// CASE WHEN company_parent_id IS NULL THEN FALSE::boolean ELSE TRUE::boolean END AS is_branch
	// FROM companies c
	// INNER JOIN companies_licenses cl ON c.id = cl.company_id
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT  JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	// WHERE
	//   (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//  	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint  END
	//    AND c.status NOT IN (5,6)
	// AND c.company_rank = $3
	// ORDER BY c.updated_at  DESC LIMIT $1 OFFSET $2;
	// SELECT companies.id, company_name, company_type, logo_url, email, phone_number, status, company_rank,  addresses_id,  users_id ,
	// companies_licenses.commercial_license_no,
	// CASE WHEN branch_companies.id != 0 THEN TRUE::boolean ELSE FALSE::boolean END AS is_branch
	// FROM companies
	// INNER JOIN companies_licenses ON companies_licenses.id = companies.companies_licenses_id
	// LEFT JOIN branch_companies ON branch_companies.companies_id = companies.id
	// WHERE  companies.company_rank = $3
	// ORDER BY id  LIMIT $1 OFFSET $2;
	// -- name: GetCountCompaniesByRank :one
	// SELECT COUNT(c.id)
	// FROM companies c
	// INNER JOIN companies_licenses cl ON c.id = cl.company_id
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT  JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	// WHERE
	//   (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//  	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint  END
	//    AND c.status NOT IN (5,6)
	// AND c.company_rank = $1;
	// -- SELECT
	// --     COUNT(id)
	// -- FROM companies
	// -- WHERE company_rank = $1;
	GetAllCompanyNames(ctx context.Context) ([]GetAllCompanyNamesRow, error)
	GetAllCompanyNamesByBranchAndType(ctx context.Context, arg GetAllCompanyNamesByBranchAndTypeParams) ([]GetAllCompanyNamesByBranchAndTypeRow, error)
	GetAllCompanyNamesWithSearch(ctx context.Context, search string) ([]Company, error)
	GetAllCompanyPendingUser(ctx context.Context, arg GetAllCompanyPendingUserParams) ([]User, error)
	GetAllCompanyProducts(ctx context.Context, arg GetAllCompanyProductsParams) ([]CompaniesProduct, error)
	GetAllCompanyProfilePhaseRefNosToDelete(ctx context.Context, ignorePhaseRefnos []string) ([]GetAllCompanyProfilePhaseRefNosToDeleteRow, error)
	GetAllCompanyProfilePhasesByProject(ctx context.Context, arg GetAllCompanyProfilePhasesByProjectParams) ([]CompanyProfilesPhase, error)
	// AND company_profiles_phases.status = $3 //TODO: status
	GetAllCompanyProfilePhasesByStatus(ctx context.Context, arg GetAllCompanyProfilePhasesByStatusParams) ([]GetAllCompanyProfilePhasesByStatusRow, error)
	GetAllCompanyProfileProjectIdToDelete(ctx context.Context, ignoreProjectRefNos []string) ([]GetAllCompanyProfileProjectIdToDeleteRow, error)
	GetAllCompanyProfiles(ctx context.Context) ([]CompanyProfile, error)
	GetAllCompanyProfilesByStatus(ctx context.Context, arg GetAllCompanyProfilesByStatusParams) ([]GetAllCompanyProfilesByStatusRow, error)
	GetAllCompanyProfilesByStatusInternational(ctx context.Context, arg GetAllCompanyProfilesByStatusInternationalParams) ([]GetAllCompanyProfilesByStatusInternationalRow, error)
	GetAllCompanyProfilesByStatusLocal(ctx context.Context, arg GetAllCompanyProfilesByStatusLocalParams) ([]GetAllCompanyProfilesByStatusLocalRow, error)
	GetAllCompanyType(ctx context.Context, arg GetAllCompanyTypeParams) ([]GetAllCompanyTypeRow, error)
	GetAllCompanyTypeWithoutPagination(ctx context.Context, lang string) ([]GetAllCompanyTypeWithoutPaginationRow, error)
	GetAllCompanyUser(ctx context.Context, arg GetAllCompanyUserParams) ([]CompanyUser, error)
	GetAllCompanyUsers(ctx context.Context, arg GetAllCompanyUsersParams) ([]GetAllCompanyUsersRow, error)
	GetAllCompanyUsersByCompanyIdWithSearch(ctx context.Context, arg GetAllCompanyUsersByCompanyIdWithSearchParams) ([]GetAllCompanyUsersByCompanyIdWithSearchRow, error)
	GetAllCompanyUsersByStatus(ctx context.Context, arg GetAllCompanyUsersByStatusParams) ([]GetAllCompanyUsersByStatusRow, error)
	GetAllCompanyVideos(ctx context.Context, arg GetAllCompanyVideosParams) ([]CompanyVideo, error)
	GetAllConnectionsSettings(ctx context.Context, arg GetAllConnectionsSettingsParams) ([]ConnectionsSetting, error)
	GetAllConsumeFactsCountByPhaseId(ctx context.Context, arg GetAllConsumeFactsCountByPhaseIdParams) (GetAllConsumeFactsCountByPhaseIdRow, error)
	GetAllConsumeFactsCountByProjectId(ctx context.Context, projectsID int64) (GetAllConsumeFactsCountByProjectIdRow, error)
	// -- name: GetUnitVerifyAndStatusAndRank :one
	// WITH x AS(
	//     SELECT status,unit_id,'sale' AS category
	//     FROM sale_unit
	//     UNION ALL
	//     SELECT status,unit_id,'rent' AS category
	//     FROM rent_unit
	// )SELECT x.*,units.is_verified,units.property_unit_rank FROM x
	// INNER JOIN units ON units.id = x.unit_id WHERE units.id = @unit_id AND x.category = LOWER(@category);
	// -- name: CheckExistanceOfUnitByUnitId :one
	// SELECT
	// CASE WHEN sale_unit.unit_id = units.id THEN TRUE ELSE FALSE END AS is_sale,
	// CASE WHEN rent_unit.unit_id = units.id THEN TRUE ELSE FALSE END AS is_rent,
	// sale_unit.status AS sale_unit_status, rent_unit.status AS rent_unit_status,
	// units.properties_id,units.property
	// FROM units
	// LEFT JOIN sale_unit ON sale_unit.unit_id = units.id AND sale_unit.status != 5 AND sale_unit.status != 6
	// LEFT JOIN rent_unit ON rent_unit.unit_id = units.id AND rent_unit.status != 5 AND rent_unit.status != 6
	// WHERE units.id = @unit_id;
	// -- name: GetRentUnitByUnitID :one
	// SELECT rent_unit.id AS rent_unit_id, rent_unit.title, rent_unit.title_arabic, rent_unit.description, rent_unit.description_arabic, rent_unit.unit_id,
	// 	rent_unit.unit_facts_id, rent_unit.created_at, rent_unit.updated_at, 'rent' AS category, rent_unit.status,
	// 	units.id AS units_id, units.unit_no,units.unitno_is_public, units.notes, units.notes_arabic, units.notes_public,
	// 	units.is_verified, units.amenities_id, units.property_unit_rank, units.properties_id, units.property,
	// 	units.created_at, units.updated_at, units.ref_no, units.addresses_id, units.countries_id, units.property_types_id,
	// 	units.created_by, units.property_name, units.section, units.type_name_id, units.owner_users_id, units.from_xml
	// FROM units
	// INNER JOIN rent_unit ON rent_unit.unit_id = units.id
	// WHERE units.id = $1;
	// -- name: GetSaleUnitByUnitID :one
	// SELECT sale_unit.id AS sale_unit_id, sale_unit.title, sale_unit.title_arabic, sale_unit.description, sale_unit.description_arabic, sale_unit.unit_id,
	// 	sale_unit.unit_facts_id, sale_unit.created_at, sale_unit.updated_at, sale_unit.contract_start_datetime,
	// 	sale_unit.contract_end_datetime, sale_unit.contract_amount,sale_unit.contract_currency,'sale' AS category,sale_unit.status,
	// 	units.id AS units_id, units.unit_no,units.unitno_is_public, units.notes, units.notes_arabic, units.notes_public,
	// 	units.is_verified, units.amenities_id, units.property_unit_rank, units.properties_id, units.property,
	// 	units.created_at, units.updated_at, units.ref_no, units.addresses_id, units.countries_id, units.property_types_id,
	// 	units.created_by, units.property_name, units.section, units.type_name_id, units.owner_users_id, units.from_xml
	// FROM units
	// INNER JOIN sale_unit ON sale_unit.unit_id = units.id
	// WHERE units.id = $1;
	// -- name: UpdateSaleUnitRankByUnitID :one
	// UPDATE units
	// SET property_unit_rank = $2,
	// 	updated_at = $3
	// FROM sale_unit
	// WHERE sale_unit.unit_id = units.id AND sale_unit.unit_id = $1
	// RETURNING *;
	// -- name: UpdateRentUnitRankByUnitID :one
	// UPDATE units
	// SET property_unit_rank = $2,
	// 	updated_at = $3
	// FROM rent_unit
	// WHERE rent_unit.unit_id = units.id AND rent_unit.unit_id = $1
	// RETURNING *;
	// -- name: UpdateUnits :one
	// UPDATE units
	// SET	unit_no = $2,
	// 	unitno_is_public = $3,
	// 	notes = $4,
	// 	notes_arabic = $5,
	// 	notes_public = $6,
	// 	is_verified = $7,
	// 	amenities_id = $8,
	// 	property_unit_rank = $9,
	// 	properties_id = $10,
	// 	property = $11,
	// 	created_at = $12,
	// 	updated_at = $13,
	// 	ref_no = $14,
	// 	addresses_id = $15,
	// 	countries_id = $16,
	// 	property_types_id = $17,
	// 	created_by = $18,
	// 	property_name = $19,
	// 	section = $20,
	// 	type_name_id = $21,
	// 	owner_users_id = $22,
	// 	from_xml = $23
	// WHERE id = $1 RETURNING *;
	GetAllConsumeFactsCountByProjectPropertyId(ctx context.Context, arg GetAllConsumeFactsCountByProjectPropertyIdParams) (GetAllConsumeFactsCountByProjectPropertyIdRow, error)
	GetAllContactActivityHeaderByContactId(ctx context.Context, arg GetAllContactActivityHeaderByContactIdParams) ([]GetAllContactActivityHeaderByContactIdRow, error)
	GetAllContactActivityHeaderByContactIdWithoutPagination(ctx context.Context, contactsID pgtype.Int8) (ContactsActivityHeader, error)
	GetAllContactDocumentsCustom(ctx context.Context, arg GetAllContactDocumentsCustomParams) ([]GetAllContactDocumentsCustomRow, error)
	GetAllContactNotes(ctx context.Context, arg GetAllContactNotesParams) ([]ContactsAccess, error)
	GetAllContactNotesWithoutPagination(ctx context.Context, contactsID pgtype.Int8) ([]ContactsAccess, error)
	GetAllContactTransaction(ctx context.Context, arg GetAllContactTransactionParams) ([]GetAllContactTransactionRow, error)
	GetAllContactsDocumentCategories(ctx context.Context) ([]GetAllContactsDocumentCategoriesRow, error)
	GetAllContactsDocumentSubCategories(ctx context.Context, parentCategoryID int64) ([]GetAllContactsDocumentSubCategoriesRow, error)
	GetAllContactsDocuments(ctx context.Context, arg GetAllContactsDocumentsParams) ([]ContactsDocument, error)
	GetAllContactsOtherContact(ctx context.Context) ([]GetAllContactsOtherContactRow, error)
	GetAllContactsOtherContactByContactsId(ctx context.Context, arg GetAllContactsOtherContactByContactsIdParams) ([]GetAllContactsOtherContactByContactsIdRow, error)
	GetAllContactsOtherContactByContactsIdWithoutPagination(ctx context.Context, contactsID int64) ([]ContactsOtherContact, error)
	GetAllContactsOtherContactWithPagination(ctx context.Context, arg GetAllContactsOtherContactWithPaginationParams) ([]GetAllContactsOtherContactWithPaginationRow, error)
	GetAllContactsWithoutOffset(ctx context.Context) ([]Contact, error)
	GetAllContactsWithoutPagination(ctx context.Context) ([]GetAllContactsWithoutPaginationRow, error)
	GetAllContracts(ctx context.Context, arg GetAllContractsParams) ([]GetAllContractsRow, error)
	GetAllCountriesSettings(ctx context.Context, arg GetAllCountriesSettingsParams) ([]GetAllCountriesSettingsRow, error)
	GetAllCurrency(ctx context.Context, arg GetAllCurrencyParams) ([]Currency, error)
	GetAllCurrencyNew(ctx context.Context, arg GetAllCurrencyNewParams) ([]Currency, error)
	GetAllCurrencyNewCount(ctx context.Context) (int64, error)
	GetAllDeletedBlogs(ctx context.Context, arg GetAllDeletedBlogsParams) ([]GetAllDeletedBlogsRow, error)
	GetAllDeletedUnits(ctx context.Context) ([]GetAllDeletedUnitsRow, error)
	GetAllDepartment(ctx context.Context, arg GetAllDepartmentParams) ([]Department, error)
	GetAllDepartmentWithoutPagination(ctx context.Context) ([]Department, error)
	GetAllDesignation(ctx context.Context, arg GetAllDesignationParams) ([]Designation, error)
	GetAllDeveloperBranchCompanyDirector(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorParams) ([]DeveloperBranchCompanyDirector, error)
	GetAllDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorsReviewParams) ([]DeveloperBranchCompanyDirectorsReview, error)
	GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsId(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsIdParams) ([]DeveloperBranchCompanyDirectorsReview, error)
	GetAllDeveloperBranchCompanyReview(ctx context.Context, arg GetAllDeveloperBranchCompanyReviewParams) ([]DeveloperBranchCompanyReview, error)
	GetAllDeveloperBranchCompanyReviewByBranchCompanyId(ctx context.Context, arg GetAllDeveloperBranchCompanyReviewByBranchCompanyIdParams) ([]DeveloperBranchCompanyReview, error)
	GetAllDeveloperCompaniesBranchesWithoutPagination(ctx context.Context) ([]DeveloperCompanyBranch, error)
	GetAllDeveloperCompaniesWithoutPagination(ctx context.Context) ([]DeveloperCompany, error)
	GetAllDeveloperCompany(ctx context.Context, arg GetAllDeveloperCompanyParams) ([]DeveloperCompany, error)
	GetAllDeveloperCompanyBranch(ctx context.Context, arg GetAllDeveloperCompanyBranchParams) ([]DeveloperCompanyBranch, error)
	GetAllDeveloperCompanyBranchByCompanyId(ctx context.Context, arg GetAllDeveloperCompanyBranchByCompanyIdParams) ([]DeveloperCompanyBranch, error)
	// -- name: GetDevelopersCompanyByMainServiceId :many
	// SELECT * FROM developer_companies
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetAllDeveloperCompanyByCountry(ctx context.Context, arg GetAllDeveloperCompanyByCountryParams) ([]DeveloperCompany, error)
	GetAllDeveloperCompanyByCountryNotEqual(ctx context.Context, arg GetAllDeveloperCompanyByCountryNotEqualParams) ([]DeveloperCompany, error)
	GetAllDeveloperCompanyDirector(ctx context.Context, arg GetAllDeveloperCompanyDirectorParams) ([]DeveloperCompanyDirector, error)
	GetAllDeveloperCompanyDirectorByCompanyId(ctx context.Context, companiesID int64) ([]CompaniesLeadership, error)
	//LIMIT $1;
	GetAllDeveloperCompanyDirectorByCompanyIdWithoutPagination(ctx context.Context, developerCompaniesID int64) ([]DeveloperCompanyDirector, error)
	GetAllDeveloperCompanyDirectorReview(ctx context.Context, arg GetAllDeveloperCompanyDirectorReviewParams) ([]DeveloperCompanyDirectorsReview, error)
	GetAllDeveloperCompanyDirectorReviewCompanyDirectorsId(ctx context.Context, arg GetAllDeveloperCompanyDirectorReviewCompanyDirectorsIdParams) ([]DeveloperCompanyDirectorsReview, error)
	GetAllDeveloperCompanyNames(ctx context.Context) ([]GetAllDeveloperCompanyNamesRow, error)
	GetAllDeveloperCompanyReview(ctx context.Context, arg GetAllDeveloperCompanyReviewParams) ([]DeveloperCompanyReview, error)
	GetAllDeveloperCompanyReviewByCompanyId(ctx context.Context, arg GetAllDeveloperCompanyReviewByCompanyIdParams) ([]DeveloperCompanyReview, error)
	GetAllDocsByPhaseIDWithOutPagination(ctx context.Context, phasesID int64) ([]GetAllDocsByPhaseIDWithOutPaginationRow, error)
	GetAllDocsByProjectID(ctx context.Context, arg GetAllDocsByProjectIDParams) ([]GetAllDocsByProjectIDRow, error)
	GetAllDocsByProjectIDWithOutPagination(ctx context.Context, projectsID int64) ([]GetAllDocsByProjectIDWithOutPaginationRow, error)
	GetAllDocsByProjectPropertyIDWithOutPagination(ctx context.Context, projectPropertiesID int64) ([]GetAllDocsByProjectPropertyIDWithOutPaginationRow, error)
	GetAllDocsByProjectPropertyUnitByIDWithOutPagination(ctx context.Context, unitsID int64) ([]GetAllDocsByProjectPropertyUnitByIDWithOutPaginationRow, error)
	GetAllDocumentCategories(ctx context.Context, arg GetAllDocumentCategoriesParams) ([]GetAllDocumentCategoriesRow, error)
	GetAllDocumentsByContactsID(ctx context.Context, contactsID pgtype.Int8) ([]GetAllDocumentsByContactsIDRow, error)
	GetAllDocumentsCategories(ctx context.Context) ([]GetAllDocumentsCategoriesRow, error)
	GetAllDocumentsCategory(ctx context.Context, arg GetAllDocumentsCategoryParams) ([]DocumentsCategory, error)
	GetAllDocumentsSubCategory(ctx context.Context, arg GetAllDocumentsSubCategoryParams) ([]DocumentsSubcategory, error)
	GetAllDocumentsSubCategoryByDocId(ctx context.Context, documentsCategoryID int64) ([]DocumentsSubcategory, error)
	GetAllDropDownCategories(ctx context.Context) ([]DropdownCategory, error)
	GetAllDropDownItems(ctx context.Context) ([]DropdownItem, error)
	GetAllExchangeOfferCategory(ctx context.Context, arg GetAllExchangeOfferCategoryParams) ([]ExchangeOfferCategory, error)
	GetAllExhibition(ctx context.Context, arg GetAllExhibitionParams) ([]GetAllExhibitionRow, error)
	GetAllExhibitionBooths(ctx context.Context, arg GetAllExhibitionBoothsParams) ([]ExhibitionBooth, error)
	GetAllExhibitionClients(ctx context.Context, arg GetAllExhibitionClientsParams) ([]GetAllExhibitionClientsRow, error)
	GetAllExhibitionCollaborators(ctx context.Context, arg GetAllExhibitionCollaboratorsParams) ([]ExhibitionCollaborator, error)
	GetAllExhibitionCountries(ctx context.Context) ([]GetAllExhibitionCountriesRow, error)
	GetAllExhibitionQueries(ctx context.Context, arg GetAllExhibitionQueriesParams) ([]GetAllExhibitionQueriesRow, error)
	GetAllExhibitionReviews(ctx context.Context, arg GetAllExhibitionReviewsParams) ([]GetAllExhibitionReviewsRow, error)
	GetAllExhibitionServices(ctx context.Context, arg GetAllExhibitionServicesParams) ([]GetAllExhibitionServicesRow, error)
	GetAllExhibitionsReviews(ctx context.Context) ([]ExhibitionReview, error)
	GetAllExhibitionsWithoutPagination(ctx context.Context) ([]GetAllExhibitionsWithoutPaginationRow, error)
	GetAllExpertise(ctx context.Context, arg GetAllExpertiseParams) ([]GetAllExpertiseRow, error)
	// -- name: GetAllAmenitiesWithoutPagenation :many
	// SELECT * FROM amenities
	// ORDER BY id;
	// -- name: GetAmenityByTitleAndCategory :one
	// SELECT * FROM amenities WHERE LOWER(title) = LOWER($1) AND category_id = $2;
	// -- name: GetCountAllAmenities :one
	// SELECT COUNT(*) FROM amenities;
	// -- name: GetAllAmenitiesByCategoryIdWithoutPagenation :many
	// SELECT * FROM amenities
	// WHERE category_id = $1;
	// -- name: DeleteAmenitiesByCategoryId :exec
	// DELETE FROM amenities WHERE category_id = $1;
	// -- name: GetAllAmenitiesByProjectID :many
	// SELECT amenities.*,facilities_amenities_categories.category
	// FROM amenities
	// LEFT JOIN facilities_amenities_categories ON facilities_amenities_categories.id = amenities.category_id
	// WHERE
	//     amenities.id IN
	//     (
	//         SELECT
	//             UNNEST(amenities_id)
	//         FROM
	//             projects
	//         WHERE
	//            projects.id = $1
	//     );
	// -- name: GetAllAmenitiesByPhaseID :many
	// SELECT amenities.*,facilities_amenities_categories.category
	// FROM amenities
	// LEFT JOIN facilities_amenities_categories ON facilities_amenities_categories.id = amenities.category_id
	// WHERE
	//     amenities.id IN
	//     (
	//         SELECT
	//             UNNEST(amenities)
	//         FROM
	//             phases
	//         WHERE
	//             phases.id = $1
	//     );
	// -- name: GetAllAmenitiesForProjectProperty :many
	// SELECT amenities.*,facilities_amenities_categories.category
	// FROM amenities
	// LEFT JOIN facilities_amenities_categories ON facilities_amenities_categories.id = amenities.category_id
	// WHERE
	//     amenities.id IN
	//     (
	//         SELECT
	//             UNNEST(amenities_id)
	//         FROM
	//             project_properties
	//         WHERE
	//             project_properties.id = $1
	//     );
	// -- name: GetAllFacilitiesAmenitiesByCategoryWithoutPagination :many
	// SELECT facilities_amenities.*,categories.category FROM facilities_amenities LEFT JOIN categories ON facilities_amenities.categories = categories.id
	// WHERE facilities_amenities."type"=$1
	// ORDER BY facilities_amenities.categories;
	GetAllFacilitiesAmenitiesByCategoryWithoutPagination(ctx context.Context, arg GetAllFacilitiesAmenitiesByCategoryWithoutPaginationParams) ([]GetAllFacilitiesAmenitiesByCategoryWithoutPaginationRow, error)
	GetAllFacilitiesAmenitiesWithoutPagination(ctx context.Context, arg GetAllFacilitiesAmenitiesWithoutPaginationParams) ([]GetAllFacilitiesAmenitiesWithoutPaginationRow, error)
	GetAllFacilitiesAndAmenities(ctx context.Context, arg GetAllFacilitiesAndAmenitiesParams) ([]GetAllFacilitiesAndAmenitiesRow, error)
	// -- name: CreateFacilities :one
	// INSERT INTO facilities (
	//     icon_url,
	//     title,
	//     created_at,
	//     updated_at,
	//     category_id
	// )VALUES (
	//     $1 ,$2, $3, $4, $5
	// ) RETURNING *;
	// -- name: GetFacilities :one
	// SELECT * FROM facilities
	// WHERE id = $1 LIMIT 1;
	// -- name: GetFacilitiesByCategory :many
	// SELECT * FROM facilities
	// WHERE category_id = $3 LIMIT $1 OFFSET $2;
	// -- name: GetAllFacilitiesByCategory :many
	// SELECT facilities.*,facilities_amenities_categories.category FROM facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
	// ORDER BY category_id
	// LIMIT $1
	// OFFSET $2;
	// -- name: GetAllFacilitiesByCategoryWithoutPagination :many
	// SELECT facilities.*,facilities_amenities_categories.category FROM facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
	// ORDER BY category_id;
	// -- name: UpdateFacilities :one
	// UPDATE facilities
	// SET   icon_url = $2,
	//     title = $3,
	//     created_at = $4,
	//     updated_at = $5,
	//     category_id = $6
	// Where id = $1
	// RETURNING *;
	// -- name: DeleteFacilities :exec
	// DELETE FROM facilities
	// Where id = $1;
	// -- name: GetAllFacilitiesByIds :many
	// SELECT facilities.*,facilities_amenities_categories.category, facilities_amenities_categories.status From facilities LEFT JOIN facilities_amenities_categories ON facilities.category_id = facilities_amenities_categories.id
	// WHERE facilities.id = ANY($1::bigint[]);
	GetAllFacilitiesById(ctx context.Context, arg GetAllFacilitiesByIdParams) ([]GetAllFacilitiesByIdRow, error)
	GetAllFacilityAmenity(ctx context.Context, arg GetAllFacilityAmenityParams) ([]GetAllFacilityAmenityRow, error)
	GetAllFacilityAmenityForEntity(ctx context.Context, arg GetAllFacilityAmenityForEntityParams) ([]int64, error)
	GetAllFacilityAmenityIdsByTitle(ctx context.Context, arg GetAllFacilityAmenityIdsByTitleParams) ([]int64, error)
	GetAllFacts(ctx context.Context, arg GetAllFactsParams) ([]GetAllFactsRow, error)
	GetAllFactsDetails(ctx context.Context) ([]Fact, error)
	GetAllFieldsOfStudy(ctx context.Context) ([]FieldOfStudy, error)
	GetAllFinancialProviders(ctx context.Context, arg GetAllFinancialProvidersParams) ([]FinancialProvider, error)
	GetAllFinancialProvidersByIds(ctx context.Context, arg GetAllFinancialProvidersByIdsParams) ([]GetAllFinancialProvidersByIdsRow, error)
	GetAllFollowers(ctx context.Context, arg GetAllFollowersParams) ([]GetAllFollowersRow, error)
	GetAllFollowing(ctx context.Context, arg GetAllFollowingParams) ([]GetAllFollowingRow, error)
	// SELECT p.* FROM permissions p
	// LEFT JOIN LATERAL (
	//     SELECT UNNEST(permissions_id) as permission_id
	//     FROM users
	//     WHERE users.id = $1
	// ) u ON p.id = u.permission_id
	// WHERE ($1 != 6 AND u.permission_id IS NOT NULL) OR $1 = 6;
	GetAllForSuperUserPermissionBySectionPermissionId(ctx context.Context, sectionPermissionID int64) ([]Permission, error)
	GetAllForSuperUserPermissionBySectionPermissionIdMV(ctx context.Context, arg GetAllForSuperUserPermissionBySectionPermissionIdMVParams) ([]PermissionsMv, error)
	GetAllFreelanceUsers(ctx context.Context, arg GetAllFreelanceUsersParams) ([]GetAllFreelanceUsersRow, error)
	GetAllFreelancerNames(ctx context.Context) ([]GetAllFreelancerNamesRow, error)
	GetAllGalleryTypesForMediaTypeExhibitionGraph(ctx context.Context, arg GetAllGalleryTypesForMediaTypeExhibitionGraphParams) ([]GetAllGalleryTypesForMediaTypeExhibitionGraphRow, error)
	GetAllGlobalPropertyByEntity(ctx context.Context, arg GetAllGlobalPropertyByEntityParams) (Property, error)
	GetAllGlobalPropertyById(ctx context.Context, id int64) (Property, error)
	GetAllGlobalTags(ctx context.Context) ([]GlobalTagging, error)
	GetAllGlobalTagsBySection(ctx context.Context, section string) ([]GlobalTagging, error)
	GetAllHolidayHomeStayReviewsWithOverAllAverages(ctx context.Context, holidayHomeID int64) (GetAllHolidayHomeStayReviewsWithOverAllAveragesRow, error)
	// SELECT * FROM sub_section_mv
	// WHERE sub_section_button_id = $1;
	GetAllIDANDPermissionsFromSubSectionPermission(ctx context.Context, arg GetAllIDANDPermissionsFromSubSectionPermissionParams) ([]GetAllIDANDPermissionsFromSubSectionPermissionRow, error)
	GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination(ctx context.Context) ([]GetAllIDANDPermissionsFromSubSectionPermissionWithoutPaginationRow, error)
	GetAllIndustry(ctx context.Context, arg GetAllIndustryParams) ([]Industry, error)
	GetAllIndustryWithoutPagination(ctx context.Context) ([]Industry, error)
	// SELECT * FROM external_sharing
	// WHERE
	// CASE
	// WHEN is_project = TRUE AND phase_id IS NULL AND project_id = $1
	// THEN TRUE
	// ELSE is_project = TRUE AND phase_id = $2 AND project_id = $1
	// END;
	GetAllInternalSharing(ctx context.Context, arg GetAllInternalSharingParams) ([]GetAllInternalSharingRow, error)
	GetAllInternationalContent(ctx context.Context) ([]InternationalContent, error)
	GetAllInternationalExhibitions(ctx context.Context, arg GetAllInternationalExhibitionsParams) ([]GetAllInternationalExhibitionsRow, error)
	GetAllJobPortals(ctx context.Context, arg GetAllJobPortalsParams) ([]JobPortal, error)
	GetAllLanguage(ctx context.Context, arg GetAllLanguageParams) ([]AllLanguage, error)
	GetAllLanguageWithoutPagination(ctx context.Context) ([]AllLanguage, error)
	GetAllLanguagesByID(ctx context.Context, id int64) (GetAllLanguagesByIDRow, error)
	GetAllLanguagesByIds(ctx context.Context, dollar_1 []int64) ([]AllLanguage, error)
	GetAllLanguagesByUserID(ctx context.Context, profileID int64) ([]GetAllLanguagesByUserIDRow, error)
	GetAllLeadDetailsByContactId(ctx context.Context, arg GetAllLeadDetailsByContactIdParams) ([]GetAllLeadDetailsByContactIdRow, error)
	GetAllLeadPropertiesByLeadId(ctx context.Context, arg GetAllLeadPropertiesByLeadIdParams) ([]LeadsProperty, error)
	GetAllLeaders(ctx context.Context, arg GetAllLeadersParams) ([]Leader, error)
	GetAllLeadersByCompany(ctx context.Context, arg GetAllLeadersByCompanyParams) ([]Leader, error)
	GetAllLeadersWithoutPagination(ctx context.Context) ([]Leader, error)
	GetAllLeads(ctx context.Context, arg GetAllLeadsParams) ([]GetAllLeadsRow, error)
	GetAllListingProblemsReport(ctx context.Context, arg GetAllListingProblemsReportParams) ([]ListingProblemsReport, error)
	GetAllLocalExhibitions(ctx context.Context, arg GetAllLocalExhibitionsParams) ([]GetAllLocalExhibitionsRow, error)
	GetAllLocation(ctx context.Context, arg GetAllLocationParams) ([]Location, error)
	GetAllLuxuryPropertiesByCountry(ctx context.Context, arg GetAllLuxuryPropertiesByCountryParams) ([]GetAllLuxuryPropertiesByCountryRow, error)
	GetAllLuxuryPropertiesByNotEqualCountry(ctx context.Context, arg GetAllLuxuryPropertiesByNotEqualCountryParams) ([]GetAllLuxuryPropertiesByNotEqualCountryRow, error)
	GetAllLuxuryPropertiesByStatus(ctx context.Context, arg GetAllLuxuryPropertiesByStatusParams) ([]GetAllLuxuryPropertiesByStatusRow, error)
	GetAllMapSearches(ctx context.Context, arg GetAllMapSearchesParams) ([]MapSearch, error)
	GetAllNationalitiesByProfileID(ctx context.Context, profileID int64) ([]GetAllNationalitiesByProfileIDRow, error)
	// -- name: FetchSubSectionsForUser :many
	// SELECT ss.*
	// FROM sub_section ss
	// JOIN (
	//     SELECT UNNEST(sub_section_permission) as sub_section_permission
	//     FROM users
	//     WHERE users.id = $2
	// ) u ON ss.id = u.sub_section_permission
	// JOIN permissions p ON ss.permissions_id = p.id
	// WHERE p.title ILIKE $1;
	// -- name: FetchNestedButtonPermissionForUser :many
	// SELECT ss.*
	// FROM sub_section ss
	// JOIN (
	//     SELECT UNNEST(sub_section_permission) AS sub_section_permission
	//     FROM users
	//     WHERE users.id = $2
	// ) u ON ss.id = u.sub_section_permission
	// JOIN (
	//     SELECT id FROM sub_section WHERE sub_section.sub_section_name ILIKE $1
	// ) sss ON ss.sub_section_button_id = sss.id
	// WHERE ss.sub_section_button_id IS NOT NULL;
	GetAllNestedSubSectionPermissonByButtonID(ctx context.Context, subSectionButtonID int64) ([]SubSection, error)
	// timeslots.openhouse_id,
	// appointment.appointment_type,
	// profiles.nic_no,
	GetAllOHTimeSlotsAndAppointmentsByProjProp(ctx context.Context, propertyID int64) ([]GetAllOHTimeSlotsAndAppointmentsByProjPropRow, error)
	GetAllOpenhouseSessionsByProjProp(ctx context.Context, propertyID int64) ([]GetAllOpenhouseSessionsByProjPropRow, error)
	GetAllOtherUser(ctx context.Context, arg GetAllOtherUserParams) ([]User, error)
	GetAllOtherUsersByCountryId(ctx context.Context, arg GetAllOtherUsersByCountryIdParams) ([]GetAllOtherUsersByCountryIdRow, error)
	GetAllOwnerProperties(ctx context.Context, arg GetAllOwnerPropertiesParams) ([]OwnerProperty, error)
	GetAllOwnerPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllOwnerPropertiesByMainMediaSectionAndIdParams) (GetAllOwnerPropertiesByMainMediaSectionAndIdRow, error)
	GetAllOwnerPropertiesMainMediaSectionById(ctx context.Context, ownerPropertiesID int64) ([]string, error)
	GetAllOwnerPropertyDocument(ctx context.Context, arg GetAllOwnerPropertyDocumentParams) ([]OwnerPropertiesDocument, error)
	GetAllOwnerPropertyDocumentsByOwnerPropertyId(ctx context.Context, arg GetAllOwnerPropertyDocumentsByOwnerPropertyIdParams) ([]GetAllOwnerPropertyDocumentsByOwnerPropertyIdRow, error)
	GetAllOwnerPropertyMedia(ctx context.Context, arg GetAllOwnerPropertyMediaParams) ([]OwnerPropertiesMedium, error)
	GetAllOwnerPropertyMediaByid(ctx context.Context, ownerPropertiesID int64) ([]OwnerPropertiesMedium, error)
	GetAllOwnerUsers(ctx context.Context, arg GetAllOwnerUsersParams) ([]GetAllOwnerUsersRow, error)
	GetAllPageContents(ctx context.Context, arg GetAllPageContentsParams) ([]PageContent, error)
	// -- name: UpdatePage :one
	// UPDATE pages
	// SET title = $1,
	//     page_type = $2,
	//     description = $3,
	//     status = $4,
	//     updated_at = $5
	// WHERE id = $6
	// RETURNING *;
	GetAllPages(ctx context.Context, arg GetAllPagesParams) ([]Page, error)
	GetAllPaginatedFieldsOfStudy(ctx context.Context, arg GetAllPaginatedFieldsOfStudyParams) ([]GetAllPaginatedFieldsOfStudyRow, error)
	GetAllPaymentPlanPackages(ctx context.Context) ([]PaymentPlansPackage, error)
	// ba.bank_name AS bank
	// LEFT JOIN bank_account_details ba ON p.bank != null
	// AND p.bank = ba.id
	GetAllPaymentsBySubscriptionOrder(ctx context.Context, arg GetAllPaymentsBySubscriptionOrderParams) ([]GetAllPaymentsBySubscriptionOrderRow, error)
	GetAllPaymentsBySubscriptionOrderCounts(ctx context.Context, orderID int64) (int64, error)
	GetAllPermission(ctx context.Context, arg GetAllPermissionParams) ([]Permission, error)
	GetAllPermissionBySectionPermissionId(ctx context.Context, sectionPermissionID int64) ([]Permission, error)
	//     this mean it's a company user or not
	GetAllPermissionFromUserByID(ctx context.Context, arg GetAllPermissionFromUserByIDParams) ([]pgtype.Int8, error)
	GetAllPermissionSectionIds(ctx context.Context, arg GetAllPermissionSectionIdsParams) ([]GetAllPermissionSectionIdsRow, error)
	GetAllPermissions(ctx context.Context) ([]Permission, error)
	GetAllPhaseFinancialProviders(ctx context.Context, phasesID pgtype.Int8) (ProjectFinancialProvider, error)
	GetAllPhases(ctx context.Context, arg GetAllPhasesParams) ([]Phase, error)
	GetAllPhasesByProject(ctx context.Context, arg GetAllPhasesByProjectParams) ([]Phase, error)
	GetAllPhasesByProjectGraph(ctx context.Context, arg GetAllPhasesByProjectGraphParams) ([]Phase, error)
	GetAllPhasesByStatus(ctx context.Context, arg GetAllPhasesByStatusParams) ([]GetAllPhasesByStatusRow, error)
	GetAllPhasesDocumentByPhaseId(ctx context.Context, arg GetAllPhasesDocumentByPhaseIdParams) ([]GetAllPhasesDocumentByPhaseIdRow, error)
	GetAllPhasesDocuments(ctx context.Context, arg GetAllPhasesDocumentsParams) ([]PhasesDocument, error)
	GetAllPhasesMediByWithoutPagination(ctx context.Context, phasesID pgtype.Int8) ([]ProjectMedium, error)
	GetAllPhasesMediaByMainMediaSectionAndId(ctx context.Context, arg GetAllPhasesMediaByMainMediaSectionAndIdParams) (GetAllPhasesMediaByMainMediaSectionAndIdRow, error)
	// -- name: GetProjectAmenitiesForPhase :one
	// select amenities from projects
	// left join phases on phases.projects_id = projects.id
	// where projects.id = $1;
	GetAllPhasesMediaByPhaseId(ctx context.Context, entityID int64) ([]GlobalMedium, error)
	GetAllPhasesMediaGalleryTypeById(ctx context.Context, entityID int64) ([]GetAllPhasesMediaGalleryTypeByIdRow, error)
	// -- name: GetAllPhasesMedia :many
	// SELECT * FROM phases_media LIMIT $1 OFFSET $2;
	GetAllPhasesMediaWithPagination(ctx context.Context, arg GetAllPhasesMediaWithPaginationParams) ([]GetAllPhasesMediaWithPaginationRow, error)
	GetAllPhasesPlans(ctx context.Context, arg GetAllPhasesPlansParams) ([]PhasesPlan, error)
	GetAllPhasesPlansByPhasesId(ctx context.Context, phasesID int64) ([]PhasesPlan, error)
	GetAllPhasesPlansWithoutPagination(ctx context.Context, phasesID int64) ([]PhasesPlan, error)
	GetAllPlanInstallmentIDsByPaymentPlansID(ctx context.Context, paymentPlans int64) ([]int64, error)
	GetAllPostedCareerPortals(ctx context.Context, arg GetAllPostedCareerPortalsParams) ([]GetAllPostedCareerPortalsRow, error)
	GetAllPostedHotelBookings(ctx context.Context, arg GetAllPostedHotelBookingsParams) ([]PostedHotelBooking, error)
	GetAllPostedHotelComments(ctx context.Context) ([]PostedHotelComment, error)
	GetAllPostedHotelMedia(ctx context.Context) ([]PostedHotelMedium, error)
	GetAllPosts(ctx context.Context, arg GetAllPostsParams) ([]GetAllPostsRow, error)
	GetAllPostsByPostedBy(ctx context.Context, arg GetAllPostsByPostedByParams) ([]GetAllPostsByPostedByRow, error)
	GetAllProductBranchReviews(ctx context.Context, arg GetAllProductBranchReviewsParams) ([]GetAllProductBranchReviewsRow, error)
	GetAllProductCategories(ctx context.Context, arg GetAllProductCategoriesParams) ([]ProductCategory, error)
	GetAllProductReviews(ctx context.Context, arg GetAllProductReviewsParams) ([]GetAllProductReviewsRow, error)
	GetAllProductsByCompanyID(ctx context.Context, arg GetAllProductsByCompanyIDParams) ([]GetAllProductsByCompanyIDRow, error)
	GetAllProfessions(ctx context.Context, arg GetAllProfessionsParams) ([]Profession, error)
	GetAllProfessionsWithoutPagination(ctx context.Context) ([]Profession, error)
	GetAllProfile(ctx context.Context, arg GetAllProfileParams) ([]Profile, error)
	GetAllProfilesNames(ctx context.Context) ([]string, error)
	GetAllProjec(ctx context.Context) ([]int64, error)
	GetAllProject(ctx context.Context, arg GetAllProjectParams) ([]Project, error)
	GetAllProjectActivitiesHistory(ctx context.Context, arg GetAllProjectActivitiesHistoryParams) ([]GetAllProjectActivitiesHistoryRow, error)
	GetAllProjectAds(ctx context.Context, arg GetAllProjectAdsParams) ([]GetAllProjectAdsRow, error)
	GetAllProjectAdsByPostedBy(ctx context.Context, arg GetAllProjectAdsByPostedByParams) ([]GetAllProjectAdsByPostedByRow, error)
	GetAllProjectByCompanyId(ctx context.Context, arg GetAllProjectByCompanyIdParams) ([]Project, error)
	GetAllProjectByCompanyIdCount(ctx context.Context, developerCompaniesID int64) (int64, error)
	GetAllProjectDetailsWithAdvancedFilter(ctx context.Context, arg GetAllProjectDetailsWithAdvancedFilterParams) ([]GetAllProjectDetailsWithAdvancedFilterRow, error)
	GetAllProjectDocuments(ctx context.Context, arg GetAllProjectDocumentsParams) ([]ProjectDocument, error)
	GetAllProjectFileViewHistory(ctx context.Context, arg GetAllProjectFileViewHistoryParams) ([]GetAllProjectFileViewHistoryRow, error)
	GetAllProjectFinancialProviders(ctx context.Context, projectsID int64) ([]ProjectFinancialProvider, error)
	GetAllProjectHubRefrenceNumber(ctx context.Context, arg GetAllProjectHubRefrenceNumberParams) ([]string, error)
	GetAllProjectMedia(ctx context.Context, arg GetAllProjectMediaParams) ([]ProjectMedium, error)
	GetAllProjectMediaByGalleryTypeAndId(ctx context.Context, arg GetAllProjectMediaByGalleryTypeAndIdParams) (GetAllProjectMediaByGalleryTypeAndIdRow, error)
	GetAllProjectMediaByProjectIdAndGalleryType(ctx context.Context, entityID int64) ([]GetAllProjectMediaByProjectIdAndGalleryTypeRow, error)
	// -- name: GetAllProjectMediaByProjectId :many
	// SELECT * FROM project_media WHERE projects_id = $1;
	GetAllProjectMediaWithPagination(ctx context.Context, arg GetAllProjectMediaWithPaginationParams) ([]ProjectMedium, error)
	GetAllProjectMediaWithoutPagination(ctx context.Context, arg GetAllProjectMediaWithoutPaginationParams) ([]ProjectMedium, error)
	GetAllProjectNames(ctx context.Context, isMultiphase pgtype.Bool) ([]GetAllProjectNamesRow, error)
	//------------------------------------------------
	//          AND CASE WHEN @company_id::bigint = 0 THEN true ELSE @company_id::bigint = ANY(external_company_id) END
	//          AND CASE WHEN @is_branch_id::bigint = 0 THEN true ELSE  @is_branch::bool = ANY(external_is_branch)  END
	//          AND CASE WHEN @company_type::bigint = 0 THEN true ELSE @company_type::bigint = ANY(external_company_type) END
	GetAllProjectPhaseSharing(ctx context.Context, arg GetAllProjectPhaseSharingParams) ([]GetAllProjectPhaseSharingRow, error)
	// ! ******************************************  Share Project Phase   *****************************************************
	//          AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	//     AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	GetAllProjectPhaseSharingWithMe(ctx context.Context, arg GetAllProjectPhaseSharingWithMeParams) ([]GetAllProjectPhaseSharingWithMeRow, error)
	GetAllProjectPosts(ctx context.Context, arg GetAllProjectPostsParams) ([]GetAllProjectPostsRow, error)
	GetAllProjectPostsByPostedBy(ctx context.Context, arg GetAllProjectPostsByPostedByParams) ([]GetAllProjectPostsByPostedByRow, error)
	GetAllProjectPromotionByProjectID(ctx context.Context, arg GetAllProjectPromotionByProjectIDParams) ([]ProjectPromotion, error)
	// AND a.countries_id = @country_id::bigint
	// AND CASE WHEN @city_id::bigint = 0 Then true ELSE a.cities_id = @city_id::bigint END
	// AND CASE WHEN @community_id::bigint = 0 THEN true ELSE a.communities_id = @community_id::bigint END
	// AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE a.sub_communities_id = @sub_community_id::bigint END
	GetAllProjectPromotionByProjectIDWithoutPagination(ctx context.Context, projectsID int64) ([]ProjectPromotion, error)
	GetAllProjectPromotions(ctx context.Context, arg GetAllProjectPromotionsParams) ([]ProjectPromotion, error)
	GetAllProjectProperties(ctx context.Context, arg GetAllProjectPropertiesParams) ([]ProjectProperty, error)
	GetAllProjectPropertiesByProjectId(ctx context.Context, arg GetAllProjectPropertiesByProjectIdParams) ([]GetAllProjectPropertiesByProjectIdRow, error)
	GetAllProjectPropertiesByProjectIdAndPhaseId(ctx context.Context, arg GetAllProjectPropertiesByProjectIdAndPhaseIdParams) ([]Property, error)
	//AND companies.status != 6;
	GetAllProjectPropertiesByProjectIdAndPropertyTypesId(ctx context.Context, arg GetAllProjectPropertiesByProjectIdAndPropertyTypesIdParams) ([]GetAllProjectPropertiesByProjectIdAndPropertyTypesIdRow, error)
	GetAllProjectPropertiesByProjectIdAndPropertyTypesIdAnsPhaseId(ctx context.Context, arg GetAllProjectPropertiesByProjectIdAndPropertyTypesIdAnsPhaseIdParams) ([]GetAllProjectPropertiesByProjectIdAndPropertyTypesIdAnsPhaseIdRow, error)
	GetAllProjectPropertiesByStatus(ctx context.Context, arg GetAllProjectPropertiesByStatusParams) ([]GetAllProjectPropertiesByStatusRow, error)
	GetAllProjectPropertyDocByProjectPropertyId(ctx context.Context, arg GetAllProjectPropertyDocByProjectPropertyIdParams) ([]GetAllProjectPropertyDocByProjectPropertyIdRow, error)
	GetAllProjectPropertyDocument(ctx context.Context, arg GetAllProjectPropertyDocumentParams) ([]ProjectPropertiesDocument, error)
	// -- name: GetAllProjectPropertyMediaByPropertyId :many
	// SELECT * FROM project_property_media
	// WHERE project_properties_id = $2 LIMIT $1;
	GetAllProjectPropertyMediaWithPagenation(ctx context.Context, arg GetAllProjectPropertyMediaWithPagenationParams) ([]GetAllProjectPropertyMediaWithPagenationRow, error)
	GetAllProjectPropertyMediaWithoutPagenation(ctx context.Context, propertiesID int64) ([]PropertiesMedium, error)
	// appointment.appointment_type,
	// profiles.nic_no
	GetAllProjectPropertyOHAppointments(ctx context.Context, propertyID int64) ([]GetAllProjectPropertyOHAppointmentsRow, error)
	GetAllProjectPropertySharing(ctx context.Context, arg GetAllProjectPropertySharingParams) ([]GetAllProjectPropertySharingRow, error)
	// ! ******************************************  Share Property   *****************************************************
	//          AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by END
	GetAllProjectPropertySharingWithMe(ctx context.Context, arg GetAllProjectPropertySharingWithMeParams) ([]GetAllProjectPropertySharingWithMeRow, error)
	GetAllProjectPropertyUnitSharing(ctx context.Context, arg GetAllProjectPropertyUnitSharingParams) ([]GetAllProjectPropertyUnitSharingRow, error)
	// ! ******************************************  Share Unit  *****************************************************
	//     AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  internal_sharing.created_by  END
	GetAllProjectPropertyUnitSharingWithMe(ctx context.Context, arg GetAllProjectPropertyUnitSharingWithMeParams) ([]GetAllProjectPropertyUnitSharingWithMeRow, error)
	GetAllProjectPropertyUnitTypesByStatus(ctx context.Context, arg GetAllProjectPropertyUnitTypesByStatusParams) ([]GetAllProjectPropertyUnitTypesByStatusRow, error)
	GetAllProjectRating(ctx context.Context, arg GetAllProjectRatingParams) ([]GetAllProjectRatingRow, error)
	GetAllProjectRefrenceNumber(ctx context.Context, arg GetAllProjectRefrenceNumberParams) ([]string, error)
	GetAllProjectRequests(ctx context.Context, arg GetAllProjectRequestsParams) ([]ProjectRequest, error)
	GetAllProjectSharing(ctx context.Context, arg GetAllProjectSharingParams) ([]GetAllProjectSharingRow, error)
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	//         AND CASE WHEN @user_id::bigint = 0 THEN true ELSE  @user_id::bigint =  created_by  END
	GetAllProjectSharingWithMe(ctx context.Context, arg GetAllProjectSharingWithMeParams) ([]GetAllProjectSharingWithMeRow, error)
	GetAllProjectUnitReviews(ctx context.Context, arg GetAllProjectUnitReviewsParams) ([]GetAllProjectUnitReviewsRow, error)
	GetAllProjectVideos(ctx context.Context, arg GetAllProjectVideosParams) ([]ProjectVideo, error)
	GetAllProjectsByPromotion(ctx context.Context, arg GetAllProjectsByPromotionParams) ([]Project, error)
	GetAllProjectsByRank(ctx context.Context, arg GetAllProjectsByRankParams) ([]Project, error)
	GetAllProjectsByRanksAndIsVerified(ctx context.Context, arg GetAllProjectsByRanksAndIsVerifiedParams) ([]GetAllProjectsByRanksAndIsVerifiedRow, error)
	GetAllProjectsForMobile(ctx context.Context, arg GetAllProjectsForMobileParams) ([]GetAllProjectsForMobileRow, error)
	GetAllProjectsForMobileIsVerified(ctx context.Context, arg GetAllProjectsForMobileIsVerifiedParams) ([]GetAllProjectsForMobileIsVerifiedRow, error)
	GetAllProjectsRefNo(ctx context.Context, arg GetAllProjectsRefNoParams) ([]GetAllProjectsRefNoRow, error)
	GetAllPromotionType(ctx context.Context, arg GetAllPromotionTypeParams) ([]PromotionType, error)
	GetAllPromotionTypeByIds(ctx context.Context, dollar_1 []int64) ([]PromotionType, error)
	GetAllPromotionTypeWithoutPagination(ctx context.Context) ([]PromotionType, error)
	GetAllPropertiesDetails(ctx context.Context, arg GetAllPropertiesDetailsParams) ([]GetAllPropertiesDetailsRow, error)
	//PROPERTIES
	// AGRICULTURAL
	// INDUSTRIAL
	GetAllPropertiesReferences(ctx context.Context) ([]GetAllPropertiesReferencesRow, error)
	GetAllPropertiesTypesByProjectsIds(ctx context.Context, arg GetAllPropertiesTypesByProjectsIdsParams) ([]int64, error)
	GetAllPropertiesTypesByProjectsIdsAndPhaseId(ctx context.Context, entityID int64) ([]int64, error)
	GetAllPropertyAds(ctx context.Context, arg GetAllPropertyAdsParams) ([]GetAllPropertyAdsRow, error)
	GetAllPropertyAdsByPostedBy(ctx context.Context, arg GetAllPropertyAdsByPostedByParams) ([]GetAllPropertyAdsByPostedByRow, error)
	GetAllPropertyBranchPlan(ctx context.Context, arg GetAllPropertyBranchPlanParams) ([]PropertiesPlansBranch, error)
	GetAllPropertyBranchPlanById(ctx context.Context, arg GetAllPropertyBranchPlanByIdParams) ([]GetAllPropertyBranchPlanByIdRow, error)
	GetAllPropertyBranchPlanWithoutPagination(ctx context.Context) ([]PropertiesPlansBranch, error)
	GetAllPropertyByResidential(ctx context.Context, arg GetAllPropertyByResidentialParams) ([]PropertyType, error)
	GetAllPropertyFact(ctx context.Context, arg GetAllPropertyFactParams) ([]PropertiesFact, error)
	GetAllPropertyHubActivitiesFileView(ctx context.Context, arg GetAllPropertyHubActivitiesFileViewParams) ([]GetAllPropertyHubActivitiesFileViewRow, error)
	GetAllPropertyHubActivitiesTransactions(ctx context.Context, arg GetAllPropertyHubActivitiesTransactionsParams) ([]GetAllPropertyHubActivitiesTransactionsRow, error)
	GetAllPropertyHubActivity(ctx context.Context, arg GetAllPropertyHubActivityParams) ([]PropertyHubActivity, error)
	GetAllPropertyHubCount(ctx context.Context) (int64, error)
	GetAllPropertyHubRefNo(ctx context.Context, arg GetAllPropertyHubRefNoParams) ([]GetAllPropertyHubRefNoRow, error)
	GetAllPropertyLocations(ctx context.Context, arg GetAllPropertyLocationsParams) ([]GetAllPropertyLocationsRow, error)
	GetAllPropertyLocationsBySubCommunity(ctx context.Context, subCommunitiesID int64) ([]GetAllPropertyLocationsBySubCommunityRow, error)
	GetAllPropertyMediaByGalleryTypeAndId(ctx context.Context, arg GetAllPropertyMediaByGalleryTypeAndIdParams) (GetAllPropertyMediaByGalleryTypeAndIdRow, error)
	// -- name: GetPaymentPlansForProjectPropertyByPropertyId :many
	// select * from payment_plans_packages
	// where payment_plans_packages.properties_id = $1 AND payment_plans_packages.property = 1;
	GetAllPropertyMediaByPropertyIdAndGalleryType(ctx context.Context, entityID int64) ([]GetAllPropertyMediaByPropertyIdAndGalleryTypeRow, error)
	GetAllPropertyPlan(ctx context.Context, arg GetAllPropertyPlanParams) ([]PropertiesPlan, error)
	GetAllPropertyPlanById(ctx context.Context, arg GetAllPropertyPlanByIdParams) ([]GetAllPropertyPlanByIdRow, error)
	GetAllPropertyPlanByIdWithoutPagination(ctx context.Context, arg GetAllPropertyPlanByIdWithoutPaginationParams) ([]GetAllPropertyPlanByIdWithoutPaginationRow, error)
	GetAllPropertyPlanByPropertyIdWhichProperty(ctx context.Context, arg GetAllPropertyPlanByPropertyIdWhichPropertyParams) ([]PropertiesPlan, error)
	GetAllPropertyPlanWithoutPagination(ctx context.Context) ([]PropertiesPlan, error)
	// freelancers_properties
	// broker_company_agent_properties
	// broker_company_agent_properties_branch
	// owner_properties
	// agricultural_freelancer_properties
	// agricultural_broker_agent_properties
	// agricultural_broker_agent_properties_branch
	// agricultural_owner_properties
	// industrial_freelancer_properties
	// industrial_broker_agent_properties
	// industrial_broker_agent_properties_branch
	// industrial_owner_properties
	GetAllPropertyReviews(ctx context.Context, arg GetAllPropertyReviewsParams) ([]GetAllPropertyReviewsRow, error)
	GetAllPropertyType(ctx context.Context, arg GetAllPropertyTypeParams) ([]PropertyType, error)
	GetAllPropertyTypeByCode(ctx context.Context, arg GetAllPropertyTypeByCodeParams) (PropertyType, error)
	GetAllPropertyTypeByCommercial(ctx context.Context, arg GetAllPropertyTypeByCommercialParams) ([]PropertyType, error)
	GetAllPropertyTypeByType(ctx context.Context, arg GetAllPropertyTypeByTypeParams) (PropertyType, error)
	GetAllPropertyTypeFacts(ctx context.Context, arg GetAllPropertyTypeFactsParams) ([]PropertyTypeFact, error)
	GetAllPropertyTypeFactsByIds(ctx context.Context, dollar_1 []int64) ([]GetAllPropertyTypeFactsByIdsRow, error)
	GetAllPropertyTypeFactsNew(ctx context.Context) ([]GetAllPropertyTypeFactsNewRow, error)
	GetAllPropertyTypeUnitType(ctx context.Context, arg GetAllPropertyTypeUnitTypeParams) ([]GetAllPropertyTypeUnitTypeRow, error)
	GetAllPropertyTypesByPropertyId(ctx context.Context, id int64) ([]PropertyType, error)
	GetAllPropertyTypesByids(ctx context.Context, dollar_1 []int64) ([]PropertyType, error)
	GetAllPropertyUnitComment(ctx context.Context, arg GetAllPropertyUnitCommentParams) ([]PropertyUnitComment, error)
	GetAllPropertyUnitLike(ctx context.Context, arg GetAllPropertyUnitLikeParams) ([]PropertyUnitLike, error)
	GetAllPropertyUnitSaved(ctx context.Context, arg GetAllPropertyUnitSavedParams) ([]PropertyUnitSaved, error)
	GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichProperty(ctx context.Context, arg GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyParams) ([]int64, error)
	GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetAllPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams) ([]int64, error)
	GetAllPropertyVideos(ctx context.Context, arg GetAllPropertyVideosParams) ([]PropertiesVideo, error)
	// WITH x AS (
	// 	SELECT
	// 		id,
	// 		property_name,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		FALSE AS is_branch,
	// 		FALSE AS from_xml,
	// 		category
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.countries_id = $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_name,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		FALSE AS is_branch,
	// 		FALSE AS from_xml,
	// 		category
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.countries_id = $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_name,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		is_branch,
	// 		from_xml,
	// 		category
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.countries_id = $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_name,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		is_branch,
	// 		from_xml,
	// 		category
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.countries_id = $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// )
	// SELECT
	// 	id,
	// 	property_name,
	// 	property_title,
	// 	property_title_arabic,
	// 	description,
	// 	description_arabic,
	// 	is_verified,
	// 	property_rank,
	// 	addresses_id,
	// 	locations_id,
	// 	property_types_id,
	// 	profiles_id,
	// 	facilities_id,
	// 	amenities_id,
	// 	status,
	// 	created_at,
	// 	updated_at,
	// 	is_show_owner_info,
	// 	property,
	// 	countries_id,
	// 	ref_no,
	// 	is_branch,
	// 	from_xml,
	// 	category
	// FROM
	// 	x
	// ORDER BY
	// 	id
	// LIMIT
	// 	$1 OFFSET $2;
	// WITH x AS (
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_name,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		FALSE AS is_branch,
	// 		FALSE AS from_xml,
	// 		category
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.countries_id != $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_name,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		FALSE AS is_branch,
	// 		FALSE AS from_xml,
	// 		category
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.countries_id != $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_name,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		is_branch,
	// 		from_xml,
	// 		category
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.countries_id != $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_name,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		is_branch,
	// 		from_xml,
	// 		category
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.countries_id != $3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// )
	// SELECT
	// 	id,
	// 	property_name,
	// 	property_title,
	// 	property_title_arabic,
	// 	description,
	// 	description_arabic,
	// 	is_verified,
	// 	property_rank,
	// 	addresses_id,
	// 	locations_id,
	// 	property_types_id,
	// 	profiles_id,
	// 	facilities_id,
	// 	amenities_id,
	// 	status,
	// 	created_at,
	// 	updated_at,
	// 	is_show_owner_info,
	// 	property,
	// 	countries_id,
	// 	ref_no,
	// 	is_branch,
	// 	from_xml,
	// 	category
	// FROM
	// 	x
	// ORDER BY
	// 	created_at DESC
	// LIMIT
	// 	$1 OFFSET $2;
	// WITH x AS (
	//     SELECT
	//         id
	//     FROM
	//         freelancers_properties fp
	//     WHERE
	//     CASE
	//          WHEN $1 = 0 THEN true
	//          WHEN $1 = 1 THEN fp.countries_id = $5
	//          WHEN $1 = 2 THEN fp.countries_id != $5
	//     END
	//     AND
	//     CASE
	//         WHEN $2 = 0 THEN true
	//         WHEN $2 = 1 THEN fp.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
	//         WHEN $2 = 2 THEN fp.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]))
	//         WHEN $2 = 3 THEN fp.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
	//         WHEN $2 = 4 THEN fp.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
	//     END
	//     AND
	//     CASE
	//          WHEN $3 = 0 THEN (fp.status != 5 AND fp.status != 6)
	//          WHEN $3 = 1 THEN fp.status = $10
	//     END
	//     AND
	//     CASE
	//          WHEN $4 = 0 THEN true
	//          WHEN $4 = 1 THEN fp.property_rank BETWEEN 1 AND 4
	//     END
	//     UNION ALL
	//     SELECT
	//         id
	//     FROM
	//         owner_properties op
	//     WHERE
	//           CASE
	//          WHEN $1 = 0 THEN true
	//          WHEN $1 = 1 THEN op.countries_id = $5
	//          WHEN $1 = 2 THEN op.countries_id != $5
	//     END
	//     AND
	//     CASE
	//         WHEN $2 = 0 THEN true
	//         WHEN $2 = 1 THEN op.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
	//         WHEN $2 = 2 THEN op.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]))
	//         WHEN $2 = 3 THEN op.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
	//         WHEN $2 = 4 THEN op.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
	//     END
	//     AND
	//     CASE
	//          WHEN $3 = 0 THEN (op.status != 5 AND op.status != 6)
	//          WHEN $3 = 1 THEN op.status = $10
	//     END
	//     AND
	//     CASE
	//          WHEN $4 = 0 THEN true
	//          WHEN $4 = 1 THEN op.property_rank BETWEEN 1 AND 4
	//     END
	//     UNION ALL
	//     SELECT
	//         id
	//     FROM
	//         broker_company_agent_properties bcap
	//     WHERE
	//     CASE
	//          WHEN $1 = 0 THEN true
	//          WHEN $1 = 1 THEN bcap.countries_id = $5
	//          WHEN $1 = 2 THEN bcap.countries_id != $5
	//     END
	//     AND
	//     CASE
	//         WHEN $2 = 0 THEN true
	//         WHEN $2 = 1 THEN bcap.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
	//         WHEN $2 = 2 THEN bcap.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]))
	//         WHEN $2 = 3 THEN bcap.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
	//         WHEN $2 = 4 THEN bcap.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
	//     END
	//     AND
	//     CASE
	//          WHEN $3 = 0 THEN (bcap.status != 5 AND bcap.status != 6)
	//          WHEN $3 = 1 THEN bcap.status = $10
	//     END
	//     AND
	//     CASE
	//          WHEN $4 = 0 THEN true
	//          WHEN $4 = 1 THEN bcap.property_rank BETWEEN 1 AND 4
	//     END
	//     UNION ALL
	//     SELECT
	//         id
	//     FROM
	//         broker_company_agent_properties_branch bcapb
	//     WHERE
	//           CASE
	//          WHEN $1 = 0 THEN true
	//          WHEN $1 = 1 THEN bcapb.countries_id = $5
	//          WHEN $1 = 2 THEN bcapb.countries_id != $5
	//     END
	//     AND
	//     CASE
	//         WHEN $2 = 0 THEN true
	//         WHEN $2 = 1 THEN bcapb.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
	//         WHEN $2 = 2 THEN bcapb.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]))
	//         WHEN $2 = 3 THEN bcapb.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
	//         WHEN $2 = 4 THEN bcapb.addresses_id IN (SELECT id FROM addresses WHERE cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
	//     END
	//     AND
	//     CASE
	//          WHEN $3 = 0 THEN (bcapb.status != 5 AND bcapb.status != 6)
	//          WHEN $3 = 1 THEN bcapb.status = $10
	//     END
	//     AND
	//     CASE
	//          WHEN $4 = 0 THEN true
	//          WHEN $4 = 1 THEN bcapb.property_rank BETWEEN 1 AND 4
	//     END
	// )
	// SELECT
	//     Count(*)
	// FROM x;
	// WITH x AS (
	// 	SELECT
	// 		id,
	// 		countries_id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.countries_id != $1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		countries_id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.countries_id != $1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		countries_id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.countries_id != $1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		countries_id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.countries_id != $1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// )
	// SELECT
	// 	Count(*)
	// FROM
	// 	x;
	// UPDATE
	// 	broker_company_agent_properties
	// SET
	// 	status = $2
	// Where
	// 	id = $1 RETURNING *;
	// UPDATE
	// 	owner_properties
	// SET
	// 	status = $2
	// Where
	// 	id = $1 RETURNING *;
	// WITH x AS(
	// 	SELECT
	// 		freelancers_properties.id,
	// 		freelancers_properties.property_name,
	// 		freelancers_properties.property_title,
	// 		freelancers_properties.addresses_id,
	// 		freelancers_properties.property_types_id,
	// 		freelancers_properties.property,
	// 		freelancers_properties.ref_no,
	// 		FALSE AS is_branch
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.status = $3 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		owner_properties.id,
	// 		owner_properties.property_name,
	// 		owner_properties.property_title,
	// 		owner_properties.addresses_id,
	// 		owner_properties.property_types_id,
	// 		owner_properties.property,
	// 		owner_properties.ref_no,
	// 		FALSE AS is_branch
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.status = $3 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		broker_company_agent_properties.id,
	// 		broker_company_agent_properties.property_name,
	// 		broker_company_agent_properties.property_title,
	// 		broker_company_agent_properties.addresses_id,
	// 		broker_company_agent_properties.property_types_id,
	// 		broker_company_agent_properties.property,
	// 		broker_company_agent_properties.ref_no,
	// 		broker_company_agent_properties.is_branch AS is_branch
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.status = $3 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		broker_company_agent_properties_branch.id,
	// 		broker_company_agent_properties_branch.property_name,
	// 		broker_company_agent_properties_branch.property_title,
	// 		broker_company_agent_properties_branch.addresses_id,
	// 		broker_company_agent_properties_branch.property_types_id,
	// 		broker_company_agent_properties_branch.property,
	// 		broker_company_agent_properties_branch.ref_no,
	// 		broker_company_agent_properties_branch.is_branch AS is_branch
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.status = $3 :: bigint
	// )
	// SELECT
	// 	id,
	// 	property_name,
	// 	property_title,
	// 	addresses_id,
	// 	property_types_id,
	// 	property,
	// 	ref_no,
	// 	is_branch
	// FROM
	// 	x
	// ORDER BY
	// 	id
	// LIMIT
	// 	$1 OFFSET $2;
	// WITH x AS(
	// 	SELECT
	// 		id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.status = $1 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.status = $1 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.status = $1 :: bigint
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.status = $1 :: bigint
	// )
	// SELECT
	// 	COUNT(*)
	// FROM
	// 	x;
	// WITH x AS(
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 	    0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.property_rank = 4
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.property_rank = 3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.property_rank = 2
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		freelancers_properties
	// 	WHERE
	// 		freelancers_properties.property_rank = 1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	all
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.property_rank = 4
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	all
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.property_rank = 3
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	all
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.property_rank = 2
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	all
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		FALSE AS is_branch,
	// 		0 as broker_company_agents,
	// 		0 as broker_companies_id
	// 	FROM
	// 		owner_properties
	// 	WHERE
	// 		owner_properties.property_rank = 1
	// 		AND(
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_agents,
	// 		broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.property_rank = 4
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_agents,
	// 		broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.property_rank = 3
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_agents,
	// 		broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.property_rank = 2
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_agents,
	// 		broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties
	// 	WHERE
	// 		broker_company_agent_properties.property_rank = 1
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		)
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_branches_agents as broker_company_agents,
	// 		broker_companies_branches_id as broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.property_rank = 4
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		) -- premium
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_branches_agents as broker_company_agents,
	// 		broker_companies_branches_id as broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.property_rank = 3
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		) -- featured
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_branches_agents as broker_company_agents,
	// 		broker_companies_branches_id as broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.property_rank = 2
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		) -- standard
	// 	UNION
	// 	ALL
	// 	SELECT
	// 		id,
	// 		property_title,
	// 		property_title_arabic,
	// 		description,
	// 		description_arabic,
	// 		is_verified,
	// 		property_rank,
	// 		addresses_id,
	// 		locations_id,
	// 		property_types_id,
	// 		profiles_id,
	// 		facilities_id,
	// 		amenities_id,
	// 		status,
	// 		created_at,
	// 		updated_at,
	// 		is_show_owner_info,
	// 		property,
	// 		countries_id,
	// 		ref_no,
	// 		users_id,
	// 		is_branch,
	// 		broker_company_branches_agents as broker_company_agents,
	// 		broker_companies_branches_id as broker_companies_id
	// 	FROM
	// 		broker_company_agent_properties_branch
	// 	WHERE
	// 		broker_company_agent_properties_branch.property_rank = 1
	// 		and (
	// 			status != 5
	// 			AND status != 6
	// 		)
	// )
	// SELECT
	// 	id,
	// 	property_title,
	// 	property_title_arabic,
	// 	description,
	// 	description_arabic,
	// 	is_verified,
	// 	property_rank,
	// 	addresses_id,
	// 	locations_id,
	// 	property_types_id,
	// 	profiles_id,
	// 	facilities_id,
	// 	amenities_id,
	// 	status,
	// 	created_at,
	// 	updated_at,
	// 	is_show_owner_info,
	// 	property,
	// 	countries_id,
	// 	ref_no,
	// 	users_id,
	// 	is_branch,
	// 	broker_company_agents,
	// 	broker_companies_id
	// FROM
	// 	x
	// LIMIT
	// 	$1 OFFSET $2;
	// SELECT
	// 	*
	// FROM
	// 	owner_properties_media opm
	// WHERE
	// 	opm.owner_properties_id = $1;
	// SELECT
	// 	*
	// FROM
	// 	freelancers_properties_media fpm
	// WHERE
	// 	fpm.freelancers_properties_id = $1;
	// SELECT
	// 	*
	// FROM
	// 	broker_company_agent_properties_media
	// WHERE
	// 	broker_company_agent_properties_id = $1;
	// SELECT * FROM broker_company_agent_properties_media_branch bcapmb
	// WHERE bcapmb.broker_company_agent_properties_branch_id  = $1;
	GetAllPropertyhubsByCountry(ctx context.Context, arg GetAllPropertyhubsByCountryParams) ([]GetAllPropertyhubsByCountryRow, error)
	//  SELECT property_types.id,property_types."type", COUNT(*) AS count
	//  FROM property_types
	//  JOIN unnest($1::bigint[]) AS ids(id) ON property_types.id = ids.id
	//  GROUP BY property_types."type";
	GetAllPropertypesByPropertyTypesIds(ctx context.Context, dollar_1 []int64) ([]GetAllPropertypesByPropertyTypesIdsRow, error)
	GetAllPublishedDocumentsByProject(ctx context.Context, arg GetAllPublishedDocumentsByProjectParams) ([]GetAllPublishedDocumentsByProjectRow, error)
	GetAllRanks(ctx context.Context, arg GetAllRanksParams) ([]Rank, error)
	GetAllRealEstateAgents(ctx context.Context) ([]RealEstateAgent, error)
	// SELECT
	//     ss.id,
	//     ss.sub_section_name,
	//     ss.sub_section_name_constant,
	//     ss.permissions_id,
	//     ss.indicator,
	//     ss.sub_section_button_id,
	//     ss.sub_section_button_action,
	//     ss.created_at,
	//     ss.updated_at
	// FROM
	//     sub_section ss
	// JOIN (
	//     SELECT UNNEST(sub_section_permission) as sub_section_permission
	//     FROM users
	//     WHERE users.id = $1
	// ) u ON ss.id = u.sub_section_permission
	// JOIN permissions p ON ss.permissions_id = p.id
	// WHERE
	//     p.title ILIKE $2
	//     AND (
	//         ss.sub_section_button_id IS NOT NULL
	//         AND ss.sub_section_button_id = COALESCE(
	//             (
	//                 SELECT id
	//                 FROM sub_section
	//                 WHERE sub_section.sub_section_name ILIKE $2
	//             ),
	//             ss.sub_section_button_id
	//         )
	//     );
	GetAllRelatedIDFromSubSection(ctx context.Context, subSectionButtonID int64) ([]int64, error)
	GetAllRentPropertyMediaBranch(ctx context.Context, arg GetAllRentPropertyMediaBranchParams) ([]RentPropertyMediaBranch, error)
	GetAllRentPropertyUnitPlan(ctx context.Context, arg GetAllRentPropertyUnitPlanParams) ([]RentPropertyUnitPlan, error)
	GetAllRentPropertyUnitPlanByUnit(ctx context.Context, arg GetAllRentPropertyUnitPlanByUnitParams) ([]RentPropertyUnitPlan, error)
	GetAllRentUnitMediaBranchByUnitId(ctx context.Context, rentPropertyUnitsBranchID int64) ([]GetAllRentUnitMediaBranchByUnitIdRow, error)
	GetAllRequestsForDepartment(ctx context.Context, arg GetAllRequestsForDepartmentParams) ([]GetAllRequestsForDepartmentRow, error)
	GetAllRetailCategory(ctx context.Context) (RetailCategory, error)
	GetAllRetailCategoryWithoutPagination(ctx context.Context) ([]RetailCategory, error)
	GetAllReviewTerms(ctx context.Context, arg GetAllReviewTermsParams) ([]GetAllReviewTermsRow, error)
	GetAllReviewsByserviceCompanyID(ctx context.Context, arg GetAllReviewsByserviceCompanyIDParams) ([]GetAllReviewsByserviceCompanyIDRow, error)
	GetAllReviewsForExhibition(ctx context.Context, arg GetAllReviewsForExhibitionParams) ([]GetAllReviewsForExhibitionRow, error)
	GetAllRole(ctx context.Context, arg GetAllRoleParams) ([]Role, error)
	// -- name: GetAllRolePermissionByRole :many
	// SELECT rp.id, rp.roles_id,
	//        CASE
	//            WHEN u.user_types_id = 6 THEN rp.permissions_id
	//            ELSE u.permissions_id
	//        END as permissions_id
	// FROM roles_permissions rp
	// CROSS JOIN LATERAL (
	//     SELECT users.id, users.permissions_id, users.user_types_id
	//     FROM users
	//     WHERE users.id = $2
	// ) u
	// WHERE rp.roles_id = $1;
	GetAllRolePermission(ctx context.Context, arg GetAllRolePermissionParams) ([]GetAllRolePermissionRow, error)
	GetAllRolePermissionRolesWithoutPagination(ctx context.Context) ([]GetAllRolePermissionRolesWithoutPaginationRow, error)
	GetAllRolePermissionWithoutPagination(ctx context.Context) ([]RolesPermission, error)
	GetAllRoleWithRolePermissionChecked(ctx context.Context) ([]GetAllRoleWithRolePermissionCheckedRow, error)
	GetAllRoleWithoutPagination(ctx context.Context) ([]Role, error)
	GetAllRoomType(ctx context.Context) ([]RoomType, error)
	GetAllRoomTypes(ctx context.Context, arg GetAllRoomTypesParams) ([]RoomType, error)
	GetAllRoutingTriggers(ctx context.Context, arg GetAllRoutingTriggersParams) ([]RoutingTrigger, error)
	GetAllSaleByMainMediaSectionAndId(ctx context.Context, arg GetAllSaleByMainMediaSectionAndIdParams) (GetAllSaleByMainMediaSectionAndIdRow, error)
	GetAllSaleMainMediaSectionById(ctx context.Context, salePropertyUnitsID int64) ([]string, error)
	GetAllSaleMediaByMainMediaSection(ctx context.Context, salePropertyUnitsID int64) ([]GetAllSaleMediaByMainMediaSectionRow, error)
	GetAllSalePropertyMedia(ctx context.Context, arg GetAllSalePropertyMediaParams) ([]SalePropertyMedium, error)
	GetAllSalePropertyMediaBranch(ctx context.Context, arg GetAllSalePropertyMediaBranchParams) ([]SalePropertyMediaBranch, error)
	// SELECT
	//     json_build_object(
	//         'imageUrl', json_agg(json_build_object('imageUrl', image_url, 'counts', cardinality(image_url))),
	//         'image360Url', json_agg(json_build_object('image360Url', image360_url, 'counts', cardinality(image360_url))),
	//         'videoUrl', json_agg(json_build_object('videoUrl', video_url, 'counts', cardinality(video_url))),
	//         'panaromaUrl', json_agg(json_build_object('panaromaUrl', panaroma_url, 'counts', cardinality(panaroma_url)))
	//     ) as media
	// FROM
	//     sale_property_media
	// WHERE
	//     sale_property_units_id = $1
	// GROUP BY
	//     sale_property_units_id;
	GetAllSalePropertyMediaByUnitId(ctx context.Context, arg GetAllSalePropertyMediaByUnitIdParams) ([]GetAllSalePropertyMediaByUnitIdRow, error)
	GetAllSalePropertyUnitPlan(ctx context.Context, arg GetAllSalePropertyUnitPlanParams) ([]SalePropertyUnitPlan, error)
	GetAllSalePropertyUnitPlanByUnit(ctx context.Context, arg GetAllSalePropertyUnitPlanByUnitParams) ([]SalePropertyUnitPlan, error)
	GetAllSaleUnitMediaBranchByUnitId(ctx context.Context, salePropertyUnitsBranchID int64) ([]GetAllSaleUnitMediaBranchByUnitIdRow, error)
	GetAllSaleUnitMediaByUnitId(ctx context.Context, salePropertyUnitsID int64) ([]GetAllSaleUnitMediaByUnitIdRow, error)
	GetAllScheduleSessionByMonth(ctx context.Context, arg GetAllScheduleSessionByMonthParams) ([]GetAllScheduleSessionByMonthRow, error)
	GetAllScheduleSlotsByWeek(ctx context.Context, arg GetAllScheduleSlotsByWeekParams) ([]GetAllScheduleSlotsByWeekRow, error)
	// AND (
	GetAllScheduleSlotsByWeekly(ctx context.Context, arg GetAllScheduleSlotsByWeeklyParams) ([]GetAllScheduleSlotsByWeeklyRow, error)
	GetAllScheduleView(ctx context.Context) ([]ScheduleView, error)
	GetAllScheduleViewSessionsByProperty(ctx context.Context, arg GetAllScheduleViewSessionsByPropertyParams) ([]GetAllScheduleViewSessionsByPropertyRow, error)
	GetAllSectionPermission(ctx context.Context, arg GetAllSectionPermissionParams) ([]SectionPermission, error)
	GetAllSectionPermissionFromPermissionIDs(ctx context.Context, arg GetAllSectionPermissionFromPermissionIDsParams) ([]SectionPermissionMv, error)
	// SELECT * FROM section_permission_mv
	// ORDER BY id;
	GetAllSectionPermissionMV(ctx context.Context, arg GetAllSectionPermissionMVParams) ([]SectionPermissionMv, error)
	// SELECT COUNT(*) FROM section_permission;
	GetAllSectionPermissionWithoutPagination(ctx context.Context) ([]SectionPermission, error)
	GetAllSectionPermissionWithoutPaginationMV(ctx context.Context, search interface{}) ([]SectionPermissionMv, error)
	GetAllSections(ctx context.Context, search interface{}) ([]GetAllSectionsRow, error)
	GetAllServiceBranchCompanyReviews(ctx context.Context, arg GetAllServiceBranchCompanyReviewsParams) ([]ServiceBranchCompanyReview, error)
	GetAllServiceCompaniesBranchesWithoutPagination(ctx context.Context) ([]ServiceCompanyBranch, error)
	GetAllServiceCompaniesReviews(ctx context.Context, arg GetAllServiceCompaniesReviewsParams) ([]ServicesCompaniesReview, error)
	GetAllServiceCompaniesWithoutPagination(ctx context.Context) ([]ServicesCompany, error)
	GetAllServiceCompanyBranch(ctx context.Context, arg GetAllServiceCompanyBranchParams) ([]ServiceCompanyBranch, error)
	GetAllServiceCompanyBranchByCompanyId(ctx context.Context, arg GetAllServiceCompanyBranchByCompanyIdParams) ([]ServiceCompanyBranch, error)
	GetAllServiceCompanyNames(ctx context.Context) ([]GetAllServiceCompanyNamesRow, error)
	GetAllServicesCompaniesBranchesServices(ctx context.Context, arg GetAllServicesCompaniesBranchesServicesParams) ([]ServicesBranchCompaniesService, error)
	GetAllServicesCompany(ctx context.Context, arg GetAllServicesCompanyParams) ([]ServicesCompany, error)
	// -- name: GetCountServicesCompanyByMainServiceId :one
	// SELECT COUNT(*) FROM services_companies Where main_services_id = $1  LIMIT 1;
	GetAllServicesCompanyByCountry(ctx context.Context, arg GetAllServicesCompanyByCountryParams) ([]ServicesCompany, error)
	GetAllServicesCompanyByCountryByNotEqual(ctx context.Context, arg GetAllServicesCompanyByCountryByNotEqualParams) ([]ServicesCompany, error)
	// -- name: GetAllServicesCompanyByMainServiceId :many
	// SELECT * FROM services_companies
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetAllServicesCompanyByRank(ctx context.Context, arg GetAllServicesCompanyByRankParams) ([]ServicesCompany, error)
	GetAllServicesCompanyByStatus(ctx context.Context, arg GetAllServicesCompanyByStatusParams) ([]ServicesCompany, error)
	GetAllServicesPromotionsByID(ctx context.Context) ([]GetAllServicesPromotionsByIDRow, error)
	GetAllSession(ctx context.Context, arg GetAllSessionParams) ([]Session, error)
	GetAllShareDocuments(ctx context.Context, sharingID pgtype.Int8) ([][]byte, error)
	//----------------------------------------------------------------------------------------------------------------------------------------------
	GetAllShareRequestByOwnerID(ctx context.Context, arg GetAllShareRequestByOwnerIDParams) ([]GetAllShareRequestByOwnerIDRow, error)
	GetAllSharedDocsBySharingId(ctx context.Context, id int64) ([]SharedDocument, error)
	// -- name: GetAllSharedDocuments :many
	// SELECT
	// 	shared_doc.*,
	// 	documents_category.category,
	// 	documents_subcategory.sub_category,
	// 	CASE WHEN @check_for = 'unit' THEN
	// 		CASE WHEN is_unit = @is_unit
	// 			AND unit_id = @unit_id  AND unit_category = @unit_category THEN
	// 			'Unit query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'property' THEN
	// 		CASE WHEN is_property = @is_property
	// 			AND property_key = @property_key
	//       AND (is_unit IS NULL  OR is_unit IS FALSE) THEN
	// 			'Property query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'project_with_phase' THEN
	// 		CASE WHEN project_id = @project_id
	// 			AND phase_id = @phase_id THEN
	// 			'Project with phase query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'project_without_phase' THEN
	// 		CASE WHEN project_id = @project_id
	// 			AND phase_id IS NULL THEN
	// 			'Project without phase query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	ELSE
	// 		'Invalid check_for parameter'
	// 	END AS query_executed
	// FROM
	// 	shared_doc
	//   LEFT JOIN single_share_doc ON shared_doc.single_share_docs = ANY(single_share_doc.id)
	// 	LEFT JOIN documents_category ON documents_category.id = single_share_doc.documents_category_id
	// 	LEFT JOIN documents_subcategory ON documents_subcategory.id = single_share_doc.documents_subcategory_id
	// WHERE
	// 	is_internal = @is_internal
	// 	AND is_branch = @is_branch
	// 	AND shared_to = @shared_to
	// 	AND(
	// 		CASE WHEN @check_for = 'unit' THEN
	// 			CASE WHEN is_unit = @is_unit
	// 				AND unit_id = @unit_id AND unit_category  = @unit_category THEN
	// 				TRUE
	// 			ELSE
	// 				FALSE
	// 			END
	// 		WHEN @check_for = 'property' THEN
	//  			CASE WHEN is_property = @is_property
	//          AND property_id = @property_id
	// 				AND property_key = @property_key   AND (is_unit IS NULL  OR is_unit IS FALSE) THEN
	// 				TRUE
	// 			ELSE
	// 				FALSE
	// 			END
	// 		WHEN @check_for = 'project_with_phase' THEN
	// 			CASE WHEN project_id = @project_id
	// 				AND phase_id = @phase_id THEN
	// 				TRUE
	// 			ELSE
	// 				FALSE
	// 			END
	// 		WHEN @check_for = 'project_without_phase' THEN
	// 			CASE WHEN project_id = @project_id
	// 				AND phase_id IS NULL THEN
	// 				TRUE
	// 			ELSE
	// 				FALSE
	// 			END
	// 		ELSE
	// 			FALSE
	// 		END
	// );
	GetAllSharedDocuments(ctx context.Context, arg GetAllSharedDocumentsParams) ([]GetAllSharedDocumentsRow, error)
	GetAllSharedDocumentsByEntityTypeAndEntityID(ctx context.Context, arg GetAllSharedDocumentsByEntityTypeAndEntityIDParams) ([]GetAllSharedDocumentsByEntityTypeAndEntityIDRow, error)
	GetAllSharedPhases(ctx context.Context, arg GetAllSharedPhasesParams) ([]GetAllSharedPhasesRow, error)
	GetAllSharedPhasesByIds(ctx context.Context, dollar_1 []int64) ([]GetAllSharedPhasesByIdsRow, error)
	// SELECT p.id, p.ref_number, p.project_name, p.is_multiphase, p.description, p.addresses_id,
	//        dc.company_name, pr.project_clean, pr.project_location, pr.project_facilities, pr.project_securities,
	//        pf.completion_percentage, (SELECT COUNT(*) FROM phases ph WHERE ph.projects_id = p.id) AS no_of_phases
	// FROM projects p
	// CROSS JOIN LATERAL UNNEST($1::bigint[]) AS arr(value)
	// LEFT JOIN developer_companies dc ON p.developer_companies_id = dc.id
	// LEFT JOIN project_reviews pr ON pr.projects_id = p.id
	// LEFT JOIN properties_facts pf ON pf.project_id = p.id AND pf.is_project_fact = TRUE
	// WHERE p.id = arr.value;
	GetAllSharedProjectPropertyByIds(ctx context.Context, dollar_1 []int64) ([]GetAllSharedProjectPropertyByIdsRow, error)
	GetAllSharedProjectsByIds(ctx context.Context, dollar_1 []int64) ([]GetAllSharedProjectsByIdsRow, error)
	GetAllSharedWithCompany(ctx context.Context, userOrCompaniesID []int64) ([]Company, error)
	GetAllSharedWithUsers(ctx context.Context, userOrCompaniesID []int64) ([]User, error)
	GetAllSharingByEntityIDAndType(ctx context.Context, arg GetAllSharingByEntityIDAndTypeParams) ([]Sharing, error)
	GetAllSingleContactDocuments(ctx context.Context, arg GetAllSingleContactDocumentsParams) ([]GetAllSingleContactDocumentsRow, error)
	GetAllSingleShareDoc(ctx context.Context, id int64) ([]SingleShareDoc, error)
	GetAllSkills(ctx context.Context) ([]Skill, error)
	GetAllSocialByUser(ctx context.Context, userID int64) ([]SocialMediaProfile, error)
	GetAllSpecialization(ctx context.Context) ([]Specialization, error)
	GetAllSpecializations(ctx context.Context) ([]Specialization, error)
	GetAllStates(ctx context.Context, arg GetAllStatesParams) ([]GetAllStatesRow, error)
	GetAllSubCategoryBySubCatId(ctx context.Context, dollar_1 []int32) ([]DocumentsSubcategory, error)
	GetAllSubCatgories(ctx context.Context, parentCategoryID pgtype.Int8) ([]GetAllSubCatgoriesRow, error)
	GetAllSubCommunitiesByCommunitiesList(ctx context.Context, dollar_1 []int64) ([]SubCommunity, error)
	GetAllSubCommunitiesSettings(ctx context.Context, arg GetAllSubCommunitiesSettingsParams) ([]GetAllSubCommunitiesSettingsRow, error)
	GetAllSubCommunityid(ctx context.Context, communitiesID pgtype.Int8) ([]int64, error)
	GetAllSubDocumentCategories(ctx context.Context, arg GetAllSubDocumentCategoriesParams) ([]GetAllSubDocumentCategoriesRow, error)
	GetAllSubSection(ctx context.Context) ([]SubSection, error)
	GetAllSubSectionByPermissionID(ctx context.Context, permissionsID int64) ([]SubSection, error)
	GetAllSubSectionByPermissionIDMV(ctx context.Context, permissionsID int64) ([]SubSectionMv, error)
	GetAllSubSectionByPermissionIDMVWithRelation(ctx context.Context, arg GetAllSubSectionByPermissionIDMVWithRelationParams) ([]SubSectionMv, error)
	GetAllSubSectionPermissionBySubSectionButtonID(ctx context.Context, subSectionButtonID int64) ([]SubSection, error)
	GetAllSubSectionPermissionBySubSectionButtonIDMV(ctx context.Context, arg GetAllSubSectionPermissionBySubSectionButtonIDMVParams) ([]SubSectionMv, error)
	GetAllSubSectionPermissions(ctx context.Context) ([]SubSection, error)
	GetAllSubscriberContracts(ctx context.Context, arg GetAllSubscriberContractsParams) ([]GetAllSubscriberContractsRow, error)
	GetAllSubscriberDocuments(ctx context.Context, arg GetAllSubscriberDocumentsParams) ([]GetAllSubscriberDocumentsRow, error)
	GetAllSubscriptionCost(ctx context.Context, arg GetAllSubscriptionCostParams) ([]GetAllSubscriptionCostRow, error)
	GetAllSubscriptionCostCount(ctx context.Context, status int64) (int64, error)
	//----------------------------------------------------------------------------------
	GetAllSubscriptionOrders(ctx context.Context, arg GetAllSubscriptionOrdersParams) ([]GetAllSubscriptionOrdersRow, error)
	GetAllSubscriptionProductions(ctx context.Context, arg GetAllSubscriptionProductionsParams) ([]SubscriptionProduct, error)
	GetAllSubscriptionProductionsCount(ctx context.Context, status int64) (int64, error)
	GetAllSubsribersByStatus(ctx context.Context, arg GetAllSubsribersByStatusParams) ([]GetAllSubsribersByStatusRow, error)
	GetAllTags(ctx context.Context, arg GetAllTagsParams) ([]Tag, error)
	GetAllTagsCount(ctx context.Context) ([]int64, error)
	GetAllTaxCategory(ctx context.Context) ([]TaxCategory, error)
	GetAllTaxCategoryByTaxCode(ctx context.Context, taxCode pgtype.Text) ([]TaxCategory, error)
	GetAllTaxCategoryWithPg(ctx context.Context, arg GetAllTaxCategoryWithPgParams) ([]TaxCategory, error)
	GetAllTaxMangement(ctx context.Context) ([]TaxManagement, error)
	GetAllTaxMangementByCategoryType(ctx context.Context, taxCategoryType int64) ([]TaxManagement, error)
	GetAllTaxMangementWithPg(ctx context.Context, arg GetAllTaxMangementWithPgParams) ([]TaxManagement, error)
	GetAllTeamLeaders(ctx context.Context, companyID int64) ([]GetAllTeamLeadersRow, error)
	GetAllTernary(ctx context.Context, subSectionButtonID int64) ([]SubSection, error)
	GetAllTimeSlotsByProjectPropertyId(ctx context.Context, arg GetAllTimeSlotsByProjectPropertyIdParams) ([]GetAllTimeSlotsByProjectPropertyIdRow, error)
	GetAllTimeslotsByOpenhouseAndStatus(ctx context.Context, arg GetAllTimeslotsByOpenhouseAndStatusParams) ([]Timeslot, error)
	GetAllTowers(ctx context.Context, arg GetAllTowersParams) ([]GetAllTowersRow, error)
	GetAllUniqueProperyTypes(ctx context.Context, category string) ([]GetAllUniqueProperyTypesRow, error)
	GetAllUnitBranchType(ctx context.Context, arg GetAllUnitBranchTypeParams) ([]UnitTypesBranch, error)
	GetAllUnitBranchTypeByPropertyId(ctx context.Context, arg GetAllUnitBranchTypeByPropertyIdParams) ([]UnitTypesBranch, error)
	GetAllUnitBranchTypeByPropertyIdWithPagination(ctx context.Context, arg GetAllUnitBranchTypeByPropertyIdWithPaginationParams) ([]UnitTypesBranch, error)
	GetAllUnitDocsByUnitId(ctx context.Context, arg GetAllUnitDocsByUnitIdParams) ([]GetAllUnitDocsByUnitIdRow, error)
	GetAllUnitFact(ctx context.Context, arg GetAllUnitFactParams) ([]UnitFact, error)
	GetAllUnitMediaByGalleryTypeAndId(ctx context.Context, arg GetAllUnitMediaByGalleryTypeAndIdParams) (GetAllUnitMediaByGalleryTypeAndIdRow, error)
	GetAllUnitMediaByUnitId(ctx context.Context, arg GetAllUnitMediaByUnitIdParams) ([]GetAllUnitMediaByUnitIdRow, error)
	GetAllUnitMediaByUnitIdAndGalleryType(ctx context.Context, unitsID int64) ([]string, error)
	GetAllUnitMediaByUnitIdWithoutPagination(ctx context.Context, unitsID int64) ([]UnitMedium, error)
	GetAllUnitPlansByUnit(ctx context.Context, arg GetAllUnitPlansByUnitParams) ([]UnitPlan, error)
	GetAllUnitPlansByUnitWithoutPagination(ctx context.Context, unitsID int64) ([]UnitPlan, error)
	GetAllUnitType(ctx context.Context, arg GetAllUnitTypeParams) ([]UnitTypeDetail, error)
	GetAllUnitTypeBranchByPropertyIdAndBedroom(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomParams) ([]GetAllUnitTypeBranchByPropertyIdAndBedroomRow, error)
	GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitId(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomAndUnitIdParams) ([]UnitTypesBranch, error)
	GetAllUnitTypeBranchByPropertyIdAndBedroomForAgriculture(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureParams) ([]GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureRow, error)
	GetAllUnitTypeByPropertyId(ctx context.Context, arg GetAllUnitTypeByPropertyIdParams) ([]UnitTypeDetail, error)
	GetAllUnitTypeByPropertyIdAndBedroom(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomParams) ([]GetAllUnitTypeByPropertyIdAndBedroomRow, error)
	GetAllUnitTypeByPropertyIdAndBedroomAndUnitId(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomAndUnitIdParams) ([]UnitTypeDetail, error)
	GetAllUnitTypeByPropertyIdAndBedroomForAgriculture(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomForAgricultureParams) ([]GetAllUnitTypeByPropertyIdAndBedroomForAgricultureRow, error)
	GetAllUnitTypeByPropertyIdByUnitTypeAndBedroom(ctx context.Context, arg GetAllUnitTypeByPropertyIdByUnitTypeAndBedroomParams) ([]UnitTypeDetail, error)
	GetAllUnitTypeByPropertyIdWithPagination(ctx context.Context, arg GetAllUnitTypeByPropertyIdWithPaginationParams) ([]GetAllUnitTypeByPropertyIdWithPaginationRow, error)
	// -- name: GetAllUnitTypesByPropertyType :many
	// SELECT property_types.*
	// FROM property_types
	// WHERE property_types.id = ANY (SELECT unnest(unit_types) FROM property_types WHERE property_types.id = $1);
	GetAllUnitTypesByProjectPropertyAndCategory(ctx context.Context, arg GetAllUnitTypesByProjectPropertyAndCategoryParams) ([]PropertyType, error)
	GetAllUnitTypesByProjectPropertyAndProjectCategory(ctx context.Context, id int64) ([]PropertyType, error)
	GetAllUnitTypesByPropertyType(ctx context.Context, propertyTypeID int64) ([]GetAllUnitTypesByPropertyTypeRow, error)
	//        OR unit_type."type" ILIKE  @search
	GetAllUnitVersion(ctx context.Context, arg GetAllUnitVersionParams) ([]GetAllUnitVersionRow, error)
	GetAllUnitVersions(ctx context.Context) ([]GetAllUnitVersionsRow, error)
	GetAllUnitVersionsIdS(ctx context.Context) ([]int64, error)
	GetAllUserFromSharing(ctx context.Context, entityID int64) ([]GetAllUserFromSharingRow, error)
	GetAllUserNameByUserType(ctx context.Context, arg GetAllUserNameByUserTypeParams) ([]GetAllUserNameByUserTypeRow, error)
	GetAllUserNameByUserTypeWithoutPagination(ctx context.Context, id int64) ([]GetAllUserNameByUserTypeWithoutPaginationRow, error)
	GetAllUserType(ctx context.Context, arg GetAllUserTypeParams) ([]UserType, error)
	GetAllUserTypeWithoutPagination(ctx context.Context) ([]UserType, error)
	GetAllUsers(ctx context.Context) ([]int64, error)
	GetAllUsersByCompanyType(ctx context.Context, arg GetAllUsersByCompanyTypeParams) ([]int64, error)
	GetAllUsersForInternalShareByIds(ctx context.Context, dollar_1 []int64) ([]GetAllUsersForInternalShareByIdsRow, error)
	GetAllUsersWithUserTypes(ctx context.Context) ([]GetAllUsersWithUserTypesRow, error)
	GetAllViews(ctx context.Context, arg GetAllViewsParams) ([]View, error)
	GetAllViewsById(ctx context.Context, dollar_1 []int64) ([]View, error)
	GetAllViewsByStatus(ctx context.Context, arg GetAllViewsByStatusParams) ([]View, error)
	GetAllViewsByStatusCount(ctx context.Context, status int64) (int64, error)
	GetAllViewsCount(ctx context.Context) (int64, error)
	GetAllViewsForProperty(ctx context.Context, id int64) ([]GetAllViewsForPropertyRow, error)
	GetAllViewsWithoutPagenation(ctx context.Context, activeStatus int64) ([]View, error)
	//  Where  created_by =  $3
	GetAllWebportal(ctx context.Context, arg GetAllWebportalParams) ([]GetAllWebportalRow, error)
	GetAllWebportalWithoutPagination(ctx context.Context, createdBy int64) ([]Webportal, error)
	GetAllWebportals(ctx context.Context) ([]Webportal, error)
	GetAllWebportalsForPublishWebportalByIds(ctx context.Context, dollar_1 []int64) ([]GetAllWebportalsForPublishWebportalByIdsRow, error)
	GetAllXMLPropertyRefNoByCompany(ctx context.Context, companyID pgtype.Int8) ([]string, error)
	GetAllXMLURLl(ctx context.Context, arg GetAllXMLURLlParams) ([]GetAllXMLURLlRow, error)
	GetAllcompaniesForExhibition(ctx context.Context) ([]GetAllcompaniesForExhibitionRow, error)
	// -- name: GetAmenitiesByEntityType :many
	// SELECT
	// sqlc.embed(fa)
	// FROM  facilities_amenities_entity fae
	// LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=2
	// WHERE fae.entity_type_id=$1;
	GetAmenitiesByEntityTypeAndIDs(ctx context.Context, arg GetAmenitiesByEntityTypeAndIDsParams) ([]GetAmenitiesByEntityTypeAndIDsRow, error)
	GetAmenitiesIdByBrokerCompanyAgentPropertyBranchId(ctx context.Context, id int64) ([]int64, error)
	GetAmenitiesIdByBrokerCompanyAgentPropertyId(ctx context.Context, id int64) ([]int64, error)
	GetAmenitiesIdByOwnerPropertyId(ctx context.Context, id int64) ([]int64, error)
	// -- name: GetFacilitiesIdByProjectPropertyId :one
	// WITH x AS (
	//   SELECT projects.facilities_id AS facilities FROM projects
	//   LEFT JOIN project_properties ON project_properties.projects_id = projects.id AND project_properties.is_multiphase = FALSE
	//   WHERE project_properties.id = $1
	// UNION ALL
	//   SELECT phases.facilities AS facilities FROM phases
	//   LEFT JOIN project_properties ON project_properties.phases_id = phases.id AND project_properties.is_multiphase = TRUE
	//   WHERE project_properties.id = $1
	// )SELECT * FROM x;
	GetAmenitiesIdByProjectPropertyId(ctx context.Context, id int64) ([]int64, error)
	GetApplicantByID(ctx context.Context, id int64) (GetApplicantByIDRow, error)
	GetApplication(ctx context.Context, id int64) (Application, error)
	GetApplicationCount(ctx context.Context, careerID int64) (int64, error)
	GetAppoinmentbyId(ctx context.Context, id int64) (Appointment, error)
	GetApprovalIdForRejectedRequest(ctx context.Context, arg GetApprovalIdForRejectedRequestParams) (int64, error)
	GetApprovedBannerIDs(ctx context.Context) ([]int64, error)
	GetAqaryAdminPermissions(ctx context.Context, userID int64) (GetAqaryAdminPermissionsRow, error)
	GetAqaryDeletedUser(ctx context.Context, id int64) (User, error)
	GetAqaryManagementByDepartment(ctx context.Context, arg GetAqaryManagementByDepartmentParams) ([]GetAqaryManagementByDepartmentRow, error)
	GetAqaryManagementDepartment(ctx context.Context, arg GetAqaryManagementDepartmentParams) ([]GetAqaryManagementDepartmentRow, error)
	GetAqaryProjectAdsMediaByAd(ctx context.Context, arg GetAqaryProjectAdsMediaByAdParams) ([]AqaryProjectAdsMedium, error)
	GetAqaryProjectAdsMediaByID(ctx context.Context, arg GetAqaryProjectAdsMediaByIDParams) (AqaryProjectAdsMedium, error)
	GetAqaryProjectPostMedia(ctx context.Context, arg GetAqaryProjectPostMediaParams) (AqaryProjectPostMedium, error)
	GetAqaryPropertyAdsMediaByAds(ctx context.Context, arg GetAqaryPropertyAdsMediaByAdsParams) ([]AqaryPropertyAdsMedium, error)
	GetAqaryPropertyAdsMediaByID(ctx context.Context, arg GetAqaryPropertyAdsMediaByIDParams) (AqaryPropertyAdsMedium, error)
	GetAqaryUser(ctx context.Context, id int64) (User, error)
	GetAqaryUserAgents(ctx context.Context) ([]User, error)
	GetAqaryUserAgentsAndCompany(ctx context.Context) ([]User, error)
	//------------------ permission related queries --------------------
	GetAqaryUserPermissions(ctx context.Context, arg GetAqaryUserPermissionsParams) ([]int64, error)
	GetAqaryUserSubSectionPermissions(ctx context.Context, arg GetAqaryUserSubSectionPermissionsParams) ([]int64, error)
	GetAqaryUsersForContacts(ctx context.Context) ([]GetAqaryUsersForContactsRow, error)
	GetAssignCreditByAgentIdAndProduct(ctx context.Context, arg GetAssignCreditByAgentIdAndProductParams) (int32, error)
	GetAssociatedCompanies(ctx context.Context, arg GetAssociatedCompaniesParams) ([]byte, error)
	GetAuctionByAuctionTitle(ctx context.Context, auctionTitle pgtype.Text) (Auction, error)
	GetAuctionByID(ctx context.Context, id int64) (GetAuctionByIDRow, error)
	GetAuctionDocumentByID(ctx context.Context, id int64) (AuctionsDocument, error)
	GetAuctionDocumentsByAuctionID(ctx context.Context, arg GetAuctionDocumentsByAuctionIDParams) ([]AuctionsDocument, error)
	GetAuctionMediaByAuctionID(ctx context.Context, arg GetAuctionMediaByAuctionIDParams) ([]AuctionsMedium, error)
	GetAuctionMediaByID(ctx context.Context, id int64) (AuctionsMedium, error)
	GetAuctionPartnerByID(ctx context.Context, id int64) (AuctionsPartner, error)
	GetAuctionPlanByID(ctx context.Context, id int64) (AuctionsPlan, error)
	GetAuctionPlansByAuctionID(ctx context.Context, arg GetAuctionPlansByAuctionIDParams) ([]AuctionsPlan, error)
	GetAvailableTimeSlots(ctx context.Context, id int64) (int64, error)
	GetAvgBrokerAgentReviews(ctx context.Context, brokerCompanyAgentsID int64) (pgtype.Numeric, error)
	GetAvgBrokerBranchAgentReviews(ctx context.Context, brokerCompanyBranchesAgentsID int64) (pgtype.Numeric, error)
	GetAvgBrokerBranchCompanyReviews(ctx context.Context, brokerCompaniesBranchesID int64) (pgtype.Numeric, error)
	GetAvgBrokerCompanyReviews(ctx context.Context, brokerCompaniesID int64) (pgtype.Numeric, error)
	GetAvgDeveloperBranchCompanyDirectorsReviews(ctx context.Context, developerBranchCompanyDirectorsID int64) (pgtype.Numeric, error)
	GetAvgDeveloperBranchReviews(ctx context.Context, developerCompanyBranchesID int64) (pgtype.Numeric, error)
	GetAvgDeveloperCompanyDirectorsReviews(ctx context.Context, developerCompanyDirectorsID int64) (pgtype.Numeric, error)
	GetAvgDeveloperCompanyReviews(ctx context.Context, developerCompaniesID int64) (pgtype.Numeric, error)
	GetAvgServiceBranchCompanyReview(ctx context.Context, serviceCompanyBranchesID int64) (pgtype.Numeric, error)
	GetAvgServiceCompanyReview(ctx context.Context, servicesCompaniesID int64) (pgtype.Numeric, error)
	GetBank(ctx context.Context, id int64) (GetBankRow, error)
	GetBankBranch(ctx context.Context, id int64) (GetBankBranchRow, error)
	GetBankBranchesByStatus(ctx context.Context, arg GetBankBranchesByStatusParams) ([]GetBankBranchesByStatusRow, error)
	GetBankBranchesCountByStatus(ctx context.Context, arg GetBankBranchesCountByStatusParams) (int64, error)
	GetBankById(ctx context.Context, id int64) (Bank, error)
	GetBanksByStatus(ctx context.Context, arg GetBanksByStatusParams) ([]GetBanksByStatusRow, error)
	GetBanksCountByStatus(ctx context.Context, status int64) (int64, error)
	GetBanner(ctx context.Context, id int64) (Banner, error)
	GetBannerCriteria(ctx context.Context, id int64) (BannerCriterium, error)
	GetBannerOrderByCompanyIDAndPlanID(ctx context.Context, arg GetBannerOrderByCompanyIDAndPlanIDParams) (BannerOrder, error)
	GetBannerOrderByID(ctx context.Context, dollar_1 int64) (GetBannerOrderByIDRow, error)
	GetBannerOrderDetailsForUpdate(ctx context.Context, arg GetBannerOrderDetailsForUpdateParams) (GetBannerOrderDetailsForUpdateRow, error)
	GetBannerOrderPlanPackages(ctx context.Context, arg GetBannerOrderPlanPackagesParams) ([]GetBannerOrderPlanPackagesRow, error)
	GetBannerOrderPlanPackagesByID(ctx context.Context, id int64) ([]byte, error)
	GetBannerPlanCostByID(ctx context.Context, id int64) (GetBannerPlanCostByIDRow, error)
	GetBannerPlanCostByPlanPkgID(ctx context.Context, planPackageID int64) (BannerPlanCost, error)
	GetBannerPlanPackage(ctx context.Context, arg GetBannerPlanPackageParams) (GetBannerPlanPackageRow, error)
	GetBannerPlanPackageByID(ctx context.Context, id int64) (BannerPlanPackage, error)
	GetBannerPlanPackagesByFilters(ctx context.Context, arg GetBannerPlanPackagesByFiltersParams) ([]GetBannerPlanPackagesByFiltersRow, error)
	GetBannerPlanPkgByID(ctx context.Context, id int64) (GetBannerPlanPkgByIDRow, error)
	GetBannerTargetUrl(ctx context.Context, id int64) (string, error)
	GetBannersDetail(ctx context.Context, id int64) (GetBannersDetailRow, error)
	GetBannersDetails(ctx context.Context, id int64) (GetBannersDetailsRow, error)
	GetBannersOrderPlanPkgs(ctx context.Context, id int64) ([]GetBannersOrderPlanPkgsRow, error)
	GetBenefitById(ctx context.Context, id int64) (Benefit, error)
	GetBenefitsCount(ctx context.Context) (int64, error)
	GetBlogByID(ctx context.Context, id int64) (GetBlogByIDRow, error)
	GetBlogCategories(ctx context.Context, arg GetBlogCategoriesParams) ([]BlogCategory, error)
	// -- name: UpdateBlogCategories :one
	// UPDATE blog_categories
	// SET
	//     category_title = $2,
	//     category_title_ar=$3,
	//     description=$4,
	//     description_ar=$5,
	//     status =$6
	// Where id = $1
	// RETURNING *;
	// -- name: DeleteBlogCategories :exec
	// DELETE FROM blog_categories
	// Where id = $1;
	GetBlogCategoriesWithoutPagination(ctx context.Context, status int64) ([]BlogCategory, error)
	GetBlogCategoryByID(ctx context.Context, arg GetBlogCategoryByIDParams) (BlogCategory, error)
	GetBookingActivityByRefIdAndModuleName(ctx context.Context, arg GetBookingActivityByRefIdAndModuleNameParams) (BookingActivity, error)
	GetBookingCategoryActivityId(ctx context.Context, refActivityID int64) (int64, error)
	GetBookingPortal(ctx context.Context, id int64) (BookingPortal, error)
	GetBookingPortalByID(ctx context.Context, id int64) (BookingPortal, error)
	GetBookingPortalsbByName(ctx context.Context, arg GetBookingPortalsbByNameParams) ([]BookingPortal, error)
	// /-- name: GetBrokerCompanyAgentPropertyBranchDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId :one
	// SELECT  * FROM broker_company_agent_properties_documents_branch
	// WHERE broker_company_agent_properties_id = $1
	// AND
	//  documents_category_id = $2
	// AND
	// documents_subcategory_id = $3;
	// -- name: GetAllBrokerAgentPropertyDocByPropertyId :many
	// SELECT broker_company_agent_properties_documents_branch.*, documents_category.category,documents_subcategory.sub_category
	// FROM broker_company_agent_properties_documents_branch LEFT JOIN documents_category ON documents_category.id = broker_company_agent_properties_documents_branch.documents_category_id
	// LEFT JOIN documents_subcategory ON documents_subcategory.id = broker_company_agent_properties_documents_branch.documents_subcategory_id
	// WHERE broker_company_agent_properties_id = $3 OFFSET $2 LIMIT $1;
	// -- name: GetCountBrokerAgentPropertyDocByPropertyId :one
	// SELECT count(*) FROM broker_company_agent_properties_documents_branch
	// WHERE broker_company_agent_properties_id = $1;
	// -- name: GetBrokerCompanyAgentPropertyDocById :one
	// SELECT broker_company_agent_properties_documents_branch.*,documents_category.category,documents_subcategory.sub_category
	// FROM broker_company_agent_properties_documents_branch
	// LEFT JOIN documents_category ON documents_category.id = broker_company_agent_properties_documents_branch.documents_category_id
	// LEFT JOIN documents_subcategory ON documents_subcategory.id = broker_company_agent_properties_documents_branch.documents_subcategory_id
	// WHERE broker_company_agent_properties_documents_branch.id = $1;
	GetBranchBrokerCompanyAgentPropertyDocById(ctx context.Context, id int64) (GetBranchBrokerCompanyAgentPropertyDocByIdRow, error)
	GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error)
	GetBranchBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetBranchBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSectionParams) (BrokerCompanyAgentPropertiesMediaBranch, error)
	GetBranchCompanyNamesByParentCompany(ctx context.Context, companyParentID pgtype.Int8) ([]GetBranchCompanyNamesByParentCompanyRow, error)
	GetBrnLicenseByUserID(ctx context.Context, userID int64) (License, error)
	GetBrokerAgent(ctx context.Context, limit int32) (BrokerCompanyAgent, error)
	GetBrokerAgentByUserId(ctx context.Context, usersID int64) (BrokerCompanyAgent, error)
	GetBrokerAgentPropertiesByBrokerAgentId(ctx context.Context, usersID int64) ([]GetBrokerAgentPropertiesByBrokerAgentIdRow, error)
	GetBrokerAgentPropertiesByBrokerCompaniesId(ctx context.Context, brokerCompaniesID int64) ([]GetBrokerAgentPropertiesByBrokerCompaniesIdRow, error)
	GetBrokerAgentReviews(ctx context.Context, limit int32) (BrokerAgentReview, error)
	GetBrokerAgentReviewsCount(ctx context.Context) (int64, error)
	GetBrokerAgentReviewsDetails(ctx context.Context, id int64) (GetBrokerAgentReviewsDetailsRow, error)
	GetBrokerAgentsByUserID(ctx context.Context, usersID int64) (BrokerCompanyAgent, error)
	GetBrokerBranchAgent(ctx context.Context, limit int32) (BrokerCompanyBranchesAgent, error)
	GetBrokerBranchAgentByUserId(ctx context.Context, usersID int64) (BrokerCompanyBranchesAgent, error)
	GetBrokerBranchAgentPropertiesByBrokerAgentId(ctx context.Context, brokerCompanyBranchesAgents int64) ([]GetBrokerBranchAgentPropertiesByBrokerAgentIdRow, error)
	GetBrokerBranchAgentReviews(ctx context.Context, limit int32) (BrokerBranchAgentReview, error)
	GetBrokerBranchAgentReviewsByCompanyId(ctx context.Context, arg GetBrokerBranchAgentReviewsByCompanyIdParams) ([]BrokerBranchAgentReview, error)
	GetBrokerBranchCompanyReviews(ctx context.Context, limit int32) (BrokerBranchCompanyReview, error)
	GetBrokerBranchCompanyReviewsByCompanyId(ctx context.Context, arg GetBrokerBranchCompanyReviewsByCompanyIdParams) ([]BrokerBranchCompanyReview, error)
	GetBrokerCompaniesBranchesServices(ctx context.Context, limit int32) (BrokerCompaniesBranchesService, error)
	GetBrokerCompaniesBranchesServicesByBrokerCompanyBranchId(ctx context.Context, brokerCompaniesBranchesID int64) (BrokerCompaniesBranchesService, error)
	GetBrokerCompaniesBranchesServicesByServiceId(ctx context.Context, arg GetBrokerCompaniesBranchesServicesByServiceIdParams) ([]BrokerCompaniesBranchesService, error)
	GetBrokerCompany(ctx context.Context, id int64) (BrokerCompany, error)
	GetBrokerCompanyAddressId(ctx context.Context, id int64) (int64, error)
	GetBrokerCompanyAgentByUsername(ctx context.Context, username string) (BrokerCompanyAgent, error)
	GetBrokerCompanyAgentPropertiesBranchByRefrenceNumber(ctx context.Context, refNo string) (BrokerCompanyAgentPropertiesBranch, error)
	GetBrokerCompanyAgentPropertiesByRefrenceNumber(ctx context.Context, refNo string) (BrokerCompanyAgentProperty, error)
	GetBrokerCompanyAgentProperty(ctx context.Context, id int64) (BrokerCompanyAgentProperty, error)
	GetBrokerCompanyAgentPropertyBranch(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesBranch, error)
	GetBrokerCompanyAgentPropertyBranchByName(ctx context.Context, arg GetBrokerCompanyAgentPropertyBranchByNameParams) (BrokerCompanyAgentPropertiesBranch, error)
	GetBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesDocumentsBranch, error)
	GetBrokerCompanyAgentPropertyBranchMedia(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesMediaBranch, error)
	GetBrokerCompanyAgentPropertyBranchWithValidation(ctx context.Context, arg GetBrokerCompanyAgentPropertyBranchWithValidationParams) (BrokerCompanyAgentPropertiesBranch, error)
	GetBrokerCompanyAgentPropertyByName(ctx context.Context, propertyTitle string) (BrokerCompanyAgentProperty, error)
	GetBrokerCompanyAgentPropertyDocById(ctx context.Context, id int64) (GetBrokerCompanyAgentPropertyDocByIdRow, error)
	GetBrokerCompanyAgentPropertyDocument(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesDocument, error)
	GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (BrokerCompanyAgentPropertiesDocument, error)
	GetBrokerCompanyAgentPropertyMedia(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesMedium, error)
	GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSectionParams) (BrokerCompanyAgentPropertiesMedium, error)
	GetBrokerCompanyAgentPropertyWithValidation(ctx context.Context, arg GetBrokerCompanyAgentPropertyWithValidationParams) (BrokerCompanyAgentProperty, error)
	GetBrokerCompanyBranch(ctx context.Context, id int64) (BrokerCompaniesBranch, error)
	GetBrokerCompanyBranchAddressId(ctx context.Context, id int64) (int64, error)
	// -- name: GetAllBrokerBranchAgentNamesByBrokerCompId :many
	// SELECT profiles.id AS profile_id,profiles.first_name,profiles.last_name,broker_company_branches_agents.broker_companies_id AS broker_company_id,broker_company_branches_agents.id AS broker_company_agent_id,broker_company_branches_agents.is_freelancer,users.id AS user_id
	// FROM broker_companies
	// LEFT JOIN broker_company_branches_agents ON broker_company_branches_agents.broker_companies_id = broker_companies.id
	// LEFT JOIN users ON users.id = broker_company_branches_agents.users_id
	// LEFT JOIN profiles ON profiles.id = users.profiles_id
	// WHERE broker_companies.id = $3 LIMIT $1 OFFSET $2;
	GetBrokerCompanyBranchAgentByBrokerCompany(ctx context.Context, id int64) ([]GetBrokerCompanyBranchAgentByBrokerCompanyRow, error)
	GetBrokerCompanyBranchAgentByUsername(ctx context.Context, username string) (BrokerCompanyBranchesAgent, error)
	GetBrokerCompanyBranchByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (BrokerCompaniesBranch, error)
	// -- name: GetCountBrokerCompanyBranchByMainServiceId :one
	// SELECT COUNT(*) FROM broker_companies_branches WHERE main_services_id = $1  LIMIT 1;
	// -- name: GetBrokerCompanyBranchByMainServiceId :many
	// SELECT * FROM broker_companies_branches
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetBrokerCompanyBranchByName(ctx context.Context, companyName string) (BrokerCompaniesBranch, error)
	GetBrokerCompanyBranchByReraNo(ctx context.Context, reraNo string) (BrokerCompaniesBranch, error)
	//----------------  ------------------------
	// -- name: GetBrokerCompanyByIdAndIsBranch :many
	// With x As (
	//   SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url,
	//   commercial_license_expiry, vat_no, vat_status, vat_file_url ,
	//   facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id,
	//   broker_subscription_id , main_services_id, no_of_employees,
	//   logo_url, cover_image_url, description, is_verified, website_url, phone_number, email,
	//   whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch,
	//   created_at, updated_at, subcompany_type, ref_no
	//   FROM broker_companies WHERE broker_companies.id = $1 AND broker_companies.is_branch = $2
	//   UNION all
	//    SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url,
	//    commercial_license_expiry, vat_no, vat_status, vat_file_url ,
	//    facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url,
	//    users_id, broker_subscription_id , main_services_id,
	//    no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number,
	//    email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch,
	//    created_at, updated_at, subcompany_type, ref_no FROM broker_companies_branches
	//     WHERE broker_companies_branches.id = $1 AND broker_companies_branches.is_branch = $2 )
	//   select id, is_branch from x;
	GetBrokerCompanyCountryAndStateById(ctx context.Context, limit int32) (GetBrokerCompanyCountryAndStateByIdRow, error)
	// -- name: GetBrokerCompanySubscriptionById :one
	// SELECT broker_subscription_id FROM broker_companies
	// WHERE id = $1 LIMIT $1;
	// -- name: GetBrokerCompanyBySubscriptionId :one
	// SELECT * FROM broker_companies
	// WHERE  broker_subscription_id = $1 LIMIT 1;
	GetBrokerCompanyDocs(ctx context.Context, id int64) (GetBrokerCompanyDocsRow, error)
	GetBrokerCompanyReview(ctx context.Context, limit int32) (BrokerCompanyReview, error)
	GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesId(ctx context.Context, brokerCompaniesBranchesID int64) ([]GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesIdRow, error)
	GetBuildingReviews(ctx context.Context, limit int32) (BuildingReview, error)
	GetCandidateMilstoneById(ctx context.Context, id int64) (CandidatesMilestone, error)
	GetCareerBenefits(ctx context.Context, id int64) ([]Benefit, error)
	GetCareerByID(ctx context.Context, id int64) (GetCareerByIDRow, error)
	// JOIN
	//     employers e ON cr.employers_id = e.id
	GetCareerCount(ctx context.Context, dollar_1 interface{}) (int64, error)
	GetCareerFieldsOfStudy(ctx context.Context, id int64) ([]FieldOfStudy, error)
	GetCareerLanguages(ctx context.Context, id int64) ([]AllLanguage, error)
	GetCareerNationalities(ctx context.Context, id int64) ([]Country, error)
	GetCareerSpecializationById(ctx context.Context, id int64) (Specialization, error)
	GetCareerSpecializationByTitle(ctx context.Context, title string) (Specialization, error)
	GetCareerSpecializations(ctx context.Context, id int64) ([]Specialization, error)
	GetCareerTags(ctx context.Context, id int64) ([]GlobalTagging, error)
	GetCareers(ctx context.Context, arg GetCareersParams) ([]GetCareersRow, error)
	GetCareersByUserId(ctx context.Context, uploadedBy int64) ([]Career, error)
	GetCareersTotalCount(ctx context.Context, arg GetCareersTotalCountParams) (int64, error)
	// -- name: GetAllParentJobCategories :many
	// select id, ref_no, parent_category_id, category_name, description, company_types_id, companies_id, is_branch, category_image, created_at, created_by, status, company_name from job_categories where parent_category_id = 0 and status != 5 AND status!=6 order by id desc;
	GetCategoriesCount(ctx context.Context) (int64, error)
	GetCategorySettingsByID(ctx context.Context, id int64) (GetCategorySettingsByIDRow, error)
	GetChangesByActivityID(ctx context.Context, arg GetChangesByActivityIDParams) ([]AuctionsActivityChange, error)
	GetCitiesByCountryId(ctx context.Context, dollar_1 int64) ([]GetCitiesByCountryIdRow, error)
	GetCitiesCount(ctx context.Context) (int64, error)
	GetCity(ctx context.Context, id int64) (GetCityRow, error)
	GetCityByCountryId(ctx context.Context, countriesID pgtype.Int8) ([]GetCityByCountryIdRow, error)
	GetCityByName(ctx context.Context, city string) (City, error)
	GetCityByStatesId(ctx context.Context, arg GetCityByStatesIdParams) ([]City, error)
	GetCityGuide(ctx context.Context, id int64) (GetCityGuideRow, error)
	GetCityGuides(ctx context.Context, arg GetCityGuidesParams) ([]GetCityGuidesRow, error)
	GetCityGuidesCount(ctx context.Context, status int64) (int64, error)
	GetCollectionName(ctx context.Context, id int64) (CollectionName, error)
	GetCollectionNameByName(ctx context.Context, arg GetCollectionNameByNameParams) (CollectionName, error)
	GetCommercialLuxuryProperties(ctx context.Context, arg GetCommercialLuxuryPropertiesParams) ([]GetCommercialLuxuryPropertiesRow, error)
	GetCommercialProperties(ctx context.Context, arg GetCommercialPropertiesParams) ([]GetCommercialPropertiesRow, error)
	GetCommunities(ctx context.Context, arg GetCommunitiesParams) ([]Community, error)
	GetCommunity(ctx context.Context, limit int32) (Community, error)
	GetCommunityByCitiesId(ctx context.Context, arg GetCommunityByCitiesIdParams) ([]Community, error)
	GetCommunityByCityId(ctx context.Context, citiesID pgtype.Int8) ([]Community, error)
	GetCommunityByName(ctx context.Context, arg GetCommunityByNameParams) (Community, error)
	GetCommunityByStateId(ctx context.Context, statesID pgtype.Int8) ([]GetCommunityByStateIdRow, error)
	GetCommunityGuideLineInsight(ctx context.Context, id int64) (GetCommunityGuideLineInsightRow, error)
	GetCommunityGuideLineInsights(ctx context.Context, arg GetCommunityGuideLineInsightsParams) ([]CommunityGuidelinesInsight, error)
	GetCommunityGuideLineInsightsCount(ctx context.Context) (int64, error)
	GetCommunityGuideLines(ctx context.Context, id int64) (GetCommunityGuideLinesRow, error)
	GetCommunityGuideSubinsight(ctx context.Context, id int64) (GetCommunityGuideSubinsightRow, error)
	GetCommunityGuideSubinsights(ctx context.Context, arg GetCommunityGuideSubinsightsParams) ([]GetCommunityGuideSubinsightsRow, error)
	GetCommunityGuideSubinsightsCount(ctx context.Context, insightIds []int64) (int64, error)
	// -- name: GetCommunityGuidesLines :many
	// SELECT
	//   sqlc.embed(community_guidelines),
	//   communities.community,
	//   (
	//     SELECT jsonb_agg(jsonb_build_object('id', i.id, 'label', i.insight_name))
	//     FROM community_guidelines_insight i
	//     WHERE i.id = ANY(community_guidelines.insights)
	//       AND i.status NOT IN (5, 6)
	//   ) AS community_guidelines_insight,
	//   (
	//     SELECT jsonb_agg(jsonb_build_object('id', s.id, 'label', s.subinsight_name))
	//     FROM community_guidelines_subinsight s
	//     WHERE s.id = ANY(community_guidelines.sub_insights)
	//       AND s.status NOT IN (5, 6)
	//   ) AS community_guidelines_subinsight
	// FROM community_guidelines
	// JOIN communities ON community_guidelines.community_id = communities.id
	// WHERE community_guidelines.status NOT IN (5, 6)
	//   AND communities.status NOT IN (5, 6)
	// ORDER BY community_guidelines.update_at DESC
	// LIMIT sqlc.narg('limit')
	// OFFSET sqlc.narg('offset');
	// -- name: GetCommunityGuidesLinesCount :one
	// SELECT
	//   COUNT(DISTINCT community_guidelines.id)
	// FROM community_guidelines
	// JOIN communities ON community_guidelines.community_id = communities.id
	// WHERE community_guidelines.status NOT IN (5, 6)
	//   AND communities.status NOT IN (5, 6)
	//   AND EXISTS (
	//     SELECT 1
	//     FROM community_guidelines_insight i
	//     WHERE i.id = ANY(community_guidelines.insights)
	//       AND i.status NOT IN (5, 6)
	//   )
	//   AND EXISTS (
	//     SELECT 1
	//     FROM community_guidelines_subinsight s
	//     WHERE s.id = ANY(community_guidelines.sub_insights)
	//       AND s.status NOT IN (5, 6));
	GetCommunityGuidesLines(ctx context.Context, arg GetCommunityGuidesLinesParams) ([]GetCommunityGuidesLinesRow, error)
	GetCommunityGuidesLinesCount(ctx context.Context) (int64, error)
	GetCommunityGuidesViewActivitiesTransactionView(ctx context.Context, arg GetCommunityGuidesViewActivitiesTransactionViewParams) ([]GetCommunityGuidesViewActivitiesTransactionViewRow, error)
	GetCommunitySettingsByID(ctx context.Context, id int64) (GetCommunitySettingsByIDRow, error)
	GetCommunitySettingsForUpdate(ctx context.Context, id int64) (GetCommunitySettingsForUpdateRow, error)
	// -- name: CheckCompanyByName :one
	// SELECT companies.id FROM companies
	// WHERE company_name ILIKE $1;
	// -- name: CreateCompaniesService :one
	// INSERT INTO companies_services (
	//      companies_id,
	//      services_id,
	//      created_at,
	//      updated_at
	// )VALUES (
	//     $1, $2, $3, $4
	// ) RETURNING *;
	// -- name: CheckParentCompanyExists :one
	// SELECT id FROM companies
	// WHERE id = $1;
	GetCompanies(ctx context.Context, id int64) (Company, error)
	GetCompaniesById(ctx context.Context, id int64) (Company, error)
	GetCompaniesByLocationAndTypeID(ctx context.Context, arg GetCompaniesByLocationAndTypeIDParams) ([]GetCompaniesByLocationAndTypeIDRow, error)
	GetCompaniesByStatus(ctx context.Context, arg GetCompaniesByStatusParams) ([]GetCompaniesByStatusRow, error)
	//    AND CASE WHEN @status::bigint = 0 THEN c.company_parent_id IS NULL ELSE true END;
	GetCompaniesCountByActivity(ctx context.Context, dollar_1 int64) (int64, error)
	GetCompaniesCountByCategory(ctx context.Context, id int64) (int64, error)
	GetCompaniesForAdmin(ctx context.Context, usersID int64) ([]GetCompaniesForAdminRow, error)
	GetCompaniesLeadership(ctx context.Context, id int64) (CompaniesLeadership, error)
	GetCompany(ctx context.Context, id int64) (Company, error)
	GetCompanyActivitiesByCompanyCategory(ctx context.Context, companyCategoryID int64) ([]CompanyActivity, error)
	GetCompanyActivityDetail(ctx context.Context, arg GetCompanyActivityDetailParams) (GetCompanyActivityDetailRow, error)
	GetCompanyActivityDetails(ctx context.Context, arg GetCompanyActivityDetailsParams) ([]GetCompanyActivityDetailsRow, error)
	GetCompanyActivityDetailsCount(ctx context.Context, companyID int64) (int64, error)
	GetCompanyAdmin(ctx context.Context, arg GetCompanyAdminParams) (int64, error)
	GetCompanyAdminPermissions(ctx context.Context, arg GetCompanyAdminPermissionsParams) (GetCompanyAdminPermissionsRow, error)
	GetCompanyBankAccountDetails(ctx context.Context, companyID int64) (BankAccountDetail, error)
	GetCompanyById(ctx context.Context, id int64) (GetCompanyByIdRow, error)
	GetCompanyByRank(ctx context.Context, arg GetCompanyByRankParams) ([]GetCompanyByRankRow, error)
	GetCompanyByStatus(ctx context.Context, arg GetCompanyByStatusParams) ([]GetCompanyByStatusRow, error)
	GetCompanyByUserId(ctx context.Context, usersID int64) (GetCompanyByUserIdRow, error)
	GetCompanyCategoryAndAcitivites(ctx context.Context, id int64) ([]GetCompanyCategoryAndAcitivitesRow, error)
	// -- name: GetAuctionByID :one
	// SELECT
	//     a.*,
	//     COUNT(DISTINCT pb.bidder_id) AS number_of_bidder,
	//     COALESCE(MAX(pb.amount), 0)::float8 AS current_max_bid_amount
	// FROM
	//     auctions a
	// LEFT JOIN
	//     auctions_pre_bids pb ON a.id = pb.auction_id
	// WHERE a.deleted_at IS NULL AND a.id = $1
	// GROUP BY a.id;
	// -- name: GetAuctionByAuctionTitle :one
	// SELECT *
	// FROM auctions
	// WHERE deleted_at IS NULL
	// -- name: ListAuctions :many
	// SELECT
	//     a.*,
	//     COUNT(DISTINCT pb.bidder_id) AS number_of_bidder,
	//     COALESCE(MAX(pb.amount), 0)::float8 AS current_max_bid_amount
	// FROM
	//     auctions a
	// LEFT JOIN
	//     auctions_pre_bids pb ON a.id = pb.auction_id
	// WHERE a.deleted_at IS NULL
	// AND ($1::BIGINT IS NULL OR a.auction_type = $1)  --local OR internation
	// AND ($2::TEXT IS NULL OR
	//     a.auction_title ILIKE '%' || $2 || '%' OR
	//     a.description ILIKE '%' || $2 || '%' OR
	//     a.auction_description ILIKE '%' || $2 || '%' OR
	//     a.auction_url ILIKE '%' || $2 || '%'
	// )
	// GROUP BY a.id
	// ORDER BY a.created_at DESC
	// LIMIT $3 OFFSET $4;
	// -- name: CountAuctions :one
	// SELECT COUNT(id)
	// FROM auctions
	// WHERE deleted_at IS NULL
	// AND ($1::bigint IS NULL OR auction_type = $1::bigint)
	// AND (
	//     $2::TEXT IS NULL OR
	//     auction_title ILIKE '%' || $2 || '%' OR
	//     description ILIKE '%' || $2 || '%' OR
	//     auction_description ILIKE '%' || $2 || '%' OR
	//     auction_url ILIKE '%' || $2 || '%'
	// );
	// -- name: UpdateAuction :one
	// UPDATE auctions SET
	//     auction_title = $2, auction_description = $3, auction_category = $4,select_type = $5, property_name = $6, property_category = $7,
	//     property_usage = $8, properties_unites_id = $9, plot_no = $10, sector_no = $11, has_tenants = $12, lat = $13, lng = $14,
	//     prebid_start_date = $15, start_date = $16, end_date = $17, min_bid_amount = $18, min_increment_amount = $19,
	//     auction_url = $20, auction_type = $21, description = $22, description_ar = $23,
	//     addresses_id = $24, location_url = $25, ownership_id = $26, updated_at = now(), auction_status = $27, tags_id = $28
	// WHERE id = $1
	// RETURNING *;
	// -- name: SoftDeleteAuction :exec
	// UPDATE auctions SET
	//     auction_status = $2, -- DELETED
	//     updated_at = now(),
	//     deleted_at = now()
	// WHERE id = $1;
	// -- name: ListDeletedAuctions :many
	// SELECT
	//     a.*,
	//     COUNT(DISTINCT pb.bidder_id) AS number_of_bidder,
	//     COALESCE(MAX(pb.amount), 0)::float8 AS current_max_bid_amount
	// FROM
	//     auctions a
	// LEFT JOIN
	//     auctions_pre_bids pb ON a.id = pb.auction_id
	// WHERE a.deleted_at IS NOT NULL
	// AND (
	//     $1::TEXT IS NULL OR
	//     a.auction_title ILIKE '%' || $1 || '%' OR
	//     a.auction_description ILIKE '%' || $1 || '%' OR
	//     a.description ILIKE '%' || $1 || '%' OR
	//     a.auction_url ILIKE '%' || $1 || '%'
	// )
	// GROUP BY a.id
	// ORDER BY a.created_at DESC
	// LIMIT $2 OFFSET $3;
	// -- name: CountDeletedAuctions :one
	// SELECT COUNT(id)
	// FROM auctions
	// WHERE deleted_at IS NOT NULL
	// AND (
	//     $1::TEXT IS NULL OR
	//     auction_title ILIKE '%' || $1 || '%' OR
	//     auction_description ILIKE '%' || $1 || '%' OR
	//     description ILIKE '%' || $1 || '%' OR
	//     auction_url ILIKE '%' || $1 || '%'
	// );
	// -- name: RestoreAuctionById :exec
	// UPDATE auctions SET
	//     auction_status = $2,
	//     updated_at = now(),
	//     deleted_at = NULL
	// WHERE id = $1 AND deleted_at IS NOT NULL;
	GetCompanyDetailsById(ctx context.Context, id int64) (AuctionsCompany, error)
	GetCompanyDetailsByUserId(ctx context.Context, id int64) (AuctionsCompany, error)
	// SELECT
	//     logo_url,
	//     cover_image_url,
	//     commercial_license_no,
	//     commercial_license_file_url,
	//     commercial_license_issue_date,
	//     commercial_license_expiry,
	//     commercial_license_registration_date,
	//     rera_no,
	//     rera_file_url,
	//     rera_issue_date,
	//     rera_expiry,
	//     rera_registration_date,
	//     vat_no,
	//     vat_status,
	//     vat_file_url,
	//     orn_license_no,
	//     orn_license_file_url,
	//     orn_registration_date,
	//     orn_license_expiry,
	//     trakhees_permit_no,
	//     license_dcci_no,
	//     register_no,
	//     extra_license,
	//     company_id
	// FROM companies_licenses
	// INNER JOIN companies ON companies.id = companies_licenses.company_id
	// WHERE companies.id = $1 LIMIT 1;
	GetCompanyDocs(ctx context.Context, companyID int64) ([]GetCompanyDocsRow, error)
	// -- name: GetProjectFacilitiesForSinglePhase :one
	// select facilities_id from projects
	// where projects.id = $1;
	// -- name: GetProjectFacilitiesForMultiplePhase :one
	// select phases.facilities from phases
	// where phases.id = $1;
	// -- name: GetOpenHouseAppointmentByEmail :one
	// select * from appointment
	// inner join users on users.id = client_id
	// where  users.email = $1 and appointment.openhouse_id = $2;
	GetCompanyLicenseByCompanyId(ctx context.Context, entityID int64) ([]GetCompanyLicenseByCompanyIdRow, error)
	// -- name: GetAllCompanyNamesWithSearch :many
	// SELECT * FROM companies
	// WHERE
	//     (@search::TEXT ='')
	//      OR companies.company_name % @search::TEXT
	// 	AND companies.company_type  = 1
	// ORDER BY companies.created_at DESC
	// LIMIT 10;
	GetCompanyNameByCompanyId(ctx context.Context, arg GetCompanyNameByCompanyIdParams) (GetCompanyNameByCompanyIdRow, error)
	GetCompanyNameByEqualCountry(ctx context.Context, arg GetCompanyNameByEqualCountryParams) (GetCompanyNameByEqualCountryRow, error)
	GetCompanyNameByNotEqualCountry(ctx context.Context, arg GetCompanyNameByNotEqualCountryParams) (GetCompanyNameByNotEqualCountryRow, error)
	GetCompanyProductByID(ctx context.Context, id int64) (CompaniesProduct, error)
	GetCompanyProfileByID(ctx context.Context, id int64) (CompanyProfile, error)
	GetCompanyProfilePhase(ctx context.Context, limit int32) (CompanyProfilesPhase, error)
	GetCompanyProfilePhaseByRefNo(ctx context.Context, refNumber string) (CompanyProfilesPhase, error)
	GetCompanyProfileProject(ctx context.Context, id int64) (CompanyProfilesProject, error)
	GetCompanyProfileProjectByRefNo(ctx context.Context, refNumber string) (CompanyProfilesProject, error)
	//INNER JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	//      -- Company and branch permissions
	//      AND (
	//         @is_company_user != true
	//         OR (
	//             (@company_branch != false OR projects.developer_companies_id = @company_id::bigint)
	//             AND (@company_branch != true OR projects.developer_company_branches_id = @company_id::bigint)
	//         )
	//     )
	//     -- AND (@state_id::bigint = 0 OR addresses.states_id = @state_id::bigint)
	//     AND (@city_id::bigint = 0 OR addresses.cities_id = @city_id::bigint)
	//     AND (@community_id::bigint = 0 OR addresses.communities_id = @community_id::bigint)
	//     AND (@sub_community_id::bigint = 0 OR addresses.sub_communities_id = @sub_community_id::bigint)
	GetCompanyProfileProjectNotEqualToCountryId(ctx context.Context, arg GetCompanyProfileProjectNotEqualToCountryIdParams) ([]GetCompanyProfileProjectNotEqualToCountryIdRow, error)
	GetCompanySectionPermission(ctx context.Context) (SectionPermission, error)
	GetCompanyType(ctx context.Context, id int64) (CompanyType, error)
	GetCompanyTypeByTitle(ctx context.Context, title string) (CompanyType, error)
	GetCompanyUser(ctx context.Context, limit int32) (CompanyUser, error)
	GetCompanyUserAgentAndQuotaByUserId(ctx context.Context, usersID int64) (GetCompanyUserAgentAndQuotaByUserIdRow, error)
	GetCompanyUserBranchAgentAndQuotaByUserId(ctx context.Context, usersID int64) (GetCompanyUserBranchAgentAndQuotaByUserIdRow, error)
	GetCompanyUserByCompanyId(ctx context.Context, companyID int64) ([]CompanyUser, error)
	GetCompanyUserByCompanyUserId(ctx context.Context, companyUserID int64) (CompanyUser, error)
	GetCompanyUserById(ctx context.Context, companyID int64) (GetCompanyUserByIdRow, error)
	GetCompanyUserByUserId(ctx context.Context, arg GetCompanyUserByUserIdParams) (CompanyUser, error)
	//-------------------
	// With x AS(
	// 	SELECT broker_companies.id AS company_id, users_id, 1 AS company_type, false AS is_branch  FROM broker_companies
	// 	UNION ALL
	// 	SELECT broker_companies_branches.id AS company_id, users_id, 1 AS company_type, true AS is_branch FROM broker_companies_branches
	// 	UNION
	// 	SELECT developer_companies.id AS company_id, users_id, 2 AS company_type, false AS is_branch FROM developer_companies
	// 	UNION ALL
	// 	SELECT developer_company_branches.id AS company_id, users_id, 2 AS company_type, true AS is_branch FROM developer_company_branches
	// 	UNION ALL
	// 	SELECT services_companies.id AS company_id, users_id, 3 AS company_type, false AS is_branch FROM services_companies
	// 	UNION ALL
	// 	SELECT service_company_branches.id AS company_id, users_id, 3 AS company_type, true AS is_branch FROM service_company_branches
	// )
	// SELECT users_id, company_id FROM x WHERE company_id = 1 and company_type = @company_type and is_branch = @is_branch;
	// SELECT users_id, bc.id AS company_id, bc.users_id, 1 AS company_type, false AS is_branch
	// FROM broker_companies bc
	// WHERE bc.company_type = @company_type AND bc.id =  @id AND bc.is_branch = @is_branch
	// UNION ALL
	// SELECT  users_id, bcb.id AS company_id, bcb.users_id, 1 AS company_type, true AS is_branch
	// FROM broker_companies_branches bcb
	// WHERE bcb.company_type = @company_type AND bcb.id =  @id AND bcb.is_branch =  @is_branch
	// UNION ALL
	// SELECT  users_id, dc.id AS company_id, dc.users_id, 2 AS company_type, false AS is_branch
	// FROM developer_companies dc
	// WHERE dc.company_type = @company_type AND dc.id =  @id AND dc.is_branch =   @is_branch
	// UNION ALL
	// SELECT   users_id, dcb.id AS company_id, dcb.users_id, 2 AS company_type, true AS is_branch
	// FROM developer_company_branches dcb
	// WHERE dcb.company_type = @company_type AND dcb.id =  @id AND dcb.is_branch =  @is_branch
	// UNION ALL
	// SELECT   users_id, sc.id AS company_id, sc.users_id, 3 AS company_type, false AS is_branch
	// FROM services_companies sc
	// WHERE sc.company_type = @company_type AND sc.id =  @id AND sc.is_branch =   @is_branch
	// UNION ALL
	// SELECT   users_id, scb.id AS company_id, scb.users_id, 3 AS company_type, true AS is_branch
	// FROM service_company_branches scb
	// WHERE scb.company_type = @company_type AND scb.id =  @id AND scb.is_branch =  @is_branch;
	// SELECT company_id, users_id, company_type, is_branch, is_verified
	// FROM (
	//     SELECT broker_companies.id AS company_id, broker_companies.users_id, 1 AS company_type, false AS is_branch, is_verified
	//     FROM broker_companies
	//     WHERE broker_companies.users_id = $1
	//     UNION ALL
	//     SELECT broker_companies_branches.id AS company_id, broker_companies_branches.users_id, 1 AS company_type, true AS is_branch, is_verified
	//     FROM broker_companies_branches
	//     WHERE broker_companies_branches.users_id = $1
	//     UNION
	//     SELECT developer_companies.id AS company_id, developer_companies.users_id, 2 AS company_type, false AS is_branch, is_verified
	//     FROM developer_companies
	//     WHERE developer_companies.users_id = $1
	//     UNION ALL
	//     SELECT developer_company_branches.id AS company_id, developer_company_branches.users_id, 2 AS company_type, true AS is_branch, is_verified
	//     FROM developer_company_branches
	//     WHERE developer_company_branches.users_id = $1
	//     UNION ALL
	//     SELECT services_companies.id AS company_id, services_companies.users_id, 3 AS company_type, false AS is_branch, is_verified
	//     FROM services_companies
	//     WHERE services_companies.users_id = $1
	//     UNION ALL
	//     SELECT service_company_branches.id AS company_id, service_company_branches.users_id, 3 AS company_type, true AS is_branch, is_verified
	//     FROM service_company_branches
	//     WHERE service_company_branches.users_id = $1
	// ) AS subquery;
	GetCompanyUserCountByUserAndCompanyId(ctx context.Context, arg GetCompanyUserCountByUserAndCompanyIdParams) (int64, error)
	GetCompanyUserExpertise(ctx context.Context, arg GetCompanyUserExpertiseParams) ([]GetCompanyUserExpertiseRow, error)
	GetCompanyUserExpertiseCount(ctx context.Context, companyUserID int64) (int64, error)
	GetCompanyUserIDFromUserID(ctx context.Context, usersID int64) (int64, error)
	// -- name: GetTopBrokerCompanies :many
	// with x as (
	//     SELECT DISTINCT ON (model.id)
	//         model.id,
	//         model.company_name,
	//         model.description,
	//         model.logo_url,
	//         model.addresses_id,
	//         model.email,
	//         model.phone_number,
	//         model.whatsapp_number,
	//         model.commercial_license_no,
	//         model.commercial_license_file_url,
	//         model.commercial_license_expiry,
	//         model.rera_no,
	//         model.rera_file_url,
	//         model.rera_expiry,
	//         model.is_verified,
	//         model.website_url,
	//         model.cover_image_url,
	//         model.tag_line,
	//         model.vat_no,
	//         model.vat_status,
	//         model.vat_file_url,
	//         model.facebook_profile_url,
	//         model.instagram_profile_url,
	//         model.twitter_profile_url,
	//         model.no_of_employees,
	//         model.users_id,
	//         model.linkedin_profile_url,
	//         model.company_rank,
	//         model.status,
	//         model.country_id,
	//         model.company_type,
	//         model.is_branch,
	//         model.created_at,
	//         model.updated_at,
	//         model.ref_no,
	//         model.rera_registration_date,
	//         model.rera_issue_date,
	//         model.commercial_license_registration_date,
	//         model.commercial_license_issue_date,
	//         model.youtube_profile_url,
	//         model.orn_license_no,
	//         model.orn_license_file_url,
	//         model.orn_registration_date,
	//         model.orn_license_expiry,
	//         0 as broker_companies_id
	//     from broker_companies as model
	// 	WHERE is_verified = ANY($3::boolean[])
	// 	AND
	// 	CASE
	//         WHEN $4::bigint = 0 THEN true
	//         WHEN $4::bigint = 1 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $5)
	//     END
	// 	AND
	// 	CASE
	//         WHEN $6::bigint = 0 THEN true
	//         WHEN $6::bigint = 1 THEN model.country_id = $7
	//     END
	// UNION ALL
	//     SELECT DISTINCT ON (model.id)
	//         model.id,
	//         model.company_name,
	//         model.description,
	//         model.logo_url,
	//         model.addresses_id,
	//         model.email,
	//         model.phone_number,
	//         model.whatsapp_number,
	//         model.commercial_license_no,
	//         model.commercial_license_file_url,
	//         model.commercial_license_expiry,
	//         model.rera_no,
	//         model.rera_file_url,
	//         model.rera_expiry,
	//         model.is_verified,
	//         model.website_url,
	//         model.cover_image_url,
	//         model.tag_line,
	//         model.vat_no,
	//         model.vat_status,
	//         model.vat_file_url,
	//         model.facebook_profile_url,
	//         model.instagram_profile_url,
	//         model.twitter_profile_url,
	//         model.no_of_employees,
	//         model.users_id,
	//         model.linkedin_profile_url,
	//         model.main_services_id,
	//         model.company_rank,
	//         model.status,
	//         model.country_id,
	//         model.company_type,
	//         model.is_branch,
	//         model.created_at,
	//         model.updated_at,
	//         model.subcompany_type,
	//         model.ref_no,
	//         model.rera_registration_date,
	//         model.rera_issue_date,
	//         model.commercial_license_registration_date,
	//         model.commercial_license_issue_date,
	//         model.youtube_profile_url,
	//         model.orn_license_no,
	//         model.orn_license_file_url,
	//         model.orn_registration_date,
	//         model.orn_license_expiry,
	//         model.broker_companies_id
	//     from broker_companies_branches as model
	// 	WHERE is_verified = ANY($3::boolean[])
	// 	AND
	// 	CASE
	//         WHEN $4::bigint = 0 THEN true
	//         WHEN $4::bigint = 1 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $5)
	//     END
	// 	AND
	// 	CASE
	//         WHEN $6::bigint = 0 THEN true
	//         WHEN $6::bigint = 1 THEN model.country_id = $7
	//     END
	// )
	// SELECT
	//   id,
	//   company_name,
	//   description,
	//   logo_url,
	//   addresses_id,
	//   email,
	//   phone_number,
	//   whatsapp_number,
	//   commercial_license_no,
	//   commercial_license_file_url,
	//   commercial_license_expiry,
	//   rera_no,
	//   rera_file_url,
	//   rera_expiry,
	//   is_verified,
	//   website_url,
	//   cover_image_url,
	//   tag_line,
	//   vat_no,
	//   vat_status,
	//   vat_file_url,
	//   facebook_profile_url,
	//   instagram_profile_url,
	//   twitter_profile_url,
	//   no_of_employees,
	//   users_id,
	//   linkedin_profile_url,
	//   company_rank,
	//   status,
	//   country_id,
	//   company_type,
	//   is_branch,
	//   created_at,
	//   updated_at,
	//   ref_no,
	//   rera_registration_date,
	//   rera_issue_date,
	//   commercial_license_registration_date,
	//   commercial_license_issue_date,
	//   youtube_profile_url,
	//   orn_license_no,
	//   orn_license_file_url,
	//   orn_registration_date,
	//   orn_license_expiry,
	//   broker_companies_id
	// from x
	// LIMIT $1 OFFSET $2;
	// -- name: GetBrokerCompanyDetails :one
	// with x as (
	//     SELECT DISTINCT ON (model.id)
	//         model.id,
	//         model.company_name,
	//         model.description,
	//         model.logo_url,
	//         model.addresses_id,
	//         model.email,
	//         model.phone_number,
	//         model.whatsapp_number,
	//         model.commercial_license_no,
	//         model.commercial_license_file_url,
	//         model.commercial_license_expiry,
	//         model.rera_no,
	//         model.rera_file_url,
	//         model.rera_expiry,
	//         model.is_verified,
	//         model.website_url,
	//         model.cover_image_url,
	//         model.tag_line,
	//         model.vat_no,
	//         model.vat_status,
	//         model.vat_file_url,
	//         model.facebook_profile_url,
	//         model.instagram_profile_url,
	//         model.twitter_profile_url,
	//         model.no_of_employees,
	//         model.users_id,
	//         model.linkedin_profile_url,
	//         model.company_rank,
	//         model.status,
	//         model.country_id,
	//         model.company_type,
	//         model.is_branch,
	//         model.created_at,
	//         model.updated_at,
	//         model.ref_no,
	//         model.rera_registration_date,
	//         model.rera_issue_date,
	//         model.commercial_license_registration_date,
	//         model.commercial_license_issue_date,
	//         model.youtube_profile_url,
	//         model.orn_license_no,
	//         model.orn_license_file_url,
	//         model.orn_registration_date,
	//         model.orn_license_expiry,
	//         0 as broker_companies_id,
	//         -- addresses
	//         j_addresses.id as j_addresses_id,
	//         j_addresses.countries_id as j_addresses_countries_id,
	//         j_addresses.states_id as j_addresses_states_id,
	//         j_addresses.cities_id as j_addresses_cities_id,
	//         j_addresses.communities_id as j_addresses_communities_id,
	//         j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//         j_addresses.locations_id as j_addresses_locations_id,
	//         j_addresses.created_at as j_addresses_created_at,
	//         j_addresses.updated_at as j_addresses_updated_at,
	//         -- countries
	//         -- j_addresses_countries.id as j_addresses_countries_id,
	//         j_addresses_countries.country as j_addresses_countries_country,
	//         j_addresses_countries.flag as j_addresses_countries_flag,
	//         j_addresses_countries.created_at as j_addresses_countries_created_at,
	//         j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//         j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//         j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//         j_addresses_countries.country_code as j_addresses_countries_country_code,
	//         j_addresses_countries.lat as j_addresses_countries_lat,
	//         j_addresses_countries.lng as j_addresses_countries_lng,
	//         -- states
	//         -- j_addresses_states.id as j_addresses_states_id,
	//         j_addresses_states.state as j_addresses_states_state,
	//         j_addresses_states.countries_id as j_addresses_states_countries_id,
	//         j_addresses_states.created_at as j_addresses_states_created_at,
	//         j_addresses_states.updated_at as j_addresses_states_updated_at,
	//         j_addresses_states.lat as j_addresses_states_lat,
	//         j_addresses_states.lng as j_addresses_states_lng,
	//         -- cities
	//         -- j_addresses_cities.id as j_addresses_cities_id,
	//         j_addresses_cities.city as j_addresses_cities_city,
	//         j_addresses_cities.states_id as j_addresses_cities_states_id,
	//         j_addresses_cities.created_at as j_addresses_cities_created_at,
	//         j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//         j_addresses_cities.lat as j_addresses_cities_lat,
	//         j_addresses_cities.lng as j_addresses_cities_lng,
	// 	-- communities
	//     -- j_addresses_communities.id as j_addresses_communities_id,
	//     j_addresses_communities.community as j_addresses_communities_community,
	//     j_addresses_communities.cities_id as j_addresses_communities_cities_id,
	//     j_addresses_communities.created_at as j_addresses_communities_created_at,
	//     j_addresses_communities.updated_at as j_addresses_communities_updated_at,
	//     j_addresses_communities.lat as j_addresses_communities_lat,
	//     j_addresses_communities.lng as j_addresses_communities_lng,
	// 	-- sub_communities
	//     -- j_addresses_sub_communities.id as j_addresses_sub_communities_id,
	//     j_addresses_sub_communities.sub_community as j_addresses_sub_communities_sub_community,
	//     j_addresses_sub_communities.communities_id as j_addresses_sub_communities_communities_id,
	//     j_addresses_sub_communities.created_at as j_addresses_sub_communities_created_at,
	//     j_addresses_sub_communities.updated_at as j_addresses_sub_communities_updated_at,
	//     j_addresses_sub_communities.lat as j_addresses_sub_communities_lat,
	//     j_addresses_sub_communities.lng as j_addresses_sub_communities_lng
	//     from broker_companies as model
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	// 	LEFT JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//     LEFT JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//     WHERE
	//       (
	//         COALESCE($1::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//         model.id = ANY(COALESCE($1::bigint[], ARRAY[]::bigint[]))
	//       ) AND
	//       (
	//         COALESCE($2::boolean[], ARRAY[]::boolean[]) = ARRAY[]::boolean[] OR
	//         model.is_branch = ANY(COALESCE($2::boolean[], ARRAY[]::boolean[]))
	//       )
	//     UNION ALL
	//     SELECT DISTINCT ON (model.id)
	//         model.id,
	//         model.company_name,
	//         model.description,
	//         model.logo_url,
	//         model.addresses_id,
	//         model.email,
	//         model.phone_number,
	//         model.whatsapp_number,
	//         model.commercial_license_no,
	//         model.commercial_license_file_url,
	//         model.commercial_license_expiry,
	//         model.rera_no,
	//         model.rera_file_url,
	//         model.rera_expiry,
	//         model.is_verified,
	//         model.website_url,
	//         model.cover_image_url,
	//         model.tag_line,
	//         model.vat_no,
	//         model.vat_status,
	//         model.vat_file_url,
	//         model.facebook_profile_url,
	//         model.instagram_profile_url,
	//         model.twitter_profile_url,
	//         model.no_of_employees,
	//         model.users_id,
	//         model.linkedin_profile_url,
	//         model.main_services_id,
	//         model.company_rank,
	//         model.status,
	//         model.country_id,
	//         model.company_type,
	//         model.is_branch,
	//         model.created_at,
	//         model.updated_at,
	//         model.subcompany_type,
	//         model.ref_no,
	//         model.rera_registration_date,
	//         model.rera_issue_date,
	//         model.commercial_license_registration_date,
	//         model.commercial_license_issue_date,
	//         model.youtube_profile_url,
	//         model.orn_license_no,
	//         model.orn_license_file_url,
	//         model.orn_registration_date,
	//         model.orn_license_expiry,
	//         model.broker_companies_id,
	//         -- addresses
	//         j_addresses.id as j_addresses_id,
	//         j_addresses.countries_id as j_addresses_countries_id,
	//         j_addresses.states_id as j_addresses_states_id,
	//         j_addresses.cities_id as j_addresses_cities_id,
	//         j_addresses.communities_id as j_addresses_communities_id,
	//         j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//         j_addresses.locations_id as j_addresses_locations_id,
	//         j_addresses.created_at as j_addresses_created_at,
	//         j_addresses.updated_at as j_addresses_updated_at,
	//         -- countries
	//         -- j_addresses_countries.id as j_addresses_countries_id,
	//         j_addresses_countries.country as j_addresses_countries_country,
	//         j_addresses_countries.flag as j_addresses_countries_flag,
	//         j_addresses_countries.created_at as j_addresses_countries_created_at,
	//         j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//         j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//         j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//         j_addresses_countries.country_code as j_addresses_countries_country_code,
	//         j_addresses_countries.lat as j_addresses_countries_lat,
	//         j_addresses_countries.lng as j_addresses_countries_lng,
	//         -- states
	//         -- j_addresses_states.id as j_addresses_states_id,
	//         j_addresses_states.state as j_addresses_states_state,
	//         j_addresses_states.countries_id as j_addresses_states_countries_id,
	//         j_addresses_states.created_at as j_addresses_states_created_at,
	//         j_addresses_states.updated_at as j_addresses_states_updated_at,
	//         j_addresses_states.lat as j_addresses_states_lat,
	//         j_addresses_states.lng as j_addresses_states_lng,
	//         -- cities
	//         -- j_addresses_cities.id as j_addresses_cities_id,
	//         j_addresses_cities.city as j_addresses_cities_city,
	//         j_addresses_cities.states_id as j_addresses_cities_states_id,
	//         j_addresses_cities.created_at as j_addresses_cities_created_at,
	//         j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//         j_addresses_cities.lat as j_addresses_cities_lat,
	//         j_addresses_cities.lng as j_addresses_cities_lng,
	// 		-- communities
	//     -- j_addresses_communities.id as j_addresses_communities_id,
	//     j_addresses_communities.community as j_addresses_communities_community,
	//     j_addresses_communities.cities_id as j_addresses_communities_cities_id,
	//     j_addresses_communities.created_at as j_addresses_communities_created_at,
	//     j_addresses_communities.updated_at as j_addresses_communities_updated_at,
	//     j_addresses_communities.lat as j_addresses_communities_lat,
	//     j_addresses_communities.lng as j_addresses_communities_lng,
	// 	-- sub_communities
	//     -- j_addresses_sub_communities.id as j_addresses_sub_communities_id,
	//     j_addresses_sub_communities.sub_community as j_addresses_sub_communities_sub_community,
	//     j_addresses_sub_communities.communities_id as j_addresses_sub_communities_communities_id,
	//     j_addresses_sub_communities.created_at as j_addresses_sub_communities_created_at,
	//     j_addresses_sub_communities.updated_at as j_addresses_sub_communities_updated_at,
	//     j_addresses_sub_communities.lat as j_addresses_sub_communities_lat,
	//     j_addresses_sub_communities.lng as j_addresses_sub_communities_lng
	//     from broker_companies_branches as model
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	// 	LEFT JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//     LEFT JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//     WHERE
	//       (
	//         COALESCE($1::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//         model.id = ANY(COALESCE($1::bigint[], ARRAY[]::bigint[]))
	//       ) AND
	//       (
	//         COALESCE($2::boolean[], ARRAY[]::boolean[]) = ARRAY[]::boolean[] OR
	//         model.is_branch = ANY(COALESCE($2::boolean[], ARRAY[]::boolean[]))
	//       )
	// )
	// SELECT
	//   *
	// from x
	// LIMIT 1;
	// -- name: GetTopBrokerCompaniesCount :one
	// with x as (
	//     SELECT DISTINCT ON (model.id)
	// 	model.id
	//     from broker_companies as model
	// 	WHERE is_verified = ANY($1::boolean[])
	// 	AND
	// 	CASE
	//         WHEN $2::bigint = 0 THEN true
	//         WHEN $2::bigint = 1 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $3)
	//     END
	// 	AND
	// 	CASE
	//         WHEN $4::bigint = 0 THEN true
	//         WHEN $4::bigint = 1 THEN model.country_id = $5
	//     END
	// UNION ALL
	//     SELECT DISTINCT ON (model.id)
	//         model.id
	//     from broker_companies_branches as model
	// 	WHERE is_verified = ANY($1::boolean[])
	// 	AND
	// 	CASE
	//         WHEN $2::bigint = 0 THEN true
	//         WHEN $2::bigint = 1 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $3)
	//     END
	// 	AND
	// 	CASE
	//         WHEN $4::bigint = 0 THEN true
	//         WHEN $4::bigint = 1 THEN model.country_id = $5
	//     END
	// )
	// SELECT
	//   COUNT(*)
	// from x;
	// -- name: GetTopPropertiesByBrokerCompanyId :many
	// with x as (
	//   SELECT
	//     DISTINCT ON (id)
	//     --
	//     model.id,
	//     model.broker_companies_id,
	//     model.property_types_id,
	//     model.addresses_id,
	//     model.property_rank,
	// 	model.is_verified,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     j_property_types.icon as j_property_types_icon,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	// 	-- communities
	//     j_addresses_communities.id as j_addresses_communities_id,
	//     j_addresses_communities.community as j_addresses_communities_community,
	//     j_addresses_communities.cities_id as j_addresses_communities_cities_id,
	//     j_addresses_communities.created_at as j_addresses_communities_created_at,
	//     j_addresses_communities.updated_at as j_addresses_communities_updated_at,
	//     j_addresses_communities.lat as j_addresses_communities_lat,
	//     j_addresses_communities.lng as j_addresses_communities_lng,
	// 	-- sub_communities
	//     j_addresses_sub_communities.id as j_addresses_sub_communities_id,
	//     j_addresses_sub_communities.sub_community as j_addresses_sub_communities_sub_community,
	//     j_addresses_sub_communities.communities_id as j_addresses_sub_communities_communities_id,
	//     j_addresses_sub_communities.created_at as j_addresses_sub_communities_created_at,
	//     j_addresses_sub_communities.updated_at as j_addresses_sub_communities_updated_at,
	//     j_addresses_sub_communities.lat as j_addresses_sub_communities_lat,
	//     j_addresses_sub_communities.lng as j_addresses_sub_communities_lng
	//   FROM
	//     (
	//       SELECT id, broker_companies_id, property_types_id, addresses_id, property_rank,is_verified
	//       FROM agricultural_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id, property_types_id, addresses_id, property_rank, is_verified
	//       FROM agricultural_broker_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id, property_types_id, addresses_id, property_rank, is_verified
	//       FROM broker_company_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id, property_types_id, addresses_id, property_rank, is_verified
	//       FROM broker_company_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id, property_types_id, addresses_id, property_rank, is_verified
	//       FROM industrial_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id, property_types_id, addresses_id, property_rank, is_verified
	//       FROM industrial_broker_agent_properties_branch
	//     ) AS model
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	// 	LEFT JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//     LEFT JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//   WHERE
	//     (
	//       COALESCE($3::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_id = ANY(COALESCE($3::bigint[], ARRAY[]::bigint[]))
	//     )
	// )
	// SELECT
	//     *
	// FROM
	//   x
	// LIMIT $1 OFFSET $2;
	// -- name: GetPropertyCountByBrokerCompanyId :one
	// with x as (
	//   SELECT
	//     DISTINCT ON (id)
	//     model.id,
	//     model.broker_companies_id
	//   FROM
	//     (
	//       SELECT id, broker_companies_id FROM agricultural_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM agricultural_broker_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id FROM broker_company_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id FROM industrial_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM industrial_broker_agent_properties_branch
	//     ) AS model
	//   WHERE
	//     (
	//       COALESCE(@id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_id = ANY(COALESCE(@id::bigint[], ARRAY[]::bigint[]))
	//     )
	// )
	// SELECT
	//   COUNT(*)
	// FROM
	//   x;
	// -- name: GetCompanyLeaders :many
	// SELECT
	//   id,
	//   name,
	//   position,
	//   description,
	//   image_url,
	//   is_branch,
	//   company_type,
	//   company_id,
	//   users_id,
	//   created_at,
	//   updated_at,
	//   is_verified
	// from leaders as model
	// WHERE
	//   (
	//     COALESCE($3::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//     model.company_id = ANY(COALESCE($3::bigint[], ARRAY[]::bigint[]))
	//   ) AND
	//   (
	//     COALESCE($4::boolean[], ARRAY[]::boolean[]) = ARRAY[]::boolean[] OR
	//     model.is_branch = ANY(COALESCE($4::boolean[], ARRAY[]::boolean[]))
	//   )
	// LIMIT $1 OFFSET $2;
	// -- name: GetAllAgentsByBrokerCompanyId :many
	// -- with x as (
	// --   SELECT DISTINCT ON (model.id)
	// --     --
	// --     model.id,
	// --     model.about,
	// --     model.about_arabic,
	// --     model.agent_rank,
	// --     model.botim,
	// --     model.brn,
	// --     model.brn_expiry,
	// --     model.broker_companies_id,
	// --     model.created_at,
	// --     model.experience_since,
	// --     model.facebook_profile_url,
	// --     model.is_verified,
	// --     model.linkedin_profile_url,
	// --     model.nationalities,
	// --     model.profiles_id,
	// --     model.service_areas,
	// --     model.status,
	// --     model.tawasal,
	// --     model.telegram,
	// --     model.twitter_profile_url,
	// --     model.updated_at,
	// --     model.users_id,
	// --     model.verification_document_url,
	// --     --
	// --     j_profiles.id as j_profiles_id,
	// --     j_profiles.first_name as j_profiles_first_name,
	// --     j_profiles.last_name as j_profiles_last_name,
	// --     j_profiles.addresses_id as j_profiles_addresses_id,
	// --     j_profiles.profile_image_url as j_profiles_profile_image_url,
	// --     j_profiles.phone_number as j_profiles_phone_number,
	// --     j_profiles.company_number as j_profiles_company_number,
	// --     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	// --     j_profiles.gender as j_profiles_gender,
	// --     j_profiles.all_languages_id as j_profiles_all_languages_id,
	// --     j_profiles.created_at as j_profiles_created_at,
	// --     j_profiles.updated_at as j_profiles_updated_at,
	// --     j_profiles.ref_no as j_profiles_ref_no,
	// --     j_profiles.cover_image_url as j_profiles_cover_image_url
	// --   FROM
	// --     (
	// --       SELECT
	// --         id,
	// --         about,
	// --         about_arabic,
	// --         agent_rank,
	// --         botim,
	// --         brn,
	// --         brn_expiry,
	// --         broker_companies_id,
	// --         created_at,
	// --         experience_since,
	// --         facebook_profile_url,
	// --         is_verified,
	// --         linkedin_profile_url,
	// --         nationalities,
	// --         profiles_id,
	// --         service_areas,
	// --         status,
	// --         tawasal,
	// --         telegram,
	// --         twitter_profile_url,
	// --         updated_at,
	// --         users_id,
	// --         verification_document_url
	// --       FROM broker_company_agents as model
	// --       UNION ALL
	// --       SELECT
	// --         id,
	// --         about,
	// --         about_arabic,
	// --         agent_rank,
	// --         botim,
	// --         brn,
	// --         brn_expiry,
	// --         broker_companies_branches_id as broker_companies_id,
	// --         created_at,
	// --         experience_since,
	// --         facebook_profile_url,
	// --         is_verified,
	// --         linkedin_profile_url,
	// --         nationalities,
	// --         profiles_id,
	// --         service_areas,
	// --         status,
	// --         tawasal,
	// --         telegram,
	// --         twitter_profile_url,
	// --         updated_at,
	// --         users_id,
	// --         verification_document_url
	// --       FROM broker_company_branches_agents as model
	// --     ) AS model
	// --     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	// -- )
	// -- SELECT
	// --     --
	// --     id,
	// --     about,
	// --     about_arabic,
	// --     agent_rank,
	// --     botim,
	// --     brn,
	// --     brn_expiry,
	// --     broker_companies_id,
	// --     created_at,
	// --     experience_since,
	// --     facebook_profile_url,
	// --     is_verified,
	// --     linkedin_profile_url,
	// --     nationalities,
	// --     profiles_id,
	// --     service_areas,
	// --     status,
	// --     tawasal,
	// --     telegram,
	// --     twitter_profile_url,
	// --     updated_at,
	// --     users_id,
	// --     verification_document_url,
	// --     --
	// --     j_profiles_id,
	// --     j_profiles_first_name,
	// --     j_profiles_last_name,
	// --     j_profiles_addresses_id,
	// --     j_profiles_profile_image_url,
	// --     j_profiles_phone_number,
	// --     j_profiles_company_number,
	// --     j_profiles_whatsapp_number,
	// --     j_profiles_gender,
	// --     j_profiles_all_languages_id,
	// --     j_profiles_created_at,
	// --     j_profiles_updated_at,
	// --     j_profiles_ref_no,
	// --     j_profiles_cover_image_url
	// -- FROM
	// --   x
	// -- LIMIT $1 OFFSET $2;
	// -- name: GetPropertyCountByBrokerAgentId :one
	// with x as (
	//   SELECT
	//     DISTINCT ON (id)
	//     model.id,
	//     model.broker_companies_id
	//   FROM
	//     (
	//       SELECT id, broker_companies_id FROM agricultural_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM agricultural_broker_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id FROM broker_company_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM broker_company_agent_properties_branch UNION ALL
	//       SELECT id, broker_companies_id FROM industrial_broker_agent_properties UNION ALL
	//       SELECT id, broker_companies_branches_id as broker_companies_id FROM industrial_broker_agent_properties_branch
	//     ) AS model
	//   WHERE
	//     (
	//       COALESCE(@id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_id = ANY(COALESCE(@id::bigint[], ARRAY[]::bigint[]))
	//     )
	// )
	// SELECT
	//   COUNT(*)
	// FROM
	//   x;
	// -- name: GetAllPropertiesByBrokerCompanyId :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_branch_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	// )
	// Select
	//   id,
	//   property_title,
	//   property_title_arabic,
	//   description,
	//   description_arabic,
	//   is_verified,
	//   property_rank,
	//   addresses_id,
	//   locations_id,
	//   property_types_id,
	//   status,
	//   created_at,
	//   updated_at,
	//   facilities_id,
	//   amenities_id,
	//   is_show_owner_info,
	//   property,
	//   countries_id,
	//   ref_no,
	//   category,
	//   investment,
	//   contract_start_datetime,
	//   contract_end_datetime,
	//   amount,
	//   unit_types,
	//   users_id,
	//   developer_company_name,
	//   sub_developer_company_name,
	//   broker_companies_id,
	//   broker_company_agents,
	//   is_branch,
	//   property_name,
	//   from_xml,
	//   freelancers_id,
	//   --
	//   j_property_types_id,
	//   j_property_types_type,
	//   j_property_types_code,
	//   j_property_types_is_residential,
	//   j_property_types_is_commercial,
	//   j_property_types_created_at,
	//   j_property_types_updated_at,
	//   j_property_types_property_type_facts_id,
	//   j_property_types_category,
	//   j_property_types_status,
	//   j_property_types_unit_types --
	//   j_broker_companies_id,
	//   j_broker_companies_company_name,
	//   j_broker_companies_description,
	//   j_broker_companies_logo_url,
	//   j_broker_companies_addresses_id,
	//   j_broker_companies_email,
	//   j_broker_companies_phone_number,
	//   j_broker_companies_whatsapp_number,
	//   j_broker_companies_commercial_license_no,
	//   j_broker_companies_commercial_license_file_url,
	//   j_broker_companies_commercial_license_expiry,
	//   j_broker_companies_rera_no,
	//   j_broker_companies_rera_file_url,
	//   j_broker_companies_rera_expiry,
	//   j_broker_companies_is_verified,
	//   j_broker_companies_website_url,
	//   j_broker_companies_cover_image_url,
	//   j_broker_companies_tag_line,
	//   j_broker_companies_vat_no,
	//   j_broker_companies_vat_status,
	//   j_broker_companies_vat_file_url,
	//   j_broker_companies_facebook_profile_url,
	//   j_broker_companies_instagram_profile_url,
	//   j_broker_companies_twitter_profile_url,
	//   j_broker_companies_no_of_employees,
	//   j_broker_companies_users_id,
	//   j_broker_companies_linkedin_profile_url,
	//   j_broker_companies_company_rank,
	//   j_broker_companies_status,
	//   j_broker_companies_country_id,
	//   j_broker_companies_company_type,
	//   j_broker_companies_is_branch,
	//   j_broker_companies_created_at,
	//   j_broker_companies_updated_at,
	//   j_broker_companies_ref_no,
	//   j_broker_companies_rera_registration_date,
	//   j_broker_companies_commercial_license_registration_date,
	//   j_broker_companies_commercial_license_issue_date,
	//   j_broker_companies_youtube_profile_url,
	//   j_broker_companies_orn_license_no,
	//   j_broker_companies_orn_license_file_url,
	//   j_broker_companies_orn_registration_date,
	//   j_broker_companies_orn_license_expiry,
	//   --
	//   j_addresses_id,
	//   j_addresses_communities_id,
	//   j_addresses_sub_communities_id,
	//   j_addresses_locations_id,
	//   j_addresses_created_at,
	//   j_addresses_updated_at,
	//   --
	//   j_addresses_countries_country,
	//   j_addresses_countries_flag,
	//   j_addresses_countries_created_at,
	//   j_addresses_countries_updated_at,
	//   j_addresses_countries_alpha2_code,
	//   j_addresses_countries_alpha3_code,
	//   j_addresses_countries_country_code,
	//   j_addresses_countries_lat,
	//   j_addresses_countries_lng,
	//   --
	//   j_addresses_states_state,
	//   j_addresses_states_countries_id,
	//   j_addresses_states_created_at,
	//   j_addresses_states_updated_at,
	//   j_addresses_states_lat,
	//   j_addresses_states_lng,
	//   --
	//   j_addresses_cities_city,
	//   j_addresses_cities_states_id,
	//   j_addresses_cities_created_at,
	//   j_addresses_cities_updated_at,
	//   j_addresses_cities_lat,
	//   j_addresses_cities_lng,
	//   --
	//   j_properties_media_id,
	//   j_properties_media_image_url,
	//   j_properties_media_image360_url,
	//   j_properties_media_video_url,
	//   j_properties_media_panaroma_url,
	//   j_properties_media_main_media_section,
	//   j_properties_media_created_at,
	//   j_properties_media_updated_at,
	//   j_properties_media_is_branch,
	//   --
	//   j_properties_facts_id,
	//   j_properties_facts_bedroom,
	//   j_properties_facts_bathroom,
	//   j_properties_facts_plot_area,
	//   j_properties_facts_built_up_area,
	//   j_properties_facts_view,
	//   j_properties_facts_furnished,
	//   j_properties_facts_ownership,
	//   j_properties_facts_completion_status,
	//   j_properties_facts_start_date,
	//   j_properties_facts_completion_date,
	//   j_properties_facts_handover_date,
	//   j_properties_facts_no_of_floor,
	//   j_properties_facts_no_of_units,
	//   j_properties_facts_min_area,
	//   j_properties_facts_max_area,
	//   j_properties_facts_service_charge,
	//   j_properties_facts_parking,
	//   j_properties_facts_ask_price,
	//   j_properties_facts_price,
	//   j_properties_facts_rent_type,
	//   j_properties_facts_no_of_payment,
	//   j_properties_facts_no_of_retail,
	//   j_properties_facts_no_of_pool,
	//   j_properties_facts_elevator,
	//   j_properties_facts_starting_price,
	//   j_properties_facts_life_style,
	//   j_properties_facts_properties_id,
	//   j_properties_facts_property,
	//   j_properties_facts_is_branch,
	//   j_properties_facts_created_at,
	//   j_properties_facts_updated_at,
	//   j_properties_facts_available_units,
	//   j_properties_facts_commercial_tax,
	//   j_properties_facts_municipality_tax,
	//   --
	//   j_broker_company_agents_about,
	//   j_broker_company_agents_about_arabic,
	//   j_broker_company_agents_agent_rank,
	//   j_broker_company_agents_botim,
	//   j_broker_company_agents_brn,
	//   j_broker_company_agents_brn_expiry,
	//   -- j_broker_company_agents_broker_companies_branches_id,
	//   -- j_broker_company_agents_broker_companies_id,
	//   j_broker_company_agents_created_at,
	//   j_broker_company_agents_experience_since,
	//   j_broker_company_agents_facebook_profile_url,
	//   j_broker_company_agents_id,
	//   j_broker_company_agents_is_verified,
	//   j_broker_company_agents_linkedin_profile_url,
	//   j_broker_company_agents_nationalities,
	//   j_broker_company_agents_profiles_id,
	//   j_broker_company_agents_service_areas,
	//   j_broker_company_agents_status,
	//   j_broker_company_agents_telegram,
	//   j_broker_company_agents_tawasal,
	//   j_broker_company_agents_twitter_profile_url,
	//   j_broker_company_agents_updated_at,
	//   j_broker_company_agents_users_id,
	//   j_broker_company_agents_verification_document_url,
	//   --
	//   j_addresses_countries_id,
	//   j_addresses_states_id,
	//   j_addresses_cities_id
	// from
	//   x
	// ORDER BY
	//   CASE WHEN @order_by :: bigint = 1 THEN created_at END DESC,
	//   CASE WHEN @order_by :: bigint = 2 THEN j_properties_facts_price END,
	//   CASE WHEN @order_by :: bigint = 3 THEN j_properties_facts_price END DESC,
	//   CASE WHEN @order_by :: bigint = 4 THEN j_properties_facts_bedroom END,
	//   CASE WHEN @order_by :: bigint = 5 THEN j_properties_facts_bedroom END DESC
	// LIMIT
	//   $1 OFFSET $2;
	// -- name: GetAllPropertiesCountByBrokerCompanyId :one
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_branch_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND -- (@is_verified::boolean is NULL OR model.is_verified = @is_verified::boolean) AND
	//     model.property_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@company_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@company_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN @section :: bigint = 1 THEN model.category = 'rent' WHEN @section :: bigint = 2 THEN model.category = 'sale' WHEN @section :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	// )
	// SELECT
	//   COUNT(*)
	// from x;
	// -- name: GetAllServicesByBrokerCompanyId :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     --
	//     model.id,
	//     model.broker_companies_id,
	//     model.created_at,
	//     model.services_id,
	//     model.updated_at,
	//     --
	//     j_broker_companies_id,
	//     j_broker_companies_addresses_id,
	//     j_broker_companies_commercial_license_expiry,
	//     j_broker_companies_commercial_license_file_url,
	//     j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies_commercial_license_no,
	//     j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies_company_name,
	//     j_broker_companies_company_rank,
	//     j_broker_companies_company_type,
	//     j_broker_companies_country_id,
	//     j_broker_companies_cover_image_url,
	//     j_broker_companies_created_at,
	//     j_broker_companies_description,
	//     j_broker_companies_email,
	//     j_broker_companies_facebook_profile_url,
	//     j_broker_companies_instagram_profile_url,
	//     j_broker_companies_is_branch,
	//     j_broker_companies_is_verified,
	//     j_broker_companies_linkedin_profile_url,
	//     j_broker_companies_logo_url,
	//     j_broker_companies_no_of_employees,
	//     j_broker_companies_orn_license_expiry,
	//     j_broker_companies_orn_license_file_url,
	//     j_broker_companies_orn_license_no,
	//     j_broker_companies_orn_registration_date,
	//     j_broker_companies_phone_number,
	//     j_broker_companies_ref_no,
	//     j_broker_companies_rera_expiry,
	//     j_broker_companies_rera_file_url,
	//     j_broker_companies_rera_issue_date,
	//     j_broker_companies_rera_no,
	//     j_broker_companies_rera_registration_date,
	//     j_broker_companies_status,
	//     j_broker_companies_tag_line,
	//     j_broker_companies_twitter_profile_url,
	//     j_broker_companies_updated_at,
	//     j_broker_companies_users_id,
	//     j_broker_companies_vat_file_url,
	//     j_broker_companies_vat_no,
	//     j_broker_companies_vat_status,
	//     j_broker_companies_website_url,
	//     j_broker_companies_whatsapp_number,
	//     j_broker_companies_youtube_profile_url
	//     --
	//     -- j_services.id as j_services_id,
	//     -- j_services.title as j_services_title,
	//     -- j_services.description as j_services_description,
	//     -- j_services.icon_url as j_services_icon_url,
	//     -- j_services.image_url as j_services_image_url,
	//     -- j_services.main_services_id as j_services_main_services_id,
	//     -- j_services.created_at as j_services_created_at,
	//     -- j_services.updated_at as j_services_updated_at
	//   FROM
	//     (
	//       SELECT
	//         model.id,
	//         model.broker_companies_id,
	//         model.created_at,
	//         model.services_id,
	//         model.updated_at,
	//         --
	//         j_broker_companies.id as j_broker_companies_id,
	//         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//         j_broker_companies.company_name as j_broker_companies_company_name,
	//         j_broker_companies.company_rank as j_broker_companies_company_rank,
	//         j_broker_companies.company_type as j_broker_companies_company_type,
	//         j_broker_companies.country_id as j_broker_companies_country_id,
	//         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//         j_broker_companies.created_at as j_broker_companies_created_at,
	//         j_broker_companies.description as j_broker_companies_description,
	//         j_broker_companies.email as j_broker_companies_email,
	//         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//         j_broker_companies.is_branch as j_broker_companies_is_branch,
	//         j_broker_companies.is_verified as j_broker_companies_is_verified,
	//         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//         j_broker_companies.logo_url as j_broker_companies_logo_url,
	//         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//         j_broker_companies.phone_number as j_broker_companies_phone_number,
	//         j_broker_companies.ref_no as j_broker_companies_ref_no,
	//         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//         j_broker_companies.rera_no as j_broker_companies_rera_no,
	//         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//         j_broker_companies.status as j_broker_companies_status,
	//         j_broker_companies.tag_line as j_broker_companies_tag_line,
	//         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//         j_broker_companies.updated_at as j_broker_companies_updated_at,
	//         j_broker_companies.users_id as j_broker_companies_users_id,
	//         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//         j_broker_companies.vat_no as j_broker_companies_vat_no,
	//         j_broker_companies.vat_status as j_broker_companies_vat_status,
	//         j_broker_companies.website_url as j_broker_companies_website_url,
	//         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	//       FROM broker_companies_services as model
	//       LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//       UNION ALL
	//       SELECT
	//         model.id,
	//         model.broker_companies_branches_id,
	//         model.created_at,
	//         model.services_id,
	//         model.updated_at,
	//         --
	//         j_broker_companies.id as j_broker_companies_id,
	//         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//         j_broker_companies.company_name as j_broker_companies_company_name,
	//         j_broker_companies.company_rank as j_broker_companies_company_rank,
	//         j_broker_companies.company_type as j_broker_companies_company_type,
	//         j_broker_companies.country_id as j_broker_companies_country_id,
	//         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//         j_broker_companies.created_at as j_broker_companies_created_at,
	//         j_broker_companies.description as j_broker_companies_description,
	//         j_broker_companies.email as j_broker_companies_email,
	//         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//         j_broker_companies.is_branch as j_broker_companies_is_branch,
	//         j_broker_companies.is_verified as j_broker_companies_is_verified,
	//         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//         j_broker_companies.logo_url as j_broker_companies_logo_url,
	//         j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//         j_broker_companies.phone_number as j_broker_companies_phone_number,
	//         j_broker_companies.ref_no as j_broker_companies_ref_no,
	//         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//         j_broker_companies.rera_no as j_broker_companies_rera_no,
	//         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//         j_broker_companies.status as j_broker_companies_status,
	//         j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//         j_broker_companies.tag_line as j_broker_companies_tag_line,
	//         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//         j_broker_companies.updated_at as j_broker_companies_updated_at,
	//         j_broker_companies.users_id as j_broker_companies_users_id,
	//         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//         j_broker_companies.vat_no as j_broker_companies_vat_no,
	//         j_broker_companies.vat_status as j_broker_companies_vat_status,
	//         j_broker_companies.website_url as j_broker_companies_website_url,
	//         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	//       FROM broker_companies_branches_services  as model
	//       LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     ) AS model
	//     LEFT JOIN services AS j_services ON j_services.id = ANY(model.services_id)
	//     LEFT JOIN addresses AS j_addresses ON j_broker_companies_addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//   WHERE
	//     j_broker_companies_is_verified = ANY($3 :: boolean[])
	//     AND
	//     j_broker_companies_company_rank = ANY($4 :: bigint[])
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//      )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_broker_companies_company_name) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   --   --
	// )
	// SELECT
	//     --
	//     id,
	//     broker_companies_id,
	//     created_at,
	//     services_id,
	//     updated_at,
	//     --
	//     j_broker_companies_id,
	//     j_broker_companies_addresses_id,
	//     j_broker_companies_commercial_license_expiry,
	//     j_broker_companies_commercial_license_file_url,
	//     j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies_commercial_license_no,
	//     j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies_company_name,
	//     j_broker_companies_company_rank,
	//     j_broker_companies_company_type,
	//     j_broker_companies_country_id,
	//     j_broker_companies_cover_image_url,
	//     j_broker_companies_created_at,
	//     j_broker_companies_description,
	//     j_broker_companies_email,
	//     j_broker_companies_facebook_profile_url,
	//     j_broker_companies_instagram_profile_url,
	//     j_broker_companies_is_branch,
	//     j_broker_companies_is_verified,
	//     j_broker_companies_linkedin_profile_url,
	//     j_broker_companies_logo_url,
	//     j_broker_companies_no_of_employees,
	//     j_broker_companies_orn_license_expiry,
	//     j_broker_companies_orn_license_file_url,
	//     j_broker_companies_orn_license_no,
	//     j_broker_companies_orn_registration_date,
	//     j_broker_companies_phone_number,
	//     j_broker_companies_ref_no,
	//     j_broker_companies_rera_expiry,
	//     j_broker_companies_rera_file_url,
	//     j_broker_companies_rera_issue_date,
	//     j_broker_companies_rera_no,
	//     j_broker_companies_rera_registration_date,
	//     j_broker_companies_status,
	//     j_broker_companies_tag_line,
	//     j_broker_companies_twitter_profile_url,
	//     j_broker_companies_updated_at,
	//     j_broker_companies_users_id,
	//     j_broker_companies_vat_file_url,
	//     j_broker_companies_vat_no,
	//     j_broker_companies_vat_status,
	//     j_broker_companies_website_url,
	//     j_broker_companies_whatsapp_number,
	//     j_broker_companies_youtube_profile_url
	//     --
	//     -- j_services_id,
	//     -- j_services_title,
	//     -- j_services_description,
	//     -- j_services_icon_url,
	//     -- j_services_image_url,
	//     -- j_services_main_services_id,
	//     -- j_services_created_at,
	//     -- j_services_updated_at
	// FROM
	//   x
	// ORDER BY
	//     CASE WHEN $11::bigint = 5 THEN created_at END DESC,
	//     CASE WHEN $11::bigint = 4 THEN created_at END,
	//     CASE WHEN $11::bigint = 3 THEN created_at END DESC,
	//     CASE WHEN $11::bigint = 2 THEN created_at END,
	//     CASE WHEN $11::bigint = 1 THEN created_at END DESC
	// LIMIT $1 OFFSET $2;
	// -- with x as (
	// --   SELECT DISTINCT ON (model.id)
	// --     --
	// --     model.id,
	// --     model.broker_companies_id,
	// --     model.created_at,
	// --     model.services_id,
	// --     model.updated_at,
	// --     --
	// --     j_broker_companies_id,
	// --     j_broker_companies_addresses_id,
	// --     j_broker_companies_commercial_license_expiry,
	// --     j_broker_companies_commercial_license_file_url,
	// --     j_broker_companies_commercial_license_issue_date,
	// --     j_broker_companies_commercial_license_no,
	// --     j_broker_companies_commercial_license_registration_date,
	// --     j_broker_companies_company_name,
	// --     j_broker_companies_company_rank,
	// --     j_broker_companies_company_type,
	// --     j_broker_companies_country_id,
	// --     j_broker_companies_cover_image_url,
	// --     j_broker_companies_created_at,
	// --     j_broker_companies_description,
	// --     j_broker_companies_email,
	// --     j_broker_companies_extra_license_files,
	// --     j_broker_companies_extra_license_names,
	// --     j_broker_companies_extra_license_nos,
	// --     j_broker_companies_facebook_profile_url,
	// --     j_broker_companies_instagram_profile_url,
	// --     j_broker_companies_is_branch,
	// --     j_broker_companies_is_verified,
	// --     j_broker_companies_linkedin_profile_url,
	// --     j_broker_companies_logo_url,
	// --     j_broker_companies_main_services_id,
	// --     j_broker_companies_no_of_employees,
	// --     j_broker_companies_orn_license_expiry,
	// --     j_broker_companies_orn_license_file_url,
	// --     j_broker_companies_orn_license_no,
	// --     j_broker_companies_orn_registration_date,
	// --     j_broker_companies_phone_number,
	// --     j_broker_companies_ref_no,
	// --     j_broker_companies_rera_expiry,
	// --     j_broker_companies_rera_file_url,
	// --     j_broker_companies_rera_issue_date,
	// --     j_broker_companies_rera_no,
	// --     j_broker_companies_rera_registration_date,
	// --     j_broker_companies_status,
	// --     j_broker_companies_subcompany_type,
	// --     j_broker_companies_tag_line,
	// --     j_broker_companies_twitter_profile_url,
	// --     j_broker_companies_updated_at,
	// --     j_broker_companies_users_id,
	// --     j_broker_companies_vat_file_url,
	// --     j_broker_companies_vat_no,
	// --     j_broker_companies_vat_status,
	// --     j_broker_companies_website_url,
	// --     j_broker_companies_whatsapp_number,
	// --     j_broker_companies_youtube_profile_url,
	// --     --
	// --     j_services.id as j_services_id,
	// --     j_services.title as j_services_title,
	// --     j_services.description as j_services_description,
	// --     j_services.icon_url as j_services_icon_url,
	// --     j_services.image_url as j_services_image_url,
	// --     j_services.main_services_id as j_services_main_services_id,
	// --     j_services.created_at as j_services_created_at,
	// --     j_services.updated_at as j_services_updated_at
	// --   FROM
	// --     (
	// --       SELECT
	// --         model.id,
	// --         model.broker_companies_id,
	// --         model.created_at,
	// --         model.services_id,
	// --         model.updated_at,
	// --         --
	// --         j_broker_companies.id as j_broker_companies_id,
	// --         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	// --         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	// --         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	// --         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	// --         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	// --         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	// --         j_broker_companies.company_name as j_broker_companies_company_name,
	// --         j_broker_companies.company_rank as j_broker_companies_company_rank,
	// --         j_broker_companies.company_type as j_broker_companies_company_type,
	// --         j_broker_companies.country_id as j_broker_companies_country_id,
	// --         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	// --         j_broker_companies.created_at as j_broker_companies_created_at,
	// --         j_broker_companies.description as j_broker_companies_description,
	// --         j_broker_companies.email as j_broker_companies_email,
	// --         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	// --         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	// --         j_broker_companies.is_branch as j_broker_companies_is_branch,
	// --         j_broker_companies.is_verified as j_broker_companies_is_verified,
	// --         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	// --         j_broker_companies.logo_url as j_broker_companies_logo_url,
	// --         j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	// --         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	// --         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	// --         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	// --         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	// --         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	// --         j_broker_companies.phone_number as j_broker_companies_phone_number,
	// --         j_broker_companies.ref_no as j_broker_companies_ref_no,
	// --         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	// --         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	// --         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	// --         j_broker_companies.rera_no as j_broker_companies_rera_no,
	// --         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	// --         j_broker_companies.status as j_broker_companies_status,
	// --         j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	// --         j_broker_companies.tag_line as j_broker_companies_tag_line,
	// --         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	// --         j_broker_companies.updated_at as j_broker_companies_updated_at,
	// --         j_broker_companies.users_id as j_broker_companies_users_id,
	// --         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	// --         j_broker_companies.vat_no as j_broker_companies_vat_no,
	// --         j_broker_companies.vat_status as j_broker_companies_vat_status,
	// --         j_broker_companies.website_url as j_broker_companies_website_url,
	// --         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	// --         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	// --       FROM broker_companies_services as model
	// --       LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	// --       UNION ALL
	// --       SELECT
	// --         model.id,
	// --         model.broker_companies_branches_id,
	// --         model.created_at,
	// --         model.services_id,
	// --         model.updated_at,
	// --         --
	// --         j_broker_companies.id as j_broker_companies_id,
	// --         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	// --         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	// --         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	// --         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	// --         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	// --         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	// --         j_broker_companies.company_name as j_broker_companies_company_name,
	// --         j_broker_companies.company_rank as j_broker_companies_company_rank,
	// --         j_broker_companies.company_type as j_broker_companies_company_type,
	// --         j_broker_companies.country_id as j_broker_companies_country_id,
	// --         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	// --         j_broker_companies.created_at as j_broker_companies_created_at,
	// --         j_broker_companies.description as j_broker_companies_description,
	// --         j_broker_companies.email as j_broker_companies_email,
	// --         j_broker_companies.extra_license_files as j_broker_companies_extra_license_files,
	// --         j_broker_companies.extra_license_names as j_broker_companies_extra_license_names,
	// --         j_broker_companies.extra_license_nos as j_broker_companies_extra_license_nos,
	// --         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	// --         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	// --         j_broker_companies.is_branch as j_broker_companies_is_branch,
	// --         j_broker_companies.is_verified as j_broker_companies_is_verified,
	// --         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	// --         j_broker_companies.logo_url as j_broker_companies_logo_url,
	// --         j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	// --         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	// --         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	// --         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	// --         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	// --         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	// --         j_broker_companies.phone_number as j_broker_companies_phone_number,
	// --         j_broker_companies.ref_no as j_broker_companies_ref_no,
	// --         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	// --         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	// --         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	// --         j_broker_companies.rera_no as j_broker_companies_rera_no,
	// --         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	// --         j_broker_companies.status as j_broker_companies_status,
	// --         j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	// --         j_broker_companies.tag_line as j_broker_companies_tag_line,
	// --         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	// --         j_broker_companies.updated_at as j_broker_companies_updated_at,
	// --         j_broker_companies.users_id as j_broker_companies_users_id,
	// --         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	// --         j_broker_companies.vat_no as j_broker_companies_vat_no,
	// --         j_broker_companies.vat_status as j_broker_companies_vat_status,
	// --         j_broker_companies.website_url as j_broker_companies_website_url,
	// --         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	// --         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	// --       FROM broker_companies_branches_services  as model
	// --       LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	// --     ) AS model
	// --     LEFT JOIN services AS j_services ON j_services.id = ANY(model.services_id)
	// --     LEFT JOIN addresses AS j_addresses ON j_broker_companies_addresses_id = j_addresses.id
	// --     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	// --     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	// --     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	// --   WHERE
	// --     j_broker_companies_is_verified = ANY(@is_verified :: boolean[])
	// --     AND
	// --     j_broker_companies_company_rank = ANY(@property_rank :: bigint[])
	// --     AND (
	// --       --  TODO! INZIMAM PLEASE FIX THIS
	// --       COALESCE(@broker_companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	// --       -- OR model.broker_companies_id = ANY(
	// --       --   COALESCE(@broker_company_agent_id, ARRAY[] :: bigint[])
	// --       -- )
	// --     )
	// --     AND (
	// --       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	// --       OR j_addresses.countries_id = ANY(
	// --         COALESCE(@country_id, ARRAY[] :: bigint[])
	// --       )
	// --     )
	// --     AND (
	// --       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	// --       OR j_addresses.states_id = ANY(
	// --         COALESCE(@state_id, ARRAY[] :: bigint[])
	// --       )
	// --     )
	// --     AND (
	// --       COALESCE(
	// --         @community_id, ARRAY[] :: bigint[]
	// --       ) = ARRAY[] :: bigint[]
	// --       OR j_addresses.communities_id = ANY(
	// --         COALESCE(
	// --           @community_id, ARRAY[] :: bigint[]
	// --         )
	// --       )
	// --     )
	// --     AND (
	// --       COALESCE(
	// --         @sub_community_id, ARRAY[] :: bigint[]
	// --       ) = ARRAY[] :: bigint[]
	// --       OR j_addresses.sub_communities_id = ANY(
	// --         COALESCE(
	// --           @sub_community_id, ARRAY[] :: bigint[]
	// --         )
	// --       )
	// --     )
	// --     AND (
	// --       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	// --       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	// --         array(
	// --           select
	// --             '%' || pt || '%'
	// --           from
	// --             unnest(@search_text :: TEXT[]) pt
	// --         ):: TEXT[]
	// --       )
	// --       OR LOWER(j_addresses_states.state) ILIKE ANY(
	// --         array(
	// --           select
	// --             '%' || pt || '%'
	// --           from
	// --             unnest(@search_text :: TEXT[]) pt
	// --         ):: TEXT[]
	// --       )
	// --       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	// --         array(
	// --           select
	// --             '%' || pt || '%'
	// --           from
	// --             unnest(@search_text :: TEXT[]) pt
	// --         ):: TEXT[]
	// --       )
	// --       OR LOWER(j_broker_companies_company_name) ILIKE ANY(
	// --         array(
	// --           select
	// --             '%' || pt || '%'
	// --           from
	// --             unnest(@search_text :: TEXT[]) pt
	// --         ):: TEXT[]
	// --       )
	// --     )
	// --   --   --
	// -- )
	// -- SELECT
	// --     --
	// --     id,
	// --     broker_companies_id,
	// --     created_at,
	// --     services_id,
	// --     updated_at,
	// --     --
	// --     j_broker_companies_id,
	// --     j_broker_companies_addresses_id,
	// --     j_broker_companies_commercial_license_expiry,
	// --     j_broker_companies_commercial_license_file_url,
	// --     j_broker_companies_commercial_license_issue_date,
	// --     j_broker_companies_commercial_license_no,
	// --     j_broker_companies_commercial_license_registration_date,
	// --     j_broker_companies_company_name,
	// --     j_broker_companies_company_rank,
	// --     j_broker_companies_company_type,
	// --     j_broker_companies_country_id,
	// --     j_broker_companies_cover_image_url,
	// --     j_broker_companies_created_at,
	// --     j_broker_companies_description,
	// --     j_broker_companies_email,
	// --     j_broker_companies_extra_license_files,
	// --     j_broker_companies_extra_license_names,
	// --     j_broker_companies_extra_license_nos,
	// --     j_broker_companies_facebook_profile_url,
	// --     j_broker_companies_instagram_profile_url,
	// --     j_broker_companies_is_branch,
	// --     j_broker_companies_is_verified,
	// --     j_broker_companies_linkedin_profile_url,
	// --     j_broker_companies_logo_url,
	// --     j_broker_companies_main_services_id,
	// --     j_broker_companies_no_of_employees,
	// --     j_broker_companies_orn_license_expiry,
	// --     j_broker_companies_orn_license_file_url,
	// --     j_broker_companies_orn_license_no,
	// --     j_broker_companies_orn_registration_date,
	// --     j_broker_companies_phone_number,
	// --     j_broker_companies_ref_no,
	// --     j_broker_companies_rera_expiry,
	// --     j_broker_companies_rera_file_url,
	// --     j_broker_companies_rera_issue_date,
	// --     j_broker_companies_rera_no,
	// --     j_broker_companies_rera_registration_date,
	// --     j_broker_companies_status,
	// --     j_broker_companies_subcompany_type,
	// --     j_broker_companies_tag_line,
	// --     j_broker_companies_twitter_profile_url,
	// --     j_broker_companies_updated_at,
	// --     j_broker_companies_users_id,
	// --     j_broker_companies_vat_file_url,
	// --     j_broker_companies_vat_no,
	// --     j_broker_companies_vat_status,
	// --     j_broker_companies_website_url,
	// --     j_broker_companies_whatsapp_number,
	// --     j_broker_companies_youtube_profile_url,
	// --     --
	// --     j_services_id,
	// --     j_services_title,
	// --     j_services_description,
	// --     j_services_icon_url,
	// --     j_services_image_url,
	// --     j_services_main_services_id,
	// --     j_services_created_at,
	// --     j_services_updated_at
	// -- FROM
	// --   x
	// -- LIMIT $1 OFFSET $2;
	// -- name: GetTopAgentsByBrokerCompanyId :many
	// with x as (
	//   SELECT
	//     DISTINCT ON (id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     model.broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     0 as broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     -- j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     -- j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@rank :: bigint[])
	//     AND (
	//       COALESCE(@companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE(@companies_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	//   UNION ALL
	//   SELECT
	//     DISTINCT ON (model.id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     0 as broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     model.broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@rank :: bigint[])
	//     AND (
	//       COALESCE(@companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_branches_id = ANY(
	//         COALESCE(@companies_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	// )
	// SELECT
	//   --
	//   id,
	//   agent_rank,
	//   brn,
	//   experience_since,
	//   users_id,
	//   nationalities,
	//   brn_expiry,
	//   verification_document_url,
	//   about,
	//   about_arabic,
	//   linkedin_profile_url,
	//   facebook_profile_url,
	//   twitter_profile_url,
	//   broker_companies_id,
	//   created_at,
	//   updated_at,
	//   status,
	//   is_verified,
	//   profiles_id,
	//   telegram,
	//   botim,
	//   tawasal,
	//   broker_companies_branches_id,
	//   --
	//   j_broker_companies_id,
	//   j_broker_companies_company_name,
	//   j_broker_companies_description,
	//   j_broker_companies_logo_url,
	//   j_broker_companies_addresses_id,
	//   j_broker_companies_email,
	//   j_broker_companies_phone_number,
	//   j_broker_companies_whatsapp_number,
	//   j_broker_companies_commercial_license_no,
	//   j_broker_companies_commercial_license_file_url,
	//   j_broker_companies_commercial_license_expiry,
	//   j_broker_companies_rera_no,
	//   j_broker_companies_rera_file_url,
	//   j_broker_companies_rera_expiry,
	//   j_broker_companies_is_verified,
	//   j_broker_companies_website_url,
	//   j_broker_companies_cover_image_url,
	//   j_broker_companies_tag_line,
	//   j_broker_companies_vat_no,
	//   j_broker_companies_vat_status,
	//   j_broker_companies_vat_file_url,
	//   j_broker_companies_facebook_profile_url,
	//   j_broker_companies_instagram_profile_url,
	//   j_broker_companies_twitter_profile_url,
	//   j_broker_companies_no_of_employees,
	//   j_broker_companies_users_id,
	//   j_broker_companies_linkedin_profile_url,
	//   j_broker_companies_company_rank,
	//   j_broker_companies_status,
	//   j_broker_companies_country_id,
	//   j_broker_companies_company_type,
	//   j_broker_companies_is_branch,
	//   j_broker_companies_created_at,
	//   j_broker_companies_updated_at,
	//   j_broker_companies_ref_no,
	//   j_broker_companies_rera_registration_date,
	//   j_broker_companies_rera_issue_date,
	//   j_broker_companies_commercial_license_registration_date,
	//   j_broker_companies_commercial_license_issue_date,
	//   j_broker_companies_youtube_profile_url,
	//   j_broker_companies_orn_license_no,
	//   j_broker_companies_orn_license_file_url,
	//   j_broker_companies_orn_registration_date,
	//   j_broker_companies_orn_license_expiry,
	//   --
	//   j_profiles_id,
	//   j_profiles_first_name,
	//   j_profiles_last_name,
	//   j_profiles_addresses_id,
	//   j_profiles_profile_image_url,
	//   j_profiles_phone_number,
	//   -- j_profiles_company_number,
	//   j_profiles_whatsapp_number,
	//   j_profiles_gender,
	//   -- j_profiles_all_languages_id,
	//   j_profiles_created_at,
	//   j_profiles_updated_at,
	//   j_profiles_ref_no,
	//   j_profiles_cover_image_url,
	//   --
	//   j_addresses_id,
	//   j_addresses_communities_id,
	//   j_addresses_sub_communities_id,
	//   j_addresses_locations_id,
	//   j_addresses_created_at,
	//   j_addresses_updated_at,
	//   --
	//   j_addresses_countries_country,
	//   j_addresses_countries_flag,
	//   j_addresses_countries_created_at,
	//   j_addresses_countries_updated_at,
	//   j_addresses_countries_alpha2_code,
	//   j_addresses_countries_alpha3_code,
	//   j_addresses_countries_country_code,
	//   j_addresses_countries_lat,
	//   j_addresses_countries_lng,
	//   --
	//   j_addresses_states_state,
	//   j_addresses_states_countries_id,
	//   j_addresses_states_created_at,
	//   j_addresses_states_updated_at,
	//   j_addresses_states_lat,
	//   j_addresses_states_lng,
	//   --
	//   j_addresses_cities_city,
	//   j_addresses_cities_states_id,
	//   j_addresses_cities_created_at,
	//   j_addresses_cities_updated_at,
	//   j_addresses_cities_lat,
	//   j_addresses_cities_lng,
	//   --
	//   j_addresses_countries_id,
	//   j_addresses_states_id,
	//   j_addresses_cities_id
	// from
	//   x
	// LIMIT
	//   $1 OFFSET $2;
	// -- name: GetTopAgentsCountByBrokerCompanyId :one
	// with x as (
	//   SELECT
	//     DISTINCT ON (id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     model.broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     0 as broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     -- j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     -- j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@rank :: bigint[])
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	//   UNION ALL
	//   SELECT
	//     DISTINCT ON (model.id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     0 as broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     model.broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@rank :: bigint[])
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         @sub_community_id, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           @sub_community_id, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	// )
	// SELECT
	//   COUNT(*)
	// FROM
	//   x;
	// -- name: GetPropertiesForBrokerCompanyByStatesCount :many
	// SELECT
	//   state_name,
	//   states_id,
	//   COUNT(*) as count
	// FROM
	//   (
	//     SELECT
	//       DISTINCT ON (model.id) j_addresses_states.state as state_name,
	//       j_addresses.states_id,
	//       -- COUNT(*) for the number of items in the same state
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_states.state
	//       ) as items_in_same_state
	//     FROM
	//       (
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties_branch
	//       ) AS model
	//       JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//       JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//       JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//       JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//       JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//       JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//       JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.property_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR model.broker_companies_id = ANY(
	//           COALESCE(@broker_companies_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         CASE WHEN @section :: bigint = 1 THEN j_unit_facts.category = 'rent' WHEN @section :: bigint = 2 THEN j_unit_facts.category = 'sale' WHEN @section :: bigint = 3 THEN j_unit_facts.category = 'exchange' ELSE FALSE END
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(model.property_title) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         -- OR LOWER(j_property_types.type) ILIKE ANY(
	//         --   array(
	//         --     select
	//         --       '%' || pt || '%'
	//         --     from
	//         --       unnest(@search_text :: TEXT[]) pt
	//         --   ):: TEXT[]
	//         -- )
	//         OR LOWER(model.property_title_arabic) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//       )
	//   ) AS subquery
	// GROUP BY
	//   state_name,
	//   states_id
	// ORDER BY
	//   states_id;
	// -- name: GetPropertiesForBrokerCompanyByCommunitiesCount :many
	// SELECT
	//   community_name,
	//   communities_id,
	//   COUNT(*) as count
	// FROM
	//   (
	//     SELECT
	//       DISTINCT ON (model.id) j_addresses_communities.community as community_name,
	//       j_addresses.communities_id,
	//       -- COUNT(*) for the number of items in the same community
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_communities.community
	//       ) as items_in_same_community
	//     FROM
	//       (
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties_branch
	//       ) AS model
	//       JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//       JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//       JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//       JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//       JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//       JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//       JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//       JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = COALESCE(model.broker_companies_id)
	//       JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.property_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR model.broker_companies_id = ANY(
	//           COALESCE(@broker_companies_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@states_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@states_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         CASE WHEN @section :: bigint = 1 THEN j_unit_facts.category = 'rent' WHEN @section :: bigint = 2 THEN j_unit_facts.category = 'sale' WHEN @section :: bigint = 3 THEN j_unit_facts.category = 'exchange' ELSE FALSE END
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(
	//           j_addresses_communities.community
	//         ) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(model.property_title) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_property_types.type) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(model.property_title_arabic) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//       )
	//   ) AS subquery
	// GROUP BY
	//   community_name,
	//   communities_id
	// ORDER BY
	//   communities_id;
	// -- name: GetPropertiesForBrokerCompanyBySubCommunitiesCount :many
	// SELECT
	//   sub_community_name,
	//   sub_communities_id,
	//   COUNT(*) as count
	// FROM
	//   (
	//     SELECT
	//       DISTINCT ON (model.id) j_addresses_sub_communities.sub_community as sub_community_name,
	//       j_addresses.sub_communities_id,
	//       -- COUNT(*) for the number of items in the same community
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_sub_communities.sub_community
	//       ) as items_in_same_community
	//     FROM
	//       (
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM agricultural_broker_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM broker_company_agent_properties_branch
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties
	//         UNION ALL
	//         SELECT
	//           id,
	//           broker_companies_branches_id as broker_companies_id,
	//           property_types_id,
	//           addresses_id,
	//           property_rank,
	//           is_verified,
	//           property_title,
	//           property_title_arabic
	//         FROM industrial_broker_agent_properties_branch
	//       ) AS model
	//       JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//       JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//       JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//       JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//       JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//       JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//       JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//       JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = COALESCE(model.broker_companies_id)
	//       JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.property_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR model.broker_companies_id = ANY(
	//           COALESCE(@broker_companies_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@states_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@states_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@communities_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.communities_id = ANY(
	//           COALESCE(@communities_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@states_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@states_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         CASE WHEN @section :: bigint = 1 THEN j_unit_facts.category = 'rent' WHEN @section :: bigint = 2 THEN j_unit_facts.category = 'sale' WHEN @section :: bigint = 3 THEN j_unit_facts.category = 'exchange' ELSE FALSE END
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(
	//           j_addresses_communities.community
	//         ) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(model.property_title) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_property_types.type) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(model.property_title_arabic) ILIKE ANY(
	//           array(
	//             SELECT
	//               '%' || pt || '%'
	//             FROM
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//       )
	//   ) AS subquery
	// GROUP BY
	//   sub_community_name,
	//   sub_communities_id
	// ORDER BY
	//   sub_communities_id;
	// -- name: GetAgentsForBrokerCompanyBySubCommunitiesCount :many
	// SELECT
	//   sub_community_name,
	//   sub_communities_id,
	//   COUNT(*) as count
	// FROM (
	//     SELECT
	//       DISTINCT ON (model.id) j_addresses_sub_communities.sub_community as sub_community_name,
	//       j_addresses.sub_communities_id,
	//       -- COUNT(*) for the number of items in the same sub-community
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_sub_communities.sub_community
	//       ) as items_in_same_sub_community
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	//   WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.agent_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//         model.broker_companies_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@state_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         ) = ARRAY[] :: bigint[]
	//         OR j_addresses.communities_id = ANY(
	//           COALESCE(
	//             @community_id, ARRAY[] :: bigint[]
	//           )
	//         )
	//       )
	//       -- AND (
	//       --   COALESCE(
	//       --     @sub_community_id, ARRAY[] :: bigint[]
	//       --   ) = ARRAY[] :: bigint[]
	//       --   OR j_addresses.sub_communities_id = ANY(
	//       --     COALESCE(
	//       --       @sub_community_id, ARRAY[] :: bigint[]
	//       --     )
	//       --   )
	//       -- )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         ) -- OR
	//         -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//         )
	//   UNION ALL
	//   SELECT
	//       DISTINCT ON (model.id) j_addresses_sub_communities.sub_community as sub_community_name,
	//       j_addresses.sub_communities_id,
	//       -- COUNT(*) for the number of items in the same sub-community
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_sub_communities.sub_community
	//       ) as items_in_same_sub_community
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN sub_communities AS j_addresses_sub_communities ON j_addresses.sub_communities_id = j_addresses_sub_communities.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	//   WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.agent_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//         model.broker_companies_branches_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@state_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(
	//           @community_id, ARRAY[] :: bigint[]
	//         ) = ARRAY[] :: bigint[]
	//         OR j_addresses.communities_id = ANY(
	//           COALESCE(
	//             @community_id, ARRAY[] :: bigint[]
	//           )
	//         )
	//       )
	//       -- AND (
	//       --   COALESCE(
	//       --     @sub_community_id, ARRAY[] :: bigint[]
	//       --   ) = ARRAY[] :: bigint[]
	//       --   OR j_addresses.sub_communities_id = ANY(
	//       --     COALESCE(
	//       --       @sub_community_id, ARRAY[] :: bigint[]
	//       --     )
	//       --   )
	//       -- )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         ) -- OR
	//         -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//         )
	// ) AS subquery
	// GROUP BY
	//   sub_community_name,
	//   sub_communities_id
	// ORDER BY
	//   sub_communities_id;
	// -- name: GetAgentsForBrokerCompanyByCommunitiesCount :many
	// SELECT
	//   community_name,
	//   communities_id,
	//   COUNT(*) as count
	// FROM (
	//   SELECT
	//     DISTINCT ON (model.id) j_addresses_communities.community as community_name,
	//     j_addresses.communities_id,
	//     -- COUNT(*) for the number of items in the same community
	//     COUNT(*) OVER (
	//       PARTITION BY j_addresses_communities.community
	//     ) as items_in_same_community
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE(@state_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     -- AND (
	//     --   COALESCE(
	//     --     @community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.communities_id = ANY(
	//     --     COALESCE(
	//     --       @community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     -- AND (
	//     --   COALESCE(
	//     --     @sub_community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.sub_communities_id = ANY(
	//     --     COALESCE(
	//     --       @sub_community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	//   UNION ALL
	//   SELECT
	//       DISTINCT ON (model.id) j_addresses_communities.community as community_name,
	//       j_addresses.communities_id,
	//       -- COUNT(*) for the number of items in the same community
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_communities.community
	//       ) as items_in_same_community
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN communities AS j_addresses_communities ON j_addresses.communities_id = j_addresses_communities.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	//   WHERE
	//       model.is_verified = ANY(@is_verified :: boolean[])
	//       AND model.agent_rank = ANY(@property_rank :: bigint[])
	//       AND (
	//         COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//         model.broker_companies_branches_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//       )
	//       AND (
	//         COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.countries_id = ANY(
	//           COALESCE(@country_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       AND (
	//         COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//         OR j_addresses.states_id = ANY(
	//           COALESCE(@state_id, ARRAY[] :: bigint[])
	//         )
	//       )
	//       -- AND (
	//       --   COALESCE(
	//       --     @community_id, ARRAY[] :: bigint[]
	//       --   ) = ARRAY[] :: bigint[]
	//       --   OR j_addresses.communities_id = ANY(
	//       --     COALESCE(
	//       --       @community_id, ARRAY[] :: bigint[]
	//       --     )
	//       --   )
	//       -- )
	//       -- AND (
	//       --   COALESCE(
	//       --     @sub_community_id, ARRAY[] :: bigint[]
	//       --   ) = ARRAY[] :: bigint[]
	//       --   OR j_addresses.sub_communities_id = ANY(
	//       --     COALESCE(
	//       --       @sub_community_id, ARRAY[] :: bigint[]
	//       --     )
	//       --   )
	//       -- )
	//       AND (
	//         COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//         OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_states.state) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         )
	//         OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//           array(
	//             select
	//               '%' || pt || '%'
	//             from
	//               unnest(@search_text :: TEXT[]) pt
	//           ):: TEXT[]
	//         ) -- OR
	//         -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//         -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//         )
	// ) AS subquery
	// GROUP BY
	//   community_name,
	//   communities_id
	// ORDER BY
	//   communities_id;
	// -- name: GetAgentsForBrokerCompanyByStatesCount :many
	// SELECT
	//   state_name,
	//   states_id,
	//   COUNT(*) as count
	// FROM (
	//     SELECT
	//       DISTINCT ON (model.id) j_addresses_states.state as state_name,
	//       j_addresses.states_id,
	//       -- COUNT(*) for the number of items in the same state
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_states.state
	//       ) as items_in_same_state
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     -- AND (
	//     --   COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.states_id = ANY(
	//     --     COALESCE(@state_id, ARRAY[] :: bigint[])
	//     --   )
	//     -- )
	//     -- AND (
	//     --   COALESCE(
	//     --     @community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.communities_id = ANY(
	//     --     COALESCE(
	//     --       @community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     -- AND (
	//     --   COALESCE(
	//     --     @sub_community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.sub_communities_id = ANY(
	//     --     COALESCE(
	//     --       @sub_community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	//   UNION ALL
	//   SELECT
	//       DISTINCT ON (model.id) j_addresses_states.state as state_name,
	//       j_addresses.states_id,
	//       -- COUNT(*) for the number of items in the same state
	//       COUNT(*) OVER (
	//         PARTITION BY j_addresses_states.state
	//       ) as items_in_same_state
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	//   WHERE
	//     model.is_verified = ANY(@is_verified :: boolean[])
	//     AND model.agent_rank = ANY(@property_rank :: bigint[])
	//     AND (
	//       COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]) = ARRAY[]::bigint[] OR
	//       model.broker_companies_branches_id = ANY(COALESCE(@broker_companies_id::bigint[], ARRAY[]::bigint[]))
	//     )
	//     AND (
	//       COALESCE(@country_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE(@country_id, ARRAY[] :: bigint[])
	//       )
	//     )
	//     -- AND (
	//     --   COALESCE(@state_id, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.states_id = ANY(
	//     --     COALESCE(@state_id, ARRAY[] :: bigint[])
	//     --   )
	//     -- )
	//     -- AND (
	//     --   COALESCE(
	//     --     @community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.communities_id = ANY(
	//     --     COALESCE(
	//     --       @community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     -- AND (
	//     --   COALESCE(
	//     --     @sub_community_id, ARRAY[] :: bigint[]
	//     --   ) = ARRAY[] :: bigint[]
	//     --   OR j_addresses.sub_communities_id = ANY(
	//     --     COALESCE(
	//     --       @sub_community_id, ARRAY[] :: bigint[]
	//     --     )
	//     --   )
	//     -- )
	//     AND (
	//       COALESCE(@search_text, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest(@search_text :: TEXT[]) pt
	//         ):: TEXT[]
	//       ) -- OR
	//       -- LOWER(model.property_title) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(j_property_types.type) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[]) OR
	//       -- LOWER(model.property_title_arabic) ILIKE ANY(array(select '%' || pt || '%' from unnest(@search_text::TEXT[]) pt)::TEXT[])
	//       )
	// ) AS subquery
	// GROUP BY
	//   state_name,
	//   states_id
	// ORDER BY
	//   states_id;
	// -- name: GetTopBrokerCompaniesWithFilter :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//       model.id,
	//       model.company_name,
	//       model.description,
	//       model.logo_url,
	//       model.addresses_id,
	//       model.email,
	//       model.phone_number,
	//       model.whatsapp_number,
	//       model.commercial_license_no,
	//       model.commercial_license_file_url,
	//       model.commercial_license_expiry,
	//       model.rera_no,
	//       model.rera_file_url,
	//       model.rera_expiry,
	//       model.is_verified,
	//       model.website_url,
	//       model.cover_image_url,
	//       model.tag_line,
	//       model.vat_no,
	//       model.vat_status,
	//       model.vat_file_url,
	//       model.facebook_profile_url,
	//       model.instagram_profile_url,
	//       model.twitter_profile_url,
	//       model.no_of_employees,
	//       model.users_id,
	//       model.linkedin_profile_url,
	//       model.company_rank,
	//       model.status,
	//       model.country_id,
	//       model.company_type,
	//       model.is_branch,
	//       model.created_at,
	//       model.updated_at,
	//       model.ref_no,
	//       model.rera_registration_date,
	//       model.rera_issue_date,
	//       model.commercial_license_registration_date,
	//       model.commercial_license_issue_date,
	//       model.youtube_profile_url,
	//       model.orn_license_no,
	//       model.orn_license_file_url,
	//       model.orn_registration_date,
	//       model.orn_license_expiry,
	//       0 as broker_companies_id
	//   from broker_companies as model
	// WHERE
	//   is_verified = ANY($3::boolean[])
	// AND
	//   (
	//   CASE
	//          WHEN $4 != 0 THEN country_id = $4
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($5::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.states_id = ANY($5::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($6::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = ANY($6::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($7::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.communities_id = ANY($7::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($8::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.sub_communities_id = ANY($8::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN $9 != '%%' THEN model.company_name ILIKE $9
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($10::bigint[], 1) > 0 THEN model.company_rank = ANY($10::bigint[])
	//     ELSE true
	//   END
	// )
	// UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//       model.id,
	//       model.company_name,
	//       model.description,
	//       model.logo_url,
	//       model.addresses_id,
	//       model.email,
	//       model.phone_number,
	//       model.whatsapp_number,
	//       model.commercial_license_no,
	//       model.commercial_license_file_url,
	//       model.commercial_license_expiry,
	//       model.rera_no,
	//       model.rera_file_url,
	//       model.rera_expiry,
	//       model.is_verified,
	//       model.website_url,
	//       model.cover_image_url,
	//       model.tag_line,
	//       model.vat_no,
	//       model.vat_status,
	//       model.vat_file_url,
	//       model.facebook_profile_url,
	//       model.instagram_profile_url,
	//       model.twitter_profile_url,
	//       model.no_of_employees,
	//       model.users_id,
	//       model.linkedin_profile_url,
	//       model.main_services_id,
	//       model.company_rank,
	//       model.status,
	//       model.country_id,
	//       model.company_type,
	//       model.is_branch,
	//       model.created_at,
	//       model.updated_at,
	//       model.subcompany_type,
	//       model.ref_no,
	//       model.rera_registration_date,
	//       model.rera_issue_date,
	//       model.commercial_license_registration_date,
	//       model.commercial_license_issue_date,
	//       model.youtube_profile_url,
	//       model.orn_license_no,
	//       model.orn_license_file_url,
	//       model.orn_registration_date,
	//       model.orn_license_expiry,
	//       model.broker_companies_id
	//   from broker_companies_branches as model
	// WHERE
	//   is_verified = ANY($3::boolean[])
	// AND
	//   (
	//   CASE
	//          WHEN $4 != 0 THEN country_id = $4
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($5::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.states_id = ANY($5::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($6::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = ANY($6::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($7::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.communities_id = ANY($7::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($8::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.sub_communities_id = ANY($8::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN $9 != '%%' THEN model.company_name ILIKE $9
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($10::bigint[], 1) > 0 THEN model.company_rank = ANY($10::bigint[])
	//     ELSE true
	//   END
	// )
	// )
	// SELECT
	// id,
	// company_name,
	// description,
	// logo_url,
	// addresses_id,
	// email,
	// phone_number,
	// whatsapp_number,
	// commercial_license_no,
	// commercial_license_file_url,
	// commercial_license_expiry,
	// rera_no,
	// rera_file_url,
	// rera_expiry,
	// is_verified,
	// website_url,
	// cover_image_url,
	// tag_line,
	// vat_no,
	// vat_status,
	// vat_file_url,
	// facebook_profile_url,
	// instagram_profile_url,
	// twitter_profile_url,
	// no_of_employees,
	// users_id,
	// linkedin_profile_url,
	// company_rank,
	// status,
	// country_id,
	// company_type,
	// is_branch,
	// created_at,
	// updated_at,
	// ref_no,
	// rera_registration_date,
	// rera_issue_date,
	// commercial_license_registration_date,
	// commercial_license_issue_date,
	// youtube_profile_url,
	// orn_license_no,
	// orn_license_file_url,
	// orn_registration_date,
	// orn_license_expiry,
	// broker_companies_id
	// from x
	// ORDER BY
	//     CASE WHEN $11::bigint = 5 THEN created_at END DESC,
	//     CASE WHEN $11::bigint = 4 THEN company_name END,
	//     CASE WHEN $11::bigint = 3 THEN company_name END DESC,
	//     CASE WHEN $11::bigint = 2 THEN created_at END,
	//     CASE WHEN $11::bigint = 1 THEN created_at END DESC
	// LIMIT $1 OFFSET $2;
	// -- name: GetCountTopBrokerCompaniesWithFilter :one
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//       model.id
	//   from broker_companies as model
	// WHERE
	//   is_verified = ANY($1::boolean[])
	// AND
	//   (
	//   CASE
	//          WHEN $2 != 0 THEN country_id = $2
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($3::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.states_id = ANY($3::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($4::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = ANY($4::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($5::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.communities_id = ANY($5::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($6::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.sub_communities_id = ANY($6::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN $7 != '%%' THEN model.company_name ILIKE $7
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($8::bigint[], 1) > 0 THEN model.company_rank = ANY($8::bigint[])
	//     ELSE true
	//   END
	// )
	// UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//       model.id
	//   from broker_companies_branches as model
	// WHERE
	//   is_verified = ANY($1::boolean[])
	// AND
	//   (
	//   CASE
	//          WHEN $2 != 0 THEN country_id = $2
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($3::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.states_id = ANY($3::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($4::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = ANY($4::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($5::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.communities_id = ANY($5::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($6::bigint[], 1) > 0 THEN model.addresses_id IN (SELECT id FROM addresses WHERE addresses.sub_communities_id = ANY($6::bigint[]))
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN $7 != '%%' THEN model.company_name ILIKE $7
	//     ELSE true
	//   END
	//   AND
	//   CASE
	//          WHEN ARRAY_LENGTH($8::bigint[], 1) > 0 THEN model.company_rank = ANY($8::bigint[])
	//     ELSE true
	//   END
	// )
	// )
	// SELECT
	// COUNT(*)
	// from x;
	// -- name: GetCountAllServicesByBrokerCompanyId :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     --
	//     model.id
	//   FROM
	//     (
	//       SELECT
	//         model.id,
	//         model.broker_companies_id,
	//         model.created_at,
	//         model.services_id,
	//         model.updated_at,
	//         --
	//         j_broker_companies.id as j_broker_companies_id,
	//         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//         j_broker_companies.company_name as j_broker_companies_company_name,
	//         j_broker_companies.company_rank as j_broker_companies_company_rank,
	//         j_broker_companies.company_type as j_broker_companies_company_type,
	//         j_broker_companies.country_id as j_broker_companies_country_id,
	//         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//         j_broker_companies.created_at as j_broker_companies_created_at,
	//         j_broker_companies.description as j_broker_companies_description,
	//         j_broker_companies.email as j_broker_companies_email,
	//         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//         j_broker_companies.is_branch as j_broker_companies_is_branch,
	//         j_broker_companies.is_verified as j_broker_companies_is_verified,
	//         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//         j_broker_companies.logo_url as j_broker_companies_logo_url,
	//         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//         j_broker_companies.phone_number as j_broker_companies_phone_number,
	//         j_broker_companies.ref_no as j_broker_companies_ref_no,
	//         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//         j_broker_companies.rera_no as j_broker_companies_rera_no,
	//         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//         j_broker_companies.status as j_broker_companies_status,
	//         j_broker_companies.tag_line as j_broker_companies_tag_line,
	//         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//         j_broker_companies.updated_at as j_broker_companies_updated_at,
	//         j_broker_companies.users_id as j_broker_companies_users_id,
	//         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//         j_broker_companies.vat_no as j_broker_companies_vat_no,
	//         j_broker_companies.vat_status as j_broker_companies_vat_status,
	//         j_broker_companies.website_url as j_broker_companies_website_url,
	//         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	//       FROM broker_companies_services as model
	//       LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//       UNION ALL
	//       SELECT
	//         model.id,
	//         model.broker_companies_branches_id,
	//         model.created_at,
	//         model.services_id,
	//         model.updated_at,
	//         --
	//         j_broker_companies.id as j_broker_companies_id,
	//         j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//         j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//         j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//         j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//         j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//         j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//         j_broker_companies.company_name as j_broker_companies_company_name,
	//         j_broker_companies.company_rank as j_broker_companies_company_rank,
	//         j_broker_companies.company_type as j_broker_companies_company_type,
	//         j_broker_companies.country_id as j_broker_companies_country_id,
	//         j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//         j_broker_companies.created_at as j_broker_companies_created_at,
	//         j_broker_companies.description as j_broker_companies_description,
	//         j_broker_companies.email as j_broker_companies_email,
	//         j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//         j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//         j_broker_companies.is_branch as j_broker_companies_is_branch,
	//         j_broker_companies.is_verified as j_broker_companies_is_verified,
	//         j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//         j_broker_companies.logo_url as j_broker_companies_logo_url,
	//         j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//         j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//         j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//         j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//         j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//         j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//         j_broker_companies.phone_number as j_broker_companies_phone_number,
	//         j_broker_companies.ref_no as j_broker_companies_ref_no,
	//         j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//         j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//         j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//         j_broker_companies.rera_no as j_broker_companies_rera_no,
	//         j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//         j_broker_companies.status as j_broker_companies_status,
	//         j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//         j_broker_companies.tag_line as j_broker_companies_tag_line,
	//         j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//         j_broker_companies.updated_at as j_broker_companies_updated_at,
	//         j_broker_companies.users_id as j_broker_companies_users_id,
	//         j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//         j_broker_companies.vat_no as j_broker_companies_vat_no,
	//         j_broker_companies.vat_status as j_broker_companies_vat_status,
	//         j_broker_companies.website_url as j_broker_companies_website_url,
	//         j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//         j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url
	//       FROM broker_companies_branches_services  as model
	//       LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     ) AS model
	//     LEFT JOIN services AS j_services ON j_services.id = ANY(model.services_id)
	//     LEFT JOIN addresses AS j_addresses ON j_broker_companies_addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//   WHERE
	//     j_broker_companies_is_verified = ANY($1 :: boolean[])
	//     AND
	//     j_broker_companies_company_rank = ANY($2 :: bigint[])
	//     AND (
	//       COALESCE($3, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR model.broker_companies_id = ANY(
	//         COALESCE($3, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($4, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($4, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $6, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $6, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($8 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($8 :: TEXT[]) pt
	//         ):: TEXT[]
	//      )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($8:: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_broker_companies_company_name) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($8 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   --   --
	// )
	// SELECT
	//     COUNT(*)
	// FROM
	//   x;
	// -- name: GetBrokerCompanyAgentAllDetailsByID :many
	// with x as (
	//   SELECT
	//     DISTINCT ON (id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     model.broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     0 as broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     -- j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     -- j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	// 	-- reviews
	//     j_reviews.id as review_id,
	//     j_reviews.rating as review_rating,
	//      j_reviews.profiles_id as review_profile_id,
	//     j_reviews.status as review_status,
	//     j_reviews.created_at as review_created_at,
	//     j_reviews.updated_at as review_updated_at,
	// 	j_reviews.users_id as review_users_id
	//   FROM
	//     broker_company_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON j_broker_companies.id = model.broker_companies_id
	// 	LEFT JOIN broker_agent_reviews AS j_reviews ON j_reviews.broker_company_agents_id = model.id
	//   WHERE
	//     CASE WHEN $1::boolean = false THEN model.id = $2
	// 	ELSE false
	// 	END
	//   UNION ALL
	//   SELECT
	//     DISTINCT ON (model.id) --
	//     model.id,
	//     model.agent_rank,
	//     model.brn,
	//     model.experience_since,
	//     model.users_id,
	//     model.nationalities,
	//     model.brn_expiry,
	//     model.verification_document_url,
	//     model.about,
	//     model.about_arabic,
	//     model.linkedin_profile_url,
	//     model.facebook_profile_url,
	//     model.twitter_profile_url,
	//     0 as broker_companies_id,
	//     model.created_at,
	//     model.updated_at,
	//     model.status,
	//     model.is_verified,
	//     model.profiles_id,
	//     model.telegram,
	//     model.botim,
	//     model.tawasal,
	//     model.broker_companies_branches_id,
	//     -- profiles
	//     j_profiles.id as j_profiles_id,
	//     j_profiles.first_name as j_profiles_first_name,
	//     j_profiles.last_name as j_profiles_last_name,
	//     j_profiles.addresses_id as j_profiles_addresses_id,
	//     j_profiles.profile_image_url as j_profiles_profile_image_url,
	//     j_profiles.phone_number as j_profiles_phone_number,
	//     j_profiles.company_number as j_profiles_company_number,
	//     j_profiles.whatsapp_number as j_profiles_whatsapp_number,
	//     j_profiles.gender as j_profiles_gender,
	//     j_profiles.all_languages_id as j_profiles_all_languages_id,
	//     j_profiles.created_at as j_profiles_created_at,
	//     j_profiles.updated_at as j_profiles_updated_at,
	//     j_profiles.ref_no as j_profiles_ref_no,
	//     j_profiles.cover_image_url as j_profiles_cover_image_url,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	// 	-- reviews
	//     j_reviews.id as review_id,
	//     j_reviews.rating as review_rating,
	//     j_reviews.profiles_id as review_profile_id,
	//     j_reviews.status as review_status,
	//     j_reviews.created_at as review_created_at,
	//     j_reviews.updated_at as review_updated_at,
	// 	j_reviews.users_id as review_users_id
	//   FROM
	//     broker_company_branches_agents AS model
	//     INNER JOIN users as j_users on model.users_id = j_users.id
	//     and j_users.user_types_id = 2
	//     LEFT JOIN profiles AS j_profiles ON model.profiles_id = j_profiles.id
	//     LEFT JOIN addresses AS j_addresses ON j_profiles.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON j_broker_companies.id = model.broker_companies_branches_id
	// 	LEFT JOIN broker_branch_agent_reviews AS j_reviews ON j_reviews.broker_company_branches_agents_id = model.id
	//   WHERE
	//      CASE WHEN $1::boolean = true THEN model.id = $2
	// 	ELSE false
	// 	END
	// )
	// SELECT
	//   --
	//   id,
	//   agent_rank,
	//   brn,
	//   experience_since,
	//   users_id,
	//   nationalities,
	//   brn_expiry,
	//   verification_document_url,
	//   about,
	//   about_arabic,
	//   linkedin_profile_url,
	//   facebook_profile_url,
	//   twitter_profile_url,
	//   broker_companies_id,
	//   created_at,
	//   updated_at,
	//   status,
	//   is_verified,
	//   profiles_id,
	//   telegram,
	//   botim,
	//   tawasal,
	//   broker_companies_branches_id,
	//   --
	//   j_broker_companies_id,
	//   j_broker_companies_company_name,
	//   j_broker_companies_description,
	//   j_broker_companies_logo_url,
	//   j_broker_companies_addresses_id,
	//   j_broker_companies_email,
	//   j_broker_companies_phone_number,
	//   j_broker_companies_whatsapp_number,
	//   j_broker_companies_commercial_license_no,
	//   j_broker_companies_commercial_license_file_url,
	//   j_broker_companies_commercial_license_expiry,
	//   j_broker_companies_rera_no,
	//   j_broker_companies_rera_file_url,
	//   j_broker_companies_rera_expiry,
	//   j_broker_companies_is_verified,
	//   j_broker_companies_website_url,
	//   j_broker_companies_cover_image_url,
	//   j_broker_companies_tag_line,
	//   j_broker_companies_vat_no,
	//   j_broker_companies_vat_status,
	//   j_broker_companies_vat_file_url,
	//   j_broker_companies_facebook_profile_url,
	//   j_broker_companies_instagram_profile_url,
	//   j_broker_companies_twitter_profile_url,
	//   j_broker_companies_no_of_employees,
	//   j_broker_companies_users_id,
	//   j_broker_companies_linkedin_profile_url,
	//   j_broker_companies_company_rank,
	//   j_broker_companies_status,
	//   j_broker_companies_country_id,
	//   j_broker_companies_company_type,
	//   j_broker_companies_is_branch,
	//   j_broker_companies_created_at,
	//   j_broker_companies_updated_at,
	//   j_broker_companies_ref_no,
	//   j_broker_companies_rera_registration_date,
	//   j_broker_companies_rera_issue_date,
	//   j_broker_companies_commercial_license_registration_date,
	//   j_broker_companies_commercial_license_issue_date,
	//   j_broker_companies_youtube_profile_url,
	//   j_broker_companies_orn_license_no,
	//   j_broker_companies_orn_license_file_url,
	//   j_broker_companies_orn_registration_date,
	//   j_broker_companies_orn_license_expiry,
	//   --
	//   j_profiles_id,
	//   j_profiles_first_name,
	//   j_profiles_last_name,
	//   j_profiles_addresses_id,
	//   j_profiles_profile_image_url,
	//   j_profiles_phone_number,
	//   -- j_profiles_company_number,
	//   j_profiles_whatsapp_number,
	//   j_profiles_gender,
	//   -- j_profiles_all_languages_id,
	//   j_profiles_created_at,
	//   j_profiles_updated_at,
	//   j_profiles_ref_no,
	//   j_profiles_cover_image_url,
	//   --
	//   j_addresses_id,
	//   j_addresses_communities_id,
	//   j_addresses_sub_communities_id,
	//   j_addresses_locations_id,
	//   j_addresses_created_at,
	//   j_addresses_updated_at,
	//   --
	//   j_addresses_countries_country,
	//   j_addresses_countries_flag,
	//   j_addresses_countries_created_at,
	//   j_addresses_countries_updated_at,
	//   j_addresses_countries_alpha2_code,
	//   j_addresses_countries_alpha3_code,
	//   j_addresses_countries_country_code,
	//   j_addresses_countries_lat,
	//   j_addresses_countries_lng,
	//   --
	//   j_addresses_states_state,
	//   j_addresses_states_countries_id,
	//   j_addresses_states_created_at,
	//   j_addresses_states_updated_at,
	//   j_addresses_states_lat,
	//   j_addresses_states_lng,
	//   --
	//   j_addresses_cities_city,
	//   j_addresses_cities_states_id,
	//   j_addresses_cities_created_at,
	//   j_addresses_cities_updated_at,
	//   j_addresses_cities_lat,
	//   j_addresses_cities_lng,
	//   --
	//   j_addresses_countries_id,
	//   j_addresses_states_id,
	//   j_addresses_cities_id
	// from
	//   x;
	// -- name: GetBrokerAgentAllPropertiesCompleteDetailsByCategory :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN agricultural_broker_agent_properties_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//      CASE WHEN $1 ::bool = false THEN model.broker_company_agents = $2::bigint
	// 		ELSE false
	// 	END
	//     AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN agricultural_broker_agent_properties_branch_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//      CASE WHEN $1 = true THEN model.broker_company_branches_agents = $2
	// 	ELSE false
	// 	END
	// 	AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//        -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//      CASE WHEN $1 = false THEN model.broker_company_agents = $2
	// 	ELSE false
	// 	END
	// 	AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//      CASE WHEN $1 = true THEN model.broker_company_branches_agents = $2
	// 	ELSE false
	// 	END
	// AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//      CASE WHEN $1 = false THEN model.broker_company_agents = $2
	// 	ELSE false
	// 	END
	// AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     CASE WHEN $1 = true THEN model.broker_company_branches_agents = $2
	// 	ELSE false
	// 	END
	//    AND (
	//       CASE WHEN $3 :: bigint = 1 THEN model.category = 'rent' WHEN $3 :: bigint = 2 THEN model.category = 'sale' WHEN $3 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	// )
	// Select
	//   id,
	//   property_title,
	//   property_title_arabic,
	//   description,
	//   description_arabic,
	//   is_verified,
	//   property_rank,
	//   addresses_id,
	//   locations_id,
	//   property_types_id,
	//   status,
	//   created_at,
	//   updated_at,
	//   facilities_id,
	//   amenities_id,
	//   is_show_owner_info,
	//   property,
	//   countries_id,
	//   ref_no,
	//   category,
	//   investment,
	//   contract_start_datetime,
	//   contract_end_datetime,
	//   amount,
	//   unit_types,
	//   users_id,
	//   developer_company_name,
	//   sub_developer_company_name,
	//   broker_companies_id,
	//   broker_company_agents,
	//   is_branch,
	//   property_name,
	//   from_xml,
	//   freelancers_id,
	//   --
	//   j_property_types_id,
	//   j_property_types_type,
	//   j_property_types_code,
	//   j_property_types_is_residential,
	//   j_property_types_is_commercial,
	//   j_property_types_created_at,
	//   j_property_types_updated_at,
	//   j_property_types_property_type_facts_id,
	//   j_property_types_category,
	//   j_property_types_status,
	//   j_property_types_unit_types
	//   --
	//   j_addresses_id,
	//   j_addresses_communities_id,
	//   j_addresses_sub_communities_id,
	//   j_addresses_locations_id,
	//   j_addresses_created_at,
	//   j_addresses_updated_at,
	//   --
	//   j_addresses_countries_country,
	//   j_addresses_countries_flag,
	//   j_addresses_countries_created_at,
	//   j_addresses_countries_updated_at,
	//   j_addresses_countries_alpha2_code,
	//   j_addresses_countries_alpha3_code,
	//   j_addresses_countries_country_code,
	//   j_addresses_countries_lat,
	//   j_addresses_countries_lng,
	//   --
	//   j_addresses_states_state,
	//   j_addresses_states_countries_id,
	//   j_addresses_states_created_at,
	//   j_addresses_states_updated_at,
	//   j_addresses_states_lat,
	//   j_addresses_states_lng,
	//   --
	//   j_addresses_cities_city,
	//   j_addresses_cities_states_id,
	//   j_addresses_cities_created_at,
	//   j_addresses_cities_updated_at,
	//   j_addresses_cities_lat,
	//   j_addresses_cities_lng,
	//   --
	//   j_properties_media_id,
	//   j_properties_media_image_url,
	//   j_properties_media_image360_url,
	//   j_properties_media_video_url,
	//   j_properties_media_panaroma_url,
	//   j_properties_media_main_media_section,
	//   j_properties_media_created_at,
	//   j_properties_media_updated_at,
	//   j_properties_media_is_branch,
	//   --
	//   j_properties_facts_id,
	//   j_properties_facts_bedroom,
	//   j_properties_facts_bathroom,
	//   j_properties_facts_plot_area,
	//   j_properties_facts_built_up_area,
	//   j_properties_facts_view,
	//   j_properties_facts_furnished,
	//   j_properties_facts_ownership,
	//   j_properties_facts_completion_status,
	//   j_properties_facts_start_date,
	//   j_properties_facts_completion_date,
	//   j_properties_facts_handover_date,
	//   j_properties_facts_no_of_floor,
	//   j_properties_facts_no_of_units,
	//   j_properties_facts_min_area,
	//   j_properties_facts_max_area,
	//   j_properties_facts_service_charge,
	//   j_properties_facts_parking,
	//   j_properties_facts_ask_price,
	//   j_properties_facts_price,
	//   j_properties_facts_rent_type,
	//   j_properties_facts_no_of_payment,
	//   j_properties_facts_no_of_retail,
	//   j_properties_facts_no_of_pool,
	//   j_properties_facts_elevator,
	//   j_properties_facts_starting_price,
	//   j_properties_facts_life_style,
	//   j_properties_facts_properties_id,
	//   j_properties_facts_property,
	//   j_properties_facts_is_branch,
	//   j_properties_facts_created_at,
	//   j_properties_facts_updated_at,
	//   j_properties_facts_available_units,
	//   j_properties_facts_commercial_tax,
	//   j_properties_facts_municipality_tax,
	//   --
	//   j_addresses_countries_id,
	//   j_addresses_states_id,
	//   j_addresses_cities_id
	// from
	//   x;
	// -- name: GetAllPropertiesByBrokerAgentIDWithFilter :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5::bool = true THEN model.broker_company_agents = $6::bigint
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     agricultural_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_branch_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5 = true THEN model.broker_company_branches_agents = $6
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5 = true THEN model.broker_company_agents = $6
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     broker_company_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5 = true THEN model.broker_company_branches_agents = $6
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     model.broker_companies_id,
	//     model.broker_company_agents,
	//     0 as freelancers_id,
	//     0 as broker_companies_branches_id,
	//     0 as broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5 = true THEN model.broker_company_agents = $6
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id,
	//     model.property_title,
	//     model.property_title_arabic,
	//     model.description,
	//     model.description_arabic,
	//     model.is_verified,
	//     model.property_rank,
	//     model.addresses_id,
	//     model.locations_id,
	//     model.property_types_id,
	//     model.status,
	//     model.created_at,
	//     model.updated_at,
	//     model.facilities_id,
	//     model.amenities_id,
	//     model.is_show_owner_info,
	//     model.property,
	//     model.countries_id,
	//     model.ref_no,
	//     model.category,
	//     model.investment,
	//     model.contract_start_datetime,
	//     model.contract_end_datetime,
	//     model.amount,
	//     model.unit_types,
	//     model.users_id,
	//     model.developer_company_name,
	//     model.sub_developer_company_name,
	//     model.is_branch,
	//     model.property_name,
	//     model.from_xml,
	//     0 as broker_companies_id,
	//     0 as broker_company_agents,
	//     0 as freelancers_id,
	//     model.broker_companies_branches_id,
	//     model.broker_company_branches_agents,
	//     -- property_types
	//     j_property_types.id as j_property_types_id,
	//     j_property_types.type as j_property_types_type,
	//     j_property_types.code as j_property_types_code,
	//     j_property_types.is_residential as j_property_types_is_residential,
	//     j_property_types.is_commercial as j_property_types_is_commercial,
	//     j_property_types.created_at as j_property_types_created_at,
	//     j_property_types.updated_at as j_property_types_updated_at,
	//     j_property_types.property_type_facts_id as j_property_types_property_type_facts_id,
	//     j_property_types.category as j_property_types_category,
	//     j_property_types.status as j_property_types_status,
	//     j_property_types.unit_types as j_property_types_unit_types,
	//     -- broker_companies
	//     j_broker_companies.id as j_broker_companies_id,
	//     j_broker_companies.company_name as j_broker_companies_company_name,
	//     j_broker_companies.description as j_broker_companies_description,
	//     j_broker_companies.logo_url as j_broker_companies_logo_url,
	//     j_broker_companies.addresses_id as j_broker_companies_addresses_id,
	//     j_broker_companies.email as j_broker_companies_email,
	//     j_broker_companies.phone_number as j_broker_companies_phone_number,
	//     j_broker_companies.whatsapp_number as j_broker_companies_whatsapp_number,
	//     j_broker_companies.commercial_license_no as j_broker_companies_commercial_license_no,
	//     j_broker_companies.commercial_license_file_url as j_broker_companies_commercial_license_file_url,
	//     j_broker_companies.commercial_license_expiry as j_broker_companies_commercial_license_expiry,
	//     j_broker_companies.rera_no as j_broker_companies_rera_no,
	//     j_broker_companies.rera_file_url as j_broker_companies_rera_file_url,
	//     j_broker_companies.rera_expiry as j_broker_companies_rera_expiry,
	//     j_broker_companies.is_verified as j_broker_companies_is_verified,
	//     j_broker_companies.website_url as j_broker_companies_website_url,
	//     j_broker_companies.cover_image_url as j_broker_companies_cover_image_url,
	//     j_broker_companies.tag_line as j_broker_companies_tag_line,
	//     j_broker_companies.vat_no as j_broker_companies_vat_no,
	//     j_broker_companies.vat_status as j_broker_companies_vat_status,
	//     j_broker_companies.vat_file_url as j_broker_companies_vat_file_url,
	//     j_broker_companies.facebook_profile_url as j_broker_companies_facebook_profile_url,
	//     j_broker_companies.instagram_profile_url as j_broker_companies_instagram_profile_url,
	//     j_broker_companies.twitter_profile_url as j_broker_companies_twitter_profile_url,
	//     j_broker_companies.no_of_employees as j_broker_companies_no_of_employees,
	//     j_broker_companies.users_id as j_broker_companies_users_id,
	//     j_broker_companies.linkedin_profile_url as j_broker_companies_linkedin_profile_url,
	//     j_broker_companies.main_services_id as j_broker_companies_main_services_id,
	//     j_broker_companies.company_rank as j_broker_companies_company_rank,
	//     j_broker_companies.status as j_broker_companies_status,
	//     j_broker_companies.country_id as j_broker_companies_country_id,
	//     j_broker_companies.company_type as j_broker_companies_company_type,
	//     j_broker_companies.is_branch as j_broker_companies_is_branch,
	//     j_broker_companies.created_at as j_broker_companies_created_at,
	//     j_broker_companies.updated_at as j_broker_companies_updated_at,
	//     j_broker_companies.subcompany_type as j_broker_companies_subcompany_type,
	//     j_broker_companies.ref_no as j_broker_companies_ref_no,
	//     j_broker_companies.rera_registration_date as j_broker_companies_rera_registration_date,
	//     j_broker_companies.rera_issue_date as j_broker_companies_rera_issue_date,
	//     j_broker_companies.commercial_license_registration_date as j_broker_companies_commercial_license_registration_date,
	//     j_broker_companies.commercial_license_issue_date as j_broker_companies_commercial_license_issue_date,
	//     j_broker_companies.youtube_profile_url as j_broker_companies_youtube_profile_url,
	//     j_broker_companies.orn_license_no as j_broker_companies_orn_license_no,
	//     j_broker_companies.orn_license_file_url as j_broker_companies_orn_license_file_url,
	//     j_broker_companies.orn_registration_date as j_broker_companies_orn_registration_date,
	//     j_broker_companies.orn_license_expiry as j_broker_companies_orn_license_expiry,
	//     -- addresses
	//     j_addresses.id as j_addresses_id,
	//     j_addresses.countries_id as j_addresses_countries_id,
	//     j_addresses.states_id as j_addresses_states_id,
	//     j_addresses.cities_id as j_addresses_cities_id,
	//     j_addresses.communities_id as j_addresses_communities_id,
	//     j_addresses.sub_communities_id as j_addresses_sub_communities_id,
	//     j_addresses.locations_id as j_addresses_locations_id,
	//     j_addresses.created_at as j_addresses_created_at,
	//     j_addresses.updated_at as j_addresses_updated_at,
	//     -- countries
	//     -- j_addresses_countries.id as j_addresses_countries_id,
	//     j_addresses_countries.country as j_addresses_countries_country,
	//     j_addresses_countries.flag as j_addresses_countries_flag,
	//     j_addresses_countries.created_at as j_addresses_countries_created_at,
	//     j_addresses_countries.updated_at as j_addresses_countries_updated_at,
	//     j_addresses_countries.alpha2_code as j_addresses_countries_alpha2_code,
	//     j_addresses_countries.alpha3_code as j_addresses_countries_alpha3_code,
	//     j_addresses_countries.country_code as j_addresses_countries_country_code,
	//     j_addresses_countries.lat as j_addresses_countries_lat,
	//     j_addresses_countries.lng as j_addresses_countries_lng,
	//     -- states
	//     -- j_addresses_states.id as j_addresses_states_id,
	//     j_addresses_states.state as j_addresses_states_state,
	//     j_addresses_states.countries_id as j_addresses_states_countries_id,
	//     j_addresses_states.created_at as j_addresses_states_created_at,
	//     j_addresses_states.updated_at as j_addresses_states_updated_at,
	//     j_addresses_states.lat as j_addresses_states_lat,
	//     j_addresses_states.lng as j_addresses_states_lng,
	//     -- cities
	//     -- j_addresses_cities.id as j_addresses_cities_id,
	//     j_addresses_cities.city as j_addresses_cities_city,
	//     j_addresses_cities.states_id as j_addresses_cities_states_id,
	//     j_addresses_cities.created_at as j_addresses_cities_created_at,
	//     j_addresses_cities.updated_at as j_addresses_cities_updated_at,
	//     j_addresses_cities.lat as j_addresses_cities_lat,
	//     j_addresses_cities.lng as j_addresses_cities_lng,
	//     -- Media
	//     j_properties_media.id as j_properties_media_id,
	//     j_properties_media.image_url as j_properties_media_image_url,
	//     j_properties_media.image360_url as j_properties_media_image360_url,
	//     j_properties_media.video_url as j_properties_media_video_url,
	//     j_properties_media.panaroma_url as j_properties_media_panaroma_url,
	//     j_properties_media.main_media_section as j_properties_media_main_media_section,
	//     j_properties_media.created_at as j_properties_media_created_at,
	//     j_properties_media.updated_at as j_properties_media_updated_at,
	//     j_properties_media.is_branch as j_properties_media_is_branch,
	//     -- agricultural_properties_facts
	//     j_properties_facts.id as j_properties_facts_id,
	//     j_properties_facts.bedroom as j_properties_facts_bedroom,
	//     j_properties_facts.bathroom as j_properties_facts_bathroom,
	//     j_properties_facts.plot_area as j_properties_facts_plot_area,
	//     j_properties_facts.built_up_area as j_properties_facts_built_up_area,
	//     j_properties_facts.view as j_properties_facts_view,
	//     j_properties_facts.furnished as j_properties_facts_furnished,
	//     j_properties_facts.ownership as j_properties_facts_ownership,
	//     j_properties_facts.completion_status as j_properties_facts_completion_status,
	//     j_properties_facts.start_date as j_properties_facts_start_date,
	//     j_properties_facts.completion_date as j_properties_facts_completion_date,
	//     j_properties_facts.handover_date as j_properties_facts_handover_date,
	//     j_properties_facts.no_of_floor as j_properties_facts_no_of_floor,
	//     j_properties_facts.no_of_units as j_properties_facts_no_of_units,
	//     j_properties_facts.min_area as j_properties_facts_min_area,
	//     j_properties_facts.max_area as j_properties_facts_max_area,
	//     j_properties_facts.service_charge as j_properties_facts_service_charge,
	//     j_properties_facts.parking as j_properties_facts_parking,
	//     j_properties_facts.ask_price as j_properties_facts_ask_price,
	//     j_properties_facts.price as j_properties_facts_price,
	//     j_properties_facts.rent_type as j_properties_facts_rent_type,
	//     j_properties_facts.no_of_payment as j_properties_facts_no_of_payment,
	//     j_properties_facts.no_of_retail as j_properties_facts_no_of_retail,
	//     j_properties_facts.no_of_pool as j_properties_facts_no_of_pool,
	//     j_properties_facts.elevator as j_properties_facts_elevator,
	//     j_properties_facts.starting_price as j_properties_facts_starting_price,
	//     j_properties_facts.life_style as j_properties_facts_life_style,
	//     j_properties_facts.properties_id as j_properties_facts_properties_id,
	//     j_properties_facts.property as j_properties_facts_property,
	//     j_properties_facts.is_branch as j_properties_facts_is_branch,
	//     j_properties_facts.created_at as j_properties_facts_created_at,
	//     j_properties_facts.updated_at as j_properties_facts_updated_at,
	//     j_properties_facts.available_units as j_properties_facts_available_units,
	//     j_properties_facts.commercial_tax as j_properties_facts_commercial_tax,
	//     j_properties_facts.municipality_tax as j_properties_facts_municipality_tax,
	//     -- j_broker_company_agents
	//     j_broker_company_agents.about as j_broker_company_agents_about,
	//     j_broker_company_agents.about_arabic as j_broker_company_agents_about_arabic,
	//     j_broker_company_agents.agent_rank as j_broker_company_agents_agent_rank,
	//     j_broker_company_agents.botim as j_broker_company_agents_botim,
	//     j_broker_company_agents.brn as j_broker_company_agents_brn,
	//     j_broker_company_agents.brn_expiry as j_broker_company_agents_brn_expiry,
	//     -- j_broker_company_agents.broker_companies_branches_id as j_broker_company_agents_broker_companies_branches_id,
	//     -- j_broker_company_agents.broker_companies_id as j_broker_company_agents_broker_companies_id,
	//     j_broker_company_agents.created_at as j_broker_company_agents_created_at,
	//     j_broker_company_agents.experience_since as j_broker_company_agents_experience_since,
	//     j_broker_company_agents.facebook_profile_url as j_broker_company_agents_facebook_profile_url,
	//     j_broker_company_agents.id as j_broker_company_agents_id,
	//     j_broker_company_agents.is_verified as j_broker_company_agents_is_verified,
	//     j_broker_company_agents.linkedin_profile_url as j_broker_company_agents_linkedin_profile_url,
	//     j_broker_company_agents.nationalities as j_broker_company_agents_nationalities,
	//     j_broker_company_agents.profiles_id as j_broker_company_agents_profiles_id,
	//     j_broker_company_agents.service_areas as j_broker_company_agents_service_areas,
	//     j_broker_company_agents.status as j_broker_company_agents_status,
	//     j_broker_company_agents.telegram as j_broker_company_agents_telegram,
	//     j_broker_company_agents.tawasal as j_broker_company_agents_tawasal,
	//     j_broker_company_agents.twitter_profile_url as j_broker_company_agents_twitter_profile_url,
	//     j_broker_company_agents.updated_at as j_broker_company_agents_updated_at,
	//     j_broker_company_agents.users_id as j_broker_company_agents_users_id,
	//     j_broker_company_agents.verification_document_url as j_broker_company_agents_verification_document_url,
	//     -- unit_facts
	//     j_unit_facts.id as j_unit_facts_id,
	//     j_unit_facts.category as j_unit_facts_category
	//   FROM
	//     industrial_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($3 :: boolean[])
	//     AND
	//     model.property_rank = ANY($4 :: bigint[])
	//     AND
	// CASE
	// WHEN $5 = true THEN model.broker_company_branches_agents = $6
	// ELSE false
	// END
	//     AND (
	//       COALESCE($7, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($7, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($8, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($8, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $9, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $9, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $10, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $10, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $11 :: bigint = 1 THEN model.category = 'rent' WHEN $11 :: bigint = 2 THEN model.category = 'sale' WHEN $11 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($12, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($12 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	// )
	// Select
	//   id,
	//   property_title,
	//   property_title_arabic,
	//   description,
	//   description_arabic,
	//   is_verified,
	//   property_rank,
	//   addresses_id,
	//   locations_id,
	//   property_types_id,
	//   status,
	//   created_at,
	//   updated_at,
	//   facilities_id,
	//   amenities_id,
	//   is_show_owner_info,
	//   property,
	//   countries_id,
	//   ref_no,
	//   category,
	//   investment,
	//   contract_start_datetime,
	//   contract_end_datetime,
	//   amount,
	//   unit_types,
	//   users_id,
	//   developer_company_name,
	//   sub_developer_company_name,
	//   broker_companies_id,
	//   broker_company_agents,
	//   is_branch,
	//   property_name,
	//   from_xml,
	//   freelancers_id,
	//   --
	//   j_property_types_id,
	//   j_property_types_type,
	//   j_property_types_code,
	//   j_property_types_is_residential,
	//   j_property_types_is_commercial,
	//   j_property_types_created_at,
	//   j_property_types_updated_at,
	//   j_property_types_property_type_facts_id,
	//   j_property_types_category,
	//   j_property_types_status,
	//   j_property_types_unit_types --
	//   j_broker_companies_id,
	//   j_broker_companies_company_name,
	//   j_broker_companies_description,
	//   j_broker_companies_logo_url,
	//   j_broker_companies_addresses_id,
	//   j_broker_companies_email,
	//   j_broker_companies_phone_number,
	//   j_broker_companies_whatsapp_number,
	//   j_broker_companies_commercial_license_no,
	//   j_broker_companies_commercial_license_file_url,
	//   j_broker_companies_commercial_license_expiry,
	//   j_broker_companies_rera_no,
	//   j_broker_companies_rera_file_url,
	//   j_broker_companies_rera_expiry,
	//   j_broker_companies_is_verified,
	//   j_broker_companies_website_url,
	//   j_broker_companies_cover_image_url,
	//   j_broker_companies_tag_line,
	//   j_broker_companies_vat_no,
	//   j_broker_companies_vat_status,
	//   j_broker_companies_vat_file_url,
	//   j_broker_companies_facebook_profile_url,
	//   j_broker_companies_instagram_profile_url,
	//   j_broker_companies_twitter_profile_url,
	//   j_broker_companies_no_of_employees,
	//   j_broker_companies_users_id,
	//   j_broker_companies_linkedin_profile_url,
	//   j_broker_companies_company_rank,
	//   j_broker_companies_status,
	//   j_broker_companies_country_id,
	//   j_broker_companies_company_type,
	//   j_broker_companies_is_branch,
	//   j_broker_companies_created_at,
	//   j_broker_companies_updated_at,
	//   j_broker_companies_ref_no,
	//   j_broker_companies_rera_registration_date,
	//   j_broker_companies_commercial_license_registration_date,
	//   j_broker_companies_commercial_license_issue_date,
	//   j_broker_companies_youtube_profile_url,
	//   j_broker_companies_orn_license_no,
	//   j_broker_companies_orn_license_file_url,
	//   j_broker_companies_orn_registration_date,
	//   j_broker_companies_orn_license_expiry,
	//   --
	//   j_addresses_id,
	//   j_addresses_communities_id,
	//   j_addresses_sub_communities_id,
	//   j_addresses_locations_id,
	//   j_addresses_created_at,
	//   j_addresses_updated_at,
	//   --
	//   j_addresses_countries_country,
	//   j_addresses_countries_flag,
	//   j_addresses_countries_created_at,
	//   j_addresses_countries_updated_at,
	//   j_addresses_countries_alpha2_code,
	//   j_addresses_countries_alpha3_code,
	//   j_addresses_countries_country_code,
	//   j_addresses_countries_lat,
	//   j_addresses_countries_lng,
	//   --
	//   j_addresses_states_state,
	//   j_addresses_states_countries_id,
	//   j_addresses_states_created_at,
	//   j_addresses_states_updated_at,
	//   j_addresses_states_lat,
	//   j_addresses_states_lng,
	//   --
	//   j_addresses_cities_city,
	//   j_addresses_cities_states_id,
	//   j_addresses_cities_created_at,
	//   j_addresses_cities_updated_at,
	//   j_addresses_cities_lat,
	//   j_addresses_cities_lng,
	//   --
	//   j_properties_media_id,
	//   j_properties_media_image_url,
	//   j_properties_media_image360_url,
	//   j_properties_media_video_url,
	//   j_properties_media_panaroma_url,
	//   j_properties_media_main_media_section,
	//   j_properties_media_created_at,
	//   j_properties_media_updated_at,
	//   j_properties_media_is_branch,
	//   --
	//   j_properties_facts_id,
	//   j_properties_facts_bedroom,
	//   j_properties_facts_bathroom,
	//   j_properties_facts_plot_area,
	//   j_properties_facts_built_up_area,
	//   j_properties_facts_view,
	//   j_properties_facts_furnished,
	//   j_properties_facts_ownership,
	//   j_properties_facts_completion_status,
	//   j_properties_facts_start_date,
	//   j_properties_facts_completion_date,
	//   j_properties_facts_handover_date,
	//   j_properties_facts_no_of_floor,
	//   j_properties_facts_no_of_units,
	//   j_properties_facts_min_area,
	//   j_properties_facts_max_area,
	//   j_properties_facts_service_charge,
	//   j_properties_facts_parking,
	//   j_properties_facts_ask_price,
	//   j_properties_facts_price,
	//   j_properties_facts_rent_type,
	//   j_properties_facts_no_of_payment,
	//   j_properties_facts_no_of_retail,
	//   j_properties_facts_no_of_pool,
	//   j_properties_facts_elevator,
	//   j_properties_facts_starting_price,
	//   j_properties_facts_life_style,
	//   j_properties_facts_properties_id,
	//   j_properties_facts_property,
	//   j_properties_facts_is_branch,
	//   j_properties_facts_created_at,
	//   j_properties_facts_updated_at,
	//   j_properties_facts_available_units,
	//   j_properties_facts_commercial_tax,
	//   j_properties_facts_municipality_tax,
	//   --
	//   j_broker_company_agents_about,
	//   j_broker_company_agents_about_arabic,
	//   j_broker_company_agents_agent_rank,
	//   j_broker_company_agents_botim,
	//   j_broker_company_agents_brn,
	//   j_broker_company_agents_brn_expiry,
	//   -- j_broker_company_agents_broker_companies_branches_id,
	//   -- j_broker_company_agents_broker_companies_id,
	//   j_broker_company_agents_created_at,
	//   j_broker_company_agents_experience_since,
	//   j_broker_company_agents_facebook_profile_url,
	//   j_broker_company_agents_id,
	//   j_broker_company_agents_is_verified,
	//   j_broker_company_agents_linkedin_profile_url,
	//   j_broker_company_agents_nationalities,
	//   j_broker_company_agents_profiles_id,
	//   j_broker_company_agents_service_areas,
	//   j_broker_company_agents_status,
	//   j_broker_company_agents_telegram,
	//   j_broker_company_agents_tawasal,
	//   j_broker_company_agents_twitter_profile_url,
	//   j_broker_company_agents_updated_at,
	//   j_broker_company_agents_users_id,
	//   j_broker_company_agents_verification_document_url,
	//   --
	//   j_addresses_countries_id,
	//   j_addresses_states_id,
	//   j_addresses_cities_id
	// from
	//   x
	// ORDER BY
	//   CASE WHEN $13 :: bigint = 1 THEN created_at END DESC,
	//   CASE WHEN $13 :: bigint = 2 THEN j_properties_facts_price END,
	//   CASE WHEN $13 :: bigint = 3 THEN j_properties_facts_price END DESC,
	//   CASE WHEN $13 :: bigint = 4 THEN j_properties_facts_bedroom END,
	//   CASE WHEN $13 :: bigint = 5 THEN j_properties_facts_bedroom END DESC
	// LIMIT $1 OFFSET $2;
	// -- name: GetCountPropertiesByBrokerAgentIDWithFilter :many
	// with x as (
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     agricultural_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3::bool = true THEN model.broker_company_agents = $4::bigint
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     agricultural_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN agricultural_broker_agent_properties_branch_media AS j_properties_media ON model.id = j_properties_media.agricultural_broker_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN agricultural_properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3 = true THEN model.broker_company_branches_agents = $4
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     broker_company_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3 = true THEN model.broker_company_agents = $4
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     broker_company_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3 = true THEN model.broker_company_branches_agents = $4
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     industrial_broker_agent_properties AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies AS j_broker_companies ON model.broker_companies_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3 = true THEN model.broker_company_agents = $4
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	//   UNION ALL
	//   SELECT DISTINCT ON (model.id)
	//     model.id
	//   FROM
	//     industrial_broker_agent_properties_branch AS model
	//     LEFT JOIN property_types AS j_property_types ON model.property_types_id = j_property_types.id
	//     LEFT JOIN broker_companies_branches AS j_broker_companies ON model.broker_companies_branches_id = j_broker_companies.id
	//     LEFT JOIN broker_company_agent_properties_media_branch AS j_properties_media ON model.id = j_properties_media.broker_company_agent_properties_branch_id
	//     LEFT JOIN addresses AS j_addresses ON model.addresses_id = j_addresses.id
	//     LEFT JOIN countries AS j_addresses_countries ON j_addresses.countries_id = j_addresses_countries.id
	//     LEFT JOIN states AS j_addresses_states ON j_addresses.states_id = j_addresses_states.id
	//     LEFT JOIN cities AS j_addresses_cities ON j_addresses.cities_id = j_addresses_cities.id
	//     LEFT JOIN unit_facts AS j_unit_facts ON j_unit_facts.unit_id = model.id
	//     LEFT JOIN broker_company_branches_agents AS j_broker_company_agents ON j_broker_company_agents.id = model.broker_company_branches_agents
	//     LEFT JOIN properties_facts AS j_properties_facts ON j_properties_facts.properties_id = model.id AND j_properties_facts.property = 3
	//   WHERE
	//     model.is_verified = ANY($1 :: boolean[])
	//     AND
	//     model.property_rank = ANY($2 :: bigint[])
	//     AND
	// CASE
	// WHEN $3 = true THEN model.broker_company_branches_agents = $4
	// ELSE false
	// END
	//     AND (
	//       COALESCE($5, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.countries_id = ANY(
	//         COALESCE($5, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE($6, ARRAY[] :: bigint[]) = ARRAY[] :: bigint[]
	//       OR j_addresses.states_id = ANY(
	//         COALESCE($6, ARRAY[] :: bigint[])
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $7, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.communities_id = ANY(
	//         COALESCE(
	//           $7, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       COALESCE(
	//         $8, ARRAY[] :: bigint[]
	//       ) = ARRAY[] :: bigint[]
	//       OR j_addresses.sub_communities_id = ANY(
	//         COALESCE(
	//           $8, ARRAY[] :: bigint[]
	//         )
	//       )
	//     )
	//     AND (
	//       CASE WHEN $9 :: bigint = 1 THEN model.category = 'rent' WHEN $9 :: bigint = 2 THEN model.category = 'sale' WHEN $9 :: bigint = 3 THEN model.category = 'exchange' ELSE FALSE END
	//     )
	//     AND (
	//       COALESCE($10, ARRAY[] :: TEXT[]) = ARRAY[] :: TEXT[]
	//       OR LOWER(j_addresses_countries.country) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_states.state) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_addresses_cities.city) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(j_property_types.type) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//       OR LOWER(model.property_title_arabic) ILIKE ANY(
	//         array(
	//           select
	//             '%' || pt || '%'
	//           from
	//             unnest($10 :: TEXT[]) pt
	//         ):: TEXT[]
	//       )
	//     )
	// )
	// Select
	// 	COUNT(*)
	// from
	//   x;
	GetCompanyUsersByUsersID(ctx context.Context, usersID int64) (CompanyUser, error)
	GetCompanyVerificationByEntity(ctx context.Context, arg GetCompanyVerificationByEntityParams) (CompanyVerification, error)
	GetCompleteAddress(ctx context.Context, id int64) (GetCompleteAddressRow, error)
	GetConctactsOtherContactByContactsID(ctx context.Context, contactsID int64) ([]ContactsOtherContact, error)
	// sc.user_id = $1 AND
	// JOIN users u ON sc.user_id = u.id
	GetConnectionWithNotStatus(ctx context.Context, arg GetConnectionWithNotStatusParams) ([]GetConnectionWithNotStatusRow, error)
	// sc.user_id = $1
	// AND
	// JOIN users u ON sc.user_id = u.id
	GetConnectionWithStatus(ctx context.Context, arg GetConnectionWithStatusParams) ([]GetConnectionWithStatusRow, error)
	// JOIN users u ON sc.user_id = u.id
	GetConnectionWithStatusRequesteBy(ctx context.Context, arg GetConnectionWithStatusRequesteByParams) ([]GetConnectionWithStatusRequesteByRow, error)
	// sc.user_id = $1 AND
	GetConnectionWithStatusUser(ctx context.Context, arg GetConnectionWithStatusUserParams) ([]GetConnectionWithStatusUserRow, error)
	GetConnectionsSettings(ctx context.Context, limit int32) (ConnectionsSetting, error)
	GetConnectionsSettingsByUserId(ctx context.Context, limit int32) (ConnectionsSetting, error)
	GetConsumedPlanPkgs(ctx context.Context, arg GetConsumedPlanPkgsParams) ([]GetConsumedPlanPkgsRow, error)
	GetContactAddressByAddressType(ctx context.Context, arg GetContactAddressByAddressTypeParams) (ContactsAddress, error)
	GetContactAddressByContactID(ctx context.Context, contactsID int64) (ContactsAddress, error)
	GetContactAddressByID(ctx context.Context, id int64) (ContactsAddress, error)
	GetContactStatus(ctx context.Context, id int64) (int64, error)
	GetContactsDocumentByContactsIdAndCategoryId(ctx context.Context, arg GetContactsDocumentByContactsIdAndCategoryIdParams) (GetContactsDocumentByContactsIdAndCategoryIdRow, error)
	GetContactsDocumentById(ctx context.Context, limit int32) (ContactsDocument, error)
	// -- name: GetSingleContact :one
	// select c.id, c.users_id, c.ref_no, c.contact_category_id, c.salutation, c.name, c.lastname, c.all_languages_id, c.ejari, c.assigned_to, c.shared_with, c.remarks, c.is_blockedlisted, c.is_vip, c.correspondence, c.direct_markerting, c.status, c.created_by, c.contact_platform, c.created_at, c.updated_at, c.updated_by,
	//     scd.id, scd.contacts_id, scd.mobile, scd.mobile_share, scd.mobile2, scd.mobile2_share, scd.landline, scd.landline_share, scd.fax, scd.fax_share, scd.email, scd.email_share, scd.second_email, scd.second_email_share, scd.added_by, scd.created_at, scd.updated_at,
	//      COALESCE(ra.id, 0) AS ra_id, COALESCE(ra.contacts_id, 0) AS ra_contacts_id, COALESCE(ra.address_type_id, 0) AS ra_address_type_id, COALESCE(ra.address1, '') AS ra_address1, COALESCE(ra.address2, '') AS ra_address2, COALESCE(ra.countries_id, 0) AS ra_countries_id, COALESCE(ra.states_id, 0) AS ra_states_id, COALESCE(ra.cities_id, 0) AS ra_cities_id, COALESCE(ra.community_id, 0) AS ra_community_id, COALESCE(ra.sub_community_id, 0) AS ra_sub_community_id, COALESCE(ra.postal_code, 0) AS ra_postal_code,
	//     COALESCE(ca.id, 0) AS ca_id, COALESCE(ca.contacts_id, 0) AS ca_contacts_id, COALESCE(ca.address_type_id, 0) AS ca_address_type_id, COALESCE(ca.address1, '') AS ca_address1, COALESCE(ca.address2, '') AS ca_address2, COALESCE(ca.countries_id, 0) AS ca_countries_id, COALESCE(ca.states_id, 0) AS ca_states_id, COALESCE(ca.cities_id, 0) AS ca_cities_id, COALESCE(ca.community_id, 0) AS ca_community_id, COALESCE(ca.sub_community_id, 0) AS ca_sub_community_id, COALESCE(ca.postal_code, 0) AS ca_postal_code,ccd.id, ccd.contacts_id, ccd.companies_id, ccd.company_category, ccd.is_branch, ccd.no_of_employees, ccd.industry_id, ccd.no_local_business, ccd.retail_category_id, ccd.no_remote_business, ccd.nationality, ccd.license, ccd.issued_date, ccd.expiry_date, ccd.external_id,
	//     cid.id, cid.contacts_id, cid.comapanies_id, cid.company_category, cid.is_branch, cid.date_of_birth, cid.professions_id, cid.gender, cid.marital_status, cid.nationality, cid.id_type, cid.id_number, cid.id_country_id, cid.id_issued_date, cid.id_expiry_date, cid.passport_number, cid.passport_country_id, cid.passport_issued_date, cid.passport_expiry_date, cid.interests,
	//     cn1.country as resident_country,ci1.city as resident_city,
	//     st1."state" as resident_state, com1.community as resident_community,
	//     scom1.sub_community as resident_sub_community,
	//     cn2.country as company_country,ci2.city as company_city,
	//     st2."state" as company_state, com2.community as company_community,
	//     scom2.sub_community as company_sub_community,
	//     c.id AS contact_id,
	//     c.created_by AS contact_created_by,
	//     c.updated_by AS contact_updated_by,
	//     u_created_by.username AS created_by_username,
	//     u_updated_by.username AS updated_by_username,
	//     c.all_languages_id AS contact_all_languages_id,
	//     COALESCE(languages, '{}') AS languages,
	//     c.assigned_to AS contact_assigned_to,
	//     COALESCE(assigned_usernames, '{}') AS assigned_usernames,
	//     c.shared_with AS contact_shared_with,
	//     COALESCE(shared_usernames, '{}') AS shared_usernames,
	//         i.title as company_industry,
	//     n1.country as company_nationality,
	//     rct.title as company_retail_cateogry,
	//     p.title as individual_profession,
	//     n2.country as individual_nationality,
	//     idci.country as individual_country_id,
	//     pci.country as individual_passport_country
	// FROM "public"."contacts" c
	// LEFT JOIN "public"."shareable_contact_details" scd ON c.id = scd.contacts_id
	// LEFT JOIN contacts_address ra ON c.id = ra.contacts_id AND ra.address_type_id = 1
	// left join countries cn1 on ra.countries_id = cn1.id
	// left join cities ci1 on ra.cities_id = ci1.id
	// left join states st1 on ra.states_id = st1.id
	// left join communities com1 on ra.community_id = com1.id
	// LEFT join sub_communities scom1 on ra.sub_community_id = scom1.id
	// LEFT JOIN contacts_address ca ON c.id = ca.contacts_id AND ca.address_type_id = 2
	// left join countries cn2 on ra.countries_id = cn2.id
	// left join cities ci2 on ra.cities_id = ci2.id
	// left join states st2 on ra.states_id = st2.id
	// left join communities com2 on ra.community_id = com2.id
	// LEFT join sub_communities scom2 on ra.sub_community_id = scom2.id
	// LEFT JOIN contacts_company_details ccd ON c.id = ccd.contacts_id AND c.contact_category_id = 1
	// left join industry i on ccd.industry_id = i.id
	// left join countries n1 on ccd.nationality = n1.id
	// left join retail_category rct on ccd.retail_category_id = rct.id
	// LEFT JOIN contacts_individual_details cid ON c.id = cid.contacts_id AND c.contact_category_id = 2
	// left join professions p on cid.professions_id = p.id
	// left join countries n2 on cid.nationality = n2.id
	// left join countries idci on cid.id_country_id = idci.id
	// left join countries pci on cid.passport_country_id = pci.id
	//     LEFT JOIN "public"."users" u_created_by ON c.created_by = u_created_by.id
	//     LEFT JOIN "public"."users" u_updated_by ON c.updated_by = u_updated_by.id
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(al.language)::varchar[] AS languages
	//         FROM unnest(c.all_languages_id) AS lang_id
	//         JOIN "public"."all_languages" al ON lang_id = al.id
	//     ) AS languages ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(au.username)::varchar[] AS assigned_usernames
	//         FROM unnest(c.assigned_to) AS assigned_id
	//         JOIN "public"."users" au ON assigned_id = au.id
	//     ) AS assigned_usernames ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(su.username)::varchar[] AS shared_usernames
	//         FROM unnest(c.shared_with) AS shared_id
	//         JOIN "public"."users" su ON shared_id = su.id
	//     ) AS shared_usernames ON TRUE WHERE c.status != 5 AND c.status != 6 AND c.id = $1;
	// -- name: GetSingleContactByMobile :one
	// select c.id, c.users_id, c.ref_no, c.contact_category_id, c.salutation, c.name, c.lastname, c.all_languages_id, c.ejari, c.assigned_to, c.shared_with, c.remarks, c.is_blockedlisted, c.is_vip, c.correspondence, c.direct_markerting, c.status, c.created_by, c.contact_platform, c.created_at, c.updated_at, c.updated_by,
	//     scd.id, scd.contacts_id, scd.mobile, scd.mobile_share, scd.mobile2, scd.mobile2_share, scd.landline, scd.landline_share, scd.fax, scd.fax_share, scd.email, scd.email_share, scd.second_email, scd.second_email_share, scd.added_by, scd.created_at, scd.updated_at,
	//      COALESCE(ra.id, 0) AS ra_id, COALESCE(ra.contacts_id, 0) AS ra_contacts_id, COALESCE(ra.address_type_id, 0) AS ra_address_type_id, COALESCE(ra.address1, '') AS ra_address1, COALESCE(ra.address2, '') AS ra_address2, COALESCE(ra.countries_id, 0) AS ra_countries_id, COALESCE(ra.states_id, 0) AS ra_states_id, COALESCE(ra.cities_id, 0) AS ra_cities_id, COALESCE(ra.community_id, 0) AS ra_community_id, COALESCE(ra.sub_community_id, 0) AS ra_sub_community_id, COALESCE(ra.postal_code, 0) AS ra_postal_code,
	//     COALESCE(ca.id, 0) AS ca_id, COALESCE(ca.contacts_id, 0) AS ca_contacts_id, COALESCE(ca.address_type_id, 0) AS ca_address_type_id, COALESCE(ca.address1, '') AS ca_address1, COALESCE(ca.address2, '') AS ca_address2, COALESCE(ca.countries_id, 0) AS ca_countries_id, COALESCE(ca.states_id, 0) AS ca_states_id, COALESCE(ca.cities_id, 0) AS ca_cities_id, COALESCE(ca.community_id, 0) AS ca_community_id, COALESCE(ca.sub_community_id, 0) AS ca_sub_community_id, COALESCE(ca.postal_code, 0) AS ca_postal_code,ccd.id, ccd.contacts_id, ccd.companies_id, ccd.company_category, ccd.is_branch, ccd.no_of_employees, ccd.industry_id, ccd.no_local_business, ccd.retail_category_id, ccd.no_remote_business, ccd.nationality, ccd.license, ccd.issued_date, ccd.expiry_date, ccd.external_id,
	//     cid.id, cid.contacts_id, cid.comapanies_id, cid.company_category, cid.is_branch, cid.date_of_birth, cid.professions_id, cid.gender, cid.marital_status, cid.nationality, cid.id_type, cid.id_number, cid.id_country_id, cid.id_issued_date, cid.id_expiry_date, cid.passport_number, cid.passport_country_id, cid.passport_issued_date, cid.passport_expiry_date, cid.interests,
	//     cn1.country as resident_country,ci1.city as resident_city,
	//     st1."state" as resident_state, com1.community as resident_community,
	//     scom1.sub_community as resident_sub_community,
	//     cn2.country as company_country,ci2.city as company_city,
	//     st2."state" as company_state, com2.community as company_community,
	//     scom2.sub_community as company_sub_community,
	//     c.id AS contact_id,
	//     c.created_by AS contact_created_by,
	//     c.updated_by AS contact_updated_by,
	//     u_created_by.username AS created_by_username,
	//     u_updated_by.username AS updated_by_username,
	//     c.all_languages_id AS contact_all_languages_id,
	//     COALESCE(languages, '{}') AS languages,
	//     c.assigned_to AS contact_assigned_to,
	//     COALESCE(assigned_usernames, '{}') AS assigned_usernames,
	//     c.shared_with AS contact_shared_with,
	//     COALESCE(shared_usernames, '{}') AS shared_usernames,
	//         i.title as company_industry,
	//     n1.country as company_nationality,
	//     rct.title as company_retail_cateogry,
	//     p.title as individual_profession,
	//     n2.country as individual_nationality,
	//     idci.country as individual_country_id,
	//     pci.country as individual_passport_country
	// FROM "public"."contacts" c
	// LEFT JOIN "public"."shareable_contact_details" scd ON c.id = scd.contacts_id
	// LEFT JOIN contacts_address ra ON c.id = ra.contacts_id AND ra.address_type_id = 1
	// left join countries cn1 on ra.countries_id = cn1.id
	// left join cities ci1 on ra.cities_id = ci1.id
	// left join states st1 on ra.states_id = st1.id
	// left join communities com1 on ra.community_id = com1.id
	// LEFT join sub_communities scom1 on ra.sub_community_id = scom1.id
	// LEFT JOIN contacts_address ca ON c.id = ca.contacts_id AND ca.address_type_id = 2
	// left join countries cn2 on ra.countries_id = cn2.id
	// left join cities ci2 on ra.cities_id = ci2.id
	// left join states st2 on ra.states_id = st2.id
	// left join communities com2 on ra.community_id = com2.id
	// LEFT join sub_communities scom2 on ra.sub_community_id = scom2.id
	// LEFT JOIN contacts_company_details ccd ON c.id = ccd.contacts_id AND c.contact_category_id = 1
	// left join industry i on ccd.industry_id = i.id
	// left join countries n1 on ccd.nationality = n1.id
	// left join retail_category rct on ccd.retail_category_id = rct.id
	// LEFT JOIN contacts_individual_details cid ON c.id = cid.contacts_id AND c.contact_category_id = 2
	// left join professions p on cid.professions_id = p.id
	// left join countries n2 on cid.nationality = n2.id
	// left join countries idci on cid.id_country_id = idci.id
	// left join countries pci on cid.passport_country_id = pci.id
	//     LEFT JOIN "public"."users" u_created_by ON c.created_by = u_created_by.id
	//     LEFT JOIN "public"."users" u_updated_by ON c.updated_by = u_updated_by.id
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(al.language)::varchar[] AS languages
	//         FROM unnest(c.all_languages_id) AS lang_id
	//         JOIN "public"."all_languages" al ON lang_id = al.id
	//     ) AS languages ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(au.username)::varchar[] AS assigned_usernames
	//         FROM unnest(c.assigned_to) AS assigned_id
	//         JOIN "public"."users" au ON assigned_id = au.id
	//     ) AS assigned_usernames ON TRUE
	//     LEFT JOIN LATERAL (
	//         SELECT array_agg(su.username)::varchar[] AS shared_usernames
	//         FROM unnest(c.shared_with) AS shared_id
	//         JOIN "public"."users" su ON shared_id = su.id
	//     ) AS shared_usernames ON TRUE
	// WHERE c.status != 5 AND c.status != 6 AND scd.mobile = $1;
	GetContactsDocumentByIdAndDocCategory(ctx context.Context, arg GetContactsDocumentByIdAndDocCategoryParams) (ContactsDocument, error)
	GetContactsRefNo(ctx context.Context) ([]string, error)
	GetContractsByCompany(ctx context.Context, arg GetContractsByCompanyParams) (Contract, error)
	GetCountActiveListingByBranchDeveloperCompanyId(ctx context.Context, developerCompanyBranchesID pgtype.Int8) (int64, error)
	GetCountActiveListingByDeveloperCompanyId(ctx context.Context, developerCompaniesID int64) (int64, error)
	GetCountAdvertisement(ctx context.Context) (int64, error)
	GetCountAgentReviews(ctx context.Context) (int64, error)
	GetCountAllAgentRoutes(ctx context.Context) (int64, error)
	//  INNER JOIN department ON users.department = department.id
	GetCountAllAqaryDeletedUser(ctx context.Context, search interface{}) (int64, error)
	GetCountAllAqaryMediaAds(ctx context.Context) (int64, error)
	GetCountAllAqaryMediaPosts(ctx context.Context) (int64, error)
	GetCountAllAqaryUser(ctx context.Context, search interface{}) (int64, error)
	GetCountAllAqaryUserByCountry(ctx context.Context, id int64) (int64, error)
	GetCountAllBannerOrder(ctx context.Context, activeStatus []int64) (int64, error)
	GetCountAllBrokerCompanyBranchByCompanyId(ctx context.Context, brokerCompaniesID int64) (int64, error)
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	//  LEFT  JOIN branch_companies ON branch_companies.companies_id = c.id
	// CASE WHEN @country_id::bigint = 0 THEN true WHEN @is_international::boolean = true THEN addresses.countries_id != @country_id::bigint ELSE addresses.countries_id = @country_id::bigint END
	//    ELSE '' = @localize::varchar AND addresses.countries_id = @country_id::bigint END
	GetCountAllCompanies(ctx context.Context, arg GetCountAllCompaniesParams) (int64, error)
	GetCountAllCompanyProfilePhasesByProject(ctx context.Context, arg GetCountAllCompanyProfilePhasesByProjectParams) (int64, error)
	GetCountAllCompanyProfilesByStatus(ctx context.Context, dollar_1 []int32) (int64, error)
	GetCountAllCompanyUsers(ctx context.Context, arg GetCountAllCompanyUsersParams) (int64, error)
	GetCountAllContactActivityHeaderByContactId(ctx context.Context, contactsID pgtype.Int8) (int64, error)
	GetCountAllContactNotes(ctx context.Context, contactsID pgtype.Int8) (int64, error)
	GetCountAllContactTransaction(ctx context.Context, contactsID pgtype.Int8) (int64, error)
	// -- name: GetSingleContactByUserId :one
	// select * from contacts where users_id = $1;
	// -- name: GetSingleContactDetailsByPhoneNumber :one
	// SELECT
	//     c.id AS contact_id,
	//     c.users_id,
	//     c.ref_no,
	//     c.contact_category_id,
	//     c.salutation,
	//     c.name,
	//     c.lastname,
	//     c.all_languages_id,
	//     c.ejari,
	//     c.assigned_to,
	//     c.shared_with,
	//     c.remarks,
	//     c.is_blockedlisted,
	//     c.is_vip,
	//     c.status,
	//     c.created_by,
	//     c.contact_platform,
	//     c.created_at AS contact_created_at,
	//     c.updated_at AS contact_updated_at,
	//     c.updated_by AS contact_updated_by,
	//     scd.id AS shareable_details_id,
	//     scd.mobile,
	//     scd.mobile_share,
	//     scd.mobile2,
	//     scd.mobile2_share,
	//     scd.landline,
	//     scd.landline_share,
	//     scd.fax,
	//     scd.fax_share,
	//     scd.email,
	//     scd.email_share,
	//     scd.second_email,
	//     scd.second_email_share,
	//     scd.added_by AS shareable_added_by,
	//     scd.created_at AS shareable_created_at,
	//     scd.updated_at AS shareable_updated_at
	// FROM
	//     contacts c
	// JOIN
	//     shareable_contact_details scd ON c.id = scd.contacts_id
	// WHERE
	//     scd.mobile = $1 LIMIT 1;
	GetCountAllContacts(ctx context.Context) (int64, error)
	GetCountAllContactsDocuments(ctx context.Context, contactsID pgtype.Int8) (int64, error)
	GetCountAllContactsOtherContactByContactsId(ctx context.Context, contactsID int64) (int64, error)
	GetCountAllDepartment(ctx context.Context, arg GetCountAllDepartmentParams) (int64, error)
	GetCountAllDeveloperCompanyBranchByCompanyId(ctx context.Context, developerCompaniesID int64) (int64, error)
	GetCountAllFaqsByComp(ctx context.Context, arg GetCountAllFaqsByCompParams) (int64, error)
	GetCountAllFaqsByStatus(ctx context.Context, arg GetCountAllFaqsByStatusParams) (int64, error)
	GetCountAllFinancialProviders(ctx context.Context) (int64, error)
	GetCountAllFinancialProvidersByIds(ctx context.Context, ids []int64) (int64, error)
	GetCountAllFollowers(ctx context.Context, followersID int64) (int64, error)
	GetCountAllFollowing(ctx context.Context, userID int64) (int64, error)
	// -- name: GetAllGeneralRequests :many
	// SELECT lgr.ref_no AS lead_general_request_ref_no,
	//        c.name AS contact_name,
	//        scd.mobile AS mobile,
	//        scd.email AS email,
	//        l.ref_no AS lead_ref_no,
	//        lgr.request_status
	// FROM lead_general_requests lgr
	// JOIN leads l ON lgr.lead_id = l.id
	// JOIN contacts c ON lgr.contact_id = c.id
	// JOIN shareable_contact_details scd ON c.id = scd.contacts_id
	// WHERE lgr.request_type = $1
	// ORDER BY lgr.id
	// LIMIT $2
	// OFFSET $3;
	GetCountAllGeneralRequests(ctx context.Context, requestType int64) (int64, error)
	GetCountAllInternalSharing(ctx context.Context, userID int64) (int64, error)
	GetCountAllJobPortals(ctx context.Context) (int64, error)
	GetCountAllLeadersByCompany(ctx context.Context, arg GetCountAllLeadersByCompanyParams) (int64, error)
	GetCountAllLeads(ctx context.Context) ([]int64, error)
	GetCountAllLeadsByContactId(ctx context.Context, contactsID int64) (int64, error)
	GetCountAllLeadsDocumentsByLeadId(ctx context.Context, leadsID pgtype.Int8) (int64, error)
	GetCountAllLeadsPropertiesByLeadId(ctx context.Context, leadsID pgtype.Int8) (int64, error)
	GetCountAllLuxuryPropertiesByCountry(ctx context.Context, countriesID int64) (int64, error)
	GetCountAllLuxuryPropertiesByNotEqualCountry(ctx context.Context, countriesID int64) (int64, error)
	GetCountAllOfferCategories(ctx context.Context) (int64, error)
	// SELECT COUNT(*) FROM users Where user_types_id = 5 and user_types_id != 6  and status != 5 and status != 6;
	GetCountAllOtherUser(ctx context.Context) (int64, error)
	GetCountAllOtherUserByCountry(ctx context.Context, id int64) (int64, error)
	GetCountAllPendingUser(ctx context.Context) (int64, error)
	GetCountAllPermissionSectionIds(ctx context.Context) (int64, error)
	GetCountAllPhasesByProject(ctx context.Context, arg GetCountAllPhasesByProjectParams) (int64, error)
	GetCountAllPhasesByStatus(ctx context.Context, arg GetCountAllPhasesByStatusParams) (int64, error)
	GetCountAllPhasesDocumentByPhaseId(ctx context.Context, phasesID int64) (int64, error)
	GetCountAllPhasesPlans(ctx context.Context, phasesID int64) (int64, error)
	GetCountAllProductsByCompanyID(ctx context.Context, companiesID int64) (int64, error)
	GetCountAllProjectDetailsWithAdvancedFilter(ctx context.Context, arg GetCountAllProjectDetailsWithAdvancedFilterParams) (int64, error)
	GetCountAllProjectMediaWithPagination(ctx context.Context, projectsID pgtype.Int8) (int64, error)
	GetCountAllProjectPosts(ctx context.Context) (int64, error)
	GetCountAllProjectPostsByPostedBy(ctx context.Context, postedBy int64) (int64, error)
	GetCountAllProjectPromotionByProjectID(ctx context.Context, arg GetCountAllProjectPromotionByProjectIDParams) (int64, error)
	GetCountAllProjectPropertiesByStatus(ctx context.Context, arg GetCountAllProjectPropertiesByStatusParams) (int64, error)
	GetCountAllProjectPropertyUnitTypesByStatus(ctx context.Context, arg GetCountAllProjectPropertyUnitTypesByStatusParams) (int64, error)
	GetCountAllProjectUnitsByStatus(ctx context.Context, arg GetCountAllProjectUnitsByStatusParams) (int64, error)
	GetCountAllProjectsByRank(ctx context.Context, projectRank int64) (int64, error)
	GetCountAllProjectsByRanksAndIsVerified(ctx context.Context, arg GetCountAllProjectsByRanksAndIsVerifiedParams) (int64, error)
	GetCountAllProjectsForMobile(ctx context.Context) (int64, error)
	GetCountAllProjectsForMobileIsVerified(ctx context.Context, isVerified pgtype.Bool) (int64, error)
	GetCountAllPropertiesReferences(ctx context.Context) (int64, error)
	GetCountAllPropertyHubByFacts(ctx context.Context) (int64, error)
	GetCountAllPropertyPlanById(ctx context.Context, arg GetCountAllPropertyPlanByIdParams) (int64, error)
	GetCountAllPropertyPosts(ctx context.Context) (int64, error)
	GetCountAllPropertyPostsByPostedBy(ctx context.Context, postedBy int64) (int64, error)
	// freelancers_properties
	// broker_company_agent_properties
	// broker_company_agent_properties_branch
	// owner_properties
	// agricultural_freelancer_properties
	// agricultural_broker_agent_properties
	// agricultural_broker_agent_properties_branch
	// agricultural_owner_properties
	// industrial_freelancer_properties
	// industrial_broker_agent_properties
	// industrial_broker_agent_properties_branch
	// industrial_owner_properties
	GetCountAllPropertyReviews(ctx context.Context, usersID int64) (int64, error)
	GetCountAllRentPropertyUnitPlanByUnit(ctx context.Context, rentPropertyUnitsID int64) (int64, error)
	GetCountAllReviewsByserviceCompanyID(ctx context.Context, arg GetCountAllReviewsByserviceCompanyIDParams) (int64, error)
	GetCountAllRolePermission(ctx context.Context, search interface{}) (int64, error)
	GetCountAllRoles(ctx context.Context, departmentID pgtype.Int8) (int64, error)
	GetCountAllRoutingTriggers(ctx context.Context) (int64, error)
	GetCountAllSalePropertyMediaByUnitId(ctx context.Context, salePropertyUnitsID int64) (int64, error)
	GetCountAllSalePropertyUnitPlanByUnit(ctx context.Context, salePropertyUnitsID int64) (int64, error)
	GetCountAllSectionPermission(ctx context.Context, search interface{}) (int64, error)
	GetCountAllSectionPermissionMV(ctx context.Context, search interface{}) (int64, error)
	GetCountAllServiceCompanyBranchByCompanyId(ctx context.Context, servicesCompaniesID int64) (int64, error)
	GetCountAllSingleContactDocuments(ctx context.Context, contactsID pgtype.Int8) (int64, error)
	GetCountAllSubCatgories(ctx context.Context, parentCategoryID pgtype.Int8) (int64, error)
	GetCountAllSubscriberDocuments(ctx context.Context, arg GetCountAllSubscriberDocumentsParams) (int64, error)
	GetCountAllSubsribersByStatus(ctx context.Context, status int64) (int64, error)
	GetCountAllTaxMangement(ctx context.Context) ([]int64, error)
	GetCountAllTaxMangementByCategoryType(ctx context.Context, taxCategoryType int64) ([]int64, error)
	GetCountAllTimeSlotsByProjectPropertyId(ctx context.Context, propertyID int64) (int64, error)
	GetCountAllUnitDocsByUnitId(ctx context.Context, unitsID int64) (int64, error)
	GetCountAllUnitPlansByUnit(ctx context.Context, unitsID int64) (int64, error)
	// SELECT unit_versions.*, units.* FROM unit_versions
	// INNER JOIN units ON unit_versions.unit_id = units.id
	// INNER JOIN addresses ON units.addresses_id = addresses.id
	// LEFT JOIN companies ON units.company_id = companies.id
	// WHERE unit_versions."type" = @type AND units.is_project_unit = @is_project_unit
	//   AND CASE WHEN @is_company_user != true THEN true ELSE companies.id = @company_id::bigint   END
	//   AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//   AND CASE WHEN @states_id::bigint = 0 Then true ELSE addresses.states_id = @states_id::bigint END
	//   AND CASE WHEN @cities_id::bigint = 0 Then true ELSE addresses.cities_id = @cities_id::bigint END
	//   AND CASE WHEN @communities_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//   AND CASE WHEN @sub_communities_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint END
	// --   AND (unit_versions.status NOT IN (@status::bigint[]))
	// --  AND   (unit_versions.status != ALL(@status::bigint[]))
	//  AND CASE WHEN @status::bigint = 0 THEN (unit_versions.status != ALL(ARRAY[5,6])) ELSE (unit_versions.status =  @status) END
	// LIMIT $1 OFFSET $2;
	//        OR unit_type."type" ILIKE  @search
	GetCountAllUnitVersion(ctx context.Context, arg GetCountAllUnitVersionParams) (int64, error)
	GetCountAllViews(ctx context.Context) (int64, error)
	GetCountAllXmlFeedUrls(ctx context.Context) (int64, error)
	GetCountBannerTypes(ctx context.Context) (int64, error)
	GetCountBookingPortal(ctx context.Context) ([]int64, error)
	GetCountBranchBrokerAgentPropertyDocByPropertyId(ctx context.Context, brokerCompanyAgentPropertiesBranchID int64) (int64, error)
	// -- name: GetBrokerAgentByCountryId :many
	// SELECT * FROM broker_company_agents
	// WHERE broker_companies_id = $3 LIMIT $1 OFFSET $2;
	GetCountBrokerAgentByCompanyId(ctx context.Context, brokerCompaniesID pgtype.Int8) (int64, error)
	GetCountBrokerAgentPropertyDocByPropertyId(ctx context.Context, brokerCompanyAgentPropertiesID int64) (int64, error)
	GetCountBrokerCompaniesBranchesServicesByServiceId(ctx context.Context, dollar_1 int64) (int64, error)
	GetCountBrokerCompany(ctx context.Context) (int64, error)
	GetCountBrokerCompanyBranch(ctx context.Context) (int64, error)
	// -- name: GetCountBrokerCompanyByMainServiceId :one
	// SELECT COUNT(*) FROM broker_companies
	// WHERE main_services_id = $1;
	GetCountBrokerCompanyByCountryId(ctx context.Context, countryID int64) (int64, error)
	GetCountCommunityCommercialProperty(ctx context.Context, arg GetCountCommunityCommercialPropertyParams) (int64, error)
	GetCountCommunityIndustrialProperties(ctx context.Context, arg GetCountCommunityIndustrialPropertiesParams) (int64, error)
	GetCountCommunityLuxuryCommercialProperty(ctx context.Context, arg GetCountCommunityLuxuryCommercialPropertyParams) (int64, error)
	GetCountCommunityLuxuryProperty(ctx context.Context, arg GetCountCommunityLuxuryPropertyParams) (int64, error)
	//             property_types.type  ILIKE '%' || $4 || '%'  OR
	GetCountCommunityProjectProperty(ctx context.Context, arg GetCountCommunityProjectPropertyParams) (int64, error)
	GetCountCommunityPropertyHub(ctx context.Context, arg GetCountCommunityPropertyHubParams) (int64, error)
	// SELECT
	// companies.id, company_name, company_type, logo_url, email, phone_number, status, company_rank, addresses_id, users_id ,
	// companies_licenses.commercial_license_no,
	// CASE WHEN branch_companies.id != 0 THEN TRUE::boolean ELSE FALSE::boolean END AS is_branch
	// FROM companies
	// INNER JOIN companies_licenses ON companies_licenses.id = companies.companies_licenses_id
	// LEFT JOIN branch_companies ON branch_companies.companies_id = companies.id
	// WHERE  companies.status = $3
	// ORDER BY id  LIMIT $1 OFFSET $2;
	GetCountCompaniesByStatus(ctx context.Context, arg GetCountCompaniesByStatusParams) (int64, error)
	GetCountCompanyByRank(ctx context.Context, companyRank int64) (int64, error)
	GetCountCompanyByStatus(ctx context.Context, status int64) (int64, error)
	GetCountCompanyProducts(ctx context.Context) (int64, error)
	GetCountCompanyProfileProjectByCounrty(ctx context.Context, arg GetCountCompanyProfileProjectByCounrtyParams) (int64, error)
	// INNER JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	GetCountCompanyProfileProjectByCountryNotEqual(ctx context.Context, arg GetCountCompanyProfileProjectByCountryNotEqualParams) (int64, error)
	GetCountCompanyTypes(ctx context.Context) (int64, error)
	GetCountCompanyUsersByStatuses(ctx context.Context, dollar_1 []int64) (int64, error)
	GetCountCompanyVideos(ctx context.Context) (int64, error)
	// (sc.user_id = $1 OR sc.requested_by = $1) AND
	GetCountConnectionWithNotStatus(ctx context.Context, connectionStatusID int64) (int64, error)
	GetCountConnectionWithNotStatusRequestedBy(ctx context.Context, arg GetCountConnectionWithNotStatusRequestedByParams) (int64, error)
	// sc.user_id = $1 AND
	GetCountConnectionWithNotStatusUser(ctx context.Context, connectionStatusID int64) (int64, error)
	//  (sc.user_id = $1 OR sc.requested_by = $1) AND
	GetCountConnectionWithStatus(ctx context.Context, connectionStatusID int64) (int64, error)
	GetCountConnectionWithStatusRequestedBy(ctx context.Context, arg GetCountConnectionWithStatusRequestedByParams) (int64, error)
	// sc.user_id = $1 AND
	GetCountConnectionWithStatusUser(ctx context.Context, connectionStatusID int64) (int64, error)
	// -- name: GetContactDetailsByUserId :one
	// SELECT
	//     c.id AS contact_id,
	//     c.users_id,
	//     c.ref_no,
	//     c.contact_category_id,
	//     c.salutation,
	//     c.name,
	//     c.lastname,
	//     c.all_languages_id,
	//     c.ejari,
	//     c.assigned_to,
	//     c.shared_with,
	//     c.remarks,
	//     c.is_blockedlisted,
	//     c.is_vip,
	//     c.status,
	//     c.created_by,
	//     c.contact_platform,
	//     c.created_at AS contact_created_at,
	//     c.updated_at AS contact_updated_at,
	//     c.updated_by AS contact_updated_by,
	//     c.direct_markerting,
	//     scd.id AS shareable_details_id,
	//     scd.contacts_id,
	//     scd.mobile,
	//     scd.mobile_share,
	//     scd.mobile2,
	//     scd.mobile2_share,
	//     scd.landline,
	//     scd.landline_share,
	//     scd.fax,
	//     scd.fax_share,
	//     scd.email,
	//     scd.email_share,
	//     scd.second_email,
	//     scd.second_email_share,
	//     scd.added_by AS shareable_added_by,
	//     scd.created_at AS shareable_created_at,
	//     scd.updated_at AS shareable_updated_at
	// FROM
	//     contacts c
	// JOIN
	//     shareable_contact_details scd ON c.id = scd.contacts_id
	// WHERE
	//     c.users_id = $1 LIMIT 1;
	// -- name: GetContactDetailsByPhoneNumber :one
	// SELECT
	//     c.id AS contact_id,
	//     c.users_id,
	//     c.ref_no,
	//     c.contact_category_id,
	//     c.salutation,
	//     c.name,
	//     c.lastname,
	//     c.all_languages_id,
	//     c.ejari,
	//     c.assigned_to,
	//     c.shared_with,
	//     c.remarks,
	//     c.is_blockedlisted,
	//     c.is_vip,
	//     c.status,
	//     c.created_by,
	//     c.contact_platform,
	//     c.created_at AS contact_created_at,
	//     c.updated_at AS contact_updated_at,
	//     c.updated_by AS contact_updated_by,
	//     c.direct_markerting,
	//     scd.id AS shareable_details_id,
	//     scd.contacts_id,
	//     scd.mobile,
	//     scd.mobile_share,
	//     scd.mobile2,
	//     scd.mobile2_share,
	//     scd.landline,
	//     scd.landline_share,
	//     scd.fax,
	//     scd.fax_share,
	//     scd.email,
	//     scd.email_share,
	//     scd.second_email,
	//     scd.second_email_share,
	//     scd.added_by AS shareable_added_by,
	//     scd.created_at AS shareable_created_at,
	//     scd.updated_at AS shareable_updated_at
	// FROM
	//     contacts c
	// JOIN
	//     shareable_contact_details scd ON c.id = scd.contacts_id
	// WHERE
	//     scd.mobile = $1 AND c.status != 6 LIMIT 1;
	// -- name: GetContactsIdFromUserId :one
	// SELECT
	//     c.id AS contacts_id
	// FROM
	//     contacts c
	// WHERE
	//     c.users_id = $1;
	// -- name: GetSingleContactDetails :one
	// SELECT
	//     c.id AS contact_id,
	//     c.users_id,
	//     c.ref_no,
	//     c.contact_category_id,
	//     c.salutation,
	//     c.name,
	//     c.lastname,
	//     c.all_languages_id,
	//     c.ejari,
	//     c.assigned_to,
	//     c.shared_with,
	//     c.remarks,
	//     c.is_blockedlisted,
	//     c.is_vip,
	//     c.status,
	//     c.created_by,
	//     c.contact_platform,
	//     c.created_at AS contact_created_at,
	//     c.updated_at AS contact_updated_at,
	//     c.updated_by AS contact_updated_by,
	//     scd.id AS shareable_details_id,
	//     scd.mobile,
	//     scd.mobile_share,
	//     scd.mobile2,
	//     scd.mobile2_share,
	//     scd.landline,
	//     scd.landline_share,
	//     scd.fax,
	//     scd.fax_share,
	//     scd.email,
	//     scd.email_share,
	//     scd.second_email,
	//     scd.second_email_share,
	//     scd.added_by AS shareable_added_by,
	//     scd.created_at AS shareable_created_at,
	//     scd.updated_at AS shareable_updated_at
	// FROM
	//     contacts c
	// JOIN
	//     shareable_contact_details scd ON c.id = scd.contacts_id
	// WHERE
	//     c.id = $1;
	// -- name: GetContactNamesByIdsExcludingStatus6 :many
	// SELECT
	//     id AS contact_id,
	//     name,
	//     lastname
	// FROM
	//     contacts
	// WHERE
	//     id IN ($1)
	//     AND status != 6;
	// -- name: GetSingleContactNameById :one
	// SELECT
	//     id AS contact_id,
	//     name,
	//     lastname
	// FROM
	//     contacts
	// WHERE
	//     id = $1;
	GetCountContactsOtherContactCountByContactsId(ctx context.Context, contactsID int64) (int64, error)
	GetCountDeveloperCompany(ctx context.Context) (int64, error)
	// -- name: GetCountDeveloperCompanyBranchByMainServiceId :one
	// SELECT COUNT(*) FROM developer_company_branches WHERE main_services_id = $1  LIMIT 1;
	GetCountDeveloperCompanyBranch(ctx context.Context) (int64, error)
	// -- name: GetCountDeveloperCompanyByMainServiceId :one
	// SELECT COUNT(*) FROM developer_companies
	// WHERE main_services_id = $1
	// LIMIT 1;
	GetCountDeveloperCompanyByCountryId(ctx context.Context, countryID int64) (int64, error)
	GetCountDocsByProjectId(ctx context.Context, projectsID int64) (int64, error)
	GetCountDocumentSubCategory(ctx context.Context) (int64, error)
	GetCountEntityServiceLocation(ctx context.Context, arg GetCountEntityServiceLocationParams) (int64, error)
	GetCountFieldsOfStudy(ctx context.Context) (int64, error)
	GetCountForAdminCompaniesAndUserCompanies(ctx context.Context, usersID int64) (GetCountForAdminCompaniesAndUserCompaniesRow, error)
	GetCountLeadsByContactId(ctx context.Context, contactsID int64) (int64, error)
	GetCountLeadsBySources(ctx context.Context, leadSource pgtype.Int8) (int64, error)
	// -- name: GetLeadsForContact :many
	// SELECT
	// 	lead.id,
	//     lead.ref_no AS ref_no,
	//     lead.lead_type AS lead_type,
	//     lead.is_property,
	//     lead.property_type_id,
	//     lead.unit_category,
	//     contact.name AS contact_name,
	//     scd.mobile AS contact_mobile,
	//     scd.email AS contact_email,
	//     lp.lead_status AS lead_status,
	//     lp.progress_status AS progress_status
	// FROM
	//     leads AS lead
	// INNER JOIN
	//     contacts AS contact ON lead.contacts_id = contact.id
	// INNER JOIN
	//     shareable_contact_details AS scd ON contact.id = scd.contacts_id
	// LEFT JOIN
	//     leads_progress AS lp ON lead.id = lp.leads_id WHERE lead.contacts_id = $1 ORDER BY lp.id desc LIMIT $2 OFFSET $3;
	GetCountLeadsForContacts(ctx context.Context, contactsID int64) (int64, error)
	// -- name: GetLeadsForManage :many
	// SELECT
	// 	lead.id,
	//     lead.ref_no AS ref_no,
	//     lead.lead_type AS lead_type,
	//     lead.is_property,
	//     lead.property_type_id,
	//     lead.unit_category,
	//     lead.section_type,
	//     contact.name AS contact_name,
	//     scd.mobile AS contact_mobile,
	//     scd.email AS contact_email,
	//     lp.lead_status AS lead_status,
	//     lp.progress_status AS progress_status
	// FROM
	//     leads AS lead
	// INNER JOIN
	//     contacts AS contact ON lead.contacts_id = contact.id
	// INNER JOIN
	//     shareable_contact_details AS scd ON contact.id = scd.contacts_id
	// LEFT JOIN
	//     leads_progress AS lp ON lead.id = lp.leads_id ORDER BY lp.id desc LIMIT $1 OFFSET $2;
	GetCountLeadsForManage(ctx context.Context) (int64, error)
	GetCountMangementActivities(ctx context.Context) ([]int64, error)
	GetCountMapSearch(ctx context.Context) (int64, error)
	GetCountOfProjectsListForCity(ctx context.Context, citiesID pgtype.Int8) (int64, error)
	GetCountOwnerPropertyDocumentsByOwnerPropertyId(ctx context.Context, ownerPropertiesID int64) (int64, error)
	GetCountPageContent(ctx context.Context, contentCategory int64) (int64, error)
	GetCountPages(ctx context.Context) (int64, error)
	GetCountPaymentPlanInstallmentByPropertyVersionsID(ctx context.Context, entityID int64) (int64, error)
	GetCountPaymentPlanPackagesByEntityID(ctx context.Context, arg GetCountPaymentPlanPackagesByEntityIDParams) (int64, error)
	GetCountPaymentPlanPackagesByEntityType(ctx context.Context, entityTypeID int64) (int64, error)
	GetCountPostedCareerPortal(ctx context.Context) (int64, error)
	GetCountProductCategories(ctx context.Context) (int64, error)
	GetCountProductReviews(ctx context.Context, usersID int64) (int64, error)
	GetCountProjectByCounrty(ctx context.Context, arg GetCountProjectByCounrtyParams) (int64, error)
	// INNER JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	GetCountProjectByCountryNotEqual(ctx context.Context, arg GetCountProjectByCountryNotEqualParams) (int64, error)
	// LEFT JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	// Search criteria
	GetCountProjectByStatus(ctx context.Context, arg GetCountProjectByStatusParams) (int64, error)
	GetCountProjectPropertiesByProjectId(ctx context.Context, arg GetCountProjectPropertiesByProjectIdParams) (int64, error)
	GetCountProjectPropertiesReviews(ctx context.Context, usersID int64) (int64, error)
	GetCountProjectPropertyDocByProjectPropertyId(ctx context.Context, projectPropertiesID int64) (int64, error)
	GetCountProjectPropertyDocumentByProjectPropertyId(ctx context.Context, projectPropertiesID int64) (int64, error)
	GetCountProjectReviews(ctx context.Context, usersID int64) (int64, error)
	GetCountProjectUnitReviews(ctx context.Context, usersID int64) (int64, error)
	GetCountProjectVideos(ctx context.Context) (int64, error)
	GetCountProjects(ctx context.Context) (int64, error)
	GetCountPromotionType(ctx context.Context) (int64, error)
	GetCountPromotionsByProjectFilter(ctx context.Context, arg GetCountPromotionsByProjectFilterParams) (int64, error)
	GetCountPromotionsByProjects(ctx context.Context) (int64, error)
	GetCountPropertyActivitiesByType(ctx context.Context, activityType int64) (int64, error)
	GetCountPropertyVideos(ctx context.Context) (int64, error)
	GetCountRolePermissionRoles(ctx context.Context, arg GetCountRolePermissionRolesParams) (int64, error)
	GetCountServiceCompanyBranch(ctx context.Context) (int64, error)
	// -- name: GetAllServiceRequests :many
	// SELECT
	//     sr.id,
	//     sr.ref_no,
	//     sr.company_types_id,
	//     sr.is_branch,
	//     sr.companies_id,
	//     sr.request_date,
	//     sr.services_id,
	//     sr.requested_by,
	//     sr.status,
	//     p.id AS profile_id,
	//     p.first_name,
	//     p.last_name,
	//     p.phone_number,
	//     p.company_number,
	//     s.title AS service_title,
	//     ms.title AS main_service_title,
	//     srh.reason
	// FROM
	//     service_request AS sr
	// INNER JOIN
	//     users AS u ON sr.requested_by = u.id
	// INNER JOIN
	//     profiles AS p ON u.profiles_id = p.id
	// INNER JOIN
	//     services AS s ON sr.services_id = s.id
	// INNER JOIN
	//     main_services AS ms ON s.main_services_id=ms.id
	// LEFT JOIN
	//     service_request_history AS srh ON srh.service_request_id = sr.id AND sr.status=srh.status AND srh.status!=6
	// WHERE
	//     sr.status != 6
	//     AND s.status != 6
	//     AND s.status != 5
	// OFFSET $1 LIMIT  $2;
	GetCountServiceRequests(ctx context.Context) (int64, error)
	GetCountServicesCompaniesBranchesServicesByServiceId(ctx context.Context, dollar_1 int64) (int64, error)
	GetCountServicesCompany(ctx context.Context) (int64, error)
	GetCountSimilarPropertiesForProjectProperties(ctx context.Context, arg GetCountSimilarPropertiesForProjectPropertiesParams) (int64, error)
	GetCountStateCommercialProperty(ctx context.Context, arg GetCountStateCommercialPropertyParams) (int64, error)
	GetCountStateIndustrialProperties(ctx context.Context, arg GetCountStateIndustrialPropertiesParams) (int64, error)
	GetCountStateLuxuryCommercialProperty(ctx context.Context, arg GetCountStateLuxuryCommercialPropertyParams) (int64, error)
	GetCountStateLuxuryProperty(ctx context.Context, arg GetCountStateLuxuryPropertyParams) (int64, error)
	// INNER JOIN property_types ON project_properties.property_types_id = property_types.id
	//             property_types.type  ILIKE '%' || $4 || '%'  OR
	GetCountStateProjectProperty(ctx context.Context, arg GetCountStateProjectPropertyParams) (int64, error)
	GetCountStatePropertyHub(ctx context.Context, arg GetCountStatePropertyHubParams) (int64, error)
	GetCountSubCommunityCommercialProperty(ctx context.Context, arg GetCountSubCommunityCommercialPropertyParams) (int64, error)
	GetCountSubCommunityIndustrialProperties(ctx context.Context, arg GetCountSubCommunityIndustrialPropertiesParams) (int64, error)
	GetCountSubCommunityLuxuryCommercialProperty(ctx context.Context, arg GetCountSubCommunityLuxuryCommercialPropertyParams) (int64, error)
	GetCountSubCommunityLuxuryProperty(ctx context.Context, arg GetCountSubCommunityLuxuryPropertyParams) (int64, error)
	// INNER JOIN property_types ON project_properties.property_types_id = property_types.id
	//             property_types.type  ILIKE '%' || $4 || '%'  OR
	GetCountSubCommunityProjectProperty(ctx context.Context, arg GetCountSubCommunityProjectPropertyParams) (int64, error)
	GetCountSubCommunityPropertyHub(ctx context.Context, arg GetCountSubCommunityPropertyHubParams) (int64, error)
	GetCountSubCompaniesByParent(ctx context.Context, arg GetCountSubCompaniesByParentParams) (int64, error)
	GetCountUnitBranchTypeByPropertyIdWithPagination(ctx context.Context, arg GetCountUnitBranchTypeByPropertyIdWithPaginationParams) (int64, error)
	// SELECT * FROM unit_type_detail
	// WHERE property = $3 AND properties_id = $4 AND (status != 5 AND status != 6)
	// ORDER BY created_at DESC
	// LIMIT $1 OFFSET $2;
	GetCountUnitTypeByPropertyId(ctx context.Context, arg GetCountUnitTypeByPropertyIdParams) (int64, error)
	GetCountries(ctx context.Context, activeStatus int64) ([]Country, error)
	GetCountry(ctx context.Context, limit int32) (Country, error)
	GetCountryById(ctx context.Context, id int64) (Country, error)
	GetCountryByName(ctx context.Context, country string) (Country, error)
	GetCountryGuide(ctx context.Context, id int64) (GetCountryGuideRow, error)
	GetCountryGuides(ctx context.Context, arg GetCountryGuidesParams) ([]GetCountryGuidesRow, error)
	GetCountryGuidesCount(ctx context.Context, status int64) (int64, error)
	GetCountrySettingsByID(ctx context.Context, id int64) (GetCountrySettingsByIDRow, error)
	GetCurrency(ctx context.Context, limit int32) (Currency, error)
	GetCurrencyByCode(ctx context.Context, code string) (Currency, error)
	GetCurrencyByCurrency(ctx context.Context, arg GetCurrencyByCurrencyParams) (Currency, error)
	GetCurrencyByCurrencyNew(ctx context.Context, currency string) (Currency, error)
	GetCurrencyNew(ctx context.Context, id int64) (Currency, error)
	GetCurrentUserID(ctx context.Context) (interface{}, error)
	GetCurrentUserIDRaw(ctx context.Context) (string, error)
	GetCustomerByPhoneVerified(ctx context.Context, arg GetCustomerByPhoneVerifiedParams) (PlatformUser, error)
	GetCustomerByUsername(ctx context.Context, arg GetCustomerByUsernameParams) (PlatformUser, error)
	GetDefaultSettingsByCountryID(ctx context.Context, id int64) (GetDefaultSettingsByCountryIDRow, error)
	GetDeletedCities(ctx context.Context, arg GetDeletedCitiesParams) ([]GetDeletedCitiesRow, error)
	GetDeletedCitiesCount(ctx context.Context) (int64, error)
	GetDeletedCommunityGuideLineInsights(ctx context.Context, arg GetDeletedCommunityGuideLineInsightsParams) ([]CommunityGuidelinesInsight, error)
	GetDeletedCommunityGuideLineInsightsCount(ctx context.Context) (int64, error)
	GetDeletedCommunityGuideSubinsights(ctx context.Context, arg GetDeletedCommunityGuideSubinsightsParams) ([]GetDeletedCommunityGuideSubinsightsRow, error)
	GetDeletedCommunityGuideSubinsightsCount(ctx context.Context, insightIds []int64) (int64, error)
	// with media as (
	// 	SELECT
	// 		global_media.entity_id as community_guidelines_id,
	// 	jsonb_agg(jsonb_build_object('media_type', global_media.media_type, 'files', global_media.file_urls)) as media
	// 	FROM global_media
	// 	WHERE  global_media.entity_type_id= 21 AND global_media.gallery_type='Main'
	// 	GROUP by global_media.entity_id
	// )
	// LEFT JOIN media ON media.community_guidelines_id = community_guidelines.id
	GetDeletedCommunityGuidesLines(ctx context.Context, arg GetDeletedCommunityGuidesLinesParams) ([]GetDeletedCommunityGuidesLinesRow, error)
	GetDeletedCommunityGuidesLinesCount(ctx context.Context) (int64, error)
	GetDeletedCurrencies(ctx context.Context, arg GetDeletedCurrenciesParams) ([]Currency, error)
	GetDeletedCurrenciesCount(ctx context.Context) (int64, error)
	GetDeletedFAQs(ctx context.Context, arg GetDeletedFAQsParams) ([]AuctionsFaq, error)
	GetDeletedPropertyLocations(ctx context.Context, arg GetDeletedPropertyLocationsParams) ([]GetDeletedPropertyLocationsRow, error)
	GetDeletedPropertyLocationsCount(ctx context.Context) (int64, error)
	// LEFT JOIN media ON media.community_guidelines_id = community_guidelines.id
	GetDeletedSubCommunityGuidesLines(ctx context.Context, arg GetDeletedSubCommunityGuidesLinesParams) ([]GetDeletedSubCommunityGuidesLinesRow, error)
	GetDeletedSubCommunityGuidesLinesCount(ctx context.Context) (int64, error)
	GetDepartment(ctx context.Context, arg GetDepartmentParams) (Department, error)
	GetDepartmentByDepartment(ctx context.Context, arg GetDepartmentByDepartmentParams) (Department, error)
	GetDesignation(ctx context.Context, limit int32) (Designation, error)
	GetDesignationByName(ctx context.Context, arg GetDesignationByNameParams) (Designation, error)
	GetDeveloperBranchCompany(ctx context.Context, id int64) (DeveloperCompanyBranch, error)
	GetDeveloperBranchCompanyDirector(ctx context.Context, limit int32) (DeveloperBranchCompanyDirector, error)
	GetDeveloperBranchCompanyDirectorByCompanyId(ctx context.Context, arg GetDeveloperBranchCompanyDirectorByCompanyIdParams) ([]DeveloperBranchCompanyDirector, error)
	GetDeveloperBranchCompanyDirectorByCompanyIdWithoutPagination(ctx context.Context, developerCompanyBranches int64) ([]DeveloperBranchCompanyDirector, error)
	GetDeveloperBranchCompanyDirectorsReview(ctx context.Context, limit int32) (DeveloperBranchCompanyDirectorsReview, error)
	GetDeveloperBranchCompanyReview(ctx context.Context, limit int32) (DeveloperBranchCompanyReview, error)
	GetDeveloperCompany(ctx context.Context, id int64) (DeveloperCompany, error)
	GetDeveloperCompanyBranch(ctx context.Context, id int64) (DeveloperCompanyBranch, error)
	GetDeveloperCompanyBranchByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (DeveloperCompany, error)
	// -- name: GetDeveloperCompanyBranchByMainServiceId :many
	// SELECT * FROM developer_company_branches
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetDeveloperCompanyBranchByName(ctx context.Context, companyName string) (DeveloperCompanyBranch, error)
	GetDeveloperCompanyBranchForGraph(ctx context.Context, id int64) (GetDeveloperCompanyBranchForGraphRow, error)
	GetDeveloperCompanyBranchNames(ctx context.Context, arg GetDeveloperCompanyBranchNamesParams) ([]GetDeveloperCompanyBranchNamesRow, error)
	GetDeveloperCompanyByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (DeveloperCompany, error)
	GetDeveloperCompanyByIdAndIsBranch(ctx context.Context, arg GetDeveloperCompanyByIdAndIsBranchParams) ([]GetDeveloperCompanyByIdAndIsBranchRow, error)
	GetDeveloperCompanyByName(ctx context.Context, companyName string) (DeveloperCompany, error)
	GetDeveloperCompanyDirector(ctx context.Context, limit int32) (DeveloperCompanyDirector, error)
	GetDeveloperCompanyDirectorReview(ctx context.Context, limit int32) (DeveloperCompanyDirectorsReview, error)
	// -- name: GetDeveloperCompanySubscriptionById :one
	// SELECT developer_subscription_id FROM developer_companies
	// WHERE id = $1;
	GetDeveloperCompanyDocs(ctx context.Context, id int64) (GetDeveloperCompanyDocsRow, error)
	GetDeveloperCompanyForGraph(ctx context.Context, id int64) (GetDeveloperCompanyForGraphRow, error)
	GetDeveloperCompanyNames(ctx context.Context, arg GetDeveloperCompanyNamesParams) ([]GetDeveloperCompanyNamesRow, error)
	GetDeveloperCompanyReview(ctx context.Context, limit int32) (DeveloperCompanyReview, error)
	GetDeveloperCompanyReviewByCompanyId(ctx context.Context, arg GetDeveloperCompanyReviewByCompanyIdParams) (DeveloperCompanyReview, error)
	GetDevelopersCompanyByRank(ctx context.Context, arg GetDevelopersCompanyByRankParams) ([]DeveloperCompany, error)
	GetDevelopersCompanyByStatus(ctx context.Context, arg GetDevelopersCompanyByStatusParams) ([]DeveloperCompany, error)
	GetDocumentByDocumentTypeAndAuctionID(ctx context.Context, arg GetDocumentByDocumentTypeAndAuctionIDParams) (AuctionsDocument, error)
	GetDocumentCategoryForContact(ctx context.Context, limit int32) (GetDocumentCategoryForContactRow, error)
	GetDocumentCategry(ctx context.Context, id int64) (GetDocumentCategryRow, error)
	GetDocumentSubCategoryForContact(ctx context.Context, limit int32) (GetDocumentSubCategoryForContactRow, error)
	GetDocumentsCategorByCategory(ctx context.Context, category string) (DocumentsCategory, error)
	GetDocumentsCategory(ctx context.Context, id int64) (DocumentsCategory, error)
	GetDocumentsSubCategory(ctx context.Context, id int64) (DocumentsSubcategory, error)
	GetDocumentsSubCategoryBySubCategory(ctx context.Context, subCategory string) (DocumentsSubcategory, error)
	GetDropDownCategoriesById(ctx context.Context) (DropdownCategory, error)
	GetDropDownItemsById(ctx context.Context, id int64) (DropdownItem, error)
	GetEntityServiceLocation(ctx context.Context, id int64) (EntityServiceLocation, error)
	GetExchangeOfferCategory(ctx context.Context, id int64) (ExchangeOfferCategory, error)
	GetExhibitionBoothByExhibitionId(ctx context.Context, exhibitionsID int64) ([]ExhibitionBooth, error)
	GetExhibitionBoothById(ctx context.Context, id int64) (ExhibitionBooth, error)
	GetExhibitionByID(ctx context.Context, id int64) (Exhibition, error)
	GetExhibitionByIdWithNumberOfReviews(ctx context.Context, id int64) (GetExhibitionByIdWithNumberOfReviewsRow, error)
	GetExhibitionClientByID(ctx context.Context, id int64) (ExhibitionClient, error)
	GetExhibitionCollaboratorByID(ctx context.Context, id int64) (ExhibitionCollaborator, error)
	GetExhibitionMediaByID(ctx context.Context, id int64) (ExhibitionsMedium, error)
	GetExhibitionReviewByID(ctx context.Context, id int64) (ExhibitionReview, error)
	GetExhibitionServiceByID(ctx context.Context, id int64) (ExhibitionService, error)
	GetExhibitionsMediaByExhibitionID(ctx context.Context, arg GetExhibitionsMediaByExhibitionIDParams) ([]ExhibitionsMedium, error)
	GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaType(ctx context.Context, arg GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeParams) (GetExhibitionsMediaByExhibitionIDAndGalleryAndMediaTypeRow, error)
	GetExistingReaction(ctx context.Context, arg GetExistingReactionParams) (string, error)
	GetExistingRefreshSchedules(ctx context.Context, ids []int64) ([]RefreshSchedule, error)
	GetExpertise(ctx context.Context, id int64) (GetExpertiseRow, error)
	GetExpertiseCount(ctx context.Context, arg GetExpertiseCountParams) (int64, error)
	GetExternalShareByID(ctx context.Context, id int64) (ExternalSharing, error)
	GetExternalShareByUserIDAndID(ctx context.Context, arg GetExternalShareByUserIDAndIDParams) (ExternalSharing, error)
	GetExternalSharing(ctx context.Context, arg GetExternalSharingParams) (GetExternalSharingRow, error)
	GetExternalSharingByMe(ctx context.Context, arg GetExternalSharingByMeParams) (GetExternalSharingByMeRow, error)
	GetExternalSharingByProjectID(ctx context.Context, projectID pgtype.Int8) (ExternalSharing, error)
	GetFAQByID(ctx context.Context, id int64) (AuctionsFaq, error)
	GetFacilitiesAmenities(ctx context.Context, dollar_1 []int64) ([]FacilitiesAmenity, error)
	GetFacilitiesAmenitiesByType(ctx context.Context, arg GetFacilitiesAmenitiesByTypeParams) ([]FacilitiesAmenity, error)
	// -- name: GetFacilitiesByEntityType :many
	// SELECT
	// sqlc.embed(fa)
	// FROM  facilities_amenities_entity fae
	// LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=1
	// WHERE fae.entity_type_id=$1;
	GetFacilitiesByEntityTypeAndIDs(ctx context.Context, arg GetFacilitiesByEntityTypeAndIDsParams) ([]GetFacilitiesByEntityTypeAndIDsRow, error)
	GetFacilitiesIdByBrokerCompanyAgentPropertyBranchId(ctx context.Context, id int64) ([]int64, error)
	GetFacilitiesIdByBrokerCompanyAgentPropertyId(ctx context.Context, id int64) ([]int64, error)
	GetFacilitiesIdByOwnerPropertyId(ctx context.Context, id int64) ([]int64, error)
	GetFacilityAmenity(ctx context.Context, id int64) (FacilitiesAmenity, error)
	GetFaclitiesAmenitiesForEntityIDAndType(ctx context.Context, arg GetFaclitiesAmenitiesForEntityIDAndTypeParams) ([]GetFaclitiesAmenitiesForEntityIDAndTypeRow, error)
	GetFacts(ctx context.Context, id int64) (Fact, error)
	// -- name: DeleteAllFaqMedia :one
	// update faqs set media_urls = "" where id = $1 returning *;
	GetFaqByID(ctx context.Context, id int64) (Faq, error)
	GetFaqsByID(ctx context.Context, arg GetFaqsByIDParams) (GetFaqsByIDRow, error)
	GetFieldsOfStudyByID(ctx context.Context, id int64) (FieldOfStudy, error)
	GetFieldsOfStudyByTitle(ctx context.Context, title string) (FieldOfStudy, error)
	GetFilterAgentPerformance(ctx context.Context, arg GetFilterAgentPerformanceParams) ([]GetFilterAgentPerformanceRow, error)
	GetFinancialProviders(ctx context.Context, id int64) (FinancialProvider, error)
	GetFinancialProvidersByType(ctx context.Context, providerType int64) ([]FinancialProvider, error)
	GetFirstUnitVersionWithUnitID(ctx context.Context, unitID int64) (UnitVersion, error)
	GetGlobalPropertiesByID(ctx context.Context, id int64) (GlobalPropertyType, error)
	// WITH x AS(
	// SELECT id,unit_id,'sale' AS category
	// FROM sale_unit
	// WHERE status != 6
	// UNION ALL
	// SELECT id,unit_id,'rent' AS category
	// FROM rent_unit
	// WHERE status != 6
	// ) SELECT
	// COALESCE(SUM(unit_facts.plot_area), 0)::bigint AS plot_area_consume,
	// COALESCE(SUM(unit_facts.built_up_area), 0)::bigint AS built_up_area_consume,
	// COALESCE(COUNT(x.id), 0)::bigint AS no_of_units_consume
	// FROM x
	// INNER JOIN unit_facts ON unit_facts.unit_id = x.unit_id AND unit_facts.category = x.category
	// INNER JOIN units ON units.id = x.unit_id
	// WHERE units.properties_id = $1 AND units.property = 1;
	// -- name: GetAllProjectUnitsByStatus :many
	// SELECT
	//     x.*,
	//     units.ref_no,
	//     units.property_name,
	//     units.addresses_id,
	//     units.properties_id,
	//     units.property_types_id,
	//     projects.project_name,
	//     property_types."type" AS unit_type,
	//     phases.phase_name,
	//     countries.country,
	//     states."state",
	//     cities.city,
	//     communities.community,
	//     sub_communities.sub_community
	// FROM (
	//     SELECT
	//         sale_unit.unit_id,
	//         'sale'::varchar AS category,
	//         sale_unit.title,
	//         sale_unit.status
	//     FROM
	//         sale_unit
	//     WHERE
	//         sale_unit.status = $3
	//     UNION ALL
	//     SELECT
	//         rent_unit.unit_id,
	//         'rent'::varchar AS category,
	//         rent_unit.title,
	//         rent_unit.status
	//     FROM
	//         rent_unit
	//     WHERE
	//         rent_unit.status = $3
	// ) AS x
	// INNER JOIN units ON units.id = x.unit_id
	// INNER JOIN property_types ON property_types.id = units.property_types_id
	// INNER JOIN project_properties ON project_properties.id = units.properties_id
	//     AND units.property = 1
	// LEFT JOIN phases ON phases.id = project_properties.phases_id
	// LEFT JOIN projects ON projects.id = project_properties.projects_id
	//     AND project_properties.phases_id IS NULL
	// LEFT JOIN addresses ON addresses.id = units.addresses_id
	// LEFT JOIN countries ON countries.id = addresses.countries_id
	// LEFT JOIN states ON states.id = addresses.states_id
	// LEFT JOIN cities ON cities.id = addresses.cities_id
	// LEFT JOIN communities ON communities.id = addresses.communities_id
	// LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
	// LEFT JOIN unit_facts ON units.id = unit_facts.unit_id
	// WHERE (
	//     @search = '%%'
	//     OR units.ref_no ILIKE @search
	//     OR countries.country ILIKE @search
	//     OR states."state" ILIKE @search
	//     OR cities.city ILIKE @search
	//     OR communities.community ILIKE @search
	//     OR sub_communities.sub_community ILIKE @search
	//     OR units.property_name ILIKE @search
	//     OR unit_facts.built_up_area::TEXT ILIKE @search
	//     OR unit_facts.plot_area::TEXT ILIKE @search
	//     OR (CASE
	//         WHEN 'Freehold' ILIKE @search THEN unit_facts.ownership = 1
	//         WHEN 'GCC Citizen' ILIKE @search THEN unit_facts.ownership = 2
	//         WHEN 'Leasehold' ILIKE @search THEN unit_facts.ownership = 3
	//         WHEN 'Local Citizen' ILIKE @search THEN unit_facts.ownership = 4
	//         WHEN 'USUFRUCT' ILIKE @search THEN unit_facts.ownership = 5
	//         WHEN 'Other' ILIKE @search THEN unit_facts.ownership = 6
	//         WHEN 'draft' ILIKE @search THEN x.status = 1
	//         WHEN 'available' ILIKE @search THEN x.status = 2
	//         WHEN 'rented' ILIKE @search THEN x.status = 4
	//         WHEN 'blocked' ILIKE @search THEN x.status = 5
	//         ELSE FALSE
	//     END)
	//     OR unit_facts.category ILIKE @search
	//     OR unit_facts.parking::TEXT ILIKE @search
	//     OR unit_facts.price::TEXT ILIKE @search
	//     OR unit_facts.service_charge::TEXT ILIKE @search
	//     OR property_types."type" ILIKE @search
	// )
	// ORDER BY units.created_at DESC
	// LIMIT $1 OFFSET $2;
	GetGlobalPropertyByID(ctx context.Context, id int64) (Property, error)
	GetGlobalPropertyCompletionStatus(ctx context.Context, id int64) (interface{}, error)
	GetGlobalPropertyTypeByID(ctx context.Context, id int64) (GlobalPropertyType, error)
	GetHotelBookingMediaByPostedHotelId(ctx context.Context, postedHotelID int64) (PostedHotelMedium, error)
	GetInternalSharing(ctx context.Context, arg GetInternalSharingParams) (GetInternalSharingRow, error)
	GetInternalSharingByMe(ctx context.Context, arg GetInternalSharingByMeParams) (GetInternalSharingByMeRow, error)
	GetInternalSharingByProjectID(ctx context.Context, projectID pgtype.Int8) (InternalSharing, error)
	GetInternationalContentById(ctx context.Context, id int64) (InternationalContent, error)
	GetJobCategoryByID(ctx context.Context, id int64) (JobCategory, error)
	GetJobCategoryByName(ctx context.Context, categoryName string) (JobCategory, error)
	GetLanguage(ctx context.Context, limit int32) (AllLanguage, error)
	GetLanguageByLanguage(ctx context.Context, language string) (AllLanguage, error)
	GetLanguageNameById(ctx context.Context, id int64) (GetLanguageNameByIdRow, error)
	GetLanguagesIDsByProfile(ctx context.Context, profileID int64) ([]int64, error)
	//left join property_types on project_properties.property_types_id = property_types.id
	GetLatLngValuesForLuxuryProjectProperty(ctx context.Context) ([]GetLatLngValuesForLuxuryProjectPropertyRow, error)
	//left join property_types on project_properties.property_types_id = property_types.id
	GetLatLngValuesForProjectProperty(ctx context.Context) ([]GetLatLngValuesForProjectPropertyRow, error)
	GetLatestSubscriptionProductCost(ctx context.Context, arg GetLatestSubscriptionProductCostParams) ([]GetLatestSubscriptionProductCostRow, error)
	GetLeadById(ctx context.Context, id int64) (GetLeadByIdRow, error)
	GetLeadByRefNo(ctx context.Context, arg GetLeadByRefNoParams) (Lead, error)
	GetLeadDetailsById(ctx context.Context, id int64) (GetLeadDetailsByIdRow, error)
	GetLeadDocumentByDocumentId(ctx context.Context, id int64) (LeadsDocument, error)
	GetLeadDocumentById(ctx context.Context, arg GetLeadDocumentByIdParams) ([]GetLeadDocumentByIdRow, error)
	GetLeadDocumentsByLeadIdWithPagination(ctx context.Context, arg GetLeadDocumentsByLeadIdWithPaginationParams) ([]GetLeadDocumentsByLeadIdWithPaginationRow, error)
	GetLeadNotificationByLeadIdLimitOne(ctx context.Context, leadsID int64) (LeadsNotification, error)
	GetLeadProgressByLeadsID(ctx context.Context, leadsID int64) (LeadsProgress, error)
	GetLeadStatisticsByLeadType(ctx context.Context) ([]GetLeadStatisticsByLeadTypeRow, error)
	GetLeaders(ctx context.Context, id int64) (Leader, error)
	//   AND
	//    cu.company_type = $5
	//     AND cu.is_branch = $6
	GetLeadsByCityAndLeadTypeFilter(ctx context.Context, arg GetLeadsByCityAndLeadTypeFilterParams) ([]GetLeadsByCityAndLeadTypeFilterRow, error)
	GetLeadsByContactIdWithPagination(ctx context.Context, arg GetLeadsByContactIdWithPaginationParams) ([]Lead, error)
	GetLeadsBySources(ctx context.Context, arg GetLeadsBySourcesParams) ([]GetLeadsBySourcesRow, error)
	// SELECT l.id, l.ref_no, l.created_at, l.internal_notes,
	// CASE WHEN lp.lead_status = 1 THEN 'Open' WHEN lp.lead_status = 2 THEN 'Close' ELSE null END AS "status",
	// CASE WHEN lp.progress_status = 1 THEN 'In Progress' WHEN lp.lead_status = 2 THEN 'Not yet connected'
	// WHEN lp.lead_status = 3 THEN 'Called but no reply' WHEN lp.lead_status = 4 THEN 'Follow-up'
	// WHEN lp.lead_status = 2 THEN 'Awaiting Finance Approval' WHEN lp.lead_status = 2 THEN 'Change Travel Plans'
	// ELSE null END AS "progress status",
	//   CASE WHEN l.lead_source = 1 THEN (SELECT COUNT(*) FROM leads_properties WHERE leads_properties.leads_id = l.id) ELSE NULL END AS "count",
	//   CASE WHEN l.lead_source != 1 THEN ' - ' ELSE NULL END AS "message",
	//   CASE WHEN l.lead_source = 3 THEN ' - ' ELSE NULL END AS "inquiry"
	// FROM leads l
	// LEFT JOIN leads_progress lp ON l.id = lp.leads_id WHERE l.lead_source = $1 AND l.required_start >= $2 AND l.required_end <= $3 AND l.assigned_to = $4 AND l.contacts_id IN (SELECT cu.users_id FROM company_users cu JOIN contacts c ON cu.users_id = c.users_id WHERE cu.company_id = $5 AND cu.company_type = $6 AND cu.is_branch = $7) AND l.lead_type = $8 LIMIT $9 OFFSET $10
	// ;
	// SELECT count(*)
	// FROM leads
	// WHERE lead_source = $1 AND required_start >= $2 AND required_end <= $3 AND leads.assigned_to = $4 AND contacts_id IN (SELECT cu.users_id FROM company_users cu JOIN contacts c ON cu.users_id = c.users_id WHERE cu.company_id = $5
	// --  AND cu.company_type = $6 AND cu.is_branch = $7
	//  ) AND lead_type = $8 ;
	GetLeadsBySourcesFilter(ctx context.Context) ([]GetLeadsBySourcesFilterRow, error)
	GetLeadsIdAndRefNo(ctx context.Context, contactsID int64) ([]GetLeadsIdAndRefNoRow, error)
	GetLicensesByEntityAndEntityTypeID(ctx context.Context, arg GetLicensesByEntityAndEntityTypeIDParams) ([]GetLicensesByEntityAndEntityTypeIDRow, error)
	GetLicensesByID(ctx context.Context, id int64) (License, error)
	GetListOfCommunity(ctx context.Context, dollar_1 []int64) ([]Community, error)
	GetListOfSubCommunity(ctx context.Context, dollar_1 []int64) ([]SubCommunity, error)
	GetListOfUsers(ctx context.Context, dollar_1 []int64) ([]User, error)
	GetListSubCommunity(ctx context.Context, arg GetListSubCommunityParams) ([]SubCommunity, error)
	GetListSubSection(ctx context.Context, arg GetListSubSectionParams) ([]SubSection, error)
	GetListingProblemsReport(ctx context.Context, limit int32) (ListingProblemsReport, error)
	GetListingSectionWeb(ctx context.Context, sectionKey int64) (ListingSection, error)
	GetLiveCommentsForAgentReview(ctx context.Context, id int64) ([]GetLiveCommentsForAgentReviewRow, error)
	GetLocalCompanyProfileProjects(ctx context.Context, arg GetLocalCompanyProfileProjectsParams) ([]GetLocalCompanyProfileProjectsRow, error)
	GetLocalProjects(ctx context.Context, arg GetLocalProjectsParams) ([]GetLocalProjectsRow, error)
	GetLocation(ctx context.Context, limit int32) (Location, error)
	GetLocationByAddressID(ctx context.Context, addressID int64) (GetLocationByAddressIDRow, error)
	//     states.state,
	GetLocationByAddressId(ctx context.Context, id int64) (string, error)
	GetLocationByLatLng(ctx context.Context, arg GetLocationByLatLngParams) (Location, error)
	GetLocationFromViewByID(ctx context.Context, id int64) (GetLocationFromViewByIDRow, error)
	GetLocationsStringByText(ctx context.Context, arg GetLocationsStringByTextParams) ([]GetLocationsStringByTextRow, error)
	GetLocationsStringCountByText(ctx context.Context, arg GetLocationsStringCountByTextParams) (int64, error)
	GetLuxuryBrand(ctx context.Context, id int64) (GetLuxuryBrandRow, error)
	GetLuxuryBrandByName(ctx context.Context, brandName string) (GetLuxuryBrandByNameRow, error)
	GetLuxuryBrands(ctx context.Context, arg GetLuxuryBrandsParams) ([]GetLuxuryBrandsRow, error)
	GetLuxuryBrandsCount(ctx context.Context) (int64, error)
	GetMangementActivities(ctx context.Context) ([]ManagementActivity, error)
	GetMangementActivitiesById(ctx context.Context, id int64) (ManagementActivity, error)
	GetMangementActivitiesWithPg(ctx context.Context, arg GetMangementActivitiesWithPgParams) (ManagementActivity, error)
	GetMapSearchById(ctx context.Context, id int64) (MapSearch, error)
	GetMediaByTowerID(ctx context.Context, towersID int64) (TowerMedium, error)
	GetMediaCountOfAuction(ctx context.Context, auctionID int64) (int64, error)
	GetNationalitiesIDsByProfile(ctx context.Context, profileID int64) ([]int64, error)
	GetNewsLetterSubscribersCount(ctx context.Context) (int64, error)
	GetNocLicenseByUserID(ctx context.Context, userID int64) (License, error)
	GetNumberOFCategories(ctx context.Context, status int64) (int64, error)
	GetNumberOFSubscriptionOrders(ctx context.Context) (int64, error)
	// -- name: GetActivityChangesByProjectActivityID :many
	// SELECT act_ch.id,pro.project_name,act_ch.field_name,act_ch.before,act_ch.after
	// FROM activity_changes AS act_ch
	// INNER JOIN project_activities AS proj_act
	// ON act_ch.activities_id=proj_act.id
	// INNER JOIN projects AS pro
	// ON proj_act.project_id=pro.id
	// WHERE act_ch.section_id=1 AND act_ch.activities_id=$1
	// ORDER BY id
	// LIMIT $2
	// OFFSET $3;
	// -- name: GetAllActivityChangesFileView :many
	// SELECT act_ch.id,act_ch.activity_date,proj_prop.property_name,act_ch.field_name AS File_viewed,users.username,act_ch.before AS activity, doc_cate.category
	// FROM activity_changes AS act_ch
	// INNER JOIN project_activities AS proj_act
	// ON act_ch.activities_id=proj_act.id AND proj_act.file_category=$1 AND proj_act.activity_type=2 AND proj_act.id=$2
	// INNER JOIN project_properties AS proj_prop
	// ON proj_prop.id=proj_act.property_unit_id
	// INNER JOIN users
	// ON proj_act.user_id=users.id
	// LEFT OUTER  JOIN project_properties_documents AS proj_prop_doc
	// ON  proj_act.file_category=3 AND proj_prop_doc.project_properties_id=proj_act.property_unit_id
	// LEFT OUTER JOIN  documents_category AS doc_cate
	// ON proj_act.file_category=3 AND  proj_prop_doc.documents_category_id=doc_cate.id
	// WHERE act_ch.section_id=1
	// ORDER BY act_ch.activity_date DESC
	// LIMIT $3
	// OFFSET $4;
	// -- name: GetAllActivityChangesTransactions :many
	// SELECT act_ch.id,proj.project_name,act_ch.activity_date,act_ch.field_name,act_ch.before,act_ch.after
	// FROM activity_changes AS act_ch
	// INNER JOIN project_activities AS proj_act
	// ON act_ch.activities_id=proj_act.id AND proj_act.activity_type=1
	// INNER JOIN projects AS proj
	// ON proj_act.project_id=proj.id
	// INNER JOIN users
	// ON proj_act.user_id=users.id
	// WHERE act_ch.section_id=1 AND act_ch.activities_id=$1
	// ORDER BY act_ch.activity_date DESC
	// LIMIT $2
	// OFFSET $3;
	GetNumberOfActivityChanges(ctx context.Context, activitiesID int64) (int64, error)
	GetNumberOfAllExhibitionReviews(ctx context.Context, exhibitionID int64) (int64, error)
	GetNumberOfAllExhibitions(ctx context.Context) (int64, error)
	GetNumberOfAllExhibitionsServices(ctx context.Context) ([]int64, error)
	GetNumberOfAllInternationalExhibitions(ctx context.Context) (int64, error)
	GetNumberOfAllLocalExhibitions(ctx context.Context) (int64, error)
	GetNumberOfAqaryGuides(ctx context.Context, status int64) (int64, error)
	GetNumberOfBannerPlanPackages(ctx context.Context, status int64) (int64, error)
	GetNumberOfBlogCategories(ctx context.Context, status int64) (int64, error)
	GetNumberOfBlogs(ctx context.Context) (int64, error)
	GetNumberOfCategoriesSettings(ctx context.Context, type_ int64) (int64, error)
	GetNumberOfCommunitiesSettings(ctx context.Context, status int64) (int64, error)
	GetNumberOfCommunityGuidesViewActivitiesTransactionView(ctx context.Context, arg GetNumberOfCommunityGuidesViewActivitiesTransactionViewParams) (int64, error)
	GetNumberOfCountriesSettings(ctx context.Context, status int64) (int64, error)
	GetNumberOfDeletedBlogs(ctx context.Context) (int64, error)
	GetNumberOfExhibitionBooths(ctx context.Context) (int64, error)
	GetNumberOfExhibitionClients(ctx context.Context) (int64, error)
	GetNumberOfExhibitionCollaborators(ctx context.Context, collaboratorType int64) (int64, error)
	GetNumberOfExhibitionQueries(ctx context.Context) (int64, error)
	GetNumberOfExhibitionsAfterFiltration(ctx context.Context, arg GetNumberOfExhibitionsAfterFiltrationParams) (int64, error)
	GetNumberOfMediaForExhibition(ctx context.Context, exhibitionsID int64) (int64, error)
	GetNumberOfReviewTerms(ctx context.Context, status int64) (int64, error)
	GetNumberOfSubCommunitiesSettings(ctx context.Context, status int64) (int64, error)
	GetNumberOfSubDocumentCategories(ctx context.Context, arg GetNumberOfSubDocumentCategoriesParams) (int64, error)
	GetNumberOfTowers(ctx context.Context) (int64, error)
	//INNER JOIN workflows ON a.workflow_step=workflows.id AND @user_id::BIGINT =ANY(workflows.user_ids)
	GetNumberRequestsByStatus(ctx context.Context, arg GetNumberRequestsByStatusParams) (int64, error)
	GetNumbersOfExhibitionCollaboratorsByType(ctx context.Context, exhibitionsID int64) ([]GetNumbersOfExhibitionCollaboratorsByTypeRow, error)
	GetOpenHouse(ctx context.Context, id int64) (GetOpenHouseRow, error)
	GetOpenhouseAppointment(ctx context.Context, id int64) (Appointment, error)
	GetOrderPaymentById(ctx context.Context, id int64) (GetOrderPaymentByIdRow, error)
	GetOrganization(ctx context.Context, arg GetOrganizationParams) ([]GetOrganizationRow, error)
	GetOtherUser(ctx context.Context, id int64) (User, error)
	GetOverDuePayments(ctx context.Context, orderID int64) ([]GetOverDuePaymentsRow, error)
	GetOverallPropertyHubCountByCountryAndSectionId(ctx context.Context, arg GetOverallPropertyHubCountByCountryAndSectionIdParams) (int64, error)
	GetOwnerProperties(ctx context.Context, limit int32) (OwnerProperty, error)
	GetOwnerPropertiesByName(ctx context.Context, arg GetOwnerPropertiesByNameParams) (OwnerProperty, error)
	GetOwnerPropertiesByRefrenceNumber(ctx context.Context, refNo string) (OwnerProperty, error)
	GetOwnerPropertiesByUserId(ctx context.Context, usersID int64) ([]GetOwnerPropertiesByUserIdRow, error)
	GetOwnerPropertiesWithValidation(ctx context.Context, arg GetOwnerPropertiesWithValidationParams) (OwnerProperty, error)
	GetOwnerPropertyDocById(ctx context.Context, id int64) (GetOwnerPropertyDocByIdRow, error)
	GetOwnerPropertyDocument(ctx context.Context, limit int32) (OwnerPropertiesDocument, error)
	GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetOwnerPropertyDocumentsByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams) (OwnerPropertiesDocument, error)
	GetOwnerPropertyMedia(ctx context.Context, limit int32) (OwnerPropertiesMedium, error)
	GetOwnerPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetOwnerPropertyMediaByPropertyIdAndMediaSectionParams) (OwnerPropertiesMedium, error)
	GetOwnerUserFromPhasesByID(ctx context.Context, id int64) (int64, error)
	GetOwnerUserFromProjectByID(ctx context.Context, id int64) (int64, error)
	GetOwnerUserFromProjectPropertyByID(ctx context.Context, id int64) (int64, error)
	// TODO: need todo it for other properties also
	GetOwnerUserFromUnitByID(ctx context.Context, id int64) (pgtype.Int8, error)
	GetPackageDetailsForContract(ctx context.Context, subscriptionOrderID int64) (GetPackageDetailsForContractRow, error)
	GetPagProjectPlans(ctx context.Context, arg GetPagProjectPlansParams) ([]ProjectPlan, error)
	GetPageContentByID(ctx context.Context, id int64) (PageContent, error)
	// employerIds AS(
	// 	SELECT
	// 	e.company_id as company,
	// 	e.id AS emp_id
	// 	FROM employers e
	// 	WHERE e.company_id=$4
	// ),
	// candidate_count AS (
	//     SELECT
	//         c.careers_id,
	//         COUNT(c.id) AS count
	//     FROM
	//         candidates c
	//     JOIN
	//         applicants a ON c.applicants_id = a.id
	//     JOIN
	//         careers car ON c.careers_id = car.id
	//     WHERE
	//         c.application_status != 6 AND (car.career_status != 6 AND car.career_status != 5)
	//     GROUP BY
	//         c.careers_id
	// ),
	// LEFT JOIN
	//     candidate_count cc ON cr.id = cc.careers_id
	// JOIN
	//     employers e ON cr.employers_id = e.id
	// JOIN
	// 	employerIds empIds ON cr.employers_id=empIds.emp_id
	GetPaginatedActiveCareers(ctx context.Context, arg GetPaginatedActiveCareersParams) ([]GetPaginatedActiveCareersRow, error)
	GetPaginatedJobCategories(ctx context.Context, arg GetPaginatedJobCategoriesParams) ([]GetPaginatedJobCategoriesRow, error)
	GetPaymentPlan(ctx context.Context) ([]PaymentPlan, error)
	GetPaymentPlanByID(ctx context.Context, id int64) (PaymentPlan, error)
	GetPaymentPlanInstallmentByID(ctx context.Context, id int64) ([]GetPaymentPlanInstallmentByIDRow, error)
	GetPaymentPlanInstallmentByPropertyVersionsID(ctx context.Context, arg GetPaymentPlanInstallmentByPropertyVersionsIDParams) ([]GetPaymentPlanInstallmentByPropertyVersionsIDRow, error)
	GetPaymentPlanPackages(ctx context.Context, arg GetPaymentPlanPackagesParams) ([]GetPaymentPlanPackagesRow, error)
	GetPaymentPlanPackagesByEntityID(ctx context.Context, arg GetPaymentPlanPackagesByEntityIDParams) (PaymentPlansPackage, error)
	GetPaymentPlanPackagesByEntityType(ctx context.Context, entityTypeID int64) (PaymentPlansPackage, error)
	GetPaymentPlanPackagesByID(ctx context.Context, id int64) (PaymentPlansPackage, error)
	GetPendingUser(ctx context.Context, id int64) (User, error)
	GetPermission(ctx context.Context, id int64) (Permission, error)
	// LEFT JOIN LATERAL (
	//     SELECT UNNEST(permissions_id) as permission_id
	//     FROM users
	//     WHERE users.id = $1
	// ) u ON p.id = u.permission_id;
	GetPermissionByIdAndSectionPermissionId(ctx context.Context, arg GetPermissionByIdAndSectionPermissionIdParams) (Permission, error)
	GetPermissionBySectionID(ctx context.Context, sectionPermissionID int64) ([]int64, error)
	GetPermissionBySubTitle(ctx context.Context, subTitle string) (Permission, error)
	GetPermissionByTitle(ctx context.Context, title string) (Permission, error)
	// SELECT * FROM permissions_mv
	// Where section_permission_id = $1 ORDER BY id;
	GetPermissionMV(ctx context.Context, id int64) (PermissionsMv, error)
	GetPhaseByNameAndProjectId(ctx context.Context, arg GetPhaseByNameAndProjectIdParams) (Phase, error)
	GetPhaseByProjectIdAndPhase(ctx context.Context, arg GetPhaseByProjectIdAndPhaseParams) (Phase, error)
	GetPhaseExceptDeletedAndBlocked(ctx context.Context, id int64) (Phase, error)
	// -- name: GetCountAllPhasesMediByPhaseId :one
	// WITH x AS(
	// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND image_url IS NOT NULL
	// UNION ALL
	// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND image360_url IS NOT NULL
	// UNION ALL
	// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND video_url IS NOT NULL
	// UNION ALL
	// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND panaroma_url IS NOT NULL
	// ) SELECT COUNT(*) FROM x;
	GetPhaseMedia(ctx context.Context, id int64) (GetPhaseMediaRow, error)
	GetPhaseMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetPhaseMediaByIdAndGalleryAndMediaTypeParams) (ProjectMedium, error)
	GetPhaseName(ctx context.Context, id int64) (string, error)
	GetPhases(ctx context.Context, limit int32) (Phase, error)
	GetPhasesByProjectID(ctx context.Context, projectID int64) ([]int64, error)
	GetPhasesDocuments(ctx context.Context, id int64) (GetPhasesDocumentsRow, error)
	GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatIdParams) (PhasesDocument, error)
	GetPhasesFactsByPhaseId(ctx context.Context, phasesID int64) (PhasesFact, error)
	GetPhasesPlans(ctx context.Context, id int64) (GetPhasesPlansRow, error)
	GetPhasesPlansByTitle(ctx context.Context, arg GetPhasesPlansByTitleParams) (PhasesPlan, error)
	GetPlanInstallmentByID(ctx context.Context, id int64) (PlanInstallment, error)
	GetPlanInstallmentByPaymentPlanID(ctx context.Context, paymentPlans int64) ([]PlanInstallment, error)
	GetPlanInstallments(ctx context.Context) ([]PlanInstallment, error)
	GetPlanPackagePlanType(ctx context.Context, id int64) (int64, error)
	GetPlanPackages(ctx context.Context, planPackageIds []int64) ([]GetPlanPackagesRow, error)
	GetPlansByPlanTitleAndAuctionID(ctx context.Context, arg GetPlansByPlanTitleAndAuctionIDParams) (AuctionsPlan, error)
	GetPlatformUserByEmail(ctx context.Context, email string) (PlatformUser, error)
	GetPlatformUserByEmailAndCompanyID(ctx context.Context, arg GetPlatformUserByEmailAndCompanyIDParams) (PlatformUser, error)
	GetPlatformUserDetailsByUserName(ctx context.Context, arg GetPlatformUserDetailsByUserNameParams) (GetPlatformUserDetailsByUserNameRow, error)
	GetPostByID(ctx context.Context, id int64) (GetPostByIDRow, error)
	GetPostByIDAndCategory(ctx context.Context, arg GetPostByIDAndCategoryParams) (GetPostByIDAndCategoryRow, error)
	GetPostedHotelBookingByID(ctx context.Context, id int64) (PostedHotelBooking, error)
	GetPostedHotelCommentByID(ctx context.Context, id int64) (PostedHotelComment, error)
	GetPostedHotelMediaByID(ctx context.Context, id int64) (PostedHotelMedium, error)
	GetProductCategoryByID(ctx context.Context, id int64) (ProductCategory, error)
	GetProductCompanyBranchForGraph(ctx context.Context, id int64) (GetProductCompanyBranchForGraphRow, error)
	GetProductCompanyForGraph(ctx context.Context, id int64) (GetProductCompanyForGraphRow, error)
	GetProductReviewCount(ctx context.Context, id int64) (int64, error)
	GetProfession(ctx context.Context, id int64) (Profession, error)
	GetProfessionDummy(ctx context.Context, arg GetProfessionDummyParams) (Profession, error)
	GetProfile(ctx context.Context, id int64) (Profile, error)
	GetProfileByUserId(ctx context.Context, usersID int64) (Profile, error)
	GetProfileuserbyUserId(ctx context.Context, id int64) (GetProfileuserbyUserIdRow, error)
	GetProjPhaseDocCatAndSubCatByProjProp(ctx context.Context, projectPropertiesID int64) ([]GetProjPhaseDocCatAndSubCatByProjPropRow, error)
	GetProjPlanByTitle(ctx context.Context, arg GetProjPlanByTitleParams) (ProjectPlan, error)
	// -- name: DeleteOneUnitMediaImages360ByIdAndFile :one
	// UPDATE unit_media
	// SET image360_url =
	//   CASE
	//     WHEN array_remove(image360_url, @fileurl::VARCHAR) = '{}' THEN NULL
	//     ELSE array_remove(image360_url, @fileurl::VARCHAR)
	//   END
	// WHERE id = $1
	// RETURNING *;
	// -- name: DeleteOneUnitMediaVideoByIdAndFile :one
	// UPDATE unit_media
	// SET video_url =
	//   CASE
	//     WHEN array_remove(video_url, @fileurl::VARCHAR) = '{}' THEN NULL
	//     ELSE array_remove(video_url, @fileurl::VARCHAR)
	//   END
	// WHERE id = $1
	// RETURNING *;
	// -- name: DeleteOneUnitMediaPanaromaByIdAndFile :one
	// UPDATE unit_media
	// SET panaroma_url =
	//   CASE
	//     WHEN array_remove(panaroma_url, @fileurl::VARCHAR) = '{}' THEN NULL
	//     ELSE array_remove(panaroma_url, @fileurl::VARCHAR)
	//   END
	// WHERE id = $1
	// RETURNING *;
	GetProjProGalleryTypeByUnit(ctx context.Context, id int64) ([]string, error)
	GetProject(ctx context.Context, id int64) (Project, error)
	GetProjectAdByID(ctx context.Context, id int64) (GetProjectAdByIDRow, error)
	GetProjectAndPhaseFinancialProviders(ctx context.Context, arg GetProjectAndPhaseFinancialProvidersParams) (ProjectFinancialProvider, error)
	GetProjectByCountryId(ctx context.Context, arg GetProjectByCountryIdParams) ([]Project, error)
	GetProjectByName(ctx context.Context, arg GetProjectByNameParams) (Project, error)
	GetProjectByRefrenceNumber(ctx context.Context, refNumber string) (Project, error)
	// LEFT JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	GetProjectByStatusId(ctx context.Context, arg GetProjectByStatusIdParams) ([]GetProjectByStatusIdRow, error)
	GetProjectDocById(ctx context.Context, id int64) (GetProjectDocByIdRow, error)
	GetProjectDocByIdandCategory(ctx context.Context, arg GetProjectDocByIdandCategoryParams) (GetProjectDocByIdandCategoryRow, error)
	GetProjectDocCategoriesByPhase(ctx context.Context, phaseID int64) ([]GetProjectDocCategoriesByPhaseRow, error)
	GetProjectDocuments(ctx context.Context, limit int32) (ProjectDocument, error)
	// -- name: GetAllSharedProjectPropertyUnitByPropertyID :many
	// WITH unit_ids AS (
	//   SELECT unnest($1::bigint[]) AS id,
	//          row_number() OVER () AS rn
	// )
	// SELECT u.id, u.ref_no, u.properties_id
	// FROM units u
	// CROSS JOIN unit_ids ui
	// WHERE u.id = ui.id
	// ORDER BY ui.rn;
	// SELECT
	//     u.id,
	//     u.ref_no,
	//     u.properties_id
	// FROM units u
	// WHERE u.id = ANY($1::bigint[]);
	GetProjectExceptDeletedAndBlocked(ctx context.Context, id int64) (Project, error)
	GetProjectFacts(ctx context.Context, projectID pgtype.Int8) (PropertiesFact, error)
	GetProjectGalleryTypeByPhase(ctx context.Context, phasesID int64) ([]string, error)
	GetProjectIdByLicenseNo(ctx context.Context, licenseNo string) (int64, error)
	// SELECT COUNT(pp.*)
	// FROM projects p
	// JOIN project_promotions pp ON p.id = pp.projects_id
	// WHERE
	//     CASE
	//         WHEN $1::bigint = 0 THEN true
	//         WHEN $1::bigint = 1 THEN p.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $2)
	//         WHEN $1::bigint = 2 THEN p.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $2 AND communities_id = ANY($3::bigint[]))
	//         WHEN $1::bigint = 3 THEN p.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $2 AND communities_id = ANY($3::bigint[]) AND sub_communities_id = ANY($4::bigint[]))
	//         WHEN $1::bigint = 4 THEN p.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $2 AND communities_id = ANY($3::bigint[]) AND sub_communities_id = ANY($4::bigint[]) AND addresses.locations_id = $5)
	//     END
	//     AND pp.projects_id = p.id;
	GetProjectIdByProjectNo(ctx context.Context, projectNo string) (int64, error)
	GetProjectMedia(ctx context.Context, id int64) (GetProjectMediaRow, error)
	GetProjectMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetProjectMediaByIdAndGalleryAndMediaTypeParams) (GlobalMedium, error)
	GetProjectMediaByIdAndGalleryType(ctx context.Context, arg GetProjectMediaByIdAndGalleryTypeParams) ([]ProjectMedium, error)
	GetProjectMediaByIdAndMediaType(ctx context.Context, arg GetProjectMediaByIdAndMediaTypeParams) ([]ProjectMedium, error)
	GetProjectMediaByProjPropertyAndGalleryType(ctx context.Context, arg GetProjectMediaByProjPropertyAndGalleryTypeParams) ([]GetProjectMediaByProjPropertyAndGalleryTypeRow, error)
	GetProjectName(ctx context.Context, id int64) (string, error)
	//INNER JOIN properties_facts ON projects.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	//      -- Company and branch permissions
	//      AND (
	//         @is_company_user != true
	//         OR (
	//             (@company_branch != false OR projects.developer_companies_id = @company_id::bigint)
	//             AND (@company_branch != true OR projects.developer_company_branches_id = @company_id::bigint)
	//         )
	//     )
	//     -- AND (@state_id::bigint = 0 OR addresses.states_id = @state_id::bigint)
	//     AND (@city_id::bigint = 0 OR addresses.cities_id = @city_id::bigint)
	//     AND (@community_id::bigint = 0 OR addresses.communities_id = @community_id::bigint)
	//     AND (@sub_community_id::bigint = 0 OR addresses.sub_communities_id = @sub_community_id::bigint)
	GetProjectNotEqualToCountryId(ctx context.Context, arg GetProjectNotEqualToCountryIdParams) ([]GetProjectNotEqualToCountryIdRow, error)
	GetProjectPhaseGalleryTypeByProjProperty(ctx context.Context, projectPropertyID int64) ([]string, error)
	GetProjectPhaseMediaById(ctx context.Context, id int64) (ProjectMedium, error)
	GetProjectPhasesPublishedCount(ctx context.Context, arg GetProjectPhasesPublishedCountParams) (int64, error)
	GetProjectPhasesPublishedListing(ctx context.Context, arg GetProjectPhasesPublishedListingParams) ([]GetProjectPhasesPublishedListingRow, error)
	GetProjectPlanByProjID(ctx context.Context, arg GetProjectPlanByProjIDParams) ([]ProjectPlan, error)
	GetProjectPlanByProjIDWithoutPagination(ctx context.Context, arg GetProjectPlanByProjIDWithoutPaginationParams) ([]ProjectPlan, error)
	GetProjectPlansCount(ctx context.Context, projectsID int64) (int64, error)
	GetProjectPostByID(ctx context.Context, id int64) (GetProjectPostByIDRow, error)
	GetProjectPromotionByProjectAndPhaseID(ctx context.Context, arg GetProjectPromotionByProjectAndPhaseIDParams) (ProjectPromotion, error)
	GetProjectPromotions(ctx context.Context, id int64) (GetProjectPromotionsRow, error)
	GetProjectPropDocCategoriesByUnit(ctx context.Context, unitID int64) ([]GetProjectPropDocCategoriesByUnitRow, error)
	GetProjectProperties(ctx context.Context, id int64) (Property, error)
	GetProjectPropertiesByDeveloperCompaniesId(ctx context.Context, developerCompaniesID int64) ([]GetProjectPropertiesByDeveloperCompaniesIdRow, error)
	GetProjectPropertiesByNameAndProjectPhase(ctx context.Context, arg GetProjectPropertiesByNameAndProjectPhaseParams) (ProjectProperty, error)
	GetProjectPropertiesByPhaseId(ctx context.Context, arg GetProjectPropertiesByPhaseIdParams) (ProjectProperty, error)
	GetProjectPropertiesByProjectId(ctx context.Context, projectsID int64) (ProjectProperty, error)
	GetProjectPropertiesByProjectIdGraph(ctx context.Context, entityID int64) ([]Property, error)
	GetProjectPropertiesBySameArea(ctx context.Context, arg GetProjectPropertiesBySameAreaParams) ([]GetProjectPropertiesBySameAreaRow, error)
	GetProjectPropertiesMedia(ctx context.Context, id int64) (GetProjectPropertiesMediaRow, error)
	GetProjectPropertiesPublishedCount(ctx context.Context, arg GetProjectPropertiesPublishedCountParams) (int64, error)
	GetProjectPropertiesPublishedListing(ctx context.Context, arg GetProjectPropertiesPublishedListingParams) ([]GetProjectPropertiesPublishedListingRow, error)
	GetProjectPropertiesReviews(ctx context.Context, arg GetProjectPropertiesReviewsParams) ([]GetProjectPropertiesReviewsRow, error)
	GetProjectPropertyByProjectIDAndPropertyId(ctx context.Context, arg GetProjectPropertyByProjectIDAndPropertyIdParams) (ProjectProperty, error)
	GetProjectPropertyDocByProjectPropertyDocId(ctx context.Context, id int64) (GetProjectPropertyDocByProjectPropertyDocIdRow, error)
	GetProjectPropertyDocument(ctx context.Context, id int64) (GetProjectPropertyDocumentRow, error)
	GetProjectPropertyDocumentByProjPropertyId(ctx context.Context, arg GetProjectPropertyDocumentByProjPropertyIdParams) (ProjectPropertiesDocument, error)
	GetProjectPropertyMediaByIdAndGallery(ctx context.Context, arg GetProjectPropertyMediaByIdAndGalleryParams) ([]PropertiesMedium, error)
	GetProjectPropertyMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetProjectPropertyMediaByIdAndGalleryAndMediaTypeParams) (PropertiesMedium, error)
	GetProjectPropertyMediaByPropertyId(ctx context.Context, propertiesID int64) ([]PropertiesMedium, error)
	GetProjectRentUnitListingBySameArea(ctx context.Context, arg GetProjectRentUnitListingBySameAreaParams) ([]GetProjectRentUnitListingBySameAreaRow, error)
	GetProjectRequests(ctx context.Context, limit int32) (ProjectRequest, error)
	GetProjectReviewByProjectAndUserId(ctx context.Context, arg GetProjectReviewByProjectAndUserIdParams) (ProjectReview, error)
	// -- name: UpdateProjectRatingIsVerified :one
	// UPDATE project_reviews
	// SET is_verified=$2
	// WHERE id=$1
	// RETURNING *;
	// -- name: GetCounterNumberProjectRating :one
	// SELECT COUNT(id)
	// FROM project_reviews
	// WHERE projects_id=$1 AND is_project=$2;
	GetProjectReviews(ctx context.Context, arg GetProjectReviewsParams) ([]GetProjectReviewsRow, error)
	GetProjectReviewsByProjectId(ctx context.Context, arg GetProjectReviewsByProjectIdParams) ([]ProjectReview, error)
	// -- name: FilterCountSaleUnitListingStatus :one
	// with x as (
	//     select count(units.id) as cnt
	// 	from units
	// 	inner join sale_unit on  units.id = sale_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	// 	AND ($3::bigint[] is NULL OR units.property_unit_rank = ANY($3::bigint[]))
	//     AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	//     where units.properties_id = $1
	// 	and sale_unit.status = $2
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// )
	// select sum(cnt) as total_count from x;
	// -- name: FilterCountRentUnitListingStatus :one
	// with x as (
	// 	select count(units.id) as cnt
	// 	from units
	// 	inner join rent_unit on  units.id = rent_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	// 	AND ($3::bigint[] is NULL OR units.property_unit_rank = ANY($3::bigint[]))
	//     AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	//     where units.properties_id = $1
	// 	and rent_unit.status = $2
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// )
	// select sum(cnt) as total_count from x;
	// -- name: FilterCountUnitListingStatus :one
	// with x as (
	//     select count(units.id) as cnt
	// 	from units
	// 	inner join sale_unit on  units.id = sale_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	//     where units.properties_id = $1
	// 	and sale_unit.status = $2
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// 	union all
	// 	select count(units.id) as cnt
	// 	from units
	// 	inner join rent_unit on  units.id = rent_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	//     where units.properties_id = $1
	// 	and rent_unit.status = $2
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// )
	// select sum(cnt) as total_count from x;
	// -- name: FilterCountSaleUnitListingBedroom :many
	// WITH x AS (
	// 	SELECT unit_facts.bedroom
	// FROM units
	// INNER JOIN sale_unit ON sale_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	// AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	// AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	// WHERE units.properties_id = $1
	//   AND units.property = 1
	//   AND unit_facts.bedroom IS NOT NULL
	// )
	// SELECT bedroom, COUNT(*) AS total_count
	// FROM x
	// GROUP BY bedroom
	// ORDER BY bedroom;
	// -- name: FilterCountRentUnitListingBedroom :many
	// WITH x AS (
	//   select unit_facts.bedroom
	//   from units
	// inner join rent_unit on rent_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	// AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	// AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	// where units.properties_id = $1
	// and units.property = 1
	// AND unit_facts.bedroom IS NOT NULL
	// )
	// SELECT bedroom, COUNT(*) AS total_count
	// FROM x
	// GROUP BY bedroom
	// ORDER BY bedroom;
	// -- name: GetProjectPropertySaleUnits :many
	// SELECT units.*, sale_unit.*
	// FROM units
	// INNER JOIN sale_unit ON sale_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	// WHERE units.properties_id = $1
	//   AND units.property = 1
	//   AND units."section" = $2
	//   AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	//   AND (@status_list::int[] IS NULL OR sale_unit.status = ANY(@status_list::int[]))
	//   AND (@rank_list::bigint[] IS NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	//   AND (@is_verified::bool IS NULL OR units.is_verified = @is_verified::bool)
	//   AND unit_facts.bedroom IS NOT NULL
	// ORDER BY
	//   CASE
	//     WHEN $3 = 1 THEN units.created_at
	//     ELSE NULL
	//   END DESC,
	//   CASE
	//     WHEN $3 = 2 THEN unit_facts.price
	//     ELSE NULL
	//   END ASC,
	//   CASE
	//     WHEN $3 = 3 THEN unit_facts.price
	//     ELSE NULL
	//   END DESC,
	//   units.created_at DESC
	//   LIMIT $4 OFFSET $5;
	// -- name: GetCountProjectPropertySaleUnits :one
	// SELECT count(units.*)
	// FROM units
	// INNER JOIN sale_unit ON sale_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	// WHERE units.properties_id = $1
	//   AND units.property = 1
	//   AND units."section" = $2
	//   AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	//   AND (@status_list::int[] IS NULL OR sale_unit.status = ANY(@status_list::int[]))
	//   AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	//   AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	//   AND unit_facts.bedroom IS NOT NULL;
	// -- name: GetProjectPropertyRentUnits :many
	// select *, rent_unit.* from units
	// inner join rent_unit on rent_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	// where units.properties_id = $1 and units.property = 1 and units. "section" = $2
	// AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	// AND (@status_list::int[] IS NULL OR rent_unit.status = ANY(@status_list::int[]))
	// AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	// AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	// AND unit_facts.bedroom IS NOT NULL
	// ORDER BY
	//   CASE
	//     WHEN COALESCE($3, 0) = 1 THEN units.created_at
	//     WHEN COALESCE($3, 0) = 2 THEN NULL
	//     WHEN COALESCE($3, 0) = 3 THEN NULL
	//     ELSE units.created_at  -- Default sorting by created_at if no parameter is passed
	//   END DESC,
	//   CASE
	//     WHEN COALESCE($3, 0) = 2 THEN unit_facts.price
	//     ELSE NULL
	//   END ASC,
	//   CASE
	//     WHEN COALESCE($3, 0) = 3 THEN unit_facts.price
	//     ELSE NULL
	//   END DESC,
	//   units.created_at DESC
	//   LIMIT $4 OFFSET $5;
	// -- name: GetCountProjectPropertyRentUnits :one
	// select count(*) from units
	// inner join rent_unit on rent_unit.unit_id = units.id
	// INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	// where units.properties_id = $1 and units.property = 1 and units. "section" = $2
	// AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	// AND (@status_list::int[] IS NULL OR rent_unit.status = ANY(@status_list::int[]))
	// AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	// AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	// AND unit_facts.bedroom IS NOT NULL;
	// -- name: GetProjectSaleUnitCount :one
	// with x as (
	//     select count(units.id) as cnt
	// 	from units
	// 	inner join sale_unit on  units.id = sale_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'sale'
	// 	AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	//     AND (@status_list::int[] IS NULL OR sale_unit.status = ANY(@status_list::int[]))
	// 	AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	//     AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	//     where units.properties_id = $1
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// )
	// select sum(cnt) as total_count from x;
	// -- name: GetProjectRentUnitCount :one
	// with x as (
	// 	select count(units.id) as cnt
	// 	from units
	// 	inner join rent_unit on  units.id = rent_unit.unit_id
	// 	INNER JOIN unit_facts ON units.id = unit_facts.unit_id and unit_facts.category = 'rent'
	// 	AND (@bedrooms::varchar[] IS NULL OR unit_facts.bedroom = ANY(@bedrooms::varchar[]))
	//     AND (@status_list::int[] IS NULL OR sale_unit.status = ANY(@status_list::int[]))
	// 	AND (@rank_list::bigint[] is NULL OR units.property_unit_rank = ANY(@rank_list::bigint[]))
	//     AND (@is_verified::bool IS null OR units.is_verified = @is_verified::bool)
	//     where units.properties_id = $1
	// 	and section = 'project'
	// 	and units.property = 1
	//     AND unit_facts.bedroom IS NOT NULL
	// )
	// select sum(cnt) as total_count from x;
	// -- name: GetSingleSaleUnits :one
	// select units.*, sale_unit.title, sale_unit.title_arabic, sale_unit.description, sale_unit.description_arabic, sale_unit.unit_id, sale_unit.status, sale_unit.unit_facts_id, sale_unit.contract_start_datetime, sale_unit.contract_end_datetime, sale_unit.contract_amount, sale_unit.contract_currency, projects.facilities_id from units
	// inner join sale_unit on sale_unit.unit_id = units.id
	// left join project_properties on units.properties_id  = project_properties.id and units.property = 1
	// left join projects on projects.id = project_properties.projects_id
	// where sale_unit.unit_id = $1 and units.is_branch = false;
	// -- name: GetSingleRentUnits :one
	// select units.*, rent_unit.title, rent_unit.title_arabic, rent_unit.description, rent_unit.description_arabic, rent_unit.unit_id, rent_unit.status, rent_unit.unit_facts_id, projects.facilities_id from units
	// inner join rent_unit on rent_unit.unit_id = units.id
	// left join project_properties on units.properties_id  = project_properties.id and units.property = 1
	// left join projects on projects.id = project_properties.projects_id
	// where rent_unit.unit_id = $1 and units.is_branch = false;
	GetProjectReviewsByProjectIdWithIndividualAverages(ctx context.Context, arg GetProjectReviewsByProjectIdWithIndividualAveragesParams) ([]GetProjectReviewsByProjectIdWithIndividualAveragesRow, error)
	// -- name: TopDealProjectSaleUnitListing :many
	// With x As (
	// select units.*, sale_unit.title, sale_unit.title_arabic, sale_unit.description, sale_unit.description_arabic, sale_unit.unit_id, sale_unit.status, sale_unit.unit_facts_id, sale_unit.contract_start_datetime, sale_unit.contract_end_datetime, sale_unit.contract_amount, sale_unit.contract_currency from units
	// inner join sale_unit on sale_unit.unit_id = units.id
	// where sale_unit.unit_id != $1 and units.property_unit_rank = $2
	// ) SELECT * from x LIMIT 10 OFFSET 0;
	// -- name: TopDealProjectRentUnitListing :many
	// With x As (
	// select units.*, rent_unit.title, rent_unit.title_arabic, rent_unit.description, rent_unit.description_arabic, rent_unit.unit_id, rent_unit.status, rent_unit.unit_facts_id from units
	// inner join rent_unit on rent_unit.unit_id = units.id
	// where rent_unit.unit_id != $1 and units.property_unit_rank = $2
	// ) SELECT * from x LIMIT 10 OFFSET 0;
	GetProjectSaleUnitListingBySameArea(ctx context.Context, arg GetProjectSaleUnitListingBySameAreaParams) ([]GetProjectSaleUnitListingBySameAreaRow, error)
	GetProjectStatusAndVerificationAndRank(ctx context.Context, id int64) (GetProjectStatusAndVerificationAndRankRow, error)
	GetProjectUnitsPublishedCount(ctx context.Context, arg GetProjectUnitsPublishedCountParams) (int64, error)
	GetProjectUnitsPublishedListing(ctx context.Context, arg GetProjectUnitsPublishedListingParams) ([]GetProjectUnitsPublishedListingRow, error)
	GetProjectsCountPerFeaturedCity(ctx context.Context) ([]GetProjectsCountPerFeaturedCityRow, error)
	GetProjectsForCities(ctx context.Context) ([]GetProjectsForCitiesRow, error)
	GetProjectsListForCity(ctx context.Context, arg GetProjectsListForCityParams) ([]GetProjectsListForCityRow, error)
	GetProjectsPublishedCount(ctx context.Context, arg GetProjectsPublishedCountParams) (int64, error)
	GetProjectsPublishedListing(ctx context.Context, arg GetProjectsPublishedListingParams) ([]GetProjectsPublishedListingRow, error)
	GetProjectsRefNoBySearch(ctx context.Context, refNumber string) ([]GetProjectsRefNoBySearchRow, error)
	GetProjetPropertyDocumentsByProjectIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetProjetPropertyDocumentsByProjectIdAndDocCatIdAndSubDocCatIdParams) (ProjectDocument, error)
	GetProjetPropertyDocumentsByProjectPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetProjetPropertyDocumentsByProjectPropertyIdAndDocCatIdAndSubDocCatIdParams) (ProjectPropertiesDocument, error)
	GetPromotionType(ctx context.Context, limit int32) (PromotionType, error)
	GetPromotionTypeIdByType(ctx context.Context, types string) (int64, error)
	GetPromotionsByProjectFilter(ctx context.Context, arg GetPromotionsByProjectFilterParams) ([]ProjectPromotion, error)
	GetPropertiesBranchPlanByTitle(ctx context.Context, arg GetPropertiesBranchPlanByTitleParams) (PropertiesPlansBranch, error)
	GetPropertiesByPhasesIDs(ctx context.Context, arg GetPropertiesByPhasesIDsParams) ([]GetPropertiesByPhasesIDsRow, error)
	GetPropertiesByProjectID(ctx context.Context, arg GetPropertiesByProjectIDParams) ([]int64, error)
	GetPropertiesByRefNo(ctx context.Context, refNo string) ([]GetPropertiesByRefNoRow, error)
	GetPropertiesByRefNos(ctx context.Context, dollar_1 []string) ([]GetPropertiesByRefNosRow, error)
	GetPropertiesFactByPropertyID(ctx context.Context, propertiesID pgtype.Int8) (AuctionsPropertiesFact, error)
	GetPropertiesInfoFromRefNo(ctx context.Context, refNo string) ([]GetPropertiesInfoFromRefNoRow, error)
	GetPropertiesMedia(ctx context.Context, id int64) (PropertiesMedium, error)
	GetPropertiesPlansByProjectId(ctx context.Context, projectsID pgtype.Int8) ([]PropertiesPlan, error)
	GetPropertiesTypeSettingsCount(ctx context.Context, status int64) (int64, error)
	GetPropertiesTypeSittings(ctx context.Context, arg GetPropertiesTypeSittingsParams) ([]GetPropertiesTypeSittingsRow, error)
	// Only join phases if entity_type_id = 2
	GetProperty(ctx context.Context, id int64) (GetPropertyRow, error)
	GetPropertyAdByID(ctx context.Context, id int64) (GetPropertyAdByIDRow, error)
	GetPropertyBranchPlan(ctx context.Context, limit int32) (PropertiesPlansBranch, error)
	GetPropertyById(ctx context.Context, id int64) (AuctionsProperty, error)
	GetPropertyFact(ctx context.Context, id int64) (PropertiesFact, error)
	GetPropertyFactsByProperties(ctx context.Context, arg GetPropertyFactsByPropertiesParams) (PropertiesFact, error)
	GetPropertyHubActivities(ctx context.Context, arg GetPropertyHubActivitiesParams) (PropertyHubActivity, error)
	GetPropertyHubActivity(ctx context.Context, limit int32) (PropertyHubActivity, error)
	GetPropertyHubActivityByPropertyId(ctx context.Context, arg GetPropertyHubActivityByPropertyIdParams) (PropertyHubActivity, error)
	GetPropertyHubRefNoBySearch(ctx context.Context, refNo string) ([]GetPropertyHubRefNoBySearchRow, error)
	GetPropertyInfo(ctx context.Context, refNo string) (GetPropertyInfoRow, error)
	GetPropertyLocationByID(ctx context.Context, id int64) (GetPropertyLocationByIDRow, error)
	GetPropertyLocationByProperty(ctx context.Context, property string) (PropertiesMapLocation, error)
	GetPropertyLocationByPropertyID(ctx context.Context, id int64) (GetPropertyLocationByPropertyIDRow, error)
	GetPropertyLocationsCount(ctx context.Context) (int64, error)
	GetPropertyNameByIdAndProperty(ctx context.Context, arg GetPropertyNameByIdAndPropertyParams) (string, error)
	GetPropertyPlan(ctx context.Context, limit int32) (PropertiesPlan, error)
	GetPropertyPlanBranchByTitle(ctx context.Context, arg GetPropertyPlanBranchByTitleParams) (PropertiesPlansBranch, error)
	GetPropertyPlanByTitle(ctx context.Context, arg GetPropertyPlanByTitleParams) (PropertiesPlan, error)
	GetPropertyType(ctx context.Context, limit int32) (PropertyType, error)
	GetPropertyTypeByCategory(ctx context.Context, category string) ([]PropertyType, error)
	GetPropertyTypeFactByTitle(ctx context.Context, title string) (PropertyTypeFact, error)
	GetPropertyTypeFacts(ctx context.Context, limit int32) (PropertyTypeFact, error)
	GetPropertyTypeNew(ctx context.Context, limit int32) (GlobalPropertyType, error)
	GetPropertyTypeSettings(ctx context.Context, id int64) (GlobalPropertyType, error)
	GetPropertyTypesByCategoryForLeads(ctx context.Context, category string) ([]GetPropertyTypesByCategoryForLeadsRow, error)
	GetPropertyTypesByIdListForLeads(ctx context.Context, dollar_1 []int64) ([]GetPropertyTypesByIdListForLeadsRow, error)
	GetPropertyTypesIdCatCode(ctx context.Context) ([]GetPropertyTypesIdCatCodeRow, error)
	GetPropertyUnitComment(ctx context.Context, id int64) (PropertyUnitComment, error)
	GetPropertyUnitLike(ctx context.Context, id int64) (PropertyUnitLike, error)
	GetPropertyUnitLikeByPropertyIdAndIdAndWhichProperty(ctx context.Context, arg GetPropertyUnitLikeByPropertyIdAndIdAndWhichPropertyParams) (PropertyUnitLike, error)
	GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetPropertyUnitLikeByPropertyIdAndWhichPropertyAndWhichPropertyHubKeyParams) (PropertyUnitLike, error)
	GetPropertyUnitSaved(ctx context.Context, id int64) (PropertyUnitSaved, error)
	GetPropertyUnitSavedByPropertyIdAndIdAndWhichProperty(ctx context.Context, arg GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyParams) (PropertyUnitSaved, error)
	GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndCollectionId(ctx context.Context, arg GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndCollectionIdParams) (PropertyUnitSaved, error)
	GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKey(ctx context.Context, arg GetPropertyUnitSavedByPropertyIdAndIdAndWhichPropertyAndWhichPropertyHubKeyParams) (PropertyUnitSaved, error)
	GetPublishByEntity(ctx context.Context, id int64) (PublishListing, error)
	GetPublishByID(ctx context.Context, id int64) (PublishListing, error)
	//-- name: GetPublishByMe :one
	// SELECT *,
	//   CASE
	//     WHEN @check_for = 'unit' THEN
	//       CASE
	//         WHEN is_unit = @is_unit AND unit_id = @unit_id  AND unit_category =  @unit_category  AND webportal_id = @webportal_id
	//         THEN 'Unit query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'property' THEN
	//       CASE
	//         WHEN  is_property = @is_property AND property_key = @property_key AND property_id = @property_id AND webportal_id = @webportal_id
	//          AND (is_unit IS NULL  OR is_unit IS FALSE) THEN 'Property query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'project_with_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id = @phase_id AND project_id = @project_id AND webportal_id = @webportal_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN 'Project with phase query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'project_without_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id IS NULL AND project_id = @project_id  AND webportal_id = @webportal_id
	//         AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//         THEN 'Project without phase query executed'
	//         ELSE 'No matching condition'
	//       END
	//     ELSE 'Invalid check_for parameter'
	//   END AS query_executed
	// FROM publish_listing
	// WHERE
	//   CASE
	//     WHEN @check_for = 'unit' THEN
	//       CASE
	//         WHEN is_unit = @is_unit AND unit_id = @unit_id  AND created_by = @user_id AND webportal_id = @webportal_id
	//          AND unit_category =  @unit_category  THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'property' THEN
	//       CASE
	//         WHEN is_property = @is_property AND property_key = @property_key AND property_id = @property_id  AND webportal_id = @webportal_id
	//          AND created_by = @user_id  AND (is_unit IS NULL  OR is_unit IS FALSE) THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'project_with_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id = @phase_id AND project_id = @project_id  AND created_by = @user_id AND webportal_id = @webportal_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'project_without_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id IS NULL AND project_id = @project_id  AND created_by = @user_id AND webportal_id = @webportal_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN TRUE
	//         ELSE FALSE
	//       END
	//     ELSE FALSE
	// END;
	GetPublishByMe(ctx context.Context, arg GetPublishByMeParams) (PublishListing, error)
	GetPublishGalleryByID(ctx context.Context, id int64) (PublishGallery, error)
	GetPublishGalleryByPublishID(ctx context.Context, publishListingID pgtype.Int8) ([]PublishGallery, error)
	GetPublishInfoByProjectAndPhaseID(ctx context.Context, arg GetPublishInfoByProjectAndPhaseIDParams) (PublishInfo, error)
	GetPublishInfoByProjectPropertyId(ctx context.Context, propertyID pgtype.Int8) (PublishInfo, error)
	GetPublishMediaByPublishListingIdAndMediaSection(ctx context.Context, arg GetPublishMediaByPublishListingIdAndMediaSectionParams) (PublishGallery, error)
	GetPublishPlanByPublishID(ctx context.Context, publishListingID int64) ([]PublishPlan, error)
	GetPublishServicesPromotions(ctx context.Context, arg GetPublishServicesPromotionsParams) ([]GetPublishServicesPromotionsRow, error)
	GetQualityScorePolicies(ctx context.Context) ([]QualityScorePolicy, error)
	GetRanks(ctx context.Context, limit int32) (Rank, error)
	GetRanksByRank(ctx context.Context, rank string) (Rank, error)
	GetRealEstateAgentByEntityType(ctx context.Context, entityTypeID int64) (RealEstateAgent, error)
	GetRealEstateAgentByEntityTypeEntityId(ctx context.Context, arg GetRealEstateAgentByEntityTypeEntityIdParams) ([]RealEstateAgent, error)
	GetRealEstateAgentById(ctx context.Context, id int64) (RealEstateAgent, error)
	GetRefreshScheduleByID(ctx context.Context, id int64) (RefreshSchedule, error)
	GetRefreshScheduleIdsMap(ctx context.Context, arg GetRefreshScheduleIdsMapParams) ([]GetRefreshScheduleIdsMapRow, error)
	GetRejectedData(ctx context.Context, arg GetRejectedDataParams) ([]GetRejectedDataRow, error)
	GetRejectedSubscribers(ctx context.Context, arg GetRejectedSubscribersParams) ([]GetRejectedSubscribersRow, error)
	GetRejectedSubscribersCount(ctx context.Context) (int64, error)
	// -- name: UpdateRemainingSubscriptionPackage :one
	// Update subscription_package
	// SET remained_units = $1
	// WHERE id = @package_id
	// RETURNING *;
	// -- name: GetRemainingCompanyQuota :many
	// SELECT DISTINCT ON (subscription_products.id)
	//     subscription_products.id, subscription_products.product,
	//     SUM(subscription_package.remained_units) OVER (PARTITION BY subscription_products.id) AS total_no_of_products
	//  FROM
	//     subscription_order
	// INNER JOIN
	//     subscription_package ON subscription_order.id = subscription_package.subscription_order_id
	// INNER JOIN
	//     subscription_products ON subscription_package.product = subscription_products.id
	// WHERE
	//     subscriber_id = @company_id
	//     AND subscriber_type = 1
	//     AND subscription_order.status = 1
	// ORDER BY
	//     subscription_products.id,
	//     subscription_products.product;
	GetRemainingCreditToAssignAgentByCompany(ctx context.Context, companyID int64) ([]GetRemainingCreditToAssignAgentByCompanyRow, error)
	GetRentPropertyMediaBranch(ctx context.Context, limit int32) (RentPropertyMediaBranch, error)
	GetRentPropertyMediaBranchByRentId(ctx context.Context, rentPropertyUnitsBranchID int64) (RentPropertyMediaBranch, error)
	GetRentPropertyMediaBranchByUnitIdAndMediaSection(ctx context.Context, arg GetRentPropertyMediaBranchByUnitIdAndMediaSectionParams) (RentPropertyMediaBranch, error)
	GetRentPropertyUnitPlan(ctx context.Context, id int64) (RentPropertyUnitPlan, error)
	GetRentPropertyUnitPlanByTitleAndUnitId(ctx context.Context, arg GetRentPropertyUnitPlanByTitleAndUnitIdParams) (RentPropertyUnitPlan, error)
	GetReport(ctx context.Context, id int64) (Report, error)
	GetRequestByID(ctx context.Context, arg GetRequestByIDParams) (GetRequestByIDRow, error)
	GetRequestCountWithEntity(ctx context.Context, arg GetRequestCountWithEntityParams) (int64, error)
	GetRequestData(ctx context.Context, requestID int64) ([]RequestDatum, error)
	GetRequestEntity(ctx context.Context, requestID int64) (RequestsVerification, error)
	GetRequestTypeByID(ctx context.Context, id int64) (RequestsType, error)
	//INNER JOIN workflows ON a.workflow_step=workflows.id AND @user_id::BIGINT =ANY(workflows.user_ids)
	GetRequestsByStatus(ctx context.Context, arg GetRequestsByStatusParams) ([]GetRequestsByStatusRow, error)
	GetRequestsForUser(ctx context.Context, arg GetRequestsForUserParams) ([]GetRequestsForUserRow, error)
	GetRequestsUserCount(ctx context.Context, arg GetRequestsUserCountParams) (int64, error)
	GetRequiredFieldsForRejectedRequest(ctx context.Context, approvalID int64) ([]RequestDatum, error)
	GetReservationRequestByEmail(ctx context.Context, email string) (ReservationRequest, error)
	GetReservationRequestByID(ctx context.Context, id int32) (ReservationRequest, error)
	GetRetailCategory(ctx context.Context, id int64) (RetailCategory, error)
	GetReviewTermByID(ctx context.Context, arg GetReviewTermByIDParams) (GetReviewTermByIDRow, error)
	GetRole(ctx context.Context, id int64) (Role, error)
	GetRoleByDepartment(ctx context.Context, arg GetRoleByDepartmentParams) (Role, error)
	GetRoleByRole(ctx context.Context, arg GetRoleByRoleParams) (Role, error)
	GetRoleByUserId(ctx context.Context, id int64) (Role, error)
	GetRolePermission(ctx context.Context, id int64) (RolesPermission, error)
	GetRolePermissionByRole(ctx context.Context, rolesID int64) (RolesPermission, error)
	// SELECT COUNT(*) FROM roles_permissions;
	GetRolePermissionRoles(ctx context.Context, arg GetRolePermissionRolesParams) ([]GetRolePermissionRolesRow, error)
	GetRolePermissions(ctx context.Context, roleID int64) (GetRolePermissionsRow, error)
	GetRoomTypeByID(ctx context.Context, id int64) (RoomType, error)
	GetSalePropertyMedia(ctx context.Context, limit int32) (SalePropertyMedium, error)
	GetSalePropertyMediaBranch(ctx context.Context, limit int32) (SalePropertyMediaBranch, error)
	GetSalePropertyMediaBranchBySaleId(ctx context.Context, salePropertyUnitsBranchID int64) (SalePropertyMediaBranch, error)
	GetSalePropertyMediaBranchByUnitIdAndMediaSection(ctx context.Context, arg GetSalePropertyMediaBranchByUnitIdAndMediaSectionParams) (SalePropertyMediaBranch, error)
	GetSalePropertyMediaBySaleId(ctx context.Context, salePropertyUnitsID int64) (SalePropertyMedium, error)
	GetSalePropertyMediaByUnitIdAndMediaSection(ctx context.Context, arg GetSalePropertyMediaByUnitIdAndMediaSectionParams) (SalePropertyMedium, error)
	GetSalePropertyUnitPlan(ctx context.Context, id int64) (SalePropertyUnitPlan, error)
	GetSalePropertyUnitPlanByTitleAndUnitId(ctx context.Context, arg GetSalePropertyUnitPlanByTitleAndUnitIdParams) (SalePropertyUnitPlan, error)
	GetScheduleViewbyId(ctx context.Context, id int64) (ScheduleView, error)
	GetSchedulesByEntity(ctx context.Context, arg GetSchedulesByEntityParams) ([]GetSchedulesByEntityRow, error)
	// Utility query for pagination
	GetSearchTotalCount(ctx context.Context, arg GetSearchTotalCountParams) (int64, error)
	GetSearchedTagsCount(ctx context.Context, tagName string) ([]int64, error)
	GetSectionPermission(ctx context.Context, id int64) (SectionPermission, error)
	GetSectionPermissionByTitle(ctx context.Context, title string) (SectionPermission, error)
	GetSectionPermissionMV(ctx context.Context, id int64) (SectionPermissionMv, error)
	GetSectionTypes(ctx context.Context, dollar_1 []int64) ([]GetSectionTypesRow, error)
	GetSectionsByID(ctx context.Context, id int64) (SectionPermission, error)
	GetService(ctx context.Context, id int64) (GetServiceRow, error)
	GetServiceBranchCompanyReviews(ctx context.Context, limit int32) (ServiceBranchCompanyReview, error)
	GetServiceBranchCompanyReviewsByCompanyId(ctx context.Context, arg GetServiceBranchCompanyReviewsByCompanyIdParams) ([]ServiceBranchCompanyReview, error)
	GetServiceCompaniesReviews(ctx context.Context, limit int32) (ServicesCompaniesReview, error)
	GetServiceCompaniesReviewsByCompanyId(ctx context.Context, arg GetServiceCompaniesReviewsByCompanyIdParams) ([]ServicesCompaniesReview, error)
	GetServiceCompanyBranch(ctx context.Context, id int64) (ServiceCompanyBranch, error)
	GetServiceCompanyBranchByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (ServiceCompanyBranch, error)
	// -- name: GetCountServiceCompanyBranchByMainService :one
	// SELECT COUNT(*) FROM service_company_branches WHERE main_services_id = $1 LIMIT 1;
	// -- name: GetAllServiceCompanyBranchBYMainServiceId :many
	// SELECT * FROM service_company_branches
	// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
	GetServiceCompanyBranchByName(ctx context.Context, companyName string) (ServiceCompanyBranch, error)
	GetServiceCompanyBranchForGraph(ctx context.Context, id int64) (GetServiceCompanyBranchForGraphRow, error)
	GetServiceCompanyByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (ServicesCompany, error)
	// -- name: GetServiceCompanySubscriptionById :one
	// SELECT services_subscription_id FROM services_companies
	// WHERE id = $1;
	GetServiceCompanyDocs(ctx context.Context, id int64) (GetServiceCompanyDocsRow, error)
	GetServiceCompanyForGraph(ctx context.Context, id int64) (GetServiceCompanyForGraphRow, error)
	GetServiceRequestByID(ctx context.Context, id int64) (ServiceRequest, error)
	// -- name: GetServiceRequestDetailsByID :one
	// SELECT
	//     sr.id,
	//     sr.ref_no,
	//     sr.company_types_id,
	//     sr.is_branch,
	//     sr.companies_id,
	//     sr.request_date,
	//     sr.services_id,
	//     sr.requested_by,
	//     sr.status,
	//     p.id AS profile_id,
	//     p.first_name,
	//     p.last_name,
	//     p.phone_number,
	//     p.company_number,
	//     s.title AS service_title,
	//     ms.title AS main_service_title,
	//     srh.reason,
	//     srh.id as service_request_id
	// FROM
	//     service_request AS sr
	// INNER JOIN
	//     users AS u ON sr.requested_by = u.id
	// INNER JOIN
	//     profiles AS p ON u.profiles_id = p.id
	// INNER JOIN
	//     services AS s ON sr.services_id = s.id
	// INNER JOIN
	//     main_services AS ms ON s.main_services_id=ms.id
	// INNER JOIN
	//     service_request_history AS srh ON srh.service_request_id = sr.id
	// WHERE
	//     sr.id=$1
	//     AND sr.status= srh.status
	//     AND sr.status != 6
	//     AND s.status != 6
	//     AND s.status != 5
	//     AND srh.status!=6;
	GetServiceRequestsByStatus(ctx context.Context, status int64) ([]ServiceRequest, error)
	GetServiceReviews(ctx context.Context, arg GetServiceReviewsParams) ([]GetServiceReviewsRow, error)
	GetServices(ctx context.Context, arg GetServicesParams) ([]GetServicesRow, error)
	GetServicesCompaniesBranchesServices(ctx context.Context, limit int32) (ServicesBranchCompaniesService, error)
	GetServicesCompaniesBranchesServicesByServiceCompanyBranchId(ctx context.Context, arg GetServicesCompaniesBranchesServicesByServiceCompanyBranchIdParams) (ServicesBranchCompaniesService, error)
	GetServicesCompaniesBranchesServicesByServiceId(ctx context.Context, arg GetServicesCompaniesBranchesServicesByServiceIdParams) ([]ServicesBranchCompaniesService, error)
	GetServicesCompany(ctx context.Context, id int64) (ServicesCompany, error)
	GetServicesCompanyByName(ctx context.Context, companyName string) (ServicesCompany, error)
	GetServicesCount(ctx context.Context, status int64) (int64, error)
	GetServicesPromotionsByID(ctx context.Context, id int64) (GetServicesPromotionsByIDRow, error)
	GetServicesPromotionsByServiceID(ctx context.Context, service int64) ([]GetServicesPromotionsByServiceIDRow, error)
	GetServicesPromotionsByStatusID(ctx context.Context, status int64) ([]GetServicesPromotionsByStatusIDRow, error)
	GetSession(ctx context.Context, limit int32) (Session, error)
	GetShareDocById(ctx context.Context, id int64) (SharedDoc, error)
	GetShareRequestByRequestorAndDocID(ctx context.Context, arg GetShareRequestByRequestorAndDocIDParams) (ShareRequest, error)
	GetSharedEntities(ctx context.Context, arg GetSharedEntitiesParams) ([]GetSharedEntitiesRow, error)
	// SELECT DISTINCT
	//     sqlc.embed(se),
	//     projects.id,
	//     projects.project_name,
	//     COALESCE(ph.id,0)::BIGINT as phase_id,
	//     COALESCE(ph.phase_name,'')::VARCHAR as phase_name,
	//     COALESCE(p.id,0)::BIGINT as property_id,
	//     COALESCE(p.property_name,'')::VARCHAR as property_names,
	//     COALESCE(units.id,0)::BIGINT as unit_id,
	//     COALESCE(units.unit_title,'')::VARCHAR as unit_title
	// FROM sharing_entities AS se
	// JOIN sharing ON sharing.id=se.sharing_id
	// JOIN projects ON projects.id=sharing.entity_id and sharing.entity_type_id= @project_entity::bigint
	// LEFT join phases AS ph ON
	// 	(CASE
	//             WHEN se.entity_type = @phase_entity::BIGINT AND se.phase_id is null and se.property_id is null THEN ph.id = se.entity_id
	//             WHEN se.entity_type =  @property_entity::bigint and se.property_id is null and se.phase_id is not null THEN ph.id = se.phase_id
	//         END)
	// LEFT join property AS p ON
	// 	(CASE
	//             WHEN se.entity_type = @property_entity::BIGINT AND se.property_id is null and se.phase_id is not null THEN p.id = se.entity_id
	//             WHEN se.entity_type = @unit_entity::bigint and se.property_id is not null and se.phase_id is null THEN p.id = se.property_id
	//         END)
	// LEFT JOIN units on units.id=se.entity_id and se.entity_type= @unit_entity::bigint
	// WHERE
	//     se.sharing_id= @sharing_id::bigint
	// AND
	// 	se.entity_type= @entity_type_id::bigint
	// AND
	// 	(case when @phase_id::bigint= 0 then true else se.phase_id= @phase_id end )
	// AND
	// 	(case when @property_id::bigint= 0 then true else se.property_id= @property_id end )
	// LIMIT sqlc.narg('limit')
	// OFFSET sqlc.narg('offset');
	GetSharedEntitiesCounts(ctx context.Context, arg GetSharedEntitiesCountsParams) (int64, error)
	GetSharedPhases(ctx context.Context, phaseID []int64) ([]GetSharedPhasesRow, error)
	GetSharedProject(ctx context.Context, projectID []int64) ([]GetSharedProjectRow, error)
	// WHERE property.id = ANY(@property_id::bigint[]);
	GetSharedProperty(ctx context.Context, propertyVersionsID []int64) ([]GetSharedPropertyRow, error)
	GetSharedUnit(ctx context.Context, unitsID []int64) ([]GetSharedUnitRow, error)
	GetSharing(ctx context.Context, arg GetSharingParams) (Sharing, error)
	GetSharingEntityById(ctx context.Context, id int64) (SharingEntity, error)
	//------------------------------------- End Sharing  -------------------------------------------------------
	//------------------------------------- New Sharing  Queries -----------------------------------------------
	GetSharingEntityIDsByEntityType(ctx context.Context, arg GetSharingEntityIDsByEntityTypeParams) ([]GetSharingEntityIDsByEntityTypeRow, error)
	GetSimilarPropertiesForProjectProperties(ctx context.Context, arg GetSimilarPropertiesForProjectPropertiesParams) ([]GetSimilarPropertiesForProjectPropertiesRow, error)
	GetSingleActivityDetail(ctx context.Context, id int64) (ContactsActivityDetail, error)
	GetSingleActivityHeader(ctx context.Context, id int64) (ContactsActivityHeader, error)
	GetSingleAdvertisement(ctx context.Context, id int64) (Page, error)
	GetSingleAgentPerformance(ctx context.Context, assignedTo int64) ([]GetSingleAgentPerformanceRow, error)
	GetSingleAgentRoute(ctx context.Context, arg GetSingleAgentRouteParams) (AgentRoute, error)
	GetSingleAgentRouteCheck(ctx context.Context, leadsID int64) (AgentRoute, error)
	GetSingleAqaryGuide(ctx context.Context, id int64) (AqaryGuide, error)
	GetSingleBannerType(ctx context.Context, id int64) (BannerType, error)
	GetSingleCompanyActivity(ctx context.Context, id int64) (CompanyActivity, error)
	GetSingleCompanyActivityDetail(ctx context.Context, arg GetSingleCompanyActivityDetailParams) (GetSingleCompanyActivityDetailRow, error)
	GetSingleCompanyByUserId(ctx context.Context, usersID int64) (Company, error)
	GetSingleCompanyCategory(ctx context.Context, id int64) (CompanyCategory, error)
	GetSingleCompanyCategoryAndActivities(ctx context.Context, arg GetSingleCompanyCategoryAndActivitiesParams) (GetSingleCompanyCategoryAndActivitiesRow, error)
	GetSingleCompanyName(ctx context.Context, arg GetSingleCompanyNameParams) (string, error)
	GetSingleCompanyUserExpertise(ctx context.Context, id int64) (GetSingleCompanyUserExpertiseRow, error)
	GetSingleCompanyVideo(ctx context.Context, id int64) (CompanyVideo, error)
	GetSingleContactCompanyDetails(ctx context.Context, contactsID int64) (ContactsCompanyDetail, error)
	GetSingleContactDocument(ctx context.Context, arg GetSingleContactDocumentParams) ([]ContactsDocument, error)
	GetSingleContactIndividualDetails(ctx context.Context, contactsID int64) (ContactsIndividualDetail, error)
	GetSingleContactShareableDetails(ctx context.Context, contactsID int64) (ShareableContactDetail, error)
	GetSingleDocument(ctx context.Context, contactsID pgtype.Int8) (GetSingleDocumentRow, error)
	GetSingleExhibition(ctx context.Context, id int64) (Exhibition, error)
	GetSingleFacilityAmenity(ctx context.Context, id int64) (FacilitiesAmenity, error)
	GetSingleFollower(ctx context.Context, arg GetSingleFollowerParams) (Follower, error)
	GetSingleGlobalTag(ctx context.Context, id int64) (GlobalTagging, error)
	GetSingleGlobalTagBySection(ctx context.Context, arg GetSingleGlobalTagBySectionParams) (GlobalTagging, error)
	GetSingleJobPortalByName(ctx context.Context, portalName string) ([]JobPortal, error)
	GetSingleJobPortals(ctx context.Context, id int64) (JobPortal, error)
	GetSingleLead(ctx context.Context, id int64) (Lead, error)
	GetSingleLeadCreation(ctx context.Context, leadsID int64) (LeadsCreation, error)
	GetSingleLeadProperty(ctx context.Context, id int64) (LeadsProperty, error)
	GetSinglePage(ctx context.Context, id int64) (Page, error)
	GetSinglePostedCareerPortal(ctx context.Context, id int64) (PostedCareerPortal, error)
	// AND companies.status != 6;
	GetSingleProject(ctx context.Context, id int64) (GetSingleProjectRow, error)
	GetSingleProjectPlanByID(ctx context.Context, id int64) (GetSingleProjectPlanByIDRow, error)
	GetSingleProjectPropertyReference(ctx context.Context, id int64) (GetSingleProjectPropertyReferenceRow, error)
	GetSingleProjectVideo(ctx context.Context, id int64) (ProjectVideo, error)
	//PROPERTY HUB
	// AGRICULTURAL
	// INDUSTRIAL
	GetSinglePropertyRefNo(ctx context.Context, arg GetSinglePropertyRefNoParams) (GetSinglePropertyRefNoRow, error)
	GetSinglePropertyVideo(ctx context.Context, id int64) (PropertiesVideo, error)
	GetSingleShareDoc(ctx context.Context, id int64) (SingleShareDoc, error)
	// SELECT *
	// FROM social_connections
	// WHERE
	//     ("user_id" = $1 AND "requested_by" = $2)
	//     OR
	//     ("user_id" = $2 AND "requested_by" = $1) LIMIT 1;
	// SELECT *
	// FROM social_connections AS sc1
	// INNER JOIN social_connections AS sc2 ON sc1.requested_by = sc2.user_id
	// WHERE
	//     (sc1.user_id = $1 AND sc2.requested_by = $2)
	//     OR
	//     (sc1.user_id = $2 AND sc2.requested_by = $1) LIMIT 1;
	GetSingleSocialConnection(ctx context.Context, arg GetSingleSocialConnectionParams) (SocialConnection, error)
	GetSingleSubscriptionProduction(ctx context.Context, id int64) (SubscriptionProduct, error)
	GetSingleTransaction(ctx context.Context, id int64) (ContactsTransaction, error)
	GetSingleUsernameById(ctx context.Context, id int64) (GetSingleUsernameByIdRow, error)
	GetSkillByID(ctx context.Context, id int64) (Skill, error)
	GetSkillByTitle(ctx context.Context, title string) (Skill, error)
	// -- name: SearchEmployerCareersByTitle :many
	// SELECT sqlc.embed(c)
	// FROM careers c
	// JOIN employers e ON e.id= c.employers_id
	// WHERE
	// job_title ILIKE '%' || $2 || '%' AND
	// career_status != 6 AND e.users_id=$1;
	// -- name: GetCareersCountForEmployer :one
	// SELECT COUNT(*)
	// FROM careers c
	// JOIN employers e ON e.id= c.employers_id
	// WHERE e.users_id=$1 AND c.career_status!=6;
	GetSkillsForCareer(ctx context.Context, id int64) (GetSkillsForCareerRow, error)
	GetSlugByRefNo(ctx context.Context, arg GetSlugByRefNoParams) (GetSlugByRefNoRow, error)
	GetSocialMediaProfilesByEntityAndEntityTypeId(ctx context.Context, arg GetSocialMediaProfilesByEntityAndEntityTypeIdParams) ([]SocialMediaProfile, error)
	GetState(ctx context.Context, limit int32) (State, error)
	GetStateByCountryId(ctx context.Context, arg GetStateByCountryIdParams) ([]State, error)
	GetStateByName(ctx context.Context, arg GetStateByNameParams) (State, error)
	GetStateGuide(ctx context.Context, id int64) (GetStateGuideRow, error)
	GetStateGuideForUpdate(ctx context.Context, arg GetStateGuideForUpdateParams) (GetStateGuideForUpdateRow, error)
	GetStateGuides(ctx context.Context, arg GetStateGuidesParams) ([]GetStateGuidesRow, error)
	GetStateGuidesCount(ctx context.Context, status int64) (int64, error)
	GetStateNew(ctx context.Context, id int64) (State, error)
	GetStatusOfEntity(ctx context.Context, arg GetStatusOfEntityParams) (int64, error)
	GetSubCommunity(ctx context.Context, limit int32) (SubCommunity, error)
	GetSubCommunityByCommunityId(ctx context.Context, arg GetSubCommunityByCommunityIdParams) ([]SubCommunity, error)
	GetSubCommunityByName(ctx context.Context, arg GetSubCommunityByNameParams) (SubCommunity, error)
	GetSubCommunityGuideLines(ctx context.Context, id int64) (GetSubCommunityGuideLinesRow, error)
	GetSubCommunityGuidelineBySubID(ctx context.Context, subCommunityID int64) (SubCommunityGuideline, error)
	//   AND communities.status NOT IN (5, 6)
	GetSubCommunityGuidesLines(ctx context.Context, arg GetSubCommunityGuidesLinesParams) ([]GetSubCommunityGuidesLinesRow, error)
	GetSubCommunityGuidesLinesCount(ctx context.Context) (int64, error)
	GetSubCommunitySettingsByID(ctx context.Context, id int64) (GetSubCommunitySettingsByIDRow, error)
	GetSubCommunitySettingsForUpdate(ctx context.Context, id int64) (GetSubCommunitySettingsForUpdateRow, error)
	GetSubCompaniesByParent(ctx context.Context, arg GetSubCompaniesByParentParams) ([]GetSubCompaniesByParentRow, error)
	GetSubDocumentCategoryByID(ctx context.Context, id int64) (GetSubDocumentCategoryByIDRow, error)
	GetSubSection(ctx context.Context, id int64) (SubSection, error)
	GetSubscribersByType(ctx context.Context, typeID int64) ([]GetSubscribersByTypeRow, error)
	GetSubscriptionByOrderNo(ctx context.Context, orderNo string) (SubscriptionOrder, error)
	GetSubscriptionCost(ctx context.Context, id int64) (GetSubscriptionCostRow, error)
	// Get a subscription order by ID
	GetSubscriptionOrder(ctx context.Context, id int64) (SubscriptionOrder, error)
	GetSubscriptionOrderByOrderNo(ctx context.Context, orderNo string) ([]SubscriptionOrder, error)
	GetSubscriptionOrderBySubscriberID(ctx context.Context, subscriberID int64) (SubscriptionOrder, error)
	GetSubscriptionOrderBySubscriberIDAndType(ctx context.Context, arg GetSubscriptionOrderBySubscriberIDAndTypeParams) ([]SubscriptionOrder, error)
	GetSubscriptionOrderDetail(ctx context.Context, orderNo string) ([]GetSubscriptionOrderDetailRow, error)
	GetSubscriptionOrderDetailsForContract(ctx context.Context, orderNo string) ([]GetSubscriptionOrderDetailsForContractRow, error)
	GetSubscriptionOrderPackageDetail(ctx context.Context, orderNo string) ([]GetSubscriptionOrderPackageDetailRow, error)
	// -- name: GetCompanyLatestActiveSubscriptionOrder :many
	// SELECT
	//     subscription_products.product,
	//     subscription_products.id AS product_id,
	//     SUM(subscription_package.no_of_products) AS total_no_of_products
	// FROM
	//     subscription_order
	// INNER JOIN
	//     subscription_package ON subscription_order.id = subscription_package.subscription_order_id
	// INNER JOIN
	//     subscription_products ON subscription_package.product = subscription_products.id
	// WHERE
	//     subscriber_id = @company_id
	//     AND subscriber_type = 1
	//     AND subscription_order.status = 2 -- active subscription order
	// GROUP BY
	//     subscription_products.id, subscription_products.product
	// ORDER BY
	//     subscription_products.id;
	GetSubscriptionOrderPackageDetailByUserID(ctx context.Context, arg GetSubscriptionOrderPackageDetailByUserIDParams) ([]GetSubscriptionOrderPackageDetailByUserIDRow, error)
	GetSubscriptionOrdersByCompany(ctx context.Context, arg GetSubscriptionOrdersByCompanyParams) ([]GetSubscriptionOrdersByCompanyRow, error)
	GetSubscriptionOrdersCountByCompany(ctx context.Context, arg GetSubscriptionOrdersCountByCompanyParams) (int64, error)
	// Get a subscription package by ID
	GetSubscriptionPackage(ctx context.Context, id int64) (SubscriptionPackage, error)
	GetSubscriptionPrice(ctx context.Context, id int64) (SubscriptionsPrice, error)
	GetSubscriptionPriceByName(ctx context.Context, arg GetSubscriptionPriceByNameParams) (SubscriptionsPrice, error)
	GetSumOfPhaseMediaById(ctx context.Context, id int64) (int32, error)
	// -- name: UpdatePhaseMedia :one
	// UPDATE phases_media
	// SET
	// image_url =  $1,
	// image360_url =   $2,
	// video_url =   $3,
	// panaroma_url =  $4,
	// main_media_section =   $5,
	// phases_id = $6,
	// updated_at = $7
	// WHERE id =  $8
	// RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, phases_id, created_at, updated_at;
	GetSumOfPhasesMedia(ctx context.Context, phasesID pgtype.Int8) (int32, error)
	// -- name: GetCountAllProjectMediaByProjectId :one
	// WITH x AS(
	// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND image_url IS NOT NULL
	// UNION ALL
	// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND image360_url IS NOT NULL
	// UNION ALL
	// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND video_url IS NOT NULL
	// UNION ALL
	// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND panaroma_url IS NOT NULL
	// ) SELECT count(*) FROM x;
	// -- name: GetAllProjectMediaByProjectIdAndMainMediaSection :many
	// With x As (
	//  SELECT  main_media_section FROM project_media
	//  WHERE projects_id = $1
	// ) SELECT * From x;
	// -- name: GetAllProjectMediaByMainMediaSectionAndId :one
	// with x As (
	//  SELECT * FROM project_media
	//  WHERE main_media_section = $2 AND projects_id = $1
	// ) SELECT * From x;
	GetSumOfProjectMedia(ctx context.Context, projectsID pgtype.Int8) (int32, error)
	GetSumOfProjectMediaById(ctx context.Context, id int64) (int32, error)
	// -- name: GetAllProjectPropertiesMainMediaSectionById :many
	// With x As (
	//  SELECT  main_media_section FROM project_property_media
	//  WHERE project_property_media.project_properties_id = $1
	// ) SELECT * From x;
	// -- name: GetAllProjectPropertiesByMainMediaSectionAndId :one
	// with x As (
	//  SELECT * FROM project_property_media
	//  WHERE main_media_section = $2 AND project_properties_id = $1
	// ) SELECT * From x;
	GetSumOfProjectPropertyMedia(ctx context.Context, propertiesID int64) (int32, error)
	GetSumOfSaleMedia(ctx context.Context, salePropertyUnitsID int64) (int32, error)
	GetSumOfUnitMedia(ctx context.Context, arg GetSumOfUnitMediaParams) (int32, error)
	GetSuperUser(ctx context.Context) (User, error)
	GetTagsByID(ctx context.Context, id int64) (Tag, error)
	GetTaxCategoryById(ctx context.Context, id int64) (TaxCategory, error)
	GetTaxManagementActivities(ctx context.Context, arg GetTaxManagementActivitiesParams) ([]TaxManagementActivity, error)
	GetTaxManagementActivitiesChanges(ctx context.Context, activitiesID int64) ([]GetTaxManagementActivitiesChangesRow, error)
	GetTaxMangementActivities(ctx context.Context) ([]TaxManagementActivity, error)
	GetTaxMangementActivitiesById(ctx context.Context, id int64) (TaxManagementActivity, error)
	GetTaxMangementActivitiesWithPg(ctx context.Context, arg GetTaxMangementActivitiesWithPgParams) ([]TaxManagementActivity, error)
	GetTaxMangementActivityByRefIdAndModuleName(ctx context.Context, arg GetTaxMangementActivityByRefIdAndModuleNameParams) (TaxManagementActivity, error)
	GetTaxMangementById(ctx context.Context, id int64) (TaxManagement, error)
	GetTheStepForWorkFlow(ctx context.Context, id int64) (int64, error)
	GetTimeSlotsForEntity(ctx context.Context, arg GetTimeSlotsForEntityParams) ([]GetTimeSlotsForEntityRow, error)
	GetToggleCheckByEntityIDAndEntityTypeID(ctx context.Context, arg GetToggleCheckByEntityIDAndEntityTypeIDParams) (TogglesCheck, error)
	GetTotalAvgHolidayHomeStayReviews(ctx context.Context, holidayHomeID int64) (pgtype.Numeric, error)
	GetTowerByID(ctx context.Context, id int64) (Tower, error)
	// -- name: GetUnitsWithAdvancedSearch :many
	// WITH facilities AS(
	//     SELECT uv.id,
	//     array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS facilities
	//     FROM unit_versions uv
	//     JOIN units u on u.id=uv.unit_id
	//     LEFT JOIN facilities_amenities_entity fae ON fae.entity_id=u.id AND fae.entity_type_id=5
	//     LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=1
	//     group by uv.id -- facilities
	// ),
	// amenities AS(
	//     SELECT uv.id,
	//     array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS amenities
	//     FROM unit_versions uv
	//     JOIN units u on u.id=uv.unit_id
	//     LEFT JOIN facilities_amenities_entity fae ON fae.entity_id=u.id AND fae.entity_type_id=5
	//     LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=2
	//     group by uv.id -- amenities
	// )
	// SELECT
	// sqlc.embed(uv),
	// sqlc.embed(u),
	// sqlc.embed(a),
	// f.facilities,
	// am.amenities
	// FROM unit_versions uv
	// JOIN units u on u.id=uv.unit_id
	// left JOIN addresses a on u.addresses_id=a.id
	// LEFT JOIN cities ci ON a.cities_id = ci.id
	// LEFT JOIN communities com ON a.communities_id = com.id
	// LEFT JOIN sub_communities subcom ON a.sub_communities_id = subcom.id
	// LEFT JOIN facilities f ON f.id=uv.id
	// LEFT JOIN amenities am ON am.id=uv.id
	// WHERE
	// 	(CASE WHEN @agent_id::bigint= 0 then true else uv.listed_by=  @agent_id::bigint end)
	// AND
	//     (@is_verified::bool IS NULL
	//         OR u.is_verified = @is_verified::bool)
	// AND
	//     (CASE WHEN  @country_id::bigint=0 THEN TRUE ELSE a.countries_id = @country_id::bigint end)
	// AND
	//     (CASE WHEN @company_id::bigint=0 THEN TRUE ELSE u.company_id= @company_id::bigint END)
	// AND
	//     -- 1=>Sale, 2=>Rent, 3=>Swap & 4=>Booking
	//     uv."type" = @category::bigint
	// AND
	//     -- from unit type table
	//     (CASE WHEN ARRAY_LENGTH(@unit_types::bigint[], 1) IS NULL THEN TRUE ELSE u.unit_type_id = ANY(@unit_types::bigint[]) END)
	// AND
	// 	(case when @unit_no::varchar='' then true else  u.unit_no = @unit_no::varchar end )
	//    AND  u.unitno_is_public = TRUE  --unit no
	// AND
	//     (CASE WHEN @ref_no::varchar='' THEN TRUE ELSE uv.ref_no = @ref_no::varchar END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@keywords::VARCHAR[], 1) IS NULL --keywords
	//     THEN TRUE ELSE
	//     uv.title ILIKE ANY(@keywords::VARCHAR[])
	//     OR uv.description ILIKE ANY(@keywords::VARCHAR[])
	//     OR ci.city ILIKE ANY(@keywords::VARCHAR[])
	//     OR com.community ILIKE ANY(@keywords::VARCHAR[])
	//     OR subcom.sub_community ILIKE ANY(@keywords::VARCHAR[])
	//     END)
	// AND
	//         -- location
	//     (CASE WHEN @city_id::bigint=0 THEN TRUE ELSE a.cities_id= @city_id::bigint END)
	//      AND
	//      (CASE WHEN @communities_id::bigint=0 THEN TRUE ELSE a.communities_id= @communities_id::bigint END)
	//      AND
	//      (CASE WHEN @sub_communities_id::bigint=0 THEN TRUE ELSE a.sub_communities_id= @sub_communities_id::bigint END)
	// AND
	//         --created at
	//     (CASE
	//     WHEN @dates::BIGINT= 0 THEN true
	//     WHEN COALESCE(@dates::BIGINT,1) =1 THEN true
	//     WHEN @dates::BIGINT= 2 THEN uv.created_at >= DATE_TRUNC ('day', CURRENT_DATE)
	//     WHEN @dates::BIGINT = 3 THEN uv.created_at >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week')AND uv.created_at < DATE_TRUNC('week', CURRENT_DATE)
	//     WHEN @dates::BIGINT = 4 THEN uv.created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND uv.created_at < DATE_TRUNC('month', CURRENT_DATE)
	//     END)
	//     --unit rank
	// AND
	//     (ARRAY_LENGTH(@rank::bigint [],1) IS NULL
	//         OR uv.unit_rank = ANY (@rank::bigint []))
	// --FACTS STUFF--
	// AND
	//     (CASE WHEN @completion_status::bigint IS NULL THEN
	//         TRUE
	//     WHEN @completion_status::bigint = 0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'completion_status')::bigint = @completion_status::bigint
	//     END)
	// -- AND
	// --     (u.facts->>'starting_price' >= @starting_price OR @disable_starting_price::BOOLEAN)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@bedroom::VARCHAR[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bedroom')::varchar = ANY(@bedroom::VARCHAR[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@bathroom::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bathroom')::bigint = ANY(@bathroom::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_floor::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_floor')::bigint = ANY(@no_of_floor::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_payment::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_payment')::bigint = ANY(@no_of_payment::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_retail::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_retail')::bigint = ANY(@no_of_retail::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_pool::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_pool')::bigint = ANY(@no_of_pool::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@furnished::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'furnished')::bigint = ANY(@furnished::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@elevator::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'elevator')::bigint = ANY(@elevator::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@ownership::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'ownership')::bigint = ANY(@ownership::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@parking::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'parking')::bigint = ANY(@parking::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@views::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'views')::bigint[] && @views::bigint[] END)
	// AND -- build up area
	//     (CASE WHEN @min_built_up_area::float IS NULL THEN
	//         TRUE
	//     WHEN @min_built_up_area::float = 0.0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'built_up_area')::float >= @min_built_up_area::float
	//     END
	//     AND
	//     CASE WHEN @max_built_up_area::float IS NULL THEN
	//         TRUE
	//     WHEN @max_built_up_area::float = 0.0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'built_up_area')::float <= @max_built_up_area::float
	//     END)
	// AND -- plot area
	//    (CASE WHEN @min_plot_area::float IS NULL THEN
	//             TRUE
	//         WHEN @min_plot_area::float = 0.0 THEN
	//             TRUE
	//         ELSE
	//             (u.facts->>'plot_area')::float >= @min_plot_area::float
	//         END
	//         -- max plot area
	//         AND CASE WHEN @max_plot_area::float IS NULL THEN
	//             TRUE
	//         WHEN @max_plot_area::float = 0.0 THEN
	//             TRUE
	//         ELSE
	//             (u.facts->>'plot_area')::float <= @max_plot_area::float
	//         END)
	// -- AND --price
	//         -- ((u.facts->>'price')::bigint >= @min_price::bigint
	//         -- -- max plot area
	//         -- AND CASE
	//         -- WHEN @max_price::bigint = 0 THEN
	//         --     TRUE
	//         -- ELSE
	//         --     (u.facts->>'price')::bigint <= @max_price::bigint
	//         -- END)
	// --  amenities
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@amenities::bigint [],
	//             1) IS NULL THEN
	//             TRUE
	//         ELSE
	//             am.amenities && @amenities::bigint []
	//         END)
	//     --  facilities
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@facilities::bigint [],
	//             1) IS NULL THEN
	//             TRUE
	//         ELSE
	//             f.facilities && @facilities::bigint []
	//         END)
	// ORDER BY
	//     CASE
	//         WHEN @sort::bigint = 1 THEN uv.updated_at END DESC,
	//     CASE
	//         WHEN @sort::bigint = 4 THEN uv.unit_rank END ASC,
	//     CASE
	//         WHEN @sort::bigint = 2 THEN (u.facts->>'price')::bigint END ASC
	//  LIMIT $1
	// OFFSET $2;
	// -- name: GetUnitsCountWithAdvancedSearch :one
	// WITH facilities AS(
	// 	SELECT uv.id,
	// 	array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS facilities
	// 	FROM unit_versions uv
	// 	JOIN units u on u.id=uv.unit_id
	// 	LEFT JOIN facilities_amenities_entity fae ON fae.entity_id=u.id AND fae.entity_type_id=5
	// 	LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=1
	// 	group by uv.id -- facilities
	// ),
	// amenities AS(
	// 	SELECT uv.id,
	// 	array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS amenities
	// 	FROM unit_versions uv
	// 	JOIN units u on u.id=uv.unit_id
	// 	LEFT JOIN facilities_amenities_entity fae ON fae.entity_id=u.id AND fae.entity_type_id=5
	// 	LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id AND fa."type"=2
	// 	group by uv.id -- amenities
	// )
	// SELECT
	// COUNT(uv.*)
	// FROM unit_versions uv
	// JOIN units u on u.id=uv.unit_id
	// left JOIN addresses a on u.addresses_id=a.id
	// LEFT JOIN cities ci ON a.cities_id = ci.id
	// LEFT JOIN communities com ON a.communities_id = com.id
	// LEFT JOIN sub_communities subcom ON a.sub_communities_id = subcom.id
	// LEFT JOIN facilities f ON f.id=uv.id
	// LEFT JOIN amenities am ON am.id=uv.id
	// WHERE
	// 	(CASE WHEN @agent_id::bigint= 0 then true else uv.listed_by=  @agent_id::bigint end)
	// AND
	//     (@is_verified::bool IS NULL
	//         OR u.is_verified = @is_verified::bool)
	// AND
	//     (CASE WHEN  @country_id::bigint=0 THEN TRUE ELSE a.countries_id = @country_id::bigint end) --country
	// AND
	//     (CASE WHEN @company_id::bigint=0 THEN TRUE ELSE u.company_id= @company_id::bigint END)
	// AND
	//     -- 1=>Sale, 2=>Rent, 3=>Swap & 4=>Booking
	//     uv."type" = @category::bigint
	// AND
	//     -- from unit type table
	//     (CASE WHEN ARRAY_LENGTH(@unit_types::bigint[], 1) IS NULL THEN TRUE ELSE u.unit_type_id = ANY(@unit_types::bigint[]) END)
	// AND
	// 	(case when @unit_no::varchar='' then true else  u.unit_no = @unit_no::varchar end )
	//    AND  u.unitno_is_public = TRUE  --unit no
	// AND
	//     (CASE WHEN @ref_no::varchar='' THEN TRUE ELSE uv.ref_no = @ref_no::varchar END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@keywords::VARCHAR[], 1) IS NULL --keywords
	//     THEN TRUE ELSE
	//     uv.title ILIKE ANY(@keywords::VARCHAR[])
	//     OR uv.description ILIKE ANY(@keywords::VARCHAR[])
	//     OR ci.city ILIKE ANY(@keywords::VARCHAR[])
	//     OR com.community ILIKE ANY(@keywords::VARCHAR[])
	//     OR subcom.sub_community ILIKE ANY(@keywords::VARCHAR[])
	//     END)
	// AND
	//         -- location
	//     (CASE WHEN @city_id::bigint=0 THEN TRUE ELSE a.cities_id= @city_id::bigint END)
	//      AND
	//      (CASE WHEN @communities_id::bigint=0 THEN TRUE ELSE a.communities_id= @communities_id::bigint END)
	//      AND
	//      (CASE WHEN @sub_communities_id::bigint=0 THEN TRUE ELSE a.sub_communities_id= @sub_communities_id::bigint END)
	// AND
	//         --created at
	//     (CASE
	//     WHEN @dates::BIGINT= 0 THEN true
	//     WHEN COALESCE(@dates::BIGINT,1) =1 THEN true
	//     WHEN @dates::BIGINT= 2 THEN uv.created_at >= DATE_TRUNC ('day', CURRENT_DATE)
	//     WHEN @dates::BIGINT = 3 THEN uv.created_at >= DATE_TRUNC('week', CURRENT_DATE - INTERVAL '1 week')AND uv.created_at < DATE_TRUNC('week', CURRENT_DATE)
	//     WHEN @dates::BIGINT = 4 THEN uv.created_at >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND uv.created_at < DATE_TRUNC('month', CURRENT_DATE)
	//     END)
	//     --unit rank
	// AND
	//     (ARRAY_LENGTH(@rank::bigint [],1) IS NULL
	//         OR uv.unit_rank = ANY (@rank::bigint []))
	// --FACTS STUFF--
	// AND
	//     (CASE WHEN @completion_status::bigint IS NULL THEN
	//         TRUE
	//     WHEN @completion_status::bigint = 0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'completion_status')::bigint = @completion_status::bigint
	//     END)
	// -- AND
	// --     (u.facts->>'starting_price' >= @starting_price OR @disable_starting_price::BOOLEAN)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@bedroom::VARCHAR[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bedroom')::varchar = ANY(@bedroom::VARCHAR[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@bathroom::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bathroom')::bigint = ANY(@bathroom::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_floor::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_floor')::bigint = ANY(@no_of_floor::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_payment::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_payment')::bigint = ANY(@no_of_payment::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_retail::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_retail')::bigint = ANY(@no_of_retail::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@no_of_pool::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_pool')::bigint = ANY(@no_of_pool::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@furnished::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'furnished')::bigint = ANY(@furnished::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@elevator::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'elevator')::bigint = ANY(@elevator::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@ownership::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'ownership')::bigint = ANY(@ownership::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@parking::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'parking')::bigint = ANY(@parking::bigint[]) END)
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@views::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'views')::bigint[] && @views::bigint[] END)
	// AND -- build up area
	//     (CASE WHEN @min_built_up_area::float IS NULL THEN
	//         TRUE
	//     WHEN @min_built_up_area::float = 0.0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'built_up_area')::float >= @min_built_up_area::float
	//     END
	//     AND
	//     CASE WHEN @max_built_up_area::float IS NULL THEN
	//         TRUE
	//     WHEN @max_built_up_area::float = 0.0 THEN
	//         TRUE
	//     ELSE
	//         (u.facts->>'built_up_area')::float <= @max_built_up_area::float
	//     END)
	// AND -- plot area
	//    (CASE WHEN @min_plot_area::float IS NULL THEN
	//             TRUE
	//         WHEN @min_plot_area::float = 0.0 THEN
	//             TRUE
	//         ELSE
	//             (u.facts->>'plot_area')::float >= @min_plot_area::float
	//         END
	//         -- max plot area
	//         AND CASE WHEN @max_plot_area::float IS NULL THEN
	//             TRUE
	//         WHEN @max_plot_area::float = 0.0 THEN
	//             TRUE
	//         ELSE
	//             (u.facts->>'plot_area')::float <= @max_plot_area::float
	//         END)
	// -- AND --price
	//         -- ((u.facts->>'price')::bigint >= @min_price::bigint
	//         -- -- max plot area
	//         -- AND CASE
	//         -- WHEN @max_price::bigint = 0 THEN
	//         --     TRUE
	//         -- ELSE
	//         --     (u.facts->>'price')::bigint <= @max_price::bigint
	//         -- END)
	// --  amenities
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@amenities::bigint [],
	//             1) IS NULL THEN
	//             TRUE
	//         ELSE
	//             am.amenities && @amenities::bigint []
	//         END)
	//     --  facilities
	// AND
	//     (CASE WHEN ARRAY_LENGTH(@facilities::bigint [],
	//             1) IS NULL THEN
	//             TRUE
	//         ELSE
	//             f.facilities && @facilities::bigint []
	//         END);
	GetUnit(ctx context.Context, id int64) (GetUnitRow, error)
	GetUnitBranchType(ctx context.Context, limit int32) (UnitTypesBranch, error)
	GetUnitByID(ctx context.Context, id int64) (Unit, error)
	GetUnitById(ctx context.Context, id int64) (AuctionsUnit, error)
	GetUnitByRefNo(ctx context.Context, refNo string) (GetUnitByRefNoRow, error)
	GetUnitDetailsForQualityScore(ctx context.Context, arg GetUnitDetailsForQualityScoreParams) (GetUnitDetailsForQualityScoreRow, error)
	GetUnitFact(ctx context.Context, id int64) (UnitFact, error)
	GetUnitFactByUnitID(ctx context.Context, unitID int64) (AuctionsUnitFact, error)
	GetUnitFactsByUnit(ctx context.Context, arg GetUnitFactsByUnitParams) (UnitFact, error)
	GetUnitLocationByUnitID(ctx context.Context, id int64) (GetUnitLocationByUnitIDRow, error)
	// -- name: GetCountAllUnitMediaByUnitId :one
	// WITH x AS(
	// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND image_url IS NOT NULL
	// UNION ALL
	// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND image360_url IS NOT NULL
	// UNION ALL
	// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND video_url IS NOT NULL
	// UNION ALL
	// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,units_id FROM  unit_media WHERE unit_media.units_id = $1 AND panaroma_url IS NOT NULL
	// ) SELECT COUNT(*) FROM x;
	GetUnitMedia(ctx context.Context, id int64) (UnitMedium, error)
	// SELECT
	//     COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
	// FROM
	//     unit_media
	// WHERE
	//     units_id = $1;
	GetUnitMediaByGalleryAndMediaType(ctx context.Context, arg GetUnitMediaByGalleryAndMediaTypeParams) (UnitMedium, error)
	GetUnitPlans(ctx context.Context, id int64) (UnitPlan, error)
	GetUnitPlansByTitleAndUnitId(ctx context.Context, arg GetUnitPlansByTitleAndUnitIdParams) (UnitPlan, error)
	GetUnitType(ctx context.Context, id int64) (GetUnitTypeRow, error)
	GetUnitTypeByID(ctx context.Context, id int64) (UnitType, error)
	GetUnitTypeByTypeAndUsage(ctx context.Context, arg GetUnitTypeByTypeAndUsageParams) (UnitType, error)
	GetUnitTypeSettings(ctx context.Context, id int64) (UnitType, error)
	GetUnitTypeVariation(ctx context.Context, id int64) (UnitTypeVariation, error)
	// SELECT COUNT(*) FROM unit_type_detail
	// WHERE property = $1 AND properties_id = $2;
	GetUnitTypesByPropertiesIdAndProperty(ctx context.Context, arg GetUnitTypesByPropertiesIdAndPropertyParams) ([]GetUnitTypesByPropertiesIdAndPropertyRow, error)
	GetUnitTypesNamesByPropertiesIdAndPropertyType(ctx context.Context, arg GetUnitTypesNamesByPropertiesIdAndPropertyTypeParams) ([]GetUnitTypesNamesByPropertiesIdAndPropertyTypeRow, error)
	GetUnitVersionById(ctx context.Context, id int64) (UnitVersion, error)
	GetUnitVersionByUnitId(ctx context.Context, unitID int64) (UnitVersion, error)
	GetUnitVersionByUnitVersionID(ctx context.Context, unitID int64) (GetUnitVersionByUnitVersionIDRow, error)
	GetUnits(ctx context.Context, id int64) (Unit, error)
	GetUnitsByPropertyIDs(ctx context.Context, arg GetUnitsByPropertyIDsParams) ([]GetUnitsByPropertyIDsRow, error)
	GetUnitsDocuments(ctx context.Context, id int64) (GetUnitsDocumentsRow, error)
	GetUnitsDocumentsByUnitIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetUnitsDocumentsByUnitIdAndDocCatIdAndSubDocCatIdParams) (GetUnitsDocumentsByUnitIdAndDocCatIdAndSubDocCatIdRow, error)
	GetUnitsProject(ctx context.Context, arg GetUnitsProjectParams) ([]GetUnitsProjectRow, error)
	GetUnitsTypeSettingsCount(ctx context.Context, status int64) (int64, error)
	GetUnitsTypeSittings(ctx context.Context, arg GetUnitsTypeSittingsParams) ([]GetUnitsTypeSittingsRow, error)
	// AT TIME ZONE 'Asia/Dubai'
	GetUpcomingSchedules(ctx context.Context) ([]GetUpcomingSchedulesRow, error)
	GetUser(ctx context.Context, id int64) (User, error)
	GetUserAccessForProject(ctx context.Context, arg GetUserAccessForProjectParams) ([]Project, error)
	GetUserAddressByUserId(ctx context.Context, id int64) (Address, error)
	// -- name: VerifyingCompanyUser :one
	// Update users
	// SET is_verified = true,
	// status = 8
	// WHERE id = $1
	// RETURNING *;
	GetUserAssociatedCompanies(ctx context.Context, usersID int64) ([]GetUserAssociatedCompaniesRow, error)
	GetUserBankAccountDetails(ctx context.Context, userID int64) (BankAccountDetail, error)
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByEmailRegardless(ctx context.Context, arg GetUserByEmailRegardlessParams) (PlatformUser, error)
	GetUserByEmailRegardlessSuperAdmin(ctx context.Context, email string) (User, error)
	GetUserByName(ctx context.Context, username string) (User, error)
	GetUserByPhoneNumber(ctx context.Context, phoneNumber pgtype.Text) (User, error)
	GetUserByPhoneVerified(ctx context.Context, arg GetUserByPhoneVerifiedParams) (User, error)
	GetUserCompanyPermissionsByID(ctx context.Context, arg GetUserCompanyPermissionsByIDParams) ([]int64, error)
	GetUserCompanySubSectionPermissionsByID(ctx context.Context, arg GetUserCompanySubSectionPermissionsByIDParams) ([]int64, error)
	GetUserDetailsByUserName(ctx context.Context, userName string) (GetUserDetailsByUserNameRow, error)
	// SELECT * FROM company_users
	// WHERE users_id = $1;
	// -- name: GetCompanyByCompanyUser :one
	// SELECT
	//     COALESCE(
	//         bc.id,
	//         bcb.id,
	//         dc.id,
	//         dcb.id,
	//         sc.id,
	//         dc.id
	//     ) AS company_id,
	//     COALESCE(
	//         bc.is_branch,
	//         bcb.is_branch,
	//         dc.is_branch,
	//         dcb.is_branch,
	//         sc.is_branch,
	//         dc.is_branch
	//     ) AS is_branch,
	//     COALESCE(
	//         bc.company_type,
	//         bcb.company_type,
	//         dc.company_type,
	//         dcb.company_type,
	//         sc.company_type,
	//         dc.company_type
	//     ) AS company_type,
	//     COALESCE(
	//         bc.company_name,
	//         bcb.company_name,
	//         dc.company_name,
	//         dcb.company_name,
	//         sc.company_name,
	//         dc.company_name,
	//         'no company'
	//     ) AS company_name,
	//     cu.designation
	// FROM company_users AS cu
	// LEFT JOIN broker_companies bc ON cu.company_id = bc.id AND cu.is_branch = false AND cu.company_type = 1
	// LEFT JOIN broker_companies_branches bcb ON cu.company_id = bcb.id AND cu.is_branch = true AND cu.company_type = 1
	// LEFT JOIN developer_companies dc ON cu.company_id = dc.id AND cu.is_branch = false AND cu.company_type = 2
	// LEFT JOIN developer_company_branches dcb ON cu.company_id = dcb.id AND cu.is_branch = true AND cu.company_type = 2
	// LEFT JOIN services_companies sc ON cu.company_id = sc.id AND cu.is_branch = false AND cu.company_type = 3
	// LEFT JOIN product_companies pc ON cu.company_id = pc.id AND cu.is_branch = false AND cu.company_type = 4
	// WHERE cu.users_id = $1
	// limit 1;
	GetUserFromCompany(ctx context.Context, id int64) (GetUserFromCompanyRow, error)
	GetUserIDFromBrokerCompany(ctx context.Context, id int64) (int64, error)
	GetUserIDFromBrokerCompanyBranch(ctx context.Context, id int64) (int64, error)
	//  //! getting users from company ....
	GetUserIDFromCompanies(ctx context.Context, arg GetUserIDFromCompaniesParams) (int64, error)
	GetUserIDFromDeveloperCompany(ctx context.Context, id int64) (int64, error)
	GetUserIDFromDeveloperCompanyBranch(ctx context.Context, id int64) (int64, error)
	GetUserIDFromServiceCompany(ctx context.Context, id int64) (int64, error)
	GetUserIDFromServiceCompanyBranch(ctx context.Context, id int64) (int64, error)
	GetUserIdByMobile(ctx context.Context, phoneNumber pgtype.Text) (int64, error)
	GetUserIdByProfileId(ctx context.Context, id int64) (int64, error)
	GetUserIdFromContactsId(ctx context.Context, id int64) (int64, error)
	GetUserInfoById(ctx context.Context, id int64) (GetUserInfoByIdRow, error)
	GetUserLicenseByID(ctx context.Context, id int64) (License, error)
	GetUserPermissionsByID(ctx context.Context, arg GetUserPermissionsByIDParams) (UserCompanyPermission, error)
	// TODO: remove after checking ........
	GetUserPermissionsTestByID(ctx context.Context, arg GetUserPermissionsTestByIDParams) ([]int64, error)
	// // use this one to fetch all
	GetUserRegardlessOfStatus(ctx context.Context, id int64) (GetUserRegardlessOfStatusRow, error)
	GetUserSubSectionPermissionsTestByID(ctx context.Context, arg GetUserSubSectionPermissionsTestByIDParams) ([]int64, error)
	GetUserType(ctx context.Context, id int64) (UserType, error)
	GetUserWithAdmin(ctx context.Context, id int64) (User, error)
	GetUsernamesByUserIdsExcludingStatus6(ctx context.Context, id int64) ([]GetUsernamesByUserIdsExcludingStatus6Row, error)
	GetViews(ctx context.Context, limit int32) (View, error)
	GetViewsWithStatus(ctx context.Context, arg GetViewsWithStatusParams) (View, error)
	// Get a webportal by ID
	GetWebportalByID(ctx context.Context, id int64) (Webportal, error)
	GetWorkflowByID(ctx context.Context, id int64) (GetWorkflowByIDRow, error)
	GetXMLActiveCompanyProfileByLicenseNo(ctx context.Context, licenseNo string) (GetXMLActiveCompanyProfileByLicenseNoRow, error)
	GetXMLPropertyIDsToDelete(ctx context.Context, arg GetXMLPropertyIDsToDeleteParams) (GetXMLPropertyIDsToDeleteRow, error)
	GetXMLURL(ctx context.Context, id int64) (GetXMLURLRow, error)
	GetXMLUnitIDsToDeleteByEntity(ctx context.Context, arg GetXMLUnitIDsToDeleteByEntityParams) (GetXMLUnitIDsToDeleteByEntityRow, error)
	GetXMLUnitIDsToDeleteByRefNoAndEntity(ctx context.Context, arg GetXMLUnitIDsToDeleteByRefNoAndEntityParams) (GetXMLUnitIDsToDeleteByRefNoAndEntityRow, error)
	GetfaqsByStatus(ctx context.Context, arg GetfaqsByStatusParams) ([]GetfaqsByStatusRow, error)
	GetfaqsByStatusByCompID(ctx context.Context, arg GetfaqsByStatusByCompIDParams) ([]GetfaqsByStatusByCompIDRow, error)
	// only draft subscription order
	InActiveSubscriptionOrder(ctx context.Context, orderNo string) (SubscriptionOrder, error)
	InsertContactsCompanyDetails(ctx context.Context, arg InsertContactsCompanyDetailsParams) (ContactsCompanyDetail, error)
	InsertFaqReaction(ctx context.Context, arg InsertFaqReactionParams) (FaqUserReaction, error)
	InsertJobCategory(ctx context.Context, arg InsertJobCategoryParams) (JobCategory, error)
	//INNER JOIN workflows ON workflows.id=approvals.workflow_step AND @user_id::BIGINT =ANY(workflows.user_ids)
	IsEligibleForRequestResponse(ctx context.Context, arg IsEligibleForRequestResponseParams) (bool, error)
	// -- name: GetAmenitiesForProjectByCatg :many
	// SELECT
	// 		a.*,
	// 		fmc.category
	// FROM
	//         projects p
	// JOIN LATERAL unnest(p.amenities_id) AS amenity_id ON true
	// JOIN amenities a ON a.id = amenity_id
	// JOIN facilities_amenities_categories fmc ON a.category_id=fmc.id
	// WHERE p.id=$1 AND a.category_id=$2;
	IsMultiPhaseProject(ctx context.Context, id int64) (pgtype.Bool, error)
	IsRequestActiveOrValid(ctx context.Context, arg IsRequestActiveOrValidParams) (bool, error)
	// SELECT *,
	//   CASE
	//     WHEN @check_for = 'unit' THEN
	//       CASE
	//         WHEN is_unit = @is_unit AND property_unit_id = @property_unit_id  AND unit_category =  @unit_category
	//         THEN 'Unit query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'property' THEN
	//       CASE
	//         WHEN  is_property = @is_property AND property_key = @property_key AND property_unit_id = @property_unit_id
	//          AND (is_unit IS NULL  OR is_unit IS FALSE) THEN 'Property query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'project_with_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id = @phase_id AND project_id = @project_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN 'Project with phase query executed'
	//         ELSE 'No matching condition'
	//       END
	//     WHEN @check_for = 'project_without_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id IS NULL AND project_id = @project_id
	//         AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//         THEN 'Project without phase query executed'
	//         ELSE 'No matching condition'
	//       END
	//     ELSE 'Invalid check_for parameter'
	//   END AS query_executed
	// FROM publish_listing
	// WHERE
	//   CASE
	//     WHEN @check_for = 'unit' THEN
	//       CASE
	//         WHEN is_unit = @is_unit AND property_unit_id = @property_unit_id  AND created_by = @user_id
	//          AND unit_category =  @unit_category  THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'property' THEN
	//       CASE
	//         WHEN is_property = @is_property AND property_key = @property_key AND property_unit_id = @property_unit_id
	//          AND created_by = @user_id  AND (is_unit IS NULL  OR is_unit IS FALSE) THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'project_with_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id = @phase_id AND project_id = @project_id  AND created_by = @user_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN TRUE
	//         ELSE FALSE
	//       END
	//     WHEN @check_for = 'project_without_phase' THEN
	//       CASE
	//         WHEN is_project = @is_project AND phase_id IS NULL AND project_id = @project_id  AND created_by = @user_id
	//          AND (is_property IS NULL OR is_property IS false)
	//         AND (is_unit IS NULL OR is_unit IS false)
	//          THEN TRUE
	//         ELSE FALSE
	//       END
	//     ELSE FALSE
	// END;
	IsSharePublishedWithProject(ctx context.Context, arg IsSharePublishedWithProjectParams) (int64, error)
	IsSharePublishedWithProjectPhase(ctx context.Context, arg IsSharePublishedWithProjectPhaseParams) (int64, error)
	IsSharePublishedWithProperty(ctx context.Context, arg IsSharePublishedWithPropertyParams) (int64, error)
	IsSharePublishedWithUnit(ctx context.Context, arg IsSharePublishedWithUnitParams) (int64, error)
	LastStepForRequestType(ctx context.Context, requestID int64) (int64, error)
	LatestFilterUnitsCount(ctx context.Context, arg LatestFilterUnitsCountParams) (int64, error)
	// Streamlined property media with direct coalescing
	// Optimized downpayment calculation
	// Optimized desired countries
	// Pre-filtered wishlist check
	LatestFilterePropertiesCount(ctx context.Context, arg LatestFilterePropertiesCountParams) (int64, error)
	// List all addresses
	ListAddresses(ctx context.Context) ([]AuctionsAddress, error)
	ListAllFAQs(ctx context.Context, arg ListAllFAQsParams) ([]AuctionsFaq, error)
	ListAllTowers(ctx context.Context) ([]Tower, error)
	ListAuctionPartners(ctx context.Context, arg ListAuctionPartnersParams) ([]AuctionsPartner, error)
	ListAuctions(ctx context.Context, arg ListAuctionsParams) ([]ListAuctionsRow, error)
	ListBannerCriteria(ctx context.Context, arg ListBannerCriteriaParams) ([]BannerCriterium, error)
	ListBannerPlanCosts(ctx context.Context, arg ListBannerPlanCostsParams) ([]ListBannerPlanCostsRow, error)
	ListBanners(ctx context.Context, arg ListBannersParams) ([]ListBannersRow, error)
	ListBannersCount(ctx context.Context, statuses []int64) (int64, error)
	ListCountReservationRequests(ctx context.Context) (int64, error)
	ListCountReservationRequestsByEntityIDAndEntityType(ctx context.Context, arg ListCountReservationRequestsByEntityIDAndEntityTypeParams) (int64, error)
	ListDeletedAuctions(ctx context.Context, arg ListDeletedAuctionsParams) ([]ListDeletedAuctionsRow, error)
	ListDeletedPartners(ctx context.Context, arg ListDeletedPartnersParams) ([]AuctionsPartner, error)
	ListEntityServiceLocations(ctx context.Context, arg ListEntityServiceLocationsParams) ([]EntityServiceLocation, error)
	ListReports(ctx context.Context, arg ListReportsParams) ([]Report, error)
	ListRequestTypes(ctx context.Context, arg ListRequestTypesParams) ([]ListRequestTypesRow, error)
	ListReservationRequests(ctx context.Context, arg ListReservationRequestsParams) ([]ReservationRequest, error)
	ListReservationRequestsByEntityIDAndEntityType(ctx context.Context, arg ListReservationRequestsByEntityIDAndEntityTypeParams) ([]ReservationRequest, error)
	ListSubCommunityGuidelines(ctx context.Context, arg ListSubCommunityGuidelinesParams) ([]SubCommunityGuideline, error)
	// List all subscription orders
	ListSubscriptionOrders(ctx context.Context) ([]SubscriptionOrder, error)
	// List all subscription packages
	ListSubscriptionPackages(ctx context.Context) ([]SubscriptionPackage, error)
	ListSubscriptionsPrice(ctx context.Context, arg ListSubscriptionsPriceParams) ([]SubscriptionsPrice, error)
	ListWorkflows(ctx context.Context, arg ListWorkflowsParams) ([]ListWorkflowsRow, error)
	MakePropertyVersionVerified(ctx context.Context, arg MakePropertyVersionVerifiedParams) error
	MakeUnitVersionVerified(ctx context.Context, arg MakeUnitVersionVerifiedParams) error
	PropertyTypeExistsInTables(ctx context.Context, propertyTypeID int64) (int64, error)
	PublishProperty(ctx context.Context, arg PublishPropertyParams) (PropertyVersion, error)
	PublishUnit(ctx context.Context, arg PublishUnitParams) (UnitVersion, error)
	RefreshAutoCompleteMV(ctx context.Context) error
	RefreshHierarchicalLocationMV(ctx context.Context) error
	RefreshPermissionsMV(ctx context.Context) error
	RefreshProject(ctx context.Context, arg RefreshProjectParams) error
	RefreshPropertyVersion(ctx context.Context, arg RefreshPropertyVersionParams) error
	RefreshQualityScoreMV(ctx context.Context) error
	RefreshSectionPermissionMV(ctx context.Context) error
	RefreshSubSectionMV(ctx context.Context) error
	RefreshUnitVersion(ctx context.Context, arg RefreshUnitVersionParams) error
	RejectBrokerBranchCompany(ctx context.Context, id int64) (BrokerCompaniesBranch, error)
	//-------------------------------
	RejectBrokerCompany(ctx context.Context, id int64) (BrokerCompany, error)
	RejectCompanies(ctx context.Context, arg RejectCompaniesParams) (Company, error)
	RejectDeveloperBranchCompany(ctx context.Context, id int64) (DeveloperCompanyBranch, error)
	RejectDeveloperCompany(ctx context.Context, id int64) (DeveloperCompany, error)
	RejectServiceBranchCompany(ctx context.Context, id int64) (ServiceCompanyBranch, error)
	RejectServiceCompany(ctx context.Context, id int64) (ServicesCompany, error)
	RescheduleOpenhouseAppointment(ctx context.Context, arg RescheduleOpenhouseAppointmentParams) (Appointment, error)
	RestoreAuctionById(ctx context.Context, arg RestoreAuctionByIdParams) error
	RestoreAuctionPartner(ctx context.Context, id int64) error
	RestoreBlogCategoryByID(ctx context.Context, id int64) (BlogCategory, error)
	RestoreFAQ(ctx context.Context, id int64) error
	RetrieveApprovedExclusiveWithData(ctx context.Context, arg RetrieveApprovedExclusiveWithDataParams) (RetrieveApprovedExclusiveWithDataRow, error)
	SearchAllAgent(ctx context.Context, username string) ([]SearchAllAgentRow, error)
	SearchAllCities(ctx context.Context, lower string) ([]SearchAllCitiesRow, error)
	SearchAllCommunities(ctx context.Context, lower string) ([]SearchAllCommunitiesRow, error)
	// Global search across all entities
	SearchAllShared(ctx context.Context, arg SearchAllSharedParams) ([]SearchAllSharedRow, error)
	SearchAllState(ctx context.Context, lower string) ([]SearchAllStateRow, error)
	SearchAllSubCommunities(ctx context.Context, lower string) ([]SearchAllSubCommunitiesRow, error)
	SearchForTags(ctx context.Context, arg SearchForTagsParams) ([]Tag, error)
	// Phase search queries
	SearchSharedPhases(ctx context.Context, arg SearchSharedPhasesParams) ([]SearchSharedPhasesRow, error)
	// Project search queries
	SearchSharedProjects(ctx context.Context, arg SearchSharedProjectsParams) ([]SearchSharedProjectsRow, error)
	// Property search queries
	SearchSharedProperties(ctx context.Context, arg SearchSharedPropertiesParams) ([]SearchSharedPropertiesRow, error)
	// Unit search queries
	SearchSharedUnits(ctx context.Context, arg SearchSharedUnitsParams) ([]SearchSharedUnitsRow, error)
	SearchSubCatgoriesByTitle(ctx context.Context, arg SearchSubCatgoriesByTitleParams) ([]JobCategory, error)
	SetLogContext(ctx context.Context, arg SetLogContextParams) error
	SetModuleContext(ctx context.Context, setCurrentModuleName interface{}) error
	// SQLC queries for setting and getting context
	SetUserContext(ctx context.Context, setCurrentUserID interface{}) (interface{}, error)
	SoftDeleteAuction(ctx context.Context, arg SoftDeleteAuctionParams) error
	SoftDeleteAuctionPartner(ctx context.Context, id int64) error
	SoftDeleteFAQ(ctx context.Context, id int64) error
	Test(ctx context.Context) error
	ToggleTrigger(ctx context.Context, arg ToggleTriggerParams) error
	TopDealProjectPropertiesByProjectListing(ctx context.Context, arg TopDealProjectPropertiesByProjectListingParams) ([]Property, error)
	UnitTypeExistsInTables(ctx context.Context, unitTypeID []int64) (int64, error)
	UpdateActiveCompany(ctx context.Context, arg UpdateActiveCompanyParams) (User, error)
	UpdateActiveStatusAdvertisement(ctx context.Context, arg UpdateActiveStatusAdvertisementParams) (Advertisement, error)
	UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error)
	UpdateAddressBy(ctx context.Context, arg UpdateAddressByParams) (Address, error)
	UpdateAddressInProjectProperty(ctx context.Context, arg UpdateAddressInProjectPropertyParams) (int64, error)
	UpdateAdvertisementIsActive(ctx context.Context, arg UpdateAdvertisementIsActiveParams) (Advertisement, error)
	UpdateAdvertisment(ctx context.Context, arg UpdateAdvertismentParams) (Advertisement, error)
	UpdateAgentActiveListing(ctx context.Context, arg UpdateAgentActiveListingParams) (pgtype.Int8, error)
	UpdateAgentProductsByCompUserID(ctx context.Context, arg UpdateAgentProductsByCompUserIDParams) (AgentProduct, error)
	UpdateAgentRoute(ctx context.Context, arg UpdateAgentRouteParams) (AgentRoute, error)
	UpdateAgentSubscriptionQuota(ctx context.Context, arg UpdateAgentSubscriptionQuotaParams) (AgentSubscriptionQuotum, error)
	UpdateAgentSubscriptionQuotaBranch(ctx context.Context, arg UpdateAgentSubscriptionQuotaBranchParams) (AgentSubscriptionQuotaBranch, error)
	UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentID(ctx context.Context, arg UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentIDParams) (AgentSubscriptionQuotaBranch, error)
	UpdateAgentSubscriptionQuotaByBrokerCompanyAgentID(ctx context.Context, arg UpdateAgentSubscriptionQuotaByBrokerCompanyAgentIDParams) (AgentSubscriptionQuotum, error)
	UpdateAllShareDoc(ctx context.Context, arg UpdateAllShareDocParams) ([]SharedDocument, error)
	UpdateApplicantStaus(ctx context.Context, arg UpdateApplicantStausParams) (Applicant, error)
	UpdateApplicationStaus(ctx context.Context, arg UpdateApplicationStausParams) (Application, error)
	UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) (Appointment, error)
	UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) (Appointment, error)
	UpdateApprovalStatus(ctx context.Context, arg UpdateApprovalStatusParams) (int64, error)
	UpdateAqaryGuide(ctx context.Context, arg UpdateAqaryGuideParams) error
	UpdateAqaryProjectAdsMedia(ctx context.Context, arg UpdateAqaryProjectAdsMediaParams) (AqaryProjectAdsMedium, error)
	UpdateAqaryPropertyAdsMedia(ctx context.Context, arg UpdateAqaryPropertyAdsMediaParams) (AqaryPropertyAdsMedium, error)
	UpdateAuction(ctx context.Context, arg UpdateAuctionParams) (Auction, error)
	UpdateAuctionMediaUrls(ctx context.Context, arg UpdateAuctionMediaUrlsParams) (AuctionsMedium, error)
	UpdateAuctionPartner(ctx context.Context, arg UpdateAuctionPartnerParams) (AuctionsPartner, error)
	UpdateAuctionsAddress(ctx context.Context, arg UpdateAuctionsAddressParams) (AuctionsAddress, error)
	UpdateAuctionsUnitFacts(ctx context.Context, arg UpdateAuctionsUnitFactsParams) (AuctionsUnitFact, error)
	UpdateAuctionsUnits(ctx context.Context, arg UpdateAuctionsUnitsParams) (AuctionsUnit, error)
	UpdateBank(ctx context.Context, arg UpdateBankParams) (BankListing, error)
	UpdateBankAccountDetails(ctx context.Context, arg UpdateBankAccountDetailsParams) (BankAccountDetail, error)
	UpdateBankAccountDetailsByEntityID(ctx context.Context, arg UpdateBankAccountDetailsByEntityIDParams) (BankAccountDetail, error)
	UpdateBankBranch(ctx context.Context, arg UpdateBankBranchParams) (BankBranch, error)
	UpdateBankBranchStatus(ctx context.Context, arg UpdateBankBranchStatusParams) (BankBranch, error)
	UpdateBankMainBranch(ctx context.Context, arg UpdateBankMainBranchParams) (BankBranch, error)
	UpdateBankStatus(ctx context.Context, arg UpdateBankStatusParams) (BankListing, error)
	UpdateBanner(ctx context.Context, arg UpdateBannerParams) error
	UpdateBannerCriteria(ctx context.Context, arg UpdateBannerCriteriaParams) error
	UpdateBannerNumberOfImpressions(ctx context.Context, arg UpdateBannerNumberOfImpressionsParams) (pgtype.Int8, error)
	UpdateBannerOrder(ctx context.Context, arg UpdateBannerOrderParams) (int64, error)
	UpdateBannerOrderPlanPackageBannersQuantity(ctx context.Context, arg UpdateBannerOrderPlanPackageBannersQuantityParams) (int64, error)
	UpdateBannerPlanCost(ctx context.Context, arg UpdateBannerPlanCostParams) (int64, error)
	UpdateBannerPlanCostStatus(ctx context.Context, arg UpdateBannerPlanCostStatusParams) (int64, error)
	UpdateBannerPlanPackage(ctx context.Context, arg UpdateBannerPlanPackageParams) (int64, error)
	UpdateBannerPlanPackageStatus(ctx context.Context, arg UpdateBannerPlanPackageStatusParams) (int64, error)
	UpdateBannerPlanPackages(ctx context.Context, arg UpdateBannerPlanPackagesParams) error
	UpdateBannerStatus(ctx context.Context, arg UpdateBannerStatusParams) error
	UpdateBannerType(ctx context.Context, arg UpdateBannerTypeParams) (BannerType, error)
	UpdateBenefitById(ctx context.Context, arg UpdateBenefitByIdParams) (Benefit, error)
	UpdateBenefitStatus(ctx context.Context, arg UpdateBenefitStatusParams) (Benefit, error)
	UpdateBlogByID(ctx context.Context, arg UpdateBlogByIDParams) (Blog, error)
	UpdateBlogCategoryByID(ctx context.Context, arg UpdateBlogCategoryByIDParams) (BlogCategory, error)
	UpdateBookingActivity(ctx context.Context, arg UpdateBookingActivityParams) (BookingActivity, error)
	UpdateBookingPortal(ctx context.Context, arg UpdateBookingPortalParams) (BookingPortal, error)
	UpdateBookingPortalStatus(ctx context.Context, arg UpdateBookingPortalStatusParams) (BookingPortal, error)
	UpdateBrokerAgent(ctx context.Context, arg UpdateBrokerAgentParams) (BrokerCompanyAgent, error)
	UpdateBrokerAgentByStatus(ctx context.Context, arg UpdateBrokerAgentByStatusParams) (BrokerCompanyAgent, error)
	UpdateBrokerAgentReviews(ctx context.Context, arg UpdateBrokerAgentReviewsParams) (BrokerAgentReview, error)
	UpdateBrokerBranchAgent(ctx context.Context, arg UpdateBrokerBranchAgentParams) (BrokerCompanyBranchesAgent, error)
	UpdateBrokerBranchAgentByStatus(ctx context.Context, arg UpdateBrokerBranchAgentByStatusParams) (BrokerCompanyBranchesAgent, error)
	UpdateBrokerBranchAgentReviews(ctx context.Context, arg UpdateBrokerBranchAgentReviewsParams) (BrokerBranchAgentReview, error)
	// -- name: GetBrokerBranchCompanySubscriptionById :one
	// SELECT broker_subscription_id FROM broker_companies_branches
	// WHERE id = $1;
	// -- name: UpdateBrokerBranchCompanyMainService :one
	// UPDATE broker_companies_branches
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	// UPDATE broker_companies_branches
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	UpdateBrokerBranchCompanyMainService(ctx context.Context, arg UpdateBrokerBranchCompanyMainServiceParams) (BrokerCompaniesBranch, error)
	UpdateBrokerBranchCompanyReviews(ctx context.Context, arg UpdateBrokerBranchCompanyReviewsParams) (BrokerBranchCompanyReview, error)
	UpdateBrokerCompaniesBranchesServices(ctx context.Context, arg UpdateBrokerCompaniesBranchesServicesParams) (BrokerCompaniesBranchesService, error)
	UpdateBrokerCompany(ctx context.Context, arg UpdateBrokerCompanyParams) (BrokerCompany, error)
	UpdateBrokerCompanyAgentProperty(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyParams) (BrokerCompanyAgentProperty, error)
	UpdateBrokerCompanyAgentPropertyBranch(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchParams) (BrokerCompanyAgentPropertiesBranch, error)
	UpdateBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchDocumentParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error)
	UpdateBrokerCompanyAgentPropertyBranchMedia(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchMediaParams) (BrokerCompanyAgentPropertiesMediaBranch, error)
	UpdateBrokerCompanyAgentPropertyBranchRankById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchRankByIdParams) (BrokerCompanyAgentPropertiesBranch, error)
	UpdateBrokerCompanyAgentPropertyBranchStatusById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchStatusByIdParams) (BrokerCompanyAgentPropertiesBranch, error)
	UpdateBrokerCompanyAgentPropertyBranchVerificationById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchVerificationByIdParams) (BrokerCompanyAgentPropertiesBranch, error)
	UpdateBrokerCompanyAgentPropertyDocument(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyDocumentParams) (BrokerCompanyAgentPropertiesDocument, error)
	UpdateBrokerCompanyAgentPropertyMedia(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyMediaParams) (BrokerCompanyAgentPropertiesMedium, error)
	UpdateBrokerCompanyAgentPropertyRankById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyRankByIdParams) (BrokerCompanyAgentProperty, error)
	UpdateBrokerCompanyAgentPropertyStatusById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyStatusByIdParams) (BrokerCompanyAgentProperty, error)
	UpdateBrokerCompanyAgentPropertyVerificationById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyVerificationByIdParams) (BrokerCompanyAgentProperty, error)
	UpdateBrokerCompanyBranch(ctx context.Context, arg UpdateBrokerCompanyBranchParams) (BrokerCompaniesBranch, error)
	UpdateBrokerCompanyBranchStatus(ctx context.Context, arg UpdateBrokerCompanyBranchStatusParams) (BrokerCompaniesBranch, error)
	// -- name: UpdateBrokerCompanyMainService :one
	// UPDATE broker_companies
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	UpdateBrokerCompanyRank(ctx context.Context, arg UpdateBrokerCompanyRankParams) (BrokerCompany, error)
	UpdateBrokerCompanyReview(ctx context.Context, arg UpdateBrokerCompanyReviewParams) (BrokerCompanyReview, error)
	UpdateBrokerCompanyStatus(ctx context.Context, arg UpdateBrokerCompanyStatusParams) (BrokerCompany, error)
	UpdateBuildingReviews(ctx context.Context, arg UpdateBuildingReviewsParams) (BuildingReview, error)
	UpdateCareerByID(ctx context.Context, arg UpdateCareerByIDParams) (Career, error)
	UpdateCareerSpecialization(ctx context.Context, arg UpdateCareerSpecializationParams) (Specialization, error)
	//  AND cr.employers_id=$1;
	UpdateCareerUrgency(ctx context.Context, arg UpdateCareerUrgencyParams) (Career, error)
	UpdateCareersStatus(ctx context.Context, arg UpdateCareersStatusParams) (Career, error)
	UpdateCategorySettings(ctx context.Context, arg UpdateCategorySettingsParams) error
	UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error)
	UpdateCityGuide(ctx context.Context, arg UpdateCityGuideParams) (int64, error)
	UpdateCityGuideStatus(ctx context.Context, arg UpdateCityGuideStatusParams) error
	UpdateCityStatus(ctx context.Context, arg UpdateCityStatusParams) (City, error)
	UpdateCollectionName(ctx context.Context, arg UpdateCollectionNameParams) (CollectionName, error)
	UpdateCommunity(ctx context.Context, arg UpdateCommunityParams) (Community, error)
	UpdateCommunityGuideLineInsightStatus(ctx context.Context, arg UpdateCommunityGuideLineInsightStatusParams) (CommunityGuidelinesInsight, error)
	UpdateCommunityGuideSubinsight(ctx context.Context, arg UpdateCommunityGuideSubinsightParams) (CommunityGuidelinesSubinsight, error)
	UpdateCommunityGuideSubinsightStatus(ctx context.Context, arg UpdateCommunityGuideSubinsightStatusParams) (CommunityGuidelinesSubinsight, error)
	UpdateCommunityGuidelineInsight(ctx context.Context, arg UpdateCommunityGuidelineInsightParams) (CommunityGuidelinesInsight, error)
	UpdateCommunityGuidelines(ctx context.Context, arg UpdateCommunityGuidelinesParams) (CommunityGuideline, error)
	UpdateCommunityGuidelinesStatus(ctx context.Context, arg UpdateCommunityGuidelinesStatusParams) (CommunityGuideline, error)
	UpdateCommunitySettings(ctx context.Context, arg UpdateCommunitySettingsParams) error
	// -- name: GetCompaniesLicenses :one
	// SELECT * FROM companies_licenses WHERE id = $1 LIMIT 1;
	UpdateCompanies(ctx context.Context, arg UpdateCompaniesParams) (Company, error)
	UpdateCompaniesLeadership(ctx context.Context, arg UpdateCompaniesLeadershipParams) (CompaniesLeadership, error)
	UpdateCompaniesLogoAndCoverImage(ctx context.Context, arg UpdateCompaniesLogoAndCoverImageParams) (Company, error)
	UpdateCompaniesProductsGallery(ctx context.Context, arg UpdateCompaniesProductsGalleryParams) (CompaniesProductsGallery, error)
	UpdateCompaniesProductsGalleryByCompaniesId(ctx context.Context, arg UpdateCompaniesProductsGalleryByCompaniesIdParams) (CompaniesProductsGallery, error)
	UpdateCompaniesRank(ctx context.Context, arg UpdateCompaniesRankParams) (Company, error)
	// -- name: DeleteAllCompanyServicesByCompanyId :exec
	// DELETE FROM companies_services
	// WHERE companies_id = $1;
	// -- name: GetLocalCompanies :many
	// SELECT
	// 	c.id, c.created_at, c.company_name, c.logo_url, c.email,c.phone_number, c.status, c.company_rank,  c.addresses_id, c.created_by,c.users_id,c.company_type,
	// 	cl.commercial_license_no, cl.orn_license_no, cl.orn_license_file_url, cl.orn_registration_date, cl.orn_license_expiry
	// FROM companies as c
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT  JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	// --  LEFT  JOIN branch_companies ON branch_companies.companies_id = c.id
	// WHERE
	//     (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//   	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint END
	//    AND (c.status !=5 AND c.status != 6)
	//    AND companies.company_parent_id IS NULL
	// ORDER BY created_at DESC  LIMIT $1 OFFSET $2;
	// -- name: GetCountLocalCompanies :one
	// SELECT  COUNT(c.*)
	// FROM companies as c
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	// WHERE
	//     (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//  	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id = @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint  END
	//  	AND (c.status !=5 AND c.status != 6)
	// AND companies.company_parent_id IS NULL;
	// -- name: GetInternationalCompanies :many
	// SELECT
	// 	c.id, c.created_at, c.company_name, c.logo_url, c.email,c.phone_number, c.status, c.company_rank,  c.addresses_id, c.created_by,c.users_id,c.company_type,
	// 	cl.commercial_license_no, cl.orn_license_no, cl.orn_license_file_url, cl.orn_registration_date, cl.orn_license_expiry
	// FROM companies as c
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	// WHERE
	//     (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//  	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id != @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint  END
	//  	AND (c.status !=5 AND c.status != 6)
	//      AND companies.company_parent_id IS NULL
	// ORDER BY created_at DESC  LIMIT $1 OFFSET $2;
	// -- name: GetCountInternationalCompanies :one
	// SELECT  COUNT(c.*)
	// FROM companies as c
	//  INNER JOIN addresses ON c.addresses_id = addresses.id
	//  INNER JOIN countries ON addresses.countries_id = countries.id
	//  INNER JOIN states ON addresses.states_id = states.id
	//  INNER JOIN cities ON addresses.cities_id = cities.id
	//  INNER JOIN users ON c.created_by = users.id
	//  INNER JOIN users as admin ON c.users_id = admin.id
	//  INNER JOIN profiles ON admin.profiles_id = profiles.id
	//  LEFT JOIN roles ON users.roles_id =  roles.id AND users.roles_id IS NOT NULL
	//  INNER JOIN companies_licenses cl ON cl.company_id = c.id
	// WHERE
	//     (
	//        @search = '%%'
	//        OR c.company_name ILIKE @search
	//        OR (CASE
	//         WHEN 'standard' ILIKE @search THEN c.company_rank = 1
	//         WHEN 'featured' ILIKE @search THEN c.company_rank = 2
	//         WHEN 'premium'  ILIKE @search THEN c.company_rank = 3
	//         WHEN 'top deal' ILIKE @search THEN c.company_rank = 4
	//         ELSE FALSE
	//       END)
	//       OR cl.commercial_license_no ILIKE @search
	//       OR countries.country ILIKE @search
	//       OR states.state ILIKE @search
	//       OR cities.city ILIKE @search
	//       OR roles."role" ILIKE @search
	//       OR CONCAT(profiles.first_name, ' ', profiles.last_name) ILIKE @search
	//       OR c.email ILIKE @search
	//       OR c.phone_number ILIKE @search
	//     )
	//     AND
	//  	CASE WHEN @is_company_user != true THEN true ELSE c.id = @company_id::bigint AND c.company_type =   @company_type::bigint END
	//    AND CASE WHEN @country_id::bigint = 0 THEN true ELSE addresses.countries_id != @country_id::bigint END
	//    AND CASE WHEN @city_id::bigint = 0 Then true ELSE addresses.cities_id = @city_id::bigint END
	//    AND CASE WHEN @community_id::bigint = 0 THEN true ELSE addresses.communities_id = @community_id::bigint END
	//    AND CASE WHEN @sub_community_id::bigint = 0 THEN true ELSE addresses.sub_communities_id = @sub_community_id::bigint  END
	//  	AND (c.status !=5 AND c.status != 6)
	// AND companies.company_parent_id IS NULL;
	UpdateCompaniesStatus(ctx context.Context, arg UpdateCompaniesStatusParams) (Company, error)
	UpdateCompanyActivity(ctx context.Context, arg UpdateCompanyActivityParams) (CompanyActivity, error)
	UpdateCompanyActivityDetail(ctx context.Context, arg UpdateCompanyActivityDetailParams) error
	UpdateCompanyActivityDetailStatus(ctx context.Context, arg UpdateCompanyActivityDetailStatusParams) error
	UpdateCompanyActivityStatus(ctx context.Context, arg UpdateCompanyActivityStatusParams) (pgtype.Int8, error)
	UpdateCompanyCategory(ctx context.Context, arg UpdateCompanyCategoryParams) (CompanyCategory, error)
	UpdateCompanyProduct(ctx context.Context, arg UpdateCompanyProductParams) (CompaniesProduct, error)
	UpdateCompanyProfile(ctx context.Context, arg UpdateCompanyProfileParams) (CompanyProfile, error)
	UpdateCompanyProfilePhase(ctx context.Context, arg UpdateCompanyProfilePhaseParams) (CompanyProfilesPhase, error)
	UpdateCompanyProfileStatus(ctx context.Context, arg UpdateCompanyProfileStatusParams) (CompanyProfile, error)
	UpdateCompanyProfilesProjects(ctx context.Context, arg UpdateCompanyProfilesProjectsParams) (CompanyProfilesProject, error)
	UpdateCompanyType(ctx context.Context, arg UpdateCompanyTypeParams) (CompanyType, error)
	UpdateCompanyUser(ctx context.Context, arg UpdateCompanyUserParams) (CompanyUser, error)
	UpdateCompanyUserByUserID(ctx context.Context, arg UpdateCompanyUserByUserIDParams) (CompanyUser, error)
	UpdateCompletionPercentageAndDateForProperties(ctx context.Context, arg UpdateCompletionPercentageAndDateForPropertiesParams) error
	UpdateConnectionsSettings(ctx context.Context, arg UpdateConnectionsSettingsParams) (ConnectionsSetting, error)
	UpdateConnectionsSettingsByUserID(ctx context.Context, arg UpdateConnectionsSettingsByUserIDParams) (ConnectionsSetting, error)
	UpdateContactActivityHeader(ctx context.Context, arg UpdateContactActivityHeaderParams) (ContactsActivityHeader, error)
	UpdateContactStatus(ctx context.Context, arg UpdateContactStatusParams) (Contact, error)
	UpdateContacts(ctx context.Context, arg UpdateContactsParams) (Contact, error)
	UpdateContactsAddress(ctx context.Context, arg UpdateContactsAddressParams) (ContactsAddress, error)
	UpdateContactsAddressByContactsId(ctx context.Context, arg UpdateContactsAddressByContactsIdParams) error
	UpdateContactsCompanyDetails(ctx context.Context, arg UpdateContactsCompanyDetailsParams) (ContactsCompanyDetail, error)
	UpdateContactsDocument(ctx context.Context, arg UpdateContactsDocumentParams) (UpdateContactsDocumentRow, error)
	// -- name: UpdateContactsAddressCD :exec
	// UPDATE contacts_address
	// SET
	//     correspondence = $3,
	//     direct_markerting = $4
	// WHERE
	//     contacts_id = $1
	//     AND address_type_id = $2
	// RETURNING *;
	UpdateContactsDocumentPrivacy(ctx context.Context, arg UpdateContactsDocumentPrivacyParams) (UpdateContactsDocumentPrivacyRow, error)
	UpdateContactsIndividualDetail(ctx context.Context, arg UpdateContactsIndividualDetailParams) (ContactsIndividualDetail, error)
	UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error)
	UpdateCountryGuide(ctx context.Context, arg UpdateCountryGuideParams) (int64, error)
	UpdateCountryGuideStatus(ctx context.Context, arg UpdateCountryGuideStatusParams) error
	UpdateCountrySettings(ctx context.Context, arg UpdateCountrySettingsParams) error
	UpdateCurrency(ctx context.Context, arg UpdateCurrencyParams) (Currency, error)
	UpdateCurrencyRateByCode(ctx context.Context, arg UpdateCurrencyRateByCodeParams) error
	UpdateCurrencyStatus(ctx context.Context, arg UpdateCurrencyStatusParams) (Currency, error)
	// SELECT COUNT(*) FROM department;
	UpdateDepartment(ctx context.Context, arg UpdateDepartmentParams) (Department, error)
	UpdateDesignation(ctx context.Context, arg UpdateDesignationParams) (Designation, error)
	UpdateDeveloperBranchCompanyDirector(ctx context.Context, arg UpdateDeveloperBranchCompanyDirectorParams) (DeveloperBranchCompanyDirector, error)
	UpdateDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg UpdateDeveloperBranchCompanyDirectorsReviewParams) (DeveloperBranchCompanyDirectorsReview, error)
	UpdateDeveloperBranchCompanyReview(ctx context.Context, arg UpdateDeveloperBranchCompanyReviewParams) (DeveloperBranchCompanyReview, error)
	UpdateDeveloperCompany(ctx context.Context, arg UpdateDeveloperCompanyParams) (DeveloperCompany, error)
	UpdateDeveloperCompanyBranch(ctx context.Context, arg UpdateDeveloperCompanyBranchParams) (DeveloperCompanyBranch, error)
	// -- name: GetDeveloperBranchCompanySubscriptionById :one
	// SELECT developer_subscription_id FROM developer_company_branches
	// WHERE id = $1;
	// -- name: UpdateDeveloperBranchCompanyMainService :one
	// UPDATE developer_company_branches
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	UpdateDeveloperCompanyBranchRank(ctx context.Context, arg UpdateDeveloperCompanyBranchRankParams) (DeveloperCompanyBranch, error)
	UpdateDeveloperCompanyBranchStatus(ctx context.Context, arg UpdateDeveloperCompanyBranchStatusParams) (DeveloperCompanyBranch, error)
	UpdateDeveloperCompanyDirector(ctx context.Context, arg UpdateDeveloperCompanyDirectorParams) (DeveloperCompanyDirector, error)
	UpdateDeveloperCompanyDirectorReview(ctx context.Context, arg UpdateDeveloperCompanyDirectorReviewParams) (DeveloperCompanyDirectorsReview, error)
	// -- name: GetDeveloperCompanyBySubscriptionId :one
	// SELECT * FROM developer_companies
	// WHERE developer_subscription_id = $1 LIMIT 1;
	// -- name: UpdateDeveloperCompanyMainService :one
	// UPDATE developer_companies
	// SET main_services_id = $2
	// Where id $1
	// RETURNING *;
	UpdateDeveloperCompanyRank(ctx context.Context, arg UpdateDeveloperCompanyRankParams) (DeveloperCompany, error)
	UpdateDeveloperCompanyReview(ctx context.Context, arg UpdateDeveloperCompanyReviewParams) (DeveloperCompanyReview, error)
	UpdateDeveloperCompanyStatus(ctx context.Context, arg UpdateDeveloperCompanyStatusParams) (DeveloperCompany, error)
	UpdateDocumentCategory(ctx context.Context, arg UpdateDocumentCategoryParams) error
	UpdateDocumentUrls(ctx context.Context, arg UpdateDocumentUrlsParams) (AuctionsDocument, error)
	UpdateDocumentsCategory(ctx context.Context, arg UpdateDocumentsCategoryParams) (DocumentsCategory, error)
	UpdateDocumentsSubCategory(ctx context.Context, arg UpdateDocumentsSubCategoryParams) (DocumentsSubcategory, error)
	UpdateDropDownCategories(ctx context.Context, arg UpdateDropDownCategoriesParams) (DropdownCategory, error)
	UpdateDropDownItems(ctx context.Context, arg UpdateDropDownItemsParams) (DropdownItem, error)
	UpdateEnablePaymentPlanPackagesByID(ctx context.Context, arg UpdateEnablePaymentPlanPackagesByIDParams) (PaymentPlan, error)
	UpdateEntityServiceLocation(ctx context.Context, arg UpdateEntityServiceLocationParams) (EntityServiceLocation, error)
	UpdateExchangeOfferCategory(ctx context.Context, arg UpdateExchangeOfferCategoryParams) (ExchangeOfferCategory, error)
	UpdateExhibitionBooth(ctx context.Context, arg UpdateExhibitionBoothParams) (ExhibitionBooth, error)
	UpdateExhibitionByID(ctx context.Context, arg UpdateExhibitionByIDParams) (Exhibition, error)
	UpdateExhibitionClientByID(ctx context.Context, arg UpdateExhibitionClientByIDParams) (ExhibitionClient, error)
	UpdateExhibitionCollaboratorByID(ctx context.Context, arg UpdateExhibitionCollaboratorByIDParams) (ExhibitionCollaborator, error)
	UpdateExhibitionQueryByID(ctx context.Context, arg UpdateExhibitionQueryByIDParams) (ExhibitionQuery, error)
	UpdateExhibitionReviewByID(ctx context.Context, arg UpdateExhibitionReviewByIDParams) (UpdateExhibitionReviewByIDRow, error)
	UpdateExhibitionServiceByID(ctx context.Context, arg UpdateExhibitionServiceByIDParams) (ExhibitionService, error)
	UpdateExhibitionsMedia(ctx context.Context, arg UpdateExhibitionsMediaParams) (ExhibitionsMedium, error)
	UpdateExistingReaction(ctx context.Context, arg UpdateExistingReactionParams) (FaqUserReaction, error)
	UpdateExpertise(ctx context.Context, arg UpdateExpertiseParams) (int64, error)
	UpdateExpertiseStatus(ctx context.Context, arg UpdateExpertiseStatusParams) (int64, error)
	UpdateExternalIsEnableCheck(ctx context.Context, arg UpdateExternalIsEnableCheckParams) (ExternalSharing, error)
	UpdateExternalSharing(ctx context.Context, arg UpdateExternalSharingParams) (ExternalSharing, error)
	UpdateFAQ(ctx context.Context, arg UpdateFAQParams) (AuctionsFaq, error)
	UpdateFacilityAmenity(ctx context.Context, arg UpdateFacilityAmenityParams) (FacilitiesAmenity, error)
	UpdateFacts(ctx context.Context, arg UpdateFactsParams) (Fact, error)
	UpdateFaqByID(ctx context.Context, arg UpdateFaqByIDParams) (Faq, error)
	UpdateFaqMedia(ctx context.Context, arg UpdateFaqMediaParams) (Faq, error)
	UpdateFaqReactionCounts(ctx context.Context, arg UpdateFaqReactionCountsParams) (Faq, error)
	UpdateFaqStatus(ctx context.Context, arg UpdateFaqStatusParams) (Faq, error)
	UpdateHolidayHomeRanking(ctx context.Context, arg UpdateHolidayHomeRankingParams) (HolidayHome, error)
	UpdateInternalIsEnableCheck(ctx context.Context, arg UpdateInternalIsEnableCheckParams) (InternalSharing, error)
	UpdateInternalShare(ctx context.Context, arg UpdateInternalShareParams) (InternalSharing, error)
	UpdateInternationalContent(ctx context.Context, arg UpdateInternationalContentParams) (InternationalContent, error)
	UpdateJobCategory(ctx context.Context, arg UpdateJobCategoryParams) (JobCategory, error)
	UpdateJobPortal(ctx context.Context, arg UpdateJobPortalParams) (JobPortal, error)
	UpdateJobPortalStatus(ctx context.Context, arg UpdateJobPortalStatusParams) (JobPortal, error)
	UpdateLanguage(ctx context.Context, arg UpdateLanguageParams) (AllLanguage, error)
	UpdateLastUpdate(ctx context.Context, arg UpdateLastUpdateParams) error
	// -- name: GetLeadsByContactIdWithoutPagination :many
	// SELECT
	// 	lead.id,
	//     lead.ref_no AS ref_no,
	//     lead.lead_type AS lead_type,
	//     lead.is_property,
	//     lead.property_type_id,
	//     lead.unit_category,
	//     contact.name AS contact_name,
	//     scd.mobile AS contact_mobile,
	//     scd.email AS contact_email,
	//     lp.lead_status AS lead_status,
	//     lp.progress_status AS progress_status
	// FROM
	//     leads AS lead
	// INNER JOIN
	//     contacts AS contact ON lead.contacts_id = contact.id
	// INNER JOIN
	//     shareable_contact_details AS scd ON contact.id = scd.contacts_id
	// LEFT JOIN
	//     leads_progress AS lp ON lead.id = lp.leads_id WHERE lead.contacts_id = $1 ORDER BY lp.id desc;
	UpdateLead(ctx context.Context, arg UpdateLeadParams) (Lead, error)
	UpdateLeadCreation(ctx context.Context, arg UpdateLeadCreationParams) (LeadsCreation, error)
	UpdateLeadCreationDocument(ctx context.Context, arg UpdateLeadCreationDocumentParams) (LeadsCreation, error)
	UpdateLeadCreationInternalNotes(ctx context.Context, arg UpdateLeadCreationInternalNotesParams) (LeadsCreation, error)
	UpdateLeadCreationNotification(ctx context.Context, arg UpdateLeadCreationNotificationParams) (LeadsCreation, error)
	UpdateLeadCreationProperties(ctx context.Context, arg UpdateLeadCreationPropertiesParams) (LeadsCreation, error)
	UpdateLeadDetails(ctx context.Context, arg UpdateLeadDetailsParams) (Lead, error)
	UpdateLeadDocumentDetails(ctx context.Context, arg UpdateLeadDocumentDetailsParams) (LeadsDocument, error)
	UpdateLeadDocumentPrivacy(ctx context.Context, arg UpdateLeadDocumentPrivacyParams) (LeadsDocument, error)
	UpdateLeadInternalNotes(ctx context.Context, arg UpdateLeadInternalNotesParams) (Lead, error)
	UpdateLeadNotification(ctx context.Context, arg UpdateLeadNotificationParams) (LeadsNotification, error)
	UpdateLeadProgressByLeadsId(ctx context.Context, arg UpdateLeadProgressByLeadsIdParams) (LeadsProgress, error)
	UpdateLeadProgressStatus(ctx context.Context, arg UpdateLeadProgressStatusParams) (LeadsProgress, error)
	UpdateLeadProgressStatusAndStatus(ctx context.Context, arg UpdateLeadProgressStatusAndStatusParams) (LeadsProgress, error)
	UpdateLeadProperties(ctx context.Context, arg UpdateLeadPropertiesParams) (LeadsProperty, error)
	UpdateLeadReferenceDetails(ctx context.Context, arg UpdateLeadReferenceDetailsParams) (Lead, error)
	UpdateLeadStatus(ctx context.Context, arg UpdateLeadStatusParams) (LeadsProgress, error)
	UpdateLeaders(ctx context.Context, arg UpdateLeadersParams) (Leader, error)
	UpdateLicense(ctx context.Context, arg UpdateLicenseParams) (License, error)
	UpdateLicenseByEntityID(ctx context.Context, arg UpdateLicenseByEntityIDParams) (License, error)
	UpdateLicenseStateByEntityAndEntityTypeId(ctx context.Context, arg UpdateLicenseStateByEntityAndEntityTypeIdParams) error
	UpdateListingProblemsReport(ctx context.Context, arg UpdateListingProblemsReportParams) (ListingProblemsReport, error)
	UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error)
	UpdateLuxuryBrand(ctx context.Context, arg UpdateLuxuryBrandParams) (LuxuryBrand, error)
	UpdateLuxuryBrandStatus(ctx context.Context, arg UpdateLuxuryBrandStatusParams) (LuxuryBrand, error)
	UpdateMangementActivities(ctx context.Context, arg UpdateMangementActivitiesParams) (ManagementActivity, error)
	UpdateMapSearch(ctx context.Context, arg UpdateMapSearchParams) (MapSearch, error)
	UpdateMultipleContactActivityHeaderConactID(ctx context.Context, arg UpdateMultipleContactActivityHeaderConactIDParams) (ContactsActivityHeader, error)
	UpdateMultipleContactDocumentConactID(ctx context.Context, arg UpdateMultipleContactDocumentConactIDParams) (ContactsDocument, error)
	UpdateMultipleContactNotesConactID(ctx context.Context, arg UpdateMultipleContactNotesConactIDParams) (ContactsAccess, error)
	UpdateMultipleContactsOtherContactConactID(ctx context.Context, arg UpdateMultipleContactsOtherContactConactIDParams) (ContactsOtherContact, error)
	UpdateMultipleContactsTransactionID(ctx context.Context, arg UpdateMultipleContactsTransactionIDParams) (ContactsTransaction, error)
	UpdateMultipleLeadDocumentLeadID(ctx context.Context, arg UpdateMultipleLeadDocumentLeadIDParams) (LeadsDocument, error)
	UpdateMultipleLeadPropertiesLeadID(ctx context.Context, arg UpdateMultipleLeadPropertiesLeadIDParams) (LeadsProperty, error)
	UpdateOpenhouseAppointmentStatus(ctx context.Context, arg UpdateOpenhouseAppointmentStatusParams) (Appointment, error)
	UpdateOpenhouseAppointmentStatusAndRemarks(ctx context.Context, arg UpdateOpenhouseAppointmentStatusAndRemarksParams) (Appointment, error)
	UpdateOrderPayment(ctx context.Context, arg UpdateOrderPaymentParams) (Payment, error)
	UpdateOwnerProperties(ctx context.Context, arg UpdateOwnerPropertiesParams) (OwnerProperty, error)
	UpdateOwnerPropertyDocument(ctx context.Context, arg UpdateOwnerPropertyDocumentParams) (OwnerPropertiesDocument, error)
	UpdateOwnerPropertyMedia(ctx context.Context, arg UpdateOwnerPropertyMediaParams) (OwnerPropertiesMedium, error)
	UpdateOwnerPropertyRankById(ctx context.Context, arg UpdateOwnerPropertyRankByIdParams) (OwnerProperty, error)
	UpdateOwnerPropertyStatusById(ctx context.Context, arg UpdateOwnerPropertyStatusByIdParams) (OwnerProperty, error)
	UpdateOwnerPropertyVerificationById(ctx context.Context, arg UpdateOwnerPropertyVerificationByIdParams) (OwnerProperty, error)
	UpdatePageContent(ctx context.Context, arg UpdatePageContentParams) (PageContent, error)
	UpdatePageContentStatus(ctx context.Context, arg UpdatePageContentStatusParams) (PageContent, error)
	UpdatePageOrAdvertisment(ctx context.Context, arg UpdatePageOrAdvertismentParams) (Page, error)
	UpdatePageStatus(ctx context.Context, arg UpdatePageStatusParams) (Page, error)
	UpdatePaymentPlanByID(ctx context.Context, arg UpdatePaymentPlanByIDParams) (PaymentPlan, error)
	UpdatePaymentPlanPackagesByID(ctx context.Context, arg UpdatePaymentPlanPackagesByIDParams) (PaymentPlansPackage, error)
	UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error)
	UpdatePhaseByStatus(ctx context.Context, arg UpdatePhaseByStatusParams) (Phase, error)
	UpdatePhases(ctx context.Context, arg UpdatePhasesParams) (Phase, error)
	UpdatePhasesDocuments(ctx context.Context, arg UpdatePhasesDocumentsParams) (PhasesDocument, error)
	UpdatePhasesDocumentsFileUrls(ctx context.Context, arg UpdatePhasesDocumentsFileUrlsParams) (PhasesDocument, error)
	UpdatePhasesFacts(ctx context.Context, arg UpdatePhasesFactsParams) (PhasesFact, error)
	UpdatePhasesPlans(ctx context.Context, arg UpdatePhasesPlansParams) (PhasesPlan, error)
	UpdatePlanInstallmentByID(ctx context.Context, arg UpdatePlanInstallmentByIDParams) (PlanInstallment, error)
	UpdatePlanUrls(ctx context.Context, arg UpdatePlanUrlsParams) (AuctionsPlan, error)
	UpdatePlatformUserPassword(ctx context.Context, arg UpdatePlatformUserPasswordParams) (PlatformUser, error)
	UpdatePost(ctx context.Context, arg UpdatePostParams) (AqaryPropertyPost, error)
	UpdatePostIsVerified(ctx context.Context, arg UpdatePostIsVerifiedParams) (AqaryPropertyPost, error)
	UpdatePostedCareerPortalStatus(ctx context.Context, arg UpdatePostedCareerPortalStatusParams) (PostedCareerPortal, error)
	UpdatePostedHotelBooking(ctx context.Context, arg UpdatePostedHotelBookingParams) (PostedHotelBooking, error)
	UpdatePostedHotelBookingRanking(ctx context.Context, arg UpdatePostedHotelBookingRankingParams) (PostedHotelBooking, error)
	UpdatePostedHotelBookingStatus(ctx context.Context, arg UpdatePostedHotelBookingStatusParams) (PostedHotelBooking, error)
	UpdatePostedHotelComment(ctx context.Context, arg UpdatePostedHotelCommentParams) (PostedHotelComment, error)
	UpdatePostedHotelMedia(ctx context.Context, arg UpdatePostedHotelMediaParams) (PostedHotelMedium, error)
	UpdateProductCategory(ctx context.Context, arg UpdateProductCategoryParams) (ProductCategory, error)
	UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error)
	UpdateProfileForCompanyUser(ctx context.Context, arg UpdateProfileForCompanyUserParams) (Profile, error)
	UpdateProfileLanguage(ctx context.Context, arg UpdateProfileLanguageParams) (ProfileLanguage, error)
	UpdateProfileNationalies(ctx context.Context, arg UpdateProfileNationaliesParams) (ProfileNationality, error)
	UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error)
	UpdateProjectAd(ctx context.Context, arg UpdateProjectAdParams) (AqaryProjectAd, error)
	UpdateProjectAdIsVerified(ctx context.Context, arg UpdateProjectAdIsVerifiedParams) (AqaryProjectAd, error)
	UpdateProjectAndPhaseFinancialProviders(ctx context.Context, arg UpdateProjectAndPhaseFinancialProvidersParams) (ProjectFinancialProvider, error)
	UpdateProjectByStatus(ctx context.Context, arg UpdateProjectByStatusParams) (Project, error)
	UpdateProjectDocumentFiles(ctx context.Context, arg UpdateProjectDocumentFilesParams) (ProjectDocument, error)
	UpdateProjectDocuments(ctx context.Context, arg UpdateProjectDocumentsParams) (ProjectDocument, error)
	UpdateProjectLiveStatus(ctx context.Context, arg UpdateProjectLiveStatusParams) (Project, error)
	UpdateProjectPhaseMediaFiles(ctx context.Context, arg UpdateProjectPhaseMediaFilesParams) (ProjectMedium, error)
	UpdateProjectPlan(ctx context.Context, arg UpdateProjectPlanParams) (ProjectPlan, error)
	UpdateProjectPost(ctx context.Context, arg UpdateProjectPostParams) (AqaryProjectPost, error)
	UpdateProjectPostIsVerified(ctx context.Context, arg UpdateProjectPostIsVerifiedParams) (AqaryProjectPost, error)
	UpdateProjectPromotionLiveStatus(ctx context.Context, arg UpdateProjectPromotionLiveStatusParams) (ProjectPromotion, error)
	UpdateProjectPromotions(ctx context.Context, arg UpdateProjectPromotionsParams) (ProjectPromotion, error)
	UpdateProjectProperties(ctx context.Context, arg UpdateProjectPropertiesParams) (ProjectProperty, error)
	UpdateProjectPropertyByProjectId(ctx context.Context, arg UpdateProjectPropertyByProjectIdParams) (ProjectProperty, error)
	UpdateProjectPropertyDocument(ctx context.Context, arg UpdateProjectPropertyDocumentParams) (ProjectPropertiesDocument, error)
	UpdateProjectPropertyDocumentFiles(ctx context.Context, arg UpdateProjectPropertyDocumentFilesParams) (ProjectPropertiesDocument, error)
	UpdateProjectPropertyLiveStatus(ctx context.Context, arg UpdateProjectPropertyLiveStatusParams) (ProjectProperty, error)
	UpdateProjectPropertyRankById(ctx context.Context, arg UpdateProjectPropertyRankByIdParams) (ProjectProperty, error)
	UpdateProjectPropertyStatusById(ctx context.Context, arg UpdateProjectPropertyStatusByIdParams) (ProjectProperty, error)
	UpdateProjectPropertyVerificationById(ctx context.Context, arg UpdateProjectPropertyVerificationByIdParams) (ProjectProperty, error)
	// -- name: DeleteProject :exec
	// DELETE FROM projects
	// Where id = $1;
	UpdateProjectRankInProject(ctx context.Context, arg UpdateProjectRankInProjectParams) (Project, error)
	UpdateProjectRequests(ctx context.Context, arg UpdateProjectRequestsParams) (ProjectRequest, error)
	UpdateProjectTriggerStatus(ctx context.Context) ([]TriggerStatus, error)
	UpdateProjectVerification(ctx context.Context, arg UpdateProjectVerificationParams) (Project, error)
	UpdateProjectVideo(ctx context.Context, arg UpdateProjectVideoParams) (ProjectVideo, error)
	UpdateProjectsStatus(ctx context.Context, arg UpdateProjectsStatusParams) error
	UpdatePromotionType(ctx context.Context, arg UpdatePromotionTypeParams) (PromotionType, error)
	UpdatePropertiesAddressesBelongToProjectID(ctx context.Context, arg UpdatePropertiesAddressesBelongToProjectIDParams) error
	UpdatePropertiesFacts(ctx context.Context, arg UpdatePropertiesFactsParams) (AuctionsPropertiesFact, error)
	UpdatePropertiesMediaFiles(ctx context.Context, arg UpdatePropertiesMediaFilesParams) (PropertiesMedium, error)
	UpdatePropertiesVideo(ctx context.Context, arg UpdatePropertiesVideoParams) (PropertiesVideo, error)
	UpdateProperty(ctx context.Context, arg UpdatePropertyParams) (AuctionsProperty, error)
	UpdatePropertyAd(ctx context.Context, arg UpdatePropertyAdParams) (AqaryPropertyAd, error)
	UpdatePropertyAdIsVerified(ctx context.Context, arg UpdatePropertyAdIsVerifiedParams) (AqaryPropertyAd, error)
	UpdatePropertyBranchPlan(ctx context.Context, arg UpdatePropertyBranchPlanParams) (PropertiesPlansBranch, error)
	UpdatePropertyFact(ctx context.Context, arg UpdatePropertyFactParams) (PropertiesFact, error)
	UpdatePropertyHubActivities(ctx context.Context, arg UpdatePropertyHubActivitiesParams) (PropertyHubActivity, error)
	UpdatePropertyHubActivity(ctx context.Context, arg UpdatePropertyHubActivityParams) (PropertyHubActivity, error)
	UpdatePropertyLocation(ctx context.Context, arg UpdatePropertyLocationParams) (PropertiesMapLocation, error)
	UpdatePropertyLocationStatus(ctx context.Context, arg UpdatePropertyLocationStatusParams) (PropertiesMapLocation, error)
	UpdatePropertyPlan(ctx context.Context, arg UpdatePropertyPlanParams) (PropertiesPlan, error)
	UpdatePropertyType(ctx context.Context, arg UpdatePropertyTypeParams) (PropertyType, error)
	UpdatePropertyTypeFacts(ctx context.Context, arg UpdatePropertyTypeFactsParams) (PropertyTypeFact, error)
	UpdatePropertyTypeSettings(ctx context.Context, arg UpdatePropertyTypeSettingsParams) error
	UpdatePropertyUnitComment(ctx context.Context, arg UpdatePropertyUnitCommentParams) (PropertyUnitComment, error)
	UpdatePropertyUnitLike(ctx context.Context, arg UpdatePropertyUnitLikeParams) (PropertyUnitLike, error)
	UpdatePropertyUnitSaved(ctx context.Context, arg UpdatePropertyUnitSavedParams) (PropertyUnitSaved, error)
	UpdatePropertyVersionGalleryAndPlanStatus(ctx context.Context, arg UpdatePropertyVersionGalleryAndPlanStatusParams) error
	UpdatePublichInfoIsEnableCheck(ctx context.Context, arg UpdatePublichInfoIsEnableCheckParams) (PublishInfo, error)
	UpdatePublichInfoWebPortals(ctx context.Context, arg UpdatePublichInfoWebPortalsParams) (PublishInfo, error)
	//! -------------------------  FROM HERE PROJECT PUBLISH QUERIES --------------------------------------------- !--
	// -- name: GetProjectPublishByMe :many
	// SELECT DISTINCT ON (publish_listing.project_id)
	// publish_listing.project_id,  *
	// FROM publish_listing
	//  --  all inner joins
	//     LEFT JOIN projects p ON publish_listing.project_id = p.id
	//     LEFT JOIN addresses ON p.addresses_id = addresses.id
	//     LEFT JOIN countries ON addresses.countries_id = countries.id
	//     LEFT JOIN states ON addresses.states_id = states.id
	//     LEFT JOIN cities ON addresses.cities_id = cities.id
	//     LEFT JOIN companies ON p.developer_companies_id = companies.id
	//     LEFT JOIN properties_facts ON p.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	// WHERE
	//   -- Search criteria
	//     (@search = '%%' OR
	//      p.project_name % @search OR
	//      p.ref_number % @search OR
	//      countries.country % @search OR
	//      states."state" % @search OR
	//      cities.city % @search OR
	//      companies.company_name % @search
	//       OR (CASE
	//         WHEN 'ready' ILIKE @search THEN properties_facts.completion_status = 5
	//         WHEN 'off plan' ILIKE @search  THEN properties_facts.completion_status = 4
	//         WHEN '^[0-9]+$' ~ @search  THEN properties_facts.completion_percentage::TEXT % @search
	//         WHEN 'draft' ILIKE @search  THEN p.status = 1
	//         WHEN 'available' ILIKE @search  THEN p.status = 2
	//         WHEN 'block' ILIKE @search  THEN p.status = 5
	//         WHEN 'single' ILIKE @search  THEN p.is_multiphase = false
	//         WHEN 'multiple' ILIKE @search  THEN p.is_multiphase = true
	//         ELSE FALSE
	//       END )
	//       ) AND
	//      is_project IS TRUE AND phase_id IS NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	//      AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id
	// ORDER BY publish_listing.project_id, publish_listing.updated_at DESC  LIMIT $1 OFFSET $2;
	// -- name: CountProjectPublishByMe :one
	// SELECT COUNT(DISTINCT publish_listing.project_id)
	// FROM publish_listing
	//  --  all inner joins
	//     LEFT JOIN projects p ON publish_listing.project_id = p.id
	//     LEFT JOIN addresses ON p.addresses_id = addresses.id
	//     LEFT JOIN countries ON addresses.countries_id = countries.id
	//     LEFT JOIN states ON addresses.states_id = states.id
	//     LEFT JOIN cities ON addresses.cities_id = cities.id
	//     LEFT JOIN companies ON p.developer_companies_id = companies.id
	//     LEFT JOIN properties_facts ON p.id = properties_facts.project_id AND properties_facts.is_project_fact = true
	// WHERE
	//   -- Search criteria
	//     (@search = '%%' OR
	//      p.project_name % @search OR
	//      p.ref_number % @search OR
	//      countries.country % @search OR
	//      states."state" % @search OR
	//      cities.city % @search OR
	//      companies.company_name % @search
	//       OR (CASE
	//         WHEN 'ready' ILIKE @search THEN properties_facts.completion_status = 5
	//         WHEN 'off plan' ILIKE @search  THEN properties_facts.completion_status = 4
	//         WHEN '^[0-9]+$' ~ @search  THEN properties_facts.completion_percentage::TEXT % @search
	//         WHEN 'draft' ILIKE @search  THEN p.status = 1
	//         WHEN 'available' ILIKE @search  THEN p.status = 2
	//         WHEN 'block' ILIKE @search  THEN p.status = 5
	//         WHEN 'single' ILIKE @search  THEN p.is_multiphase = false
	//         WHEN 'multiple' ILIKE @search  THEN p.is_multiphase = true
	//         ELSE FALSE
	//       END )
	//       ) AND
	//      is_project IS TRUE AND phase_id IS NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	//      AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// -- name: GetAProjectPublishByMe :one
	// SELECT DISTINCT ON (publish_listing.project_id) publish_listing.project_id,  *
	// FROM publish_listing
	//  --  all inner joins
	//     LEFT JOIN projects p ON publish_listing.project_id = p.id
	// WHERE
	//      publish_listing.project_id =  @project_id
	//      AND is_project IS TRUE AND phase_id IS NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	//      AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// --! ------------  FROM HERE PROJECT PHASES PUBLISH  QUERIES --------------------------------------------- !--
	// -- name: GetProjectPhasesPublishByMe :many
	// SELECT DISTINCT ON (publish_listing.phase_id) publish_listing.phase_id, *
	// FROM publish_listing
	//   LEFT JOIN projects p ON publish_listing.project_id = p.id
	//   LEFT JOIN phases ON p.id = phases.projects_id
	//   LEFT JOIN phases_facts ON phases.id = phases_facts.phases_id
	//   LEFT JOIN companies ON p.developer_companies_id = companies.id
	// WHERE
	//  (@search = '%%'
	//      OR phases.ref_no ILIKE @search
	//       OR p.project_name ILIKE @search
	//       OR companies.company_name ILIKE @search
	//       OR phases.phase_name ILIKE @search
	//        OR (CASE
	//         WHEN 'ready' ILIKE @search THEN phases_facts.completion_status = 5
	//         WHEN 'off plan'ILIKE @search  THEN phases_facts.completion_status = 4
	//         WHEN '^[0-9]+$' ~ @search  THEN phases_facts.completion_percentage::TEXT % @search
	//         ELSE FALSE
	//       END)
	//      ) AND
	//    is_project IS TRUE AND phase_id IS NOT NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	//      AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id
	// ORDER BY publish_listing.phase_id,  publish_listing.updated_at DESC  LIMIT $1 OFFSET $2;
	// -- name: CountProjectPhasesPublishByMe :one
	// SELECT COUNT(DISTINCT publish_listing.phase_id)
	// FROM publish_listing
	//   LEFT JOIN projects p ON publish_listing.project_id = p.id
	//   LEFT JOIN phases ON p.id = phases.projects_id
	//   LEFT JOIN phases_facts ON phases.id = phases_facts.phases_id
	//   LEFT JOIN companies ON p.developer_companies_id = companies.id
	// WHERE
	//  (@search = '%%'
	//      OR phases.ref_no ILIKE @search
	//       OR p.project_name ILIKE @search
	//       OR companies.company_name ILIKE @search
	//       OR phases.phase_name ILIKE @search
	//        OR (CASE
	//         WHEN 'ready' ILIKE @search THEN phases_facts.completion_status = 5
	//         WHEN 'off plan'ILIKE @search  THEN phases_facts.completion_status = 4
	//         WHEN '^[0-9]+$' ~ @search  THEN phases_facts.completion_percentage::TEXT % @search
	//         ELSE FALSE
	//       END)
	//      ) AND
	//    is_project IS TRUE AND phase_id IS NOT NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	// AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// -- name: GetAProjectPhasesPublishByMe :one
	// SELECT DISTINCT ON (publish_listing.phase_id) publish_listing.phase_id, *
	// FROM publish_listing
	//   LEFT JOIN projects p ON publish_listing.project_id = p.id
	//   LEFT JOIN phases ON p.id = phases.projects_id
	// WHERE
	//    publish_listing.phase_id = @phase_id
	//   AND  is_project IS TRUE AND phase_id IS NOT NULL
	//      AND (is_property IS NULL OR is_property IS FALSE)
	// AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// --! ------------  FROM HERE PROJECT PROPERTY PUBLISH  QUERIES --------------------------------------------- !--
	// -- name: GetProjectPropertyPublishByMe :many
	// SELECT DISTINCT ON (publish_listing.property_id) publish_listing.property_id, *
	// FROM publish_listing
	//     LEFT JOIN projects ON publish_listing.project_id = projects.id
	// 	LEFT JOIN phases ON publish_listing.phase_id = phases.id
	//     LEFT JOIN project_properties ON publish_listing.property_id =  project_properties.id
	// WHERE
	//      ( @search = '%%'
	//       OR projects.project_name ILIKE @search
	//       OR project_properties.ref_no ILIKE @search
	//       OR project_properties.property_name ILIKE @search
	//       OR phases.phase_name ILIKE @search
	//      ) AND
	//      is_property IS TRUE AND property_id IS NOT NULL AND property_key IS NOT NULL
	//      AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id
	// ORDER BY publish_listing.property_id, publish_listing.updated_at DESC  LIMIT $1 OFFSET $2;
	// -- name: CountProjectPropertyPublishByMe :one
	// SELECT COUNT(DISTINCT publish_listing.property_id)
	// FROM publish_listing
	//     LEFT JOIN projects ON publish_listing.project_id = projects.id
	// 	LEFT JOIN phases ON publish_listing.phase_id = phases.id
	//     LEFT JOIN project_properties ON publish_listing.property_id =  project_properties.id
	// WHERE
	//      ( @search = '%%'
	//       OR projects.project_name ILIKE @search
	//       OR project_properties.ref_no ILIKE @search
	//       OR project_properties.property_name ILIKE @search
	//       OR phases.phase_name ILIKE @search
	//      ) AND
	//   is_property IS TRUE AND property_id IS NOT NULL AND property_key IS NOT NULL
	// AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// -- name: GetAProjectPropertyPublishByMe :one
	// SELECT DISTINCT ON (publish_listing.property_id) publish_listing.property_id, *
	// FROM publish_listing
	//      LEFT JOIN project_properties ON publish_listing.property_id =  project_properties.id
	// WHERE
	//        publish_listing.property_id =  @project_property_id
	//        AND
	//      is_property IS TRUE AND property_id IS NOT NULL AND property_key IS NOT NULL
	// AND (is_unit IS NULL OR is_unit IS FALSE) AND publish_listing.created_by =  @user_id;
	// --! ------------  FROM HERE PROJECT PROPERTY UNIT PUBLISH  QUERIES --------------------------------------------- !--
	// -- name: GetProjectPropertyUnitPublishByMe :many
	// SELECT DISTINCT ON (publish_listing.unit_id) publish_listing.unit_id, *
	// FROM publish_listing
	//   LEFT JOIN projects ON publish_listing.project_id = projects.id
	//   LEFT JOIN project_properties ON publish_listing.property_id =  project_properties.id
	//   LEFT JOIN phases ON publish_listing.phase_id = phases.id
	//   LEFT JOIN units ON publish_listing.unit_id = units.id AND (unit_category ILIKE '%sale%' OR unit_category ILIKE '%rent%')
	//   LEFT JOIN sale_unit ON units.id = sale_unit.unit_id AND unit_category ILIKE '%sale%'
	//   LEFT JOIN rent_unit ON units.id = rent_unit.unit_id AND unit_category ILIKE '%rent%'
	// WHERE
	//   (@search = '%%'
	//      OR  units.ref_no ILIKE @search
	//      OR  projects.project_name ILIKE @search
	//      OR  project_properties.property_name ILIKE @search
	//      OR  phases.phase_name ILIKE @search
	//      OR  publish_listing.unit_category ILIKE @search
	//      OR  sale_unit.title ILIKE @search
	//      OR  rent_unit.title ILIKE @search
	//    ) AND
	//    publish_listing.is_unit IS TRUE
	//     AND publish_listing.unit_id IS NOT NULL
	//     AND publish_listing.created_by =  @user_id
	// ORDER BY publish_listing.unit_id, publish_listing.updated_at DESC LIMIT $1 OFFSET $2;
	// -- name: CountProjectPropertyUnitPublishByMe :one
	// SELECT COUNT(DISTINCT publish_listing.unit_id)
	// FROM publish_listing
	//   LEFT JOIN projects ON publish_listing.project_id = projects.id
	//   LEFT JOIN project_properties ON publish_listing.property_id =  project_properties.id
	//   LEFT JOIN phases ON publish_listing.phase_id = phases.id
	//   LEFT JOIN units ON publish_listing.unit_id = units.id AND (unit_category ILIKE '%sale%' OR unit_category ILIKE '%rent%')
	//   LEFT JOIN sale_unit ON units.id = sale_unit.unit_id AND unit_category ILIKE '%sale%'
	//   LEFT JOIN rent_unit ON units.id = rent_unit.unit_id AND unit_category ILIKE '%rent%'
	// WHERE
	//   (@search = '%%'
	//      OR  units.ref_no ILIKE @search
	//      OR  projects.project_name ILIKE @search
	//      OR  project_properties.property_name ILIKE @search
	//      OR  phases.phase_name ILIKE @search
	//      OR  publish_listing.unit_category ILIKE @search
	//      OR  sale_unit.title ILIKE @search
	//      OR  rent_unit.title ILIKE @search
	//    ) AND
	//    publish_listing.is_unit IS TRUE
	//     AND publish_listing.unit_id IS NOT NULL
	// AND publish_listing.created_by =  @user_id;
	// -- name: GetAProjectPropertyUnitPublishByMe :one
	// SELECT DISTINCT ON (publish_listing.unit_id) publish_listing.unit_id, *
	// FROM publish_listing
	//   LEFT JOIN units ON publish_listing.unit_id = units.id AND (unit_category ILIKE '%sale%' OR unit_category ILIKE '%rent%')
	//   LEFT JOIN sale_unit ON units.id = sale_unit.unit_id AND unit_category ILIKE '%sale%'
	//   LEFT JOIN rent_unit ON units.id = rent_unit.unit_id AND unit_category ILIKE '%rent%'
	// WHERE
	//    publish_listing.unit_id = @unit_id
	//    AND
	//    publish_listing.is_unit IS TRUE
	//     AND publish_listing.unit_id IS NOT NULL
	// AND publish_listing.created_by =  @user_id;
	// --  ! --------------------------------------------------------------------------------------------------
	// -- name: GetPublishedPortals :many
	// SELECT
	// 	w.*,
	// 	pl.id as publish_id,
	// 	CASE WHEN pl.webportal_id IS NULL THEN
	// 		FALSE
	// 	ELSE
	// 		pl.is_enabled::bool
	// 	END AS is_enabled,
	// 	CASE WHEN @check_for = 'unit' THEN
	// 		CASE WHEN pl.is_unit = @is_unit
	// 			AND pl.unit_id = @unit_id
	// 			AND pl.unit_category = @unit_category THEN
	// 			'Unit query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'property' THEN
	// 		CASE WHEN pl.is_property = @is_property
	// 			AND pl.property_key = @property_key
	// 			AND pl.property_id = @property_id
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE) THEN
	// 			'Property query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'project_with_phase' THEN
	// 		CASE WHEN pl.is_project = @is_project
	// 			AND pl.phase_id = @phase_id
	// 			AND pl.project_id = @project_id
	// 			AND(pl.is_property IS NULL
	// 				OR pl.is_property IS FALSE)
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE) THEN
	// 			'Project with phase query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	WHEN @check_for = 'project_without_phase' THEN
	// 		CASE WHEN pl.is_project = @is_project
	// 			AND pl.phase_id IS NULL
	// 			AND pl.project_id = @project_id
	// 			AND(pl.is_property IS NULL
	// 				OR pl.is_property IS FALSE)
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE) THEN
	// 			'Project without phase query executed'
	// 		ELSE
	// 			'No matching condition'
	// 		END
	// 	ELSE
	// 		'Invalid check_for parameter'
	// 	END AS query_executed
	// FROM
	// 	webportals w
	// 	INNER JOIN publish_listing pl ON w.id = pl.webportal_id
	// 		AND((@check_for = 'unit'
	// 			AND pl.is_unit = @is_unit
	// 			AND pl.unit_id = @unit_id
	// 			AND pl.unit_category = @unit_category)
	// 		OR(@check_for = 'property'
	// 			AND pl.is_property = @is_property
	// 			AND pl.property_key = @property_key
	// 			AND pl.property_id = @property_id
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE))
	// 		OR(@check_for = 'project_with_phase'
	// 			AND pl.is_project = @is_project
	// 			AND pl.phase_id = @phase_id
	// 			AND pl.project_id = @project_id
	// 			AND(pl.is_property IS NULL
	// 				OR pl.is_property IS FALSE)
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE))
	// 		OR(@check_for = 'project_without_phase'
	// 			AND pl.is_project = @is_project
	// 			AND pl.phase_id IS NULL
	// 			AND pl.project_id = @project_id
	// 			AND(pl.is_property IS NULL
	// 				OR pl.is_property IS FALSE)
	// 			AND(pl.is_unit IS NULL
	// 				OR pl.is_unit IS FALSE)))
	// WHERE
	// 	w.created_by = @user_id;
	UpdatePublishListingForEnables(ctx context.Context, arg UpdatePublishListingForEnablesParams) ([]PublishListing, error)
	UpdatePublishMedia(ctx context.Context, arg UpdatePublishMediaParams) (PublishGallery, error)
	UpdateRanks(ctx context.Context, arg UpdateRanksParams) (Rank, error)
	UpdateRealEstateAgent(ctx context.Context, arg UpdateRealEstateAgentParams) (RealEstateAgent, error)
	UpdateRefreshSchedule(ctx context.Context, arg UpdateRefreshScheduleParams) error
	UpdateRefreshScheduleStatus(ctx context.Context, arg UpdateRefreshScheduleStatusParams) error
	UpdateRentPropertyMediaBranch(ctx context.Context, arg UpdateRentPropertyMediaBranchParams) (RentPropertyMediaBranch, error)
	UpdateRentPropertyUnitPlan(ctx context.Context, arg UpdateRentPropertyUnitPlanParams) (RentPropertyUnitPlan, error)
	UpdateRentPropertyUnitPlanUrls(ctx context.Context, arg UpdateRentPropertyUnitPlanUrlsParams) (RentPropertyUnitPlan, error)
	UpdateRequestData(ctx context.Context, data []byte) error
	UpdateRequestType(ctx context.Context, arg UpdateRequestTypeParams) (RequestsType, error)
	UpdateReservationRequest(ctx context.Context, arg UpdateReservationRequestParams) error
	UpdateReservationRequestsStatus(ctx context.Context, arg UpdateReservationRequestsStatusParams) error
	UpdateReviewTerm(ctx context.Context, arg UpdateReviewTermParams) (int64, error)
	UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error)
	UpdateRolePermission(ctx context.Context, arg UpdateRolePermissionParams) (RolesPermission, error)
	UpdateRoomType(ctx context.Context, arg UpdateRoomTypeParams) (RoomType, error)
	UpdateRoomTypeStatus(ctx context.Context, arg UpdateRoomTypeStatusParams) (RoomType, error)
	UpdateSalePropertyMedia(ctx context.Context, arg UpdateSalePropertyMediaParams) (SalePropertyMedium, error)
	UpdateSalePropertyMediaBranch(ctx context.Context, arg UpdateSalePropertyMediaBranchParams) (SalePropertyMediaBranch, error)
	UpdateSalePropertyUnitPlan(ctx context.Context, arg UpdateSalePropertyUnitPlanParams) (SalePropertyUnitPlan, error)
	UpdateSalePropertyUnitPlanUrls(ctx context.Context, arg UpdateSalePropertyUnitPlanUrlsParams) (SalePropertyUnitPlan, error)
	UpdateScheduleRunTimes(ctx context.Context, arg UpdateScheduleRunTimesParams) error
	UpdateScheduleView(ctx context.Context, arg UpdateScheduleViewParams) (ScheduleView, error)
	UpdateSectionPermission(ctx context.Context, arg UpdateSectionPermissionParams) (SectionPermission, error)
	UpdateService(ctx context.Context, arg UpdateServiceParams) (Service, error)
	UpdateServiceBranchCompanyReviews(ctx context.Context, arg UpdateServiceBranchCompanyReviewsParams) (ServiceBranchCompanyReview, error)
	UpdateServiceCompaniesReviews(ctx context.Context, arg UpdateServiceCompaniesReviewsParams) (ServicesCompaniesReview, error)
	UpdateServiceCompanyBranch(ctx context.Context, arg UpdateServiceCompanyBranchParams) (ServiceCompanyBranch, error)
	// -- name: GetServiceBranchCompanySubscriptionById :one
	// SELECT services_subscription_id FROM service_company_branches
	// WHERE id = $1;
	// -- name: UpdateServiceBranchCompanyMainService :one
	// UPDATE service_company_branches
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	UpdateServiceCompanyBranchRank(ctx context.Context, arg UpdateServiceCompanyBranchRankParams) (ServiceCompanyBranch, error)
	UpdateServiceCompanyBranchStatus(ctx context.Context, arg UpdateServiceCompanyBranchStatusParams) (ServiceCompanyBranch, error)
	// -- name: GetServiceCompanyByServiceSubscriptionId :one
	// SELECT * from services_companies
	// WHERE services_subscription_id = $1 LIMIT 1;
	// -- name: UpdateServiceCompanyMainService :one
	// UPDATE services_companies
	// SET main_services_id = $2
	// Where id = $1
	// RETURNING *;
	UpdateServiceCompanyRank(ctx context.Context, arg UpdateServiceCompanyRankParams) (ServicesCompany, error)
	UpdateServiceCompanyStatus(ctx context.Context, arg UpdateServiceCompanyStatusParams) (ServicesCompany, error)
	UpdateServicePromotionStatus(ctx context.Context, arg UpdateServicePromotionStatusParams) (ServicePromotion, error)
	UpdateServiceRank(ctx context.Context, arg UpdateServiceRankParams) (Service, error)
	UpdateServiceRequestStatus(ctx context.Context, arg UpdateServiceRequestStatusParams) (ServiceRequest, error)
	UpdateServiceStatus(ctx context.Context, arg UpdateServiceStatusParams) (Service, error)
	UpdateServicesCompaniesBranchesServices(ctx context.Context, arg UpdateServicesCompaniesBranchesServicesParams) (ServicesBranchCompaniesService, error)
	UpdateServicesCompany(ctx context.Context, arg UpdateServicesCompanyParams) (ServicesCompany, error)
	UpdateServicesPromotion(ctx context.Context, arg UpdateServicesPromotionParams) (ServicePromotion, error)
	UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error)
	UpdateShareDoc(ctx context.Context, arg UpdateShareDocParams) (SharedDoc, error)
	UpdateShareableDetails(ctx context.Context, arg UpdateShareableDetailsParams) (ShareableContactDetail, error)
	UpdateSharingEnables(ctx context.Context, arg UpdateSharingEnablesParams) ([]Sharing, error)
	UpdateSharingEntitiesStatus(ctx context.Context, arg UpdateSharingEntitiesStatusParams) (SharingEntity, error)
	UpdateSingleContactActivityHeaderContactID(ctx context.Context, arg UpdateSingleContactActivityHeaderContactIDParams) (ContactsActivityHeader, error)
	UpdateSingleContactDocumentContactID(ctx context.Context, arg UpdateSingleContactDocumentContactIDParams) (ContactsDocument, error)
	UpdateSingleContactNotesContactID(ctx context.Context, arg UpdateSingleContactNotesContactIDParams) (ContactsAccess, error)
	// -- name: GetSingleContactNamesByIdExcludingStatus6 :one
	// SELECT
	//     id AS contact_id,
	//     name,
	//     lastname
	// FROM
	//     contacts
	// WHERE
	//     id = $1
	//     AND status != 6;
	// -- name: GetListOfContactNamesByIdsExcludingStatus6 :many
	// SELECT
	//     id AS contact_id,
	//     name,
	//     lastname
	// FROM
	//     contacts
	// WHERE
	//     id = ANY($1::bigint[])
	//     AND status != 6;
	UpdateSingleContactsOtherContact(ctx context.Context, arg UpdateSingleContactsOtherContactParams) (ContactsOtherContact, error)
	UpdateSingleContactsTransactionID(ctx context.Context, arg UpdateSingleContactsTransactionIDParams) (ContactsTransaction, error)
	UpdateSingleLeadDocumentLeadID(ctx context.Context, arg UpdateSingleLeadDocumentLeadIDParams) (LeadsDocument, error)
	UpdateSingleLeadPropertiesLeadID(ctx context.Context, arg UpdateSingleLeadPropertiesLeadIDParams) (LeadsProperty, error)
	// Update single_share_doc
	UpdateSingleShareDoc(ctx context.Context, arg UpdateSingleShareDocParams) (SharedDocument, error)
	UpdateSocialConnection(ctx context.Context, arg UpdateSocialConnectionParams) (SocialConnection, error)
	UpdateSocialConnectionByUserIdAndRequestedBy(ctx context.Context, arg UpdateSocialConnectionByUserIdAndRequestedByParams) (SocialConnection, error)
	// user_id = $4 AND
	UpdateSocialConnectionStatus(ctx context.Context, arg UpdateSocialConnectionStatusParams) (SocialConnection, error)
	UpdateSocialMediaProfile(ctx context.Context, arg UpdateSocialMediaProfileParams) (SocialMediaProfile, error)
	UpdateState(ctx context.Context, arg UpdateStateParams) (State, error)
	UpdateStateGuide(ctx context.Context, arg UpdateStateGuideParams) (int64, error)
	UpdateStateGuideStatus(ctx context.Context, arg UpdateStateGuideStatusParams) (int64, error)
	UpdateStateLicenseFieldsByLicense(ctx context.Context, arg UpdateStateLicenseFieldsByLicenseParams) (StateLicenseField, error)
	UpdateStatusRequestsVerification(ctx context.Context, arg UpdateStatusRequestsVerificationParams) error
	UpdateSubCommunity(ctx context.Context, arg UpdateSubCommunityParams) (SubCommunity, error)
	UpdateSubCommunityGuideline(ctx context.Context, arg UpdateSubCommunityGuidelineParams) (SubCommunityGuideline, error)
	UpdateSubCommunityGuidelinesStatus(ctx context.Context, arg UpdateSubCommunityGuidelinesStatusParams) (SubCommunityGuideline, error)
	UpdateSubCommunityInAddress(ctx context.Context, arg UpdateSubCommunityInAddressParams) (Address, error)
	UpdateSubCommunitySettings(ctx context.Context, arg UpdateSubCommunitySettingsParams) (int64, error)
	UpdateSubDocumentCategory(ctx context.Context, arg UpdateSubDocumentCategoryParams) error
	UpdateSubSection(ctx context.Context, arg UpdateSubSectionParams) (SubSection, error)
	UpdateSubscriptionCost(ctx context.Context, arg UpdateSubscriptionCostParams) error
	// Update a subscription order and return the updated row
	UpdateSubscriptionOrder(ctx context.Context, arg UpdateSubscriptionOrderParams) (SubscriptionOrder, error)
	// Update a subscription package and return the updated row
	UpdateSubscriptionPackage(ctx context.Context, arg UpdateSubscriptionPackageParams) (SubscriptionPackage, error)
	UpdateSubscriptionPrice(ctx context.Context, arg UpdateSubscriptionPriceParams) (SubscriptionsPrice, error)
	UpdateSubscriptionProduction(ctx context.Context, arg UpdateSubscriptionProductionParams) error
	UpdateTags(ctx context.Context, arg UpdateTagsParams) (Tag, error)
	UpdateTaxCategory(ctx context.Context, arg UpdateTaxCategoryParams) (TaxCategory, error)
	UpdateTaxMangement(ctx context.Context, arg UpdateTaxMangementParams) (TaxManagement, error)
	UpdateTaxMangementActivities(ctx context.Context, arg UpdateTaxMangementActivitiesParams) (TaxManagementActivity, error)
	UpdateTimeSlotsByStatus(ctx context.Context, arg UpdateTimeSlotsByStatusParams) (Timeslot, error)
	UpdateTimeslotsStatusByAppointment(ctx context.Context, arg UpdateTimeslotsStatusByAppointmentParams) (UpdateTimeslotsStatusByAppointmentRow, error)
	UpdateTower(ctx context.Context, arg UpdateTowerParams) (Tower, error)
	UpdateTowerMedia(ctx context.Context, arg UpdateTowerMediaParams) (TowerMedium, error)
	UpdateUnit(ctx context.Context, arg UpdateUnitParams) (Unit, error)
	UpdateUnitBranchType(ctx context.Context, arg UpdateUnitBranchTypeParams) (UnitTypesBranch, error)
	UpdateUnitDocFileUrls(ctx context.Context, arg UpdateUnitDocFileUrlsParams) (UnitsDocument, error)
	UpdateUnitFact(ctx context.Context, arg UpdateUnitFactParams) (UnitFact, error)
	UpdateUnitMedia(ctx context.Context, arg UpdateUnitMediaParams) (UnitMedium, error)
	UpdateUnitMediaFiles(ctx context.Context, arg UpdateUnitMediaFilesParams) (UnitMedium, error)
	UpdateUnitPlans(ctx context.Context, arg UpdateUnitPlansParams) (UnitPlan, error)
	UpdateUnitPlansUrls(ctx context.Context, arg UpdateUnitPlansUrlsParams) (UnitPlan, error)
	UpdateUnitType(ctx context.Context, arg UpdateUnitTypeParams) (UnitTypeDetail, error)
	UpdateUnitTypeByStatus(ctx context.Context, arg UpdateUnitTypeByStatusParams) (UnitTypeDetail, error)
	UpdateUnitTypeSettings(ctx context.Context, arg UpdateUnitTypeSettingsParams) error
	UpdateUnitVersion(ctx context.Context, arg UpdateUnitVersionParams) (UnitVersion, error)
	UpdateUnitVersionCounterView(ctx context.Context, arg UpdateUnitVersionCounterViewParams) error
	UpdateUnitVersionGalleryAndPlanStatus(ctx context.Context, arg UpdateUnitVersionGalleryAndPlanStatusParams) error
	//    updated_at=now()
	UpdateUnitVersionRank(ctx context.Context, arg UpdateUnitVersionRankParams) (UnitVersion, error)
	UpdateUnitVersionStatus(ctx context.Context, arg UpdateUnitVersionStatusParams) (UnitVersion, error)
	UpdateUnitVersionType(ctx context.Context, arg UpdateUnitVersionTypeParams) (UnitVersion, error)
	UpdateUnitVersionsStatusForAgent(ctx context.Context, arg UpdateUnitVersionsStatusForAgentParams) error
	UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error)
	UpdateUserCounterView(ctx context.Context, arg UpdateUserCounterViewParams) error
	// ! TODO:  uncomment this later.
	// and user_types_id != 6
	UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error)
	UpdateUserPermission(ctx context.Context, arg UpdateUserPermissionParams) (UserCompanyPermission, error)
	UpdateUserPermissionsByID(ctx context.Context, arg UpdateUserPermissionsByIDParams) (UserCompanyPermission, error)
	// -- name: UpdateProfileByPhoneNumber :one
	// WITH selected_profile AS (
	//     SELECT *
	//     FROM profiles
	//     WHERE profiles.phone_number = $1
	//     LIMIT 1
	// )
	// UPDATE profiles
	// SET
	//     phone_number = $2
	// FROM selected_profile
	// WHERE profiles.profiles.id = selected_profile.id
	// RETURNING *;
	// -- name: GetUserProfileByMobile :one
	// SELECT
	//     p.first_name AS name,
	//     p.last_name AS family_name,
	//     p.gender,
	//     -- p.company_number,
	//     u.email
	// FROM
	//     users u
	// JOIN
	//     profiles p ON u.profiles_id = p.id
	// WHERE
	//     p.phone_number = $1
	// LIMIT $2;
	UpdateUserProfileAddress(ctx context.Context, arg UpdateUserProfileAddressParams) error
	UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (User, error)
	UpdateUserStatusWithoutUpdateTime(ctx context.Context, arg UpdateUserStatusWithoutUpdateTimeParams) (User, error)
	UpdateUserType(ctx context.Context, arg UpdateUserTypeParams) (UserType, error)
	//  contract_file = $9,
	//  contract_upload_date = $9,
	//  uploaded_by = $10,
	//  upload_notes = $11
	UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) (CompanyVerification, error)
	UpdateViews(ctx context.Context, arg UpdateViewsParams) (View, error)
	// Update a webportal
	UpdateWebportal(ctx context.Context, arg UpdateWebportalParams) (Webportal, error)
	UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) (UpdateWorkflowRow, error)
	UpdateXMLAddress(ctx context.Context, arg UpdateXMLAddressParams) error
	UpdateXMLURL(ctx context.Context, arg UpdateXMLURLParams) (XmlUrl, error)
	UpdateXMLUrlLastReport(ctx context.Context, arg UpdateXMLUrlLastReportParams) (XmlUrl, error)
	ValidateUserForPropertyHub(ctx context.Context, arg ValidateUserForPropertyHubParams) ([]int64, error)
	VerifyAndAvailableUser(ctx context.Context, id int64) (User, error)
	VerifyBanner(ctx context.Context, arg VerifyBannerParams) (VerifyBannerRow, error)
	//-----------------------
	VerifyBrokerBranchCompany(ctx context.Context, id int64) (BrokerCompaniesBranch, error)
	//---------------- verification of all companies ------------------------
	VerifyBrokerCompany(ctx context.Context, id int64) (BrokerCompany, error)
	VerifyCompanies(ctx context.Context, id int64) (Company, error)
	VerifyCompanyUserByUserId(ctx context.Context, arg VerifyCompanyUserByUserIdParams) error
	VerifyDeveloperBranchCompany(ctx context.Context, id int64) (DeveloperCompanyBranch, error)
	VerifyDeveloperCompany(ctx context.Context, id int64) (DeveloperCompany, error)
	VerifyServiceBranchCompany(ctx context.Context, id int64) (ServiceCompanyBranch, error)
	VerifyServiceCompany(ctx context.Context, id int64) (ServicesCompany, error)
	VerifyUser(ctx context.Context, arg VerifyUserParams) (User, error)
}

var _ Querier = (*Queries)(nil)
