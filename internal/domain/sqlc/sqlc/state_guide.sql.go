// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: state_guide.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStateGuide = `-- name: CreateStateGuide :one
INSERT INTO
    state_guide (
         state_id,
        cover_image,
        description,
        status
    )
SELECT
    $1,
    $2,
    $3,
    $4
FROM 
	states WHERE id= $1::BIGINT and status !=6 RETURNING 1
`

type CreateStateGuideParams struct {
	StateID     int64       `json:"state_id"`
	CoverImage  string      `json:"cover_image"`
	Description pgtype.Text `json:"description"`
	Status      int64       `json:"status"`
}

func (q *Queries) CreateStateGuide(ctx context.Context, arg CreateStateGuideParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createStateGuide,
		arg.StateID,
		arg.CoverImage,
		arg.Description,
		arg.Status,
	)
	var column_1 pgtype.Int8
	err := row.Scan(&column_1)
	return column_1, err
}

const exitingStateGuide = `-- name: ExitingStateGuide :one
SELECT EXISTS (
    SELECT 1
    FROM state_guide
    WHERE state_id = $1 and status!= $2::bigint
) AS exists
`

type ExitingStateGuideParams struct {
	StateID       int64 `json:"state_id"`
	DeletedStatus int64 `json:"deleted_status"`
}

func (q *Queries) ExitingStateGuide(ctx context.Context, arg ExitingStateGuideParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, exitingStateGuide, arg.StateID, arg.DeletedStatus)
	var exists pgtype.Bool
	err := row.Scan(&exists)
	return exists, err
}

const exitingStateGuideByStatus = `-- name: ExitingStateGuideByStatus :one
SELECT EXISTS (
    SELECT 1
    FROM state_guide
    WHERE state_id = $1 and status = $2::bigint
) AS exists
`

type ExitingStateGuideByStatusParams struct {
	StateID int64 `json:"state_id"`
	Status  int64 `json:"status"`
}

func (q *Queries) ExitingStateGuideByStatus(ctx context.Context, arg ExitingStateGuideByStatusParams) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, exitingStateGuideByStatus, arg.StateID, arg.Status)
	var exists pgtype.Bool
	err := row.Scan(&exists)
	return exists, err
}

const getStateGuide = `-- name: GetStateGuide :one
SELECT 
    states.countries_id, countries.country,
	state_guide.id,state_id,cover_image,description,states.state
FROM state_guide 
JOIN states ON states.id= state_guide.state_id
JOIN countries ON countries.id = states.countries_id
WHERE state_guide.id=$1
`

type GetStateGuideRow struct {
	CountriesID pgtype.Int8 `json:"countries_id"`
	Country     string      `json:"country"`
	ID          int64       `json:"id"`
	StateID     int64       `json:"state_id"`
	CoverImage  string      `json:"cover_image"`
	Description pgtype.Text `json:"description"`
	State       string      `json:"state"`
}

func (q *Queries) GetStateGuide(ctx context.Context, id int64) (GetStateGuideRow, error) {
	row := q.db.QueryRow(ctx, getStateGuide, id)
	var i GetStateGuideRow
	err := row.Scan(
		&i.CountriesID,
		&i.Country,
		&i.ID,
		&i.StateID,
		&i.CoverImage,
		&i.Description,
		&i.State,
	)
	return i, err
}

const getStateGuideForUpdate = `-- name: GetStateGuideForUpdate :one
SELECT id,state_id,cover_image,description  FROM state_guide WHERE id=$1 AND status= $2::BIGINT
`

type GetStateGuideForUpdateParams struct {
	ID           int64 `json:"id"`
	ActiveStatus int64 `json:"active_status"`
}

type GetStateGuideForUpdateRow struct {
	ID          int64       `json:"id"`
	StateID     int64       `json:"state_id"`
	CoverImage  string      `json:"cover_image"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetStateGuideForUpdate(ctx context.Context, arg GetStateGuideForUpdateParams) (GetStateGuideForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getStateGuideForUpdate, arg.ID, arg.ActiveStatus)
	var i GetStateGuideForUpdateRow
	err := row.Scan(
		&i.ID,
		&i.StateID,
		&i.CoverImage,
		&i.Description,
	)
	return i, err
}

const getStateGuides = `-- name: GetStateGuides :many
SELECT 
    states.countries_id, countries.country,
	state_guide.id,
	states.state,
	state_guide.cover_image,
	state_guide.description
FROM state_guide
JOIN states ON states.id= state_guide.state_id
JOIN countries ON countries.id = states.countries_id
WHERE state_guide.status= $1::BIGINT
ORDER BY state_guide.updated_at DESC
LIMIT $3
OFFSET $2
`

type GetStateGuidesParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetStateGuidesRow struct {
	CountriesID pgtype.Int8 `json:"countries_id"`
	Country     string      `json:"country"`
	ID          int64       `json:"id"`
	State       string      `json:"state"`
	CoverImage  string      `json:"cover_image"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) GetStateGuides(ctx context.Context, arg GetStateGuidesParams) ([]GetStateGuidesRow, error) {
	rows, err := q.db.Query(ctx, getStateGuides, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStateGuidesRow
	for rows.Next() {
		var i GetStateGuidesRow
		if err := rows.Scan(
			&i.CountriesID,
			&i.Country,
			&i.ID,
			&i.State,
			&i.CoverImage,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStateGuidesCount = `-- name: GetStateGuidesCount :one
SELECT 
	count(state_guide.id)
FROM state_guide
JOIN states ON states.id= state_guide.state_id
JOIN countries ON countries.id = states.countries_id
WHERE state_guide.status= $1::BIGINT
`

func (q *Queries) GetStateGuidesCount(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getStateGuidesCount, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateStateGuide = `-- name: UpdateStateGuide :one
UPDATE
    state_guide
SET
    cover_image = $2,
    description = $3,
    updated_at = $4
WHERE
    state_guide.id = $1
    AND status = $5::BIGINT
    RETURNING id
`

type UpdateStateGuideParams struct {
	ID           int64       `json:"id"`
	CoverImage   string      `json:"cover_image"`
	Description  pgtype.Text `json:"description"`
	UpdatedAt    time.Time   `json:"updated_at"`
	ActiveStatus int64       `json:"active_status"`
}

func (q *Queries) UpdateStateGuide(ctx context.Context, arg UpdateStateGuideParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateStateGuide,
		arg.ID,
		arg.CoverImage,
		arg.Description,
		arg.UpdatedAt,
		arg.ActiveStatus,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateStateGuideStatus = `-- name: UpdateStateGuideStatus :one
UPDATE
    state_guide
SET
    updated_at = $2,
    status = $3,
    deleted_at = $4
WHERE   
    id = $1 RETURNING id
`

type UpdateStateGuideStatusParams struct {
	ID        int64              `json:"id"`
	UpdatedAt time.Time          `json:"updated_at"`
	Status    int64              `json:"status"`
	DeletedAt pgtype.Timestamptz `json:"deleted_at"`
}

func (q *Queries) UpdateStateGuideStatus(ctx context.Context, arg UpdateStateGuideStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateStateGuideStatus,
		arg.ID,
		arg.UpdatedAt,
		arg.Status,
		arg.DeletedAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
