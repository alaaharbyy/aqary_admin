// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: advertisment.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdvertisment = `-- name: CreateAdvertisment :one
INSERT INTO advertisements (title, pages_id, description, is_active)
VALUES ($1, $2, $3, $4)
RETURNING id, title, pages_id, description, is_active
`

type CreateAdvertismentParams struct {
	Title       string      `json:"title"`
	PagesID     int64       `json:"pages_id"`
	Description string      `json:"description"`
	IsActive    pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateAdvertisment(ctx context.Context, arg CreateAdvertismentParams) (Advertisement, error) {
	row := q.db.QueryRow(ctx, createAdvertisment,
		arg.Title,
		arg.PagesID,
		arg.Description,
		arg.IsActive,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PagesID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const getAdvertisementsByPageID = `-- name: GetAdvertisementsByPageID :many
SELECT 
a.id, a.title as ad_title, a.description as ad_description, is_active,
p.id as pages_id, p.title as pages_title, p.page_type as pages_type,
  p.status, p.created_at, p.updated_at
FROM advertisements AS a
JOIN pages p ON p.id=a.pages_id 
WHERE p.id= $1 AND p.status!=3
ORDER BY a.id DESC
LIMIT $2 OFFSET $3
`

type GetAdvertisementsByPageIDParams struct {
	ID     int64 `json:"id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAdvertisementsByPageIDRow struct {
	ID            int64              `json:"id"`
	AdTitle       string             `json:"ad_title"`
	AdDescription string             `json:"ad_description"`
	IsActive      pgtype.Bool        `json:"is_active"`
	PagesID       int64              `json:"pages_id"`
	PagesTitle    string             `json:"pages_title"`
	PagesType     int64              `json:"pages_type"`
	Status        int64              `json:"status"`
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `json:"updated_at"`
}

// p.description as pages_description,
func (q *Queries) GetAdvertisementsByPageID(ctx context.Context, arg GetAdvertisementsByPageIDParams) ([]GetAdvertisementsByPageIDRow, error) {
	rows, err := q.db.Query(ctx, getAdvertisementsByPageID, arg.ID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdvertisementsByPageIDRow
	for rows.Next() {
		var i GetAdvertisementsByPageIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AdTitle,
			&i.AdDescription,
			&i.IsActive,
			&i.PagesID,
			&i.PagesTitle,
			&i.PagesType,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAdvertisments = `-- name: GetAllAdvertisments :many
 
SELECT id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
FROM pages
WHERE status!=3 AND page_category=2
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type GetAllAdvertismentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAdvertisments(ctx context.Context, arg GetAllAdvertismentsParams) ([]Page, error) {
	rows, err := q.db.Query(ctx, getAllAdvertisments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.PageCategory,
			&i.PageType,
			&i.Wysiwyg,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAdvertisement = `-- name: GetCountAdvertisement :one
SELECT COUNT(*) from pages WHERE status!=3 AND page_category=2
`

func (q *Queries) GetCountAdvertisement(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAdvertisement)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleAdvertisement = `-- name: GetSingleAdvertisement :one
SELECT
id, title, page_category, page_type, wysiwyg, status, created_at, updated_at
FROM
    pages
WHERE
    id = $1
AND page_category=2
`

func (q *Queries) GetSingleAdvertisement(ctx context.Context, id int64) (Page, error) {
	row := q.db.QueryRow(ctx, getSingleAdvertisement, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PageCategory,
		&i.PageType,
		&i.Wysiwyg,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateActiveStatusAdvertisement = `-- name: UpdateActiveStatusAdvertisement :one
UPDATE advertisements
SET is_active = $1
WHERE id = $2
RETURNING id, title, pages_id, description, is_active
`

type UpdateActiveStatusAdvertisementParams struct {
	IsActive pgtype.Bool `json:"is_active"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateActiveStatusAdvertisement(ctx context.Context, arg UpdateActiveStatusAdvertisementParams) (Advertisement, error) {
	row := q.db.QueryRow(ctx, updateActiveStatusAdvertisement, arg.IsActive, arg.ID)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PagesID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const updateAdvertisementIsActive = `-- name: UpdateAdvertisementIsActive :one
UPDATE advertisements
SET 
   is_active = $1
WHERE id = $2
RETURNING id, title, pages_id, description, is_active
`

type UpdateAdvertisementIsActiveParams struct {
	IsActive pgtype.Bool `json:"is_active"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateAdvertisementIsActive(ctx context.Context, arg UpdateAdvertisementIsActiveParams) (Advertisement, error) {
	row := q.db.QueryRow(ctx, updateAdvertisementIsActive, arg.IsActive, arg.ID)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PagesID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}

const updateAdvertisment = `-- name: UpdateAdvertisment :one
UPDATE advertisements
SET title = $1,
    pages_id = $2,
    description = $3,
    is_active = $4
WHERE id = $5
RETURNING id, title, pages_id, description, is_active
`

type UpdateAdvertismentParams struct {
	Title       string      `json:"title"`
	PagesID     int64       `json:"pages_id"`
	Description string      `json:"description"`
	IsActive    pgtype.Bool `json:"is_active"`
	ID          int64       `json:"id"`
}

func (q *Queries) UpdateAdvertisment(ctx context.Context, arg UpdateAdvertismentParams) (Advertisement, error) {
	row := q.db.QueryRow(ctx, updateAdvertisment,
		arg.Title,
		arg.PagesID,
		arg.Description,
		arg.IsActive,
		arg.ID,
	)
	var i Advertisement
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.PagesID,
		&i.Description,
		&i.IsActive,
	)
	return i, err
}
