// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_unit_comments.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyUnitComment = `-- name: CreatePropertyUnitComment :one
INSERT INTO property_unit_comments (
    property_unit_id,
    which_property_unit,
    which_propertyhub_key,
    users_id,
    comment,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, users_id, comment, created_at, updated_at
`

type CreatePropertyUnitCommentParams struct {
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	UsersID             int64       `json:"users_id"`
	Comment             string      `json:"comment"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

func (q *Queries) CreatePropertyUnitComment(ctx context.Context, arg CreatePropertyUnitCommentParams) (PropertyUnitComment, error) {
	row := q.db.QueryRow(ctx, createPropertyUnitComment,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.WhichPropertyhubKey,
		arg.UsersID,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PropertyUnitComment
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.UsersID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePropertyUnitComment = `-- name: DeletePropertyUnitComment :exec
DELETE FROM property_unit_comments
Where id = $1
`

func (q *Queries) DeletePropertyUnitComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyUnitComment, id)
	return err
}

const getAllPropertyUnitComment = `-- name: GetAllPropertyUnitComment :many
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, users_id, comment, created_at, updated_at FROM property_unit_comments
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllPropertyUnitCommentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPropertyUnitComment(ctx context.Context, arg GetAllPropertyUnitCommentParams) ([]PropertyUnitComment, error) {
	rows, err := q.db.Query(ctx, getAllPropertyUnitComment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyUnitComment
	for rows.Next() {
		var i PropertyUnitComment
		if err := rows.Scan(
			&i.ID,
			&i.PropertyUnitID,
			&i.WhichPropertyUnit,
			&i.WhichPropertyhubKey,
			&i.IsBranch,
			&i.UsersID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyUnitComment = `-- name: GetPropertyUnitComment :one
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, users_id, comment, created_at, updated_at FROM property_unit_comments 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPropertyUnitComment(ctx context.Context, id int64) (PropertyUnitComment, error) {
	row := q.db.QueryRow(ctx, getPropertyUnitComment, id)
	var i PropertyUnitComment
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.UsersID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePropertyUnitComment = `-- name: UpdatePropertyUnitComment :one
UPDATE property_unit_comments
SET  
   property_unit_id = $2,
    which_property_unit = $3,
    which_propertyhub_key = $4,
    users_id = $5,
    comment = $6,
    created_at = $7,
    updated_at = $8
Where id = $1
RETURNING id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, users_id, comment, created_at, updated_at
`

type UpdatePropertyUnitCommentParams struct {
	ID                  int64       `json:"id"`
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	UsersID             int64       `json:"users_id"`
	Comment             string      `json:"comment"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

func (q *Queries) UpdatePropertyUnitComment(ctx context.Context, arg UpdatePropertyUnitCommentParams) (PropertyUnitComment, error) {
	row := q.db.QueryRow(ctx, updatePropertyUnitComment,
		arg.ID,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.WhichPropertyhubKey,
		arg.UsersID,
		arg.Comment,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PropertyUnitComment
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.UsersID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
