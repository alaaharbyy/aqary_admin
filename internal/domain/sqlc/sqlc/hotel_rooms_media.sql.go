// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_rooms_media.sql

package sqlc

import (
	"context"
)

const createHotelRoomMedia = `-- name: CreateHotelRoomMedia :one
INSERT INTO hotel_rooms_media(hotel_rooms_id, image_url, video_url, video_360_url)
VALUES($1, $2, $3, $4) RETURNING id, hotel_rooms_id, image_url, video_url, video_360_url
`

type CreateHotelRoomMediaParams struct {
	HotelRoomsID int64    `json:"hotel_rooms_id"`
	ImageUrl     []string `json:"image_url"`
	VideoUrl     []string `json:"video_url"`
	Video360Url  []string `json:"video_360_url"`
}

func (q *Queries) CreateHotelRoomMedia(ctx context.Context, arg CreateHotelRoomMediaParams) (HotelRoomsMedium, error) {
	row := q.db.QueryRow(ctx, createHotelRoomMedia,
		arg.HotelRoomsID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Video360Url,
	)
	var i HotelRoomsMedium
	err := row.Scan(
		&i.ID,
		&i.HotelRoomsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const deleteHotelRoomMediaById = `-- name: DeleteHotelRoomMediaById :exec
DELETE FROM hotel_rooms_media
WHERE id=$1
`

func (q *Queries) DeleteHotelRoomMediaById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHotelRoomMediaById, id)
	return err
}

const getAllHotelRoomsMedias = `-- name: GetAllHotelRoomsMedias :many
SELECT id, hotel_rooms_id, image_url, video_url, video_360_url FROM hotel_rooms_media
LIMIT $1
OFFSET $2
`

type GetAllHotelRoomsMediasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHotelRoomsMedias(ctx context.Context, arg GetAllHotelRoomsMediasParams) ([]HotelRoomsMedium, error) {
	rows, err := q.db.Query(ctx, getAllHotelRoomsMedias, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HotelRoomsMedium
	for rows.Next() {
		var i HotelRoomsMedium
		if err := rows.Scan(
			&i.ID,
			&i.HotelRoomsID,
			&i.ImageUrl,
			&i.VideoUrl,
			&i.Video360Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelRoomMediaByHotelRoomID = `-- name: GetHotelRoomMediaByHotelRoomID :one
SELECT id, hotel_rooms_id, image_url, video_url, video_360_url
FROM
	hotel_rooms_media
WHERE
	hotel_rooms_id = $1
`

func (q *Queries) GetHotelRoomMediaByHotelRoomID(ctx context.Context, hotelRoomsID int64) (HotelRoomsMedium, error) {
	row := q.db.QueryRow(ctx, getHotelRoomMediaByHotelRoomID, hotelRoomsID)
	var i HotelRoomsMedium
	err := row.Scan(
		&i.ID,
		&i.HotelRoomsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const getHotelRoomMediaByID = `-- name: GetHotelRoomMediaByID :one
SELECT id, hotel_rooms_id, image_url, video_url, video_360_url FROM hotel_rooms_media WHERE id=$1
`

func (q *Queries) GetHotelRoomMediaByID(ctx context.Context, id int64) (HotelRoomsMedium, error) {
	row := q.db.QueryRow(ctx, getHotelRoomMediaByID, id)
	var i HotelRoomsMedium
	err := row.Scan(
		&i.ID,
		&i.HotelRoomsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const updateHotelRoomMedia = `-- name: UpdateHotelRoomMedia :one
UPDATE hotel_rooms_media
SET image_url = $2,
    video_url = $3,
    video_360_url = $4
WHERE id = $1 RETURNING id, hotel_rooms_id, image_url, video_url, video_360_url
`

type UpdateHotelRoomMediaParams struct {
	ID          int64    `json:"id"`
	ImageUrl    []string `json:"image_url"`
	VideoUrl    []string `json:"video_url"`
	Video360Url []string `json:"video_360_url"`
}

func (q *Queries) UpdateHotelRoomMedia(ctx context.Context, arg UpdateHotelRoomMediaParams) (HotelRoomsMedium, error) {
	row := q.db.QueryRow(ctx, updateHotelRoomMedia,
		arg.ID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Video360Url,
	)
	var i HotelRoomsMedium
	err := row.Scan(
		&i.ID,
		&i.HotelRoomsID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}
