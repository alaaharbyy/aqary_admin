// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_broker_agent_properties_branch_document.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialBrokerAgentPropertyBranchDoc = `-- name: CreateIndustrialBrokerAgentPropertyBranchDoc :one
INSERT INTO industrial_broker_agent_properties_branch_document (
    documents_categories_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    industrial_broker_agent_properties_branch_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_branch_id, status, is_branch
`

type CreateIndustrialBrokerAgentPropertyBranchDocParams struct {
	DocumentsCategoriesID                   int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                  int64       `json:"documents_subcategory_id"`
	FileUrl                                 []string    `json:"file_url"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	Status                                  int64       `json:"status"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrialBrokerAgentPropertyBranchDoc(ctx context.Context, arg CreateIndustrialBrokerAgentPropertyBranchDocParams) (IndustrialBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, createIndustrialBrokerAgentPropertyBranchDoc,
		arg.DocumentsCategoriesID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialBrokerAgentPropertiesBranchID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrialBrokerAgentPropertyBranchDoc = `-- name: DeleteIndustrialBrokerAgentPropertyBranchDoc :exec
DELETE FROM industrial_broker_agent_properties_branch_document
Where id = $1
`

func (q *Queries) DeleteIndustrialBrokerAgentPropertyBranchDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialBrokerAgentPropertyBranchDoc, id)
	return err
}

const getAllIndustrialBrokerAgentPropertyBranchDoc = `-- name: GetAllIndustrialBrokerAgentPropertyBranchDoc :many
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_branch_id, status, is_branch FROM industrial_broker_agent_properties_branch_document
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialBrokerAgentPropertyBranchDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyBranchDoc(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyBranchDocParams) ([]IndustrialBrokerAgentPropertiesBranchDocument, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyBranchDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesBranchDocument
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesBranchDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoriesID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialBrokerAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialBrokerAgentPropertyBranchDocByPropertyId = `-- name: GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyId :many

SELECT
industrial_broker_agent_properties_branch_document.id,
industrial_broker_agent_properties_branch_document.documents_categories_id,
industrial_broker_agent_properties_branch_document.documents_subcategory_id,
industrial_broker_agent_properties_branch_document.file_url,
industrial_broker_agent_properties_branch_document.created_at,
industrial_broker_agent_properties_branch_document.updated_at,
industrial_broker_agent_properties_branch_document.industrial_broker_agent_properties_branch_id,
industrial_broker_agent_properties_branch_document.status,
industrial_broker_agent_properties_branch_document.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_broker_agent_properties_branch_document
LEFT JOIN documents_category ON documents_category.id = industrial_broker_agent_properties_branch_document.documents_categories_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_broker_agent_properties_branch_document.documents_subcategory_id
WHERE
industrial_broker_agent_properties_branch_id = $3
ORDER BY
industrial_broker_agent_properties_branch_document.id
LIMIT $1 OFFSET $2
`

type GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdParams struct {
	Limit                                   int32 `json:"limit"`
	Offset                                  int32 `json:"offset"`
	IndustrialBrokerAgentPropertiesBranchID int64 `json:"industrial_broker_agent_properties_branch_id"`
}

type GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdRow struct {
	ID                                      int64       `json:"id"`
	DocumentsCategoriesID                   int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                  int64       `json:"documents_subcategory_id"`
	FileUrl                                 []string    `json:"file_url"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	Status                                  int64       `json:"status"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
	Category                                pgtype.Text `json:"category"`
	SubCategory                             pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyId(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdParams) ([]GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyBranchDocByPropertyId, arg.Limit, arg.Offset, arg.IndustrialBrokerAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdRow
	for rows.Next() {
		var i GetAllIndustrialBrokerAgentPropertyBranchDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoriesID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialBrokerAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountIndustrialBrokerAgentPropertyBranchDocByPropertyId = `-- name: GetCountIndustrialBrokerAgentPropertyBranchDocByPropertyId :one
SELECT count(*) FROM industrial_broker_agent_properties_branch_document
WHERE industrial_broker_agent_properties_branch_id = $1
`

func (q *Queries) GetCountIndustrialBrokerAgentPropertyBranchDocByPropertyId(ctx context.Context, industrialBrokerAgentPropertiesBranchID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountIndustrialBrokerAgentPropertyBranchDocByPropertyId, industrialBrokerAgentPropertiesBranchID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_branch_id, status, is_branch
 FROM industrial_broker_agent_properties_branch_document
WHERE industrial_broker_agent_properties_branch_id=$1 AND documents_categories_id=$2 AND documents_subcategory_id=$3
`

type GetIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	IndustrialBrokerAgentPropertiesBranchID int64 `json:"industrial_broker_agent_properties_branch_id"`
	DocumentsCategoriesID                   int64 `json:"documents_categories_id"`
	DocumentsSubcategoryID                  int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (IndustrialBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.IndustrialBrokerAgentPropertiesBranchID, arg.DocumentsCategoriesID, arg.DocumentsSubcategoryID)
	var i IndustrialBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyBranchDoc = `-- name: GetIndustrialBrokerAgentPropertyBranchDoc :one
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_branch_id, status, is_branch FROM industrial_broker_agent_properties_branch_document 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialBrokerAgentPropertyBranchDoc(ctx context.Context, limit int32) (IndustrialBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyBranchDoc, limit)
	var i IndustrialBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyBranchDocById = `-- name: GetIndustrialBrokerAgentPropertyBranchDocById :one
SELECT
industrial_broker_agent_properties_branch_document.id,
industrial_broker_agent_properties_branch_document.documents_categories_id,
industrial_broker_agent_properties_branch_document.documents_subcategory_id,
industrial_broker_agent_properties_branch_document.file_url,
industrial_broker_agent_properties_branch_document.created_at,
industrial_broker_agent_properties_branch_document.updated_at,
industrial_broker_agent_properties_branch_document.industrial_broker_agent_properties_branch_id,
industrial_broker_agent_properties_branch_document.status,
industrial_broker_agent_properties_branch_document.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_broker_agent_properties_branch_document
LEFT JOIN documents_category ON documents_category.id = industrial_broker_agent_properties_branch_document.documents_categories_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_broker_agent_properties_branch_document.documents_subcategory_id
WHERE
industrial_broker_agent_properties_branch_document.id = $1
`

type GetIndustrialBrokerAgentPropertyBranchDocByIdRow struct {
	ID                                      int64       `json:"id"`
	DocumentsCategoriesID                   int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                  int64       `json:"documents_subcategory_id"`
	FileUrl                                 []string    `json:"file_url"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	Status                                  int64       `json:"status"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
	Category                                pgtype.Text `json:"category"`
	SubCategory                             pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetIndustrialBrokerAgentPropertyBranchDocById(ctx context.Context, id int64) (GetIndustrialBrokerAgentPropertyBranchDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyBranchDocById, id)
	var i GetIndustrialBrokerAgentPropertyBranchDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranchDoc = `-- name: UpdateIndustrialBrokerAgentPropertyBranchDoc :one
UPDATE industrial_broker_agent_properties_branch_document
SET documents_categories_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    industrial_broker_agent_properties_branch_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_branch_id, status, is_branch
`

type UpdateIndustrialBrokerAgentPropertyBranchDocParams struct {
	ID                                      int64       `json:"id"`
	DocumentsCategoriesID                   int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                  int64       `json:"documents_subcategory_id"`
	FileUrl                                 []string    `json:"file_url"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	Status                                  int64       `json:"status"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranchDoc(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchDocParams) (IndustrialBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranchDoc,
		arg.ID,
		arg.DocumentsCategoriesID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialBrokerAgentPropertiesBranchID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
