// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: global_tagging.sql

package sqlc

import (
	"context"
	"time"
)

const addGlobalTag = `-- name: AddGlobalTag :one
INSERT INTO global_tagging
(section,tag_name,created_at)
VALUES($1,$2,$3)
RETURNING id, section, tag_name, created_at
`

type AddGlobalTagParams struct {
	Section   string    `json:"section"`
	TagName   string    `json:"tag_name"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) AddGlobalTag(ctx context.Context, arg AddGlobalTagParams) (GlobalTagging, error) {
	row := q.db.QueryRow(ctx, addGlobalTag, arg.Section, arg.TagName, arg.CreatedAt)
	var i GlobalTagging
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.TagName,
		&i.CreatedAt,
	)
	return i, err
}

const getAllGlobalTags = `-- name: GetAllGlobalTags :many
SELECT id, section, tag_name, created_at FROM global_tagging
`

func (q *Queries) GetAllGlobalTags(ctx context.Context) ([]GlobalTagging, error) {
	rows, err := q.db.Query(ctx, getAllGlobalTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalTagging
	for rows.Next() {
		var i GlobalTagging
		if err := rows.Scan(
			&i.ID,
			&i.Section,
			&i.TagName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllGlobalTagsBySection = `-- name: GetAllGlobalTagsBySection :many
SELECT id, section, tag_name, created_at FROM global_tagging WHERE section=$1
`

func (q *Queries) GetAllGlobalTagsBySection(ctx context.Context, section string) ([]GlobalTagging, error) {
	rows, err := q.db.Query(ctx, getAllGlobalTagsBySection, section)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalTagging
	for rows.Next() {
		var i GlobalTagging
		if err := rows.Scan(
			&i.ID,
			&i.Section,
			&i.TagName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleGlobalTag = `-- name: GetSingleGlobalTag :one
SELECT id, section, tag_name, created_at FROM global_tagging WHERE id=$1
`

func (q *Queries) GetSingleGlobalTag(ctx context.Context, id int64) (GlobalTagging, error) {
	row := q.db.QueryRow(ctx, getSingleGlobalTag, id)
	var i GlobalTagging
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.TagName,
		&i.CreatedAt,
	)
	return i, err
}

const getSingleGlobalTagBySection = `-- name: GetSingleGlobalTagBySection :one
SELECT id, section, tag_name, created_at FROM global_tagging WHERE section=$1 AND id=$2
`

type GetSingleGlobalTagBySectionParams struct {
	Section string `json:"section"`
	ID      int64  `json:"id"`
}

func (q *Queries) GetSingleGlobalTagBySection(ctx context.Context, arg GetSingleGlobalTagBySectionParams) (GlobalTagging, error) {
	row := q.db.QueryRow(ctx, getSingleGlobalTagBySection, arg.Section, arg.ID)
	var i GlobalTagging
	err := row.Scan(
		&i.ID,
		&i.Section,
		&i.TagName,
		&i.CreatedAt,
	)
	return i, err
}
