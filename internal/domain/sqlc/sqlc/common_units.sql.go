// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: common_units.sql

package sqlc

import (
	"context"
)

const getCountAllProjectUnitsByStatus = `-- name: GetCountAllProjectUnitsByStatus :one
SELECT COUNT(*)
FROM (
    SELECT
        sale_unit.unit_id,
        'sale'::varchar AS category,
        sale_unit.title,
        sale_unit.status
    FROM
        sale_unit
    WHERE
        sale_unit.status = $1
    UNION ALL
    SELECT
        rent_unit.unit_id,
        'rent'::varchar AS category,
        rent_unit.title,
        rent_unit.status
    FROM
        rent_unit
    WHERE
        rent_unit.status = $1
) AS x
INNER JOIN units ON units.id = x.unit_id
INNER JOIN property_types ON property_types.id = units.property_types_id
INNER JOIN project_properties ON project_properties.id = units.properties_id
    AND units.property = 1
LEFT JOIN phases ON phases.id = project_properties.phases_id
LEFT JOIN projects ON projects.id = project_properties.projects_id
    AND project_properties.phases_id IS NULL
LEFT JOIN addresses ON addresses.id = units.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
LEFT JOIN unit_facts ON units.id = unit_facts.unit_id
WHERE (
    $2 = '%%'
    OR units.ref_no ILIKE $2
    OR countries.country ILIKE $2
    OR states."state" ILIKE $2
    OR cities.city ILIKE $2
    OR communities.community ILIKE $2
    OR sub_communities.sub_community ILIKE $2
    OR units.property_name ILIKE $2
    OR unit_facts.built_up_area::TEXT ILIKE $2
    OR unit_facts.plot_area::TEXT ILIKE $2
    OR (CASE
        WHEN 'Freehold' ILIKE $2 THEN unit_facts.ownership = 1
        WHEN 'GCC Citizen' ILIKE $2 THEN unit_facts.ownership = 2
        WHEN 'Leasehold' ILIKE $2 THEN unit_facts.ownership = 3
        WHEN 'Local Citizen' ILIKE $2 THEN unit_facts.ownership = 4
        WHEN 'USUFRUCT' ILIKE $2 THEN unit_facts.ownership = 5
        WHEN 'Other' ILIKE $2 THEN unit_facts.ownership = 6
        WHEN 'draft' ILIKE $2 THEN x.status = 1
        WHEN 'available' ILIKE $2 THEN x.status = 2
        WHEN 'rented' ILIKE $2 THEN x.status = 4
        WHEN 'blocked' ILIKE $2 THEN x.status = 5
        ELSE FALSE
    END)
    OR unit_facts.category ILIKE $2
    OR unit_facts.parking::TEXT ILIKE $2
    OR unit_facts.price::TEXT ILIKE $2
    OR unit_facts.service_charge::TEXT ILIKE $2
    OR property_types."type" ILIKE $2
)
`

type GetCountAllProjectUnitsByStatusParams struct {
	Status int64       `json:"status"`
	Search interface{} `json:"search"`
}

func (q *Queries) GetCountAllProjectUnitsByStatus(ctx context.Context, arg GetCountAllProjectUnitsByStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectUnitsByStatus, arg.Status, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}
