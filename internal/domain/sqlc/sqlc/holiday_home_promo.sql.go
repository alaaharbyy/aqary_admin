// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_promo.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayHomePromo = `-- name: CreateHolidayHomePromo :one
INSERT INTO holiday_home_promo (
    holiday_home_id,
    booking_portal_id,
    ref_no,
    promo_code,
    promo_start,
    promo_end,
    price,
    status,
	holiday_home_portals_id
)VALUES (
      $1 ,$2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id
`

type CreateHolidayHomePromoParams struct {
	HolidayHomeID        int64     `json:"holiday_home_id"`
	BookingPortalID      int64     `json:"booking_portal_id"`
	RefNo                string    `json:"ref_no"`
	PromoCode            string    `json:"promo_code"`
	PromoStart           time.Time `json:"promo_start"`
	PromoEnd             time.Time `json:"promo_end"`
	Price                float64   `json:"price"`
	Status               int64     `json:"status"`
	HolidayHomePortalsID int64     `json:"holiday_home_portals_id"`
}

func (q *Queries) CreateHolidayHomePromo(ctx context.Context, arg CreateHolidayHomePromoParams) (HolidayHomePromo, error) {
	row := q.db.QueryRow(ctx, createHolidayHomePromo,
		arg.HolidayHomeID,
		arg.BookingPortalID,
		arg.RefNo,
		arg.PromoCode,
		arg.PromoStart,
		arg.PromoEnd,
		arg.Price,
		arg.Status,
		arg.HolidayHomePortalsID,
	)
	var i HolidayHomePromo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalID,
		&i.PromoCode,
		&i.Price,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomePortalsID,
	)
	return i, err
}

const deleteHolidayHomePromo = `-- name: DeleteHolidayHomePromo :exec
DELETE FROM holiday_home_promo
Where id = $1
`

func (q *Queries) DeleteHolidayHomePromo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomePromo, id)
	return err
}

const getAllCountHolidayHomePromo = `-- name: GetAllCountHolidayHomePromo :one
SELECT COUNT(*) FROM holiday_home_promo WHERE status != 6
`

func (q *Queries) GetAllCountHolidayHomePromo(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomePromo)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllCountHolidayPromoByHolidayIdandBk = `-- name: GetAllCountHolidayPromoByHolidayIdandBk :one
SELECT COUNT(*) FROM holiday_home_promo WHERE holiday_home_id = $1 and holiday_home_portals_id= $2
`

type GetAllCountHolidayPromoByHolidayIdandBkParams struct {
	HolidayHomeID        int64 `json:"holiday_home_id"`
	HolidayHomePortalsID int64 `json:"holiday_home_portals_id"`
}

func (q *Queries) GetAllCountHolidayPromoByHolidayIdandBk(ctx context.Context, arg GetAllCountHolidayPromoByHolidayIdandBkParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayPromoByHolidayIdandBk, arg.HolidayHomeID, arg.HolidayHomePortalsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllHolidayHomePromo = `-- name: GetAllHolidayHomePromo :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo WHERE status != 6
ORDER BY updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllHolidayHomePromoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomePromo(ctx context.Context, arg GetAllHolidayHomePromoParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomePromo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomePromobyHolidayId = `-- name: GetAllHolidayHomePromobyHolidayId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo WHERE status != 6
and holiday_home_id= $3
LIMIT $1
OFFSET $2
`

type GetAllHolidayHomePromobyHolidayIdParams struct {
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
	HolidayHomeID int64 `json:"holiday_home_id"`
}

func (q *Queries) GetAllHolidayHomePromobyHolidayId(ctx context.Context, arg GetAllHolidayHomePromobyHolidayIdParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomePromobyHolidayId, arg.Limit, arg.Offset, arg.HolidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByBkId = `-- name: GetAllHolidayPromoByBkId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE  booking_portal_id = $1
LIMIT $2 OFFSET $3
`

type GetAllHolidayPromoByBkIdParams struct {
	BookingPortalID int64 `json:"booking_portal_id"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayPromoByBkId(ctx context.Context, arg GetAllHolidayPromoByBkIdParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByBkId, arg.BookingPortalID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByBookId = `-- name: GetAllHolidayPromoByBookId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE  booking_portal_id = $1
`

func (q *Queries) GetAllHolidayPromoByBookId(ctx context.Context, bookingPortalID int64) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByBookId, bookingPortalID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidayBkId = `-- name: GetAllHolidayPromoByHolidayBkId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE  holiday_home_portals_id = $1
LIMIT $2 OFFSET $3
`

type GetAllHolidayPromoByHolidayBkIdParams struct {
	HolidayHomePortalsID int64 `json:"holiday_home_portals_id"`
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayPromoByHolidayBkId(ctx context.Context, arg GetAllHolidayPromoByHolidayBkIdParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidayBkId, arg.HolidayHomePortalsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidayId = `-- name: GetAllHolidayPromoByHolidayId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE holiday_home_id = $1 
LIMIT $2 OFFSET $3
`

type GetAllHolidayPromoByHolidayIdParams struct {
	HolidayHomeID int64 `json:"holiday_home_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayPromoByHolidayId(ctx context.Context, arg GetAllHolidayPromoByHolidayIdParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidayId, arg.HolidayHomeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidayIdandBk = `-- name: GetAllHolidayPromoByHolidayIdandBk :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE holiday_home_id = $1 and booking_portal_id = $2 
LIMIT $3 OFFSET $4
`

type GetAllHolidayPromoByHolidayIdandBkParams struct {
	HolidayHomeID   int64 `json:"holiday_home_id"`
	BookingPortalID int64 `json:"booking_portal_id"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayPromoByHolidayIdandBk(ctx context.Context, arg GetAllHolidayPromoByHolidayIdandBkParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidayIdandBk,
		arg.HolidayHomeID,
		arg.BookingPortalID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidayIdandHolidayBk = `-- name: GetAllHolidayPromoByHolidayIdandHolidayBk :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE holiday_home_id = $1 and holiday_home_portals_id = $2 
ORDER BY updated_at
LIMIT $3 OFFSET $4
`

type GetAllHolidayPromoByHolidayIdandHolidayBkParams struct {
	HolidayHomeID        int64 `json:"holiday_home_id"`
	HolidayHomePortalsID int64 `json:"holiday_home_portals_id"`
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayPromoByHolidayIdandHolidayBk(ctx context.Context, arg GetAllHolidayPromoByHolidayIdandHolidayBkParams) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidayIdandHolidayBk,
		arg.HolidayHomeID,
		arg.HolidayHomePortalsID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidayPortId = `-- name: GetAllHolidayPromoByHolidayPortId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE  holiday_home_portals_id = $1
`

func (q *Queries) GetAllHolidayPromoByHolidayPortId(ctx context.Context, holidayHomePortalsID int64) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidayPortId, holidayHomePortalsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayPromoByHolidaysId = `-- name: GetAllHolidayPromoByHolidaysId :many
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE holiday_home_id = $1
`

func (q *Queries) GetAllHolidayPromoByHolidaysId(ctx context.Context, holidayHomeID int64) ([]HolidayHomePromo, error) {
	rows, err := q.db.Query(ctx, getAllHolidayPromoByHolidaysId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomePromo
	for rows.Next() {
		var i HolidayHomePromo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.HolidayHomeID,
			&i.BookingPortalID,
			&i.PromoCode,
			&i.Price,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomePortalsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomePromo = `-- name: GetHolidayHomePromo :one
SELECT id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id FROM holiday_home_promo
WHERE id = $1 and status != 6 ORDER BY updated_at LIMIT 1
`

func (q *Queries) GetHolidayHomePromo(ctx context.Context, id int64) (HolidayHomePromo, error) {
	row := q.db.QueryRow(ctx, getHolidayHomePromo, id)
	var i HolidayHomePromo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalID,
		&i.PromoCode,
		&i.Price,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomePortalsID,
	)
	return i, err
}

const updateHolidayHomePromo = `-- name: UpdateHolidayHomePromo :one
UPDATE holiday_home_promo
SET  holiday_home_id = $1,
    booking_portal_id = $2,
    ref_no = $3,
    promo_code = $4,
    promo_start = $5,
    promo_end = $6,
    price = $7,
    status = $8,
    updated_at = $9,
	holiday_home_portals_id = $10
WHERE id = $11
RETURNING id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id
`

type UpdateHolidayHomePromoParams struct {
	HolidayHomeID        int64              `json:"holiday_home_id"`
	BookingPortalID      int64              `json:"booking_portal_id"`
	RefNo                string             `json:"ref_no"`
	PromoCode            string             `json:"promo_code"`
	PromoStart           time.Time          `json:"promo_start"`
	PromoEnd             time.Time          `json:"promo_end"`
	Price                float64            `json:"price"`
	Status               int64              `json:"status"`
	UpdatedAt            pgtype.Timestamptz `json:"updated_at"`
	HolidayHomePortalsID int64              `json:"holiday_home_portals_id"`
	ID                   int64              `json:"id"`
}

func (q *Queries) UpdateHolidayHomePromo(ctx context.Context, arg UpdateHolidayHomePromoParams) (HolidayHomePromo, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomePromo,
		arg.HolidayHomeID,
		arg.BookingPortalID,
		arg.RefNo,
		arg.PromoCode,
		arg.PromoStart,
		arg.PromoEnd,
		arg.Price,
		arg.Status,
		arg.UpdatedAt,
		arg.HolidayHomePortalsID,
		arg.ID,
	)
	var i HolidayHomePromo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalID,
		&i.PromoCode,
		&i.Price,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomePortalsID,
	)
	return i, err
}

const updateHolidayHomePromoStatus = `-- name: UpdateHolidayHomePromoStatus :one
UPDATE holiday_home_promo
SET   
 status = $1,
 updated_at = $2
WHERE id = $3
RETURNING id, ref_no, holiday_home_id, booking_portal_id, promo_code, price, promo_start, promo_end, created_at, updated_at, status, holiday_home_portals_id
`

type UpdateHolidayHomePromoStatusParams struct {
	Status    int64              `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateHolidayHomePromoStatus(ctx context.Context, arg UpdateHolidayHomePromoStatusParams) (HolidayHomePromo, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomePromoStatus, arg.Status, arg.UpdatedAt, arg.ID)
	var i HolidayHomePromo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.HolidayHomeID,
		&i.BookingPortalID,
		&i.PromoCode,
		&i.Price,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomePortalsID,
	)
	return i, err
}
