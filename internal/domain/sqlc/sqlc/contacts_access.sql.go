// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_access.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContactNotes = `-- name: CreateContactNotes :one
INSERT INTO contacts_access (
    contacts_id,
    access_name,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
) RETURNING id, contacts_id, access_name, created_at, updated_at
`

type CreateContactNotesParams struct {
	ContactsID pgtype.Int8        `json:"contacts_id"`
	AccessName string             `json:"access_name"`
	CreatedAt  time.Time          `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateContactNotes(ctx context.Context, arg CreateContactNotesParams) (ContactsAccess, error) {
	row := q.db.QueryRow(ctx, createContactNotes,
		arg.ContactsID,
		arg.AccessName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ContactsAccess
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AccessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllContactNotes = `-- name: GetAllContactNotes :many
SELECT id, contacts_id, access_name, created_at, updated_at FROM contacts_access WHERE contacts_id = $1 LIMIT $2 OFFSET $3
`

type GetAllContactNotesParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

func (q *Queries) GetAllContactNotes(ctx context.Context, arg GetAllContactNotesParams) ([]ContactsAccess, error) {
	rows, err := q.db.Query(ctx, getAllContactNotes, arg.ContactsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactsAccess
	for rows.Next() {
		var i ContactsAccess
		if err := rows.Scan(
			&i.ID,
			&i.ContactsID,
			&i.AccessName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactNotesWithoutPagination = `-- name: GetAllContactNotesWithoutPagination :many
SELECT id, contacts_id, access_name, created_at, updated_at FROM contacts_access WHERE contacts_id = $1
`

func (q *Queries) GetAllContactNotesWithoutPagination(ctx context.Context, contactsID pgtype.Int8) ([]ContactsAccess, error) {
	rows, err := q.db.Query(ctx, getAllContactNotesWithoutPagination, contactsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactsAccess
	for rows.Next() {
		var i ContactsAccess
		if err := rows.Scan(
			&i.ID,
			&i.ContactsID,
			&i.AccessName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllContactNotes = `-- name: GetCountAllContactNotes :one
SELECT COUNT(*) FROM contacts_access WHERE contacts_id = $1
`

func (q *Queries) GetCountAllContactNotes(ctx context.Context, contactsID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllContactNotes, contactsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateMultipleContactNotesConactID = `-- name: UpdateMultipleContactNotesConactID :one
UPDATE contacts_access SET contacts_id = $1 WHERE id = ANY($2::bigint[]) RETURNING id, contacts_id, access_name, created_at, updated_at
`

type UpdateMultipleContactNotesConactIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	Column2    []int64     `json:"column_2"`
}

func (q *Queries) UpdateMultipleContactNotesConactID(ctx context.Context, arg UpdateMultipleContactNotesConactIDParams) (ContactsAccess, error) {
	row := q.db.QueryRow(ctx, updateMultipleContactNotesConactID, arg.ContactsID, arg.Column2)
	var i ContactsAccess
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AccessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSingleContactNotesContactID = `-- name: UpdateSingleContactNotesContactID :one
UPDATE contacts_access SET contacts_id = $1 WHERE id = $2 RETURNING id, contacts_id, access_name, created_at, updated_at
`

type UpdateSingleContactNotesContactIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateSingleContactNotesContactID(ctx context.Context, arg UpdateSingleContactNotesContactIDParams) (ContactsAccess, error) {
	row := q.db.QueryRow(ctx, updateSingleContactNotesContactID, arg.ContactsID, arg.ID)
	var i ContactsAccess
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AccessName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
