// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_branch_company_directors.sql

package sqlc

import (
	"context"
	"time"
)

const createDeveloperBranchCompanyDirector = `-- name: CreateDeveloperBranchCompanyDirector :one
INSERT INTO developer_branch_company_directors (
    profile_image,
    name,
    description,
    director_designations_id,
    developer_company_branches,
    created_at,
    updated_at,
    ref_no
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8
) RETURNING id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no
`

type CreateDeveloperBranchCompanyDirectorParams struct {
	ProfileImage             string    `json:"profile_image"`
	Name                     string    `json:"name"`
	Description              string    `json:"description"`
	DirectorDesignationsID   int64     `json:"director_designations_id"`
	DeveloperCompanyBranches int64     `json:"developer_company_branches"`
	CreatedAt                time.Time `json:"created_at"`
	UpdatedAt                time.Time `json:"updated_at"`
	RefNo                    string    `json:"ref_no"`
}

func (q *Queries) CreateDeveloperBranchCompanyDirector(ctx context.Context, arg CreateDeveloperBranchCompanyDirectorParams) (DeveloperBranchCompanyDirector, error) {
	row := q.db.QueryRow(ctx, createDeveloperBranchCompanyDirector,
		arg.ProfileImage,
		arg.Name,
		arg.Description,
		arg.DirectorDesignationsID,
		arg.DeveloperCompanyBranches,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
	)
	var i DeveloperBranchCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompanyBranches,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}

const deleteDeveloperBranchCompanyDirector = `-- name: DeleteDeveloperBranchCompanyDirector :exec
DELETE FROM developer_branch_company_directors
Where id = $1
`

func (q *Queries) DeleteDeveloperBranchCompanyDirector(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperBranchCompanyDirector, id)
	return err
}

const getAllDeveloperBranchCompanyDirector = `-- name: GetAllDeveloperBranchCompanyDirector :many
SELECT id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no FROM developer_branch_company_directors
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperBranchCompanyDirectorParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperBranchCompanyDirector(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorParams) ([]DeveloperBranchCompanyDirector, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperBranchCompanyDirector, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyDirector
	for rows.Next() {
		var i DeveloperBranchCompanyDirector
		if err := rows.Scan(
			&i.ID,
			&i.ProfileImage,
			&i.Name,
			&i.Description,
			&i.DirectorDesignationsID,
			&i.DeveloperCompanyBranches,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperBranchCompanyDirector = `-- name: GetDeveloperBranchCompanyDirector :one
SELECT id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no FROM developer_branch_company_directors 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDeveloperBranchCompanyDirector(ctx context.Context, limit int32) (DeveloperBranchCompanyDirector, error) {
	row := q.db.QueryRow(ctx, getDeveloperBranchCompanyDirector, limit)
	var i DeveloperBranchCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompanyBranches,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}

const getDeveloperBranchCompanyDirectorByCompanyId = `-- name: GetDeveloperBranchCompanyDirectorByCompanyId :many
SELECT id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no FROM developer_branch_company_directors 
WHERE developer_company_branches = $2 LIMIT $1
`

type GetDeveloperBranchCompanyDirectorByCompanyIdParams struct {
	Limit                    int32 `json:"limit"`
	DeveloperCompanyBranches int64 `json:"developer_company_branches"`
}

func (q *Queries) GetDeveloperBranchCompanyDirectorByCompanyId(ctx context.Context, arg GetDeveloperBranchCompanyDirectorByCompanyIdParams) ([]DeveloperBranchCompanyDirector, error) {
	rows, err := q.db.Query(ctx, getDeveloperBranchCompanyDirectorByCompanyId, arg.Limit, arg.DeveloperCompanyBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyDirector
	for rows.Next() {
		var i DeveloperBranchCompanyDirector
		if err := rows.Scan(
			&i.ID,
			&i.ProfileImage,
			&i.Name,
			&i.Description,
			&i.DirectorDesignationsID,
			&i.DeveloperCompanyBranches,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperBranchCompanyDirectorByCompanyIdWithoutPagination = `-- name: GetDeveloperBranchCompanyDirectorByCompanyIdWithoutPagination :many
SELECT id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no FROM developer_branch_company_directors 
WHERE developer_company_branches = $1
`

func (q *Queries) GetDeveloperBranchCompanyDirectorByCompanyIdWithoutPagination(ctx context.Context, developerCompanyBranches int64) ([]DeveloperBranchCompanyDirector, error) {
	rows, err := q.db.Query(ctx, getDeveloperBranchCompanyDirectorByCompanyIdWithoutPagination, developerCompanyBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyDirector
	for rows.Next() {
		var i DeveloperBranchCompanyDirector
		if err := rows.Scan(
			&i.ID,
			&i.ProfileImage,
			&i.Name,
			&i.Description,
			&i.DirectorDesignationsID,
			&i.DeveloperCompanyBranches,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeveloperBranchCompanyDirector = `-- name: UpdateDeveloperBranchCompanyDirector :one
UPDATE developer_branch_company_directors
SET   profile_image = $2,
    name = $3,
    description = $4,
    director_designations_id = $5,
    developer_company_branches = $6,
    created_at = $7,
    updated_at = $8,
    ref_no = $9
Where id = $1
RETURNING id, profile_image, name, description, director_designations_id, developer_company_branches, created_at, updated_at, ref_no
`

type UpdateDeveloperBranchCompanyDirectorParams struct {
	ID                       int64     `json:"id"`
	ProfileImage             string    `json:"profile_image"`
	Name                     string    `json:"name"`
	Description              string    `json:"description"`
	DirectorDesignationsID   int64     `json:"director_designations_id"`
	DeveloperCompanyBranches int64     `json:"developer_company_branches"`
	CreatedAt                time.Time `json:"created_at"`
	UpdatedAt                time.Time `json:"updated_at"`
	RefNo                    string    `json:"ref_no"`
}

func (q *Queries) UpdateDeveloperBranchCompanyDirector(ctx context.Context, arg UpdateDeveloperBranchCompanyDirectorParams) (DeveloperBranchCompanyDirector, error) {
	row := q.db.QueryRow(ctx, updateDeveloperBranchCompanyDirector,
		arg.ID,
		arg.ProfileImage,
		arg.Name,
		arg.Description,
		arg.DirectorDesignationsID,
		arg.DeveloperCompanyBranches,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
	)
	var i DeveloperBranchCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompanyBranches,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}
