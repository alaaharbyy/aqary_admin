// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_search.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const latestFilterUnitsCount = `-- name: LatestFilterUnitsCount :one
WITH facilities_and_amenities AS(
    SELECT uv.id,
    fa."type",
    array_agg(DISTINCT coalesce(fae.facility_amenity_id,0))::bigint[] AS facilities_amenities
    FROM unit_versions uv
    JOIN units u on u.id=uv.unit_id
    LEFT JOIN facilities_amenities_entity fae ON fae.entity_id=u.id AND fae.entity_type_id= 5::bigint
    LEFT JOIN facilities_amenities fa ON fae.facility_amenity_id=fa.id 
    group by uv.id, fa."type" 
),
unit_media_agg AS (
    SELECT
        entity_id,entity_type_id,
        array_agg(DISTINCT media_type ORDER BY media_type) AS media
    FROM 
        global_media
    WHERE global_media.entity_type_id = $1::bigint
    OR global_media.entity_type_id = $2::bigint
    GROUP BY 
        entity_id,entity_type_id
),
MinDates AS (
    SELECT 
    	unit_versions.id as unit_id,
        plan_installments.payment_plans,
        MIN(plan_installments."date") AS earliest_date
    FROM 
        unit_versions
    JOIN 
        payment_plans_packages 
        ON payment_plans_packages.entity_id = unit_versions.id 
        AND payment_plans_packages.entity_type_id = $2::bigint
    JOIN 
        plan_installments 
        ON plan_installments.payment_plans = ANY(payment_plans_packages.payment_plans_id)
    GROUP BY 
        plan_installments.payment_plans,unit_versions.id
),
downpayment as(
    SELECT 
        unit_versions.id as unit_id, 
        ARRAY_AGG(plan_installments.percentage) as percentages
    FROM unit_versions
    LEFT JOIN MinDates ON  MinDates.unit_id=unit_versions.id
    left JOIN 
        plan_installments 
        ON plan_installments.payment_plans = MinDates.payment_plans 
        AND plan_installments."date" = MinDates.earliest_date
    group by unit_versions.id
),
DesiredCountries as (
    SELECT unit_versions.id AS unit_id,ARRAY_AGG(addresses.countries_id) AS "countries" FROM unit_versions 
    JOIN swap_requirement ON swap_requirement.entity_id=unit_versions.id AND swap_requirement.entity_type= $2::BIGINT
    JOIN swap_requirment_address ON swap_requirment_address.swap_requirment_id=swap_requirement.id
    JOIN addresses ON addresses.id=swap_requirment_address.addresses_id
    WHERE unit_versions."type"= 3
    GROUP BY unit_versions.id
)
SELECT
count(uv.id)
FROM unit_versions uv
JOIN units u on u.id=uv.unit_id
JOIN unit_type ut on ut.id=u.unit_type_id
JOIN addresses a on u.addresses_id=a.id
LEFT JOIN states ON a.states_id= states.id
LEFT JOIN cities ci ON a.cities_id = ci.id
LEFT JOIN communities com ON a.communities_id = com.id
LEFT JOIN sub_communities subcom ON a.sub_communities_id = subcom.id
join unit_media_agg on (
	case WHEN uv.has_gallery is null OR uv.has_gallery=FALSE then unit_media_agg.entity_id=u.id and unit_media_agg.entity_type_id= $1::bigint 
	ELSE  unit_media_agg.entity_id=uv.id and unit_media_agg.entity_type_id= $2::BIGINT END)
left join downpayment ON downpayment.unit_id = uv.id
LEFT JOIN facilities_and_amenities f ON f.id=uv.id AND f."type"=1
LEFT JOIN facilities_and_amenities am ON am.id=uv.id AND am."type"=2
LEFT JOIN property p ON p.id=u.entity_id AND u.entity_type_id= $3::bigint
JOIN company_users cu ON cu.users_id=uv.listed_by
JOIN users ON users.id=cu.users_id
LEFT JOIN DesiredCountries ON DesiredCountries.unit_id=uv.id AND 3 = ANY($4::bigint[])
WHERE

    (CASE WHEN ARRAY_LENGTH($5::bigint[], 1) IS NULL THEN TRUE ELSE (string_to_array(trim(both '[]' from u.facts->>'views'), ',')::BIGINT[]) &&  $5::BIGINT[] END)
    AND
        (CASE WHEN  ARRAY_LENGTH($6::bigint [], 1) IS NULL THEN TRUE ELSE cu.company_id= ANY($6::bigint []) END) AND users.status=2
    AND
        (CASE WHEN $7::bigint=0 THEN TRUE ELSE p.id= $7::bigint END)
    AND
        (ARRAY_LENGTH($8::BIGINT[], 1) IS NULL OR ut."usage" = ANY($8::BIGINT[])) -- commercial, residential, agricultural, industrial
    AND 
        (ARRAY_LENGTH($4::BIGINT[], 1) IS NULL OR uv."type" = ANY($4::BIGINT[])) -- rent sale swap
    AND 
        (case WHEN (ARRAY_LENGTH($9::bigint[],1)) is null then true else DesiredCountries.countries && $9::bigint[] end)
    AND
    	(case WHEN $10::BIGINT= 0 then true else (uv.facts->>'life_style')::BIGINT= $10::BIGINT end)
    AND
        (ARRAY_LENGTH( $11::bigint[], 1) IS NULL OR uv.unit_rank = ANY($11::bigint[]))
    AND
      uv.status  not in (1,6,5)
    AND
    -- listed by company
        (CASE WHEN ARRAY_LENGTH($12::bigint [], 1) IS NULL THEN TRUE ELSE u.company_id= ANY($12::bigint []) END)
    AND
    -- listed by agent
        (CASE WHEN  ARRAY_LENGTH($13::bigint [],1) is null THEN TRUE ELSE uv.listed_by= ANY($13::bigint []) END)
    AND
        (case WHEN $14::VARCHAR= '' then true else $14= any(downpayment.percentages) END)
    AND
    (CASE WHEN $15::bool IS NULL OR $15::bool = false THEN true ELSE uv.is_hotdeal = $15::bool END)
    AND
    (CASE WHEN $16::bool IS NULL OR $16::bool = false THEN true ELSE uv.is_verified = $16::bool END)
    AND
        -- from unit type table
        (CASE WHEN $17::bigint= 0 THEN TRUE ELSE u.unit_type_id = $17::bigint END)  
    AND
        (case WHEN $18::varchar='' then true else  u.unit_no = $18::varchar AND  u.unitno_is_public = TRUE end )
    
    AND
        (CASE WHEN $19::varchar='' THEN TRUE ELSE uv.ref_no = $19::varchar END)
    AND
        (CASE WHEN ARRAY_LENGTH($20::VARCHAR[], 1) IS NULL --keywords
        THEN TRUE ELSE
        uv.title ILIKE ANY($20::VARCHAR[])
        OR uv.ref_no ILIKE ANY($20::VARCHAR[])
        OR uv.description ILIKE ANY($20::VARCHAR[])
        OR states."state" ILIKE ANY($20::VARCHAR[])
        OR ci.city ILIKE ANY($20::VARCHAR[])
        OR com.community ILIKE ANY($20::VARCHAR[])
        OR subcom.sub_community ILIKE ANY($20::VARCHAR[])
        OR ut."type" ILIKE ANY($20::VARCHAR[])
        END)
    AND
        (CASE WHEN  $21::bigint=0 THEN TRUE ELSE a.countries_id = $21::bigint end) 
    AND
        (CASE WHEN  $22::bigint=0 THEN TRUE ELSE a.states_id = $22::bigint end) 
    AND   -- location
        (CASE WHEN $23::bigint=0 THEN TRUE ELSE a.cities_id= $23::bigint END)
        AND
        (CASE WHEN $24::bigint=0 THEN TRUE ELSE a.communities_id= $24::bigint END)
        AND
        (CASE WHEN $25::bigint=0 THEN TRUE ELSE a.sub_communities_id= $25::bigint END)
        AND
        (CASE WHEN $26::bigint=0 THEN TRUE ELSE a.property_map_location_id= $26::bigint END)
    --FACTS STUFF--
     AND
       (CASE WHEN ARRAY_LENGTH($27::bigint[], 1) IS NULL THEN TRUE ELSE  (uv.facts->>'rent_type')::bigint = ANY($27::bigint[]) END)
    AND
        (CASE WHEN $28::bigint IS NULL THEN
            TRUE
        WHEN $28::bigint = 0 THEN
            TRUE
        ELSE
            (u.facts->>'completion_status')::bigint = $28::bigint
        END)
    AND
        (case  WHEN $29::bool = false then true else (u.facts->>'roi')::bool = $29::bool end)
    AND
        (CASE WHEN $30::bool IS NULL OR $30::bool = false THEN true ELSE uv.exclusive = $30::bool END)
    AND
         (case  WHEN $31::bool = false then true else (uv.facts->>'investment')::bool = $31::bool end)
    AND
        (CASE WHEN ARRAY_LENGTH($32::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'no_of_floor')::bigint = ANY($32::bigint[]) END)
    AND

    (CASE WHEN $33::float IS NULL THEN
            TRUE
        WHEN $33::float = 0.0 THEN
            TRUE
        ELSE
            (u.facts->>'completion_percentage')::float >= $33::float
        END
        AND
        CASE WHEN $34::float IS NULL THEN
            TRUE
        WHEN $34::float = 0.0 THEN
            TRUE
        ELSE
            (u.facts->>'completion_percentage')::float <= $34::float
        END)
    AND
        (CASE WHEN $35::timestamp IS NULL THEN TRUE ELSE (u.facts->>'handover_date')::timestamp = $35::timestamp END)
    AND
        (CASE WHEN $36::timestamp IS NULL THEN TRUE ELSE (u.facts->>'completion_date')::timestamptz = $36::timestamp END)
    AND
        (CASE WHEN ARRAY_LENGTH($37::bigint[], 1) IS NULL THEN TRUE ELSE  (u.facts->>'service_charge')::bigint = ANY($37::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($38::VARCHAR[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bedroom')::varchar = ANY($38::VARCHAR[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($39::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'bathroom')::bigint = ANY($39::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($40::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'furnished')::bigint = ANY($40::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($41::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'ownership')::bigint = ANY($41::bigint[]) END)
    AND
        (CASE WHEN ARRAY_LENGTH($42::bigint[], 1) IS NULL THEN TRUE ELSE (u.facts->>'parking')::bigint = ANY($42::bigint[]) END)
    AND -- build up area
        (CASE WHEN $43::float IS NULL THEN
            TRUE
        WHEN $43::float = 0.0 THEN
            TRUE
        ELSE
            (u.facts->>'built_up_area')::float >= $43::float
        END
        AND
        CASE WHEN $44::float IS NULL THEN
            TRUE
        WHEN $44::float = 0.0 THEN
            TRUE
        ELSE
            (u.facts->>'built_up_area')::float <= $44::float
        END)    
    AND -- plot area
    (CASE WHEN $45::float IS NULL THEN
                TRUE
            WHEN $45::float = 0.0 THEN
                TRUE
            ELSE
                (u.facts->>'plot_area')::float >= $45::float
            END
            -- max plot area
            AND CASE WHEN $46::float IS NULL THEN
                TRUE
            WHEN $46::float = 0.0 THEN
                TRUE
            ELSE
                (u.facts->>'plot_area')::float <= $46::float
            END)
    AND
            (CASE WHEN $47::float IS NULL THEN
                TRUE
            WHEN $47::float = 0.0 THEN
                TRUE
            ELSE
                (uv.facts->>'price')::float >= $47::float
            END
            -- max plot area
            AND CASE WHEN $48::float IS NULL THEN
                TRUE
            WHEN  $48::float = 0.0 THEN
                TRUE
            ELSE
                (uv.facts->>'price')::float <=  $48::float
            END)
    AND
            (CASE WHEN $49::bigint IS NULL THEN
                TRUE
            WHEN $49::bigint = 0.0 THEN
                TRUE
            ELSE
                (u.facts->>'unit_area')::bigint >= $49::bigint
            END
            -- max plot area
            AND CASE WHEN $50::bigint IS NULL THEN
                TRUE
            WHEN  $50::bigint = 0.0 THEN
                TRUE
            ELSE
                (u.facts->>'unit_area')::bigint <=  $50::bigint
            END)
    -- media
    AND (
        CASE 
            -- If property_type is empty, return TRUE (so it matches all rows)
            WHEN ARRAY_LENGTH($51::BIGINT[], 1) IS NULL THEN TRUE
            ELSE EXISTS (
                SELECT pt
                FROM unnest(unit_media_agg.media) AS pt
                WHERE EXISTS (
                    SELECT 1
                    FROM unnest($51::BIGINT[]) AS search_terms
                    WHERE pt = search_terms
                )
            )
        END
    )
    AND (-- facilities
        array_length($52::bigint[], 1) IS NULL
        OR f.facilities_amenities::bigint[] && $52::bigint[]
    )
    AND (--  amenities
        array_length($53::bigint[], 1) IS NULL
        OR am.facilities_amenities::bigint[] && $53::bigint[]
    )
`

type LatestFilterUnitsCountParams struct {
	UnitEntityType          int64            `json:"unit_entity_type"`
	UnitversionsEntityType  int64            `json:"unitversions_entity_type"`
	PropertyEntityType      int64            `json:"property_entity_type"`
	Category                []int64          `json:"category"`
	Views                   []int64          `json:"views"`
	BrokerCompanyID         []int64          `json:"broker_company_id"`
	PropertyID              int64            `json:"property_id"`
	UnitUsage               []int64          `json:"unit_usage"`
	DesiredCountries        []int64          `json:"desired_countries"`
	LifeStyle               int64            `json:"life_style"`
	UnitRank                []int64          `json:"unit_rank"`
	DeveloperCompanyID      []int64          `json:"developer_company_id"`
	AgentID                 []int64          `json:"agent_id"`
	Downpayment             string           `json:"downpayment"`
	Hotdeal                 pgtype.Bool      `json:"hotdeal"`
	IsVerified              pgtype.Bool      `json:"is_verified"`
	UnitTypes               int64            `json:"unit_types"`
	UnitNo                  string           `json:"unit_no"`
	RefNo                   string           `json:"ref_no"`
	Keywords                []string         `json:"keywords"`
	CountryID               int64            `json:"country_id"`
	StateID                 int64            `json:"state_id"`
	CityID                  int64            `json:"city_id"`
	CommunitiesID           int64            `json:"communities_id"`
	SubCommunitiesID        int64            `json:"sub_communities_id"`
	PropertyMapLocationID   int64            `json:"property_map_location_id"`
	RentType                []int64          `json:"rent_type"`
	CompletionStatus        int64            `json:"completion_status"`
	IsLeased                pgtype.Bool      `json:"is_leased"`
	IsExclusive             pgtype.Bool      `json:"is_exclusive"`
	IsInvestment            pgtype.Bool      `json:"is_investment"`
	NoOfFloor               []int64          `json:"no_of_floor"`
	MinCompletionPercentage float64          `json:"min_completion_percentage"`
	MaxCompletionPercentage float64          `json:"max_completion_percentage"`
	HandoverDate            pgtype.Timestamp `json:"handover_date"`
	CompletionDate          pgtype.Timestamp `json:"completion_date"`
	ServiceCharge           []int64          `json:"service_charge"`
	Bedroom                 []string         `json:"bedroom"`
	Bathroom                []int64          `json:"bathroom"`
	Furnished               []int64          `json:"furnished"`
	Ownership               []int64          `json:"ownership"`
	Parking                 []int64          `json:"parking"`
	MinBuiltUpArea          float64          `json:"min_built_up_area"`
	MaxBuiltUpArea          float64          `json:"max_built_up_area"`
	MinPlotArea             float64          `json:"min_plot_area"`
	MaxPlotArea             float64          `json:"max_plot_area"`
	MinPrice                float64          `json:"min_price"`
	MaxPrice                float64          `json:"max_price"`
	MinUnitArea             int64            `json:"min_unit_area"`
	MaxUnitArea             int64            `json:"max_unit_area"`
	Media                   []int64          `json:"media"`
	Facilities              []int64          `json:"facilities"`
	Amenities               []int64          `json:"amenities"`
}

func (q *Queries) LatestFilterUnitsCount(ctx context.Context, arg LatestFilterUnitsCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, latestFilterUnitsCount,
		arg.UnitEntityType,
		arg.UnitversionsEntityType,
		arg.PropertyEntityType,
		arg.Category,
		arg.Views,
		arg.BrokerCompanyID,
		arg.PropertyID,
		arg.UnitUsage,
		arg.DesiredCountries,
		arg.LifeStyle,
		arg.UnitRank,
		arg.DeveloperCompanyID,
		arg.AgentID,
		arg.Downpayment,
		arg.Hotdeal,
		arg.IsVerified,
		arg.UnitTypes,
		arg.UnitNo,
		arg.RefNo,
		arg.Keywords,
		arg.CountryID,
		arg.StateID,
		arg.CityID,
		arg.CommunitiesID,
		arg.SubCommunitiesID,
		arg.PropertyMapLocationID,
		arg.RentType,
		arg.CompletionStatus,
		arg.IsLeased,
		arg.IsExclusive,
		arg.IsInvestment,
		arg.NoOfFloor,
		arg.MinCompletionPercentage,
		arg.MaxCompletionPercentage,
		arg.HandoverDate,
		arg.CompletionDate,
		arg.ServiceCharge,
		arg.Bedroom,
		arg.Bathroom,
		arg.Furnished,
		arg.Ownership,
		arg.Parking,
		arg.MinBuiltUpArea,
		arg.MaxBuiltUpArea,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.MinUnitArea,
		arg.MaxUnitArea,
		arg.Media,
		arg.Facilities,
		arg.Amenities,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}
