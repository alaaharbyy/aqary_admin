// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_agent_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerAgentReviews = `-- name: CreateBrokerAgentReviews :one
INSERT INTO broker_agent_reviews (
    rating,
    review,
    profiles_id,
    localknowledge_rating,
    processexpertise_rating,
    responsiveness_rating,
    negotiationskills_rating,
    services_id,
    status,
    broker_company_agents_id,
    created_at,
    updated_at,
    users_id
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13 
) RETURNING id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_agents_id, created_at, updated_at, users_id
`

type CreateBrokerAgentReviewsParams struct {
	Rating                  string    `json:"rating"`
	Review                  string    `json:"review"`
	ProfilesID              int64     `json:"profiles_id"`
	LocalknowledgeRating    string    `json:"localknowledge_rating"`
	ProcessexpertiseRating  string    `json:"processexpertise_rating"`
	ResponsivenessRating    string    `json:"responsiveness_rating"`
	NegotiationskillsRating string    `json:"negotiationskills_rating"`
	ServicesID              int64     `json:"services_id"`
	Status                  int64     `json:"status"`
	BrokerCompanyAgentsID   int64     `json:"broker_company_agents_id"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	UsersID                 int64     `json:"users_id"`
}

func (q *Queries) CreateBrokerAgentReviews(ctx context.Context, arg CreateBrokerAgentReviewsParams) (BrokerAgentReview, error) {
	row := q.db.QueryRow(ctx, createBrokerAgentReviews,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.LocalknowledgeRating,
		arg.ProcessexpertiseRating,
		arg.ResponsivenessRating,
		arg.NegotiationskillsRating,
		arg.ServicesID,
		arg.Status,
		arg.BrokerCompanyAgentsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteBrokerAgentReviews = `-- name: DeleteBrokerAgentReviews :exec
DELETE FROM broker_agent_reviews
Where id = $1
`

func (q *Queries) DeleteBrokerAgentReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerAgentReviews, id)
	return err
}

const getAllBrokerAgentReviews = `-- name: GetAllBrokerAgentReviews :many
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_agents_id, created_at, updated_at, users_id FROM broker_agent_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerAgentReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerAgentReviews(ctx context.Context, arg GetAllBrokerAgentReviewsParams) ([]BrokerAgentReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerAgentReview
	for rows.Next() {
		var i BrokerAgentReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.LocalknowledgeRating,
			&i.ProcessexpertiseRating,
			&i.ResponsivenessRating,
			&i.NegotiationskillsRating,
			&i.ServicesID,
			&i.Status,
			&i.BrokerCompanyAgentsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentReviewsByAgentId = `-- name: GetAllBrokerAgentReviewsByAgentId :many
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_agents_id, created_at, updated_at, users_id FROM broker_agent_reviews
Where broker_company_agents_id = $1
LIMIT $2
OFFSET $3
`

type GetAllBrokerAgentReviewsByAgentIdParams struct {
	BrokerCompanyAgentsID int64 `json:"broker_company_agents_id"`
	Limit                 int32 `json:"limit"`
	Offset                int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerAgentReviewsByAgentId(ctx context.Context, arg GetAllBrokerAgentReviewsByAgentIdParams) ([]BrokerAgentReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentReviewsByAgentId, arg.BrokerCompanyAgentsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerAgentReview
	for rows.Next() {
		var i BrokerAgentReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.LocalknowledgeRating,
			&i.ProcessexpertiseRating,
			&i.ResponsivenessRating,
			&i.NegotiationskillsRating,
			&i.ServicesID,
			&i.Status,
			&i.BrokerCompanyAgentsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentReviewsDetails = `-- name: GetAllBrokerAgentReviewsDetails :many
SELECT
    bar.id AS review_id,
    p.first_name,
	p.last_name,
	u.username,
	bc.company_name,
	u.email,
	bar.localknowledge_rating,
	bar.processexpertise_rating,
	bar.responsiveness_rating,
	bar.negotiationskills_rating,
	bar.review
FROM broker_agent_reviews AS bar
INNER JOIN profiles AS p ON p.id=bar.profiles_id
INNER JOIN broker_company_agents AS bca ON bca.id=bar.broker_company_agents_id
INNER JOIN broker_companies AS bc ON bc.id=bca.broker_companies_id
INNER JOIN users AS u ON u.id=bar.users_id
LIMIT $1 OFFSET $2
`

type GetAllBrokerAgentReviewsDetailsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllBrokerAgentReviewsDetailsRow struct {
	ReviewID                int64  `json:"review_id"`
	FirstName               string `json:"first_name"`
	LastName                string `json:"last_name"`
	Username                string `json:"username"`
	CompanyName             string `json:"company_name"`
	Email                   string `json:"email"`
	LocalknowledgeRating    string `json:"localknowledge_rating"`
	ProcessexpertiseRating  string `json:"processexpertise_rating"`
	ResponsivenessRating    string `json:"responsiveness_rating"`
	NegotiationskillsRating string `json:"negotiationskills_rating"`
	Review                  string `json:"review"`
}

func (q *Queries) GetAllBrokerAgentReviewsDetails(ctx context.Context, arg GetAllBrokerAgentReviewsDetailsParams) ([]GetAllBrokerAgentReviewsDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentReviewsDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerAgentReviewsDetailsRow
	for rows.Next() {
		var i GetAllBrokerAgentReviewsDetailsRow
		if err := rows.Scan(
			&i.ReviewID,
			&i.FirstName,
			&i.LastName,
			&i.Username,
			&i.CompanyName,
			&i.Email,
			&i.LocalknowledgeRating,
			&i.ProcessexpertiseRating,
			&i.ResponsivenessRating,
			&i.NegotiationskillsRating,
			&i.Review,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgBrokerAgentReviews = `-- name: GetAvgBrokerAgentReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1) FROM broker_agent_reviews Where broker_company_agents_id = $1
`

func (q *Queries) GetAvgBrokerAgentReviews(ctx context.Context, brokerCompanyAgentsID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgBrokerAgentReviews, brokerCompanyAgentsID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getBrokerAgentReviews = `-- name: GetBrokerAgentReviews :one
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_agents_id, created_at, updated_at, users_id FROM broker_agent_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerAgentReviews(ctx context.Context, limit int32) (BrokerAgentReview, error) {
	row := q.db.QueryRow(ctx, getBrokerAgentReviews, limit)
	var i BrokerAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getBrokerAgentReviewsCount = `-- name: GetBrokerAgentReviewsCount :one
SELECT COUNT(*) FROM broker_agent_reviews
`

func (q *Queries) GetBrokerAgentReviewsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getBrokerAgentReviewsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBrokerAgentReviewsDetails = `-- name: GetBrokerAgentReviewsDetails :one
SELECT
    bar.id AS review_id,
    p.first_name,
	p.last_name,
	u.username,
	bc.company_name,
	u.email,
	bar.localknowledge_rating,
	bar.processexpertise_rating,
	bar.responsiveness_rating,
	bar.negotiationskills_rating,
	bar.review
FROM broker_agent_reviews AS bar
INNER JOIN profiles AS p ON p.id=bar.profiles_id
INNER JOIN broker_company_agents AS bca ON bca.id=bar.broker_company_agents_id
INNER JOIN broker_companies AS bc ON bc.id=bca.broker_companies_id
INNER JOIN users AS u ON u.id=bar.users_id
where bar.id=$1 LIMIT 1
`

type GetBrokerAgentReviewsDetailsRow struct {
	ReviewID                int64  `json:"review_id"`
	FirstName               string `json:"first_name"`
	LastName                string `json:"last_name"`
	Username                string `json:"username"`
	CompanyName             string `json:"company_name"`
	Email                   string `json:"email"`
	LocalknowledgeRating    string `json:"localknowledge_rating"`
	ProcessexpertiseRating  string `json:"processexpertise_rating"`
	ResponsivenessRating    string `json:"responsiveness_rating"`
	NegotiationskillsRating string `json:"negotiationskills_rating"`
	Review                  string `json:"review"`
}

func (q *Queries) GetBrokerAgentReviewsDetails(ctx context.Context, id int64) (GetBrokerAgentReviewsDetailsRow, error) {
	row := q.db.QueryRow(ctx, getBrokerAgentReviewsDetails, id)
	var i GetBrokerAgentReviewsDetailsRow
	err := row.Scan(
		&i.ReviewID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.CompanyName,
		&i.Email,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.Review,
	)
	return i, err
}

const updateBrokerAgentReviews = `-- name: UpdateBrokerAgentReviews :one
UPDATE broker_agent_reviews
SET  rating = $2,
    review = $3,
    profiles_id = $4,
    localknowledge_rating = $5,
    processexpertise_rating = $6,
    responsiveness_rating = $7,
    negotiationskills_rating = $8,
    services_id = $9,
    status = $10,
    broker_company_agents_id = $11,
    created_at = $12,
    updated_at = $13,
    users_id = $14
Where id = $1
RETURNING id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_agents_id, created_at, updated_at, users_id
`

type UpdateBrokerAgentReviewsParams struct {
	ID                      int64     `json:"id"`
	Rating                  string    `json:"rating"`
	Review                  string    `json:"review"`
	ProfilesID              int64     `json:"profiles_id"`
	LocalknowledgeRating    string    `json:"localknowledge_rating"`
	ProcessexpertiseRating  string    `json:"processexpertise_rating"`
	ResponsivenessRating    string    `json:"responsiveness_rating"`
	NegotiationskillsRating string    `json:"negotiationskills_rating"`
	ServicesID              int64     `json:"services_id"`
	Status                  int64     `json:"status"`
	BrokerCompanyAgentsID   int64     `json:"broker_company_agents_id"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
	UsersID                 int64     `json:"users_id"`
}

func (q *Queries) UpdateBrokerAgentReviews(ctx context.Context, arg UpdateBrokerAgentReviewsParams) (BrokerAgentReview, error) {
	row := q.db.QueryRow(ctx, updateBrokerAgentReviews,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.LocalknowledgeRating,
		arg.ProcessexpertiseRating,
		arg.ResponsivenessRating,
		arg.NegotiationskillsRating,
		arg.ServicesID,
		arg.Status,
		arg.BrokerCompanyAgentsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
