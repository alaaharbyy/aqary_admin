// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: map.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getLatLngValuesForLuxuryProjectProperty = `-- name: GetLatLngValuesForLuxuryProjectProperty :many
select project_properties.id, property_name, property_name_arabic, project_properties.description, description_arabic, project_properties.status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, project_properties.created_at, project_properties.updated_at, projects_id, is_show_owner_info, project_properties.property, live_status, project_properties.countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public, addresses.id, addresses.countries_id, addresses.states_id, addresses.cities_id, addresses.communities_id, sub_communities_id, locations_id, addresses.created_at, addresses.updated_at, property_map_location_id, full_address, full_address_ar, cities.id, city, cities.states_id, cities.created_at, cities.updated_at, cities.lat, cities.lng, cities.status, cities.deleted_at, cities.updated_by, city_ar, cover_image, cities.description, communities.id, community, communities.cities_id, communities.created_at, communities.updated_at, communities.lat, communities.lng, communities.status, communities.deleted_at, communities.updated_by, community_ar, sub_communities.id, sub_community, sub_communities.communities_id, sub_communities.created_at, sub_communities.updated_at, sub_communities.lng, sub_communities.lat, sub_communities.status, sub_communities.deleted_at, sub_communities.updated_by, sub_community_ar, locations.id, locations.lat, locations.lng, locations.created_at, locations.updated_at, properties_facts.id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, properties_facts.property, is_branch, properties_facts.created_at, properties_facts.updated_at, available_units, commercial_tax, municipality_tax, is_project_fact, project_id, completion_percentage, completion_percentage_date, type_name_id, sc_currency_id, unit_of_measure from project_properties
LEFT JOIN addresses ON project_properties.addresses_id = addresses.id 
LEFT JOIN cities ON addresses.cities_id = cities.id
LEFT JOIN communities ON addresses.communities_id = communities.id
LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
LEFT JOIN locations on addresses.locations_id = locations.id 
left join properties_facts on project_properties.id = properties_facts.properties_id and properties_facts.property = 1
where project_properties.status != 5 and project_properties.status != 6 and (properties_facts.life_style = 3 or properties_facts.life_style = 4)
`

type GetLatLngValuesForLuxuryProjectPropertyRow struct {
	ID                       int64              `json:"id"`
	PropertyName             string             `json:"property_name"`
	PropertyNameArabic       string             `json:"property_name_arabic"`
	Description              string             `json:"description"`
	DescriptionArabic        string             `json:"description_arabic"`
	Status                   int64              `json:"status"`
	IsVerified               pgtype.Bool        `json:"is_verified"`
	PropertyRank             int64              `json:"property_rank"`
	AmenitiesID              []int64            `json:"amenities_id"`
	AddressesID              int64              `json:"addresses_id"`
	PhasesID                 pgtype.Int8        `json:"phases_id"`
	PropertyTypesID          []int64            `json:"property_types_id"`
	CreatedAt                time.Time          `json:"created_at"`
	UpdatedAt                time.Time          `json:"updated_at"`
	ProjectsID               int64              `json:"projects_id"`
	IsShowOwnerInfo          pgtype.Bool        `json:"is_show_owner_info"`
	Property                 int64              `json:"property"`
	LiveStatus               pgtype.Bool        `json:"live_status"`
	CountriesID              int64              `json:"countries_id"`
	DeveloperCompaniesID     int64              `json:"developer_companies_id"`
	RefNo                    string             `json:"ref_no"`
	UsersID                  int64              `json:"users_id"`
	OwnerUsersID             pgtype.Int8        `json:"owner_users_id"`
	IsMultiphase             pgtype.Bool        `json:"is_multiphase"`
	PropertyTitle            pgtype.Text        `json:"property_title"`
	Notes                    pgtype.Text        `json:"notes"`
	NotesArabic              pgtype.Text        `json:"notes_arabic"`
	IsNotesPublic            pgtype.Bool        `json:"is_notes_public"`
	ID_2                     pgtype.Int8        `json:"id_2"`
	CountriesID_2            pgtype.Int8        `json:"countries_id_2"`
	StatesID                 pgtype.Int8        `json:"states_id"`
	CitiesID                 pgtype.Int8        `json:"cities_id"`
	CommunitiesID            pgtype.Int8        `json:"communities_id"`
	SubCommunitiesID         pgtype.Int8        `json:"sub_communities_id"`
	LocationsID              pgtype.Int8        `json:"locations_id"`
	CreatedAt_2              pgtype.Timestamptz `json:"created_at_2"`
	UpdatedAt_2              pgtype.Timestamptz `json:"updated_at_2"`
	PropertyMapLocationID    pgtype.Int8        `json:"property_map_location_id"`
	FullAddress              pgtype.Text        `json:"full_address"`
	FullAddressAr            pgtype.Text        `json:"full_address_ar"`
	ID_3                     pgtype.Int8        `json:"id_3"`
	City                     pgtype.Text        `json:"city"`
	StatesID_2               pgtype.Int8        `json:"states_id_2"`
	CreatedAt_3              pgtype.Timestamptz `json:"created_at_3"`
	UpdatedAt_3              pgtype.Timestamptz `json:"updated_at_3"`
	Lat                      pgtype.Float8      `json:"lat"`
	Lng                      pgtype.Float8      `json:"lng"`
	Status_2                 pgtype.Int8        `json:"status_2"`
	DeletedAt                pgtype.Timestamptz `json:"deleted_at"`
	UpdatedBy                pgtype.Int8        `json:"updated_by"`
	CityAr                   pgtype.Text        `json:"city_ar"`
	CoverImage               pgtype.Text        `json:"cover_image"`
	Description_2            pgtype.Text        `json:"description_2"`
	ID_4                     pgtype.Int8        `json:"id_4"`
	Community                pgtype.Text        `json:"community"`
	CitiesID_2               pgtype.Int8        `json:"cities_id_2"`
	CreatedAt_4              pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4              pgtype.Timestamptz `json:"updated_at_4"`
	Lat_2                    pgtype.Float8      `json:"lat_2"`
	Lng_2                    pgtype.Float8      `json:"lng_2"`
	Status_3                 pgtype.Int8        `json:"status_3"`
	DeletedAt_2              pgtype.Timestamptz `json:"deleted_at_2"`
	UpdatedBy_2              pgtype.Int8        `json:"updated_by_2"`
	CommunityAr              pgtype.Text        `json:"community_ar"`
	ID_5                     pgtype.Int8        `json:"id_5"`
	SubCommunity             pgtype.Text        `json:"sub_community"`
	CommunitiesID_2          pgtype.Int8        `json:"communities_id_2"`
	CreatedAt_5              pgtype.Timestamptz `json:"created_at_5"`
	UpdatedAt_5              pgtype.Timestamptz `json:"updated_at_5"`
	Lng_3                    pgtype.Float8      `json:"lng_3"`
	Lat_3                    pgtype.Float8      `json:"lat_3"`
	Status_4                 pgtype.Int8        `json:"status_4"`
	DeletedAt_3              pgtype.Timestamptz `json:"deleted_at_3"`
	UpdatedBy_3              pgtype.Int8        `json:"updated_by_3"`
	SubCommunityAr           pgtype.Text        `json:"sub_community_ar"`
	ID_6                     pgtype.Int8        `json:"id_6"`
	Lat_4                    pgtype.Text        `json:"lat_4"`
	Lng_4                    pgtype.Text        `json:"lng_4"`
	CreatedAt_6              pgtype.Timestamptz `json:"created_at_6"`
	UpdatedAt_6              pgtype.Timestamptz `json:"updated_at_6"`
	ID_7                     pgtype.Int8        `json:"id_7"`
	Bedroom                  pgtype.Text        `json:"bedroom"`
	Bathroom                 pgtype.Int8        `json:"bathroom"`
	PlotArea                 pgtype.Float8      `json:"plot_area"`
	BuiltUpArea              pgtype.Float8      `json:"built_up_area"`
	View                     []int64            `json:"view"`
	Furnished                pgtype.Int8        `json:"furnished"`
	Ownership                pgtype.Int8        `json:"ownership"`
	CompletionStatus         pgtype.Int8        `json:"completion_status"`
	StartDate                pgtype.Timestamptz `json:"start_date"`
	CompletionDate           pgtype.Timestamptz `json:"completion_date"`
	HandoverDate             pgtype.Timestamptz `json:"handover_date"`
	NoOfFloor                pgtype.Int8        `json:"no_of_floor"`
	NoOfUnits                pgtype.Int8        `json:"no_of_units"`
	MinArea                  pgtype.Float8      `json:"min_area"`
	MaxArea                  pgtype.Float8      `json:"max_area"`
	ServiceCharge            pgtype.Int8        `json:"service_charge"`
	Parking                  pgtype.Int8        `json:"parking"`
	AskPrice                 pgtype.Bool        `json:"ask_price"`
	Price                    pgtype.Float8      `json:"price"`
	RentType                 pgtype.Int8        `json:"rent_type"`
	NoOfPayment              pgtype.Int8        `json:"no_of_payment"`
	NoOfRetail               pgtype.Int8        `json:"no_of_retail"`
	NoOfPool                 pgtype.Int8        `json:"no_of_pool"`
	Elevator                 pgtype.Int8        `json:"elevator"`
	StartingPrice            pgtype.Int8        `json:"starting_price"`
	LifeStyle                pgtype.Int8        `json:"life_style"`
	PropertiesID             pgtype.Int8        `json:"properties_id"`
	Property_2               pgtype.Int8        `json:"property_2"`
	IsBranch                 pgtype.Bool        `json:"is_branch"`
	CreatedAt_7              pgtype.Timestamptz `json:"created_at_7"`
	UpdatedAt_7              pgtype.Timestamptz `json:"updated_at_7"`
	AvailableUnits           pgtype.Int8        `json:"available_units"`
	CommercialTax            pgtype.Float8      `json:"commercial_tax"`
	MunicipalityTax          pgtype.Float8      `json:"municipality_tax"`
	IsProjectFact            pgtype.Bool        `json:"is_project_fact"`
	ProjectID                pgtype.Int8        `json:"project_id"`
	CompletionPercentage     pgtype.Int8        `json:"completion_percentage"`
	CompletionPercentageDate pgtype.Timestamptz `json:"completion_percentage_date"`
	TypeNameID               pgtype.Int8        `json:"type_name_id"`
	ScCurrencyID             pgtype.Int8        `json:"sc_currency_id"`
	UnitOfMeasure            pgtype.Text        `json:"unit_of_measure"`
}

// left join property_types on project_properties.property_types_id = property_types.id
func (q *Queries) GetLatLngValuesForLuxuryProjectProperty(ctx context.Context) ([]GetLatLngValuesForLuxuryProjectPropertyRow, error) {
	rows, err := q.db.Query(ctx, getLatLngValuesForLuxuryProjectProperty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatLngValuesForLuxuryProjectPropertyRow
	for rows.Next() {
		var i GetLatLngValuesForLuxuryProjectPropertyRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
			&i.ID_2,
			&i.CountriesID_2,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubCommunitiesID,
			&i.LocationsID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyMapLocationID,
			&i.FullAddress,
			&i.FullAddressAr,
			&i.ID_3,
			&i.City,
			&i.StatesID_2,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Lat,
			&i.Lng,
			&i.Status_2,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CityAr,
			&i.CoverImage,
			&i.Description_2,
			&i.ID_4,
			&i.Community,
			&i.CitiesID_2,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.Lat_2,
			&i.Lng_2,
			&i.Status_3,
			&i.DeletedAt_2,
			&i.UpdatedBy_2,
			&i.CommunityAr,
			&i.ID_5,
			&i.SubCommunity,
			&i.CommunitiesID_2,
			&i.CreatedAt_5,
			&i.UpdatedAt_5,
			&i.Lng_3,
			&i.Lat_3,
			&i.Status_4,
			&i.DeletedAt_3,
			&i.UpdatedBy_3,
			&i.SubCommunityAr,
			&i.ID_6,
			&i.Lat_4,
			&i.Lng_4,
			&i.CreatedAt_6,
			&i.UpdatedAt_6,
			&i.ID_7,
			&i.Bedroom,
			&i.Bathroom,
			&i.PlotArea,
			&i.BuiltUpArea,
			&i.View,
			&i.Furnished,
			&i.Ownership,
			&i.CompletionStatus,
			&i.StartDate,
			&i.CompletionDate,
			&i.HandoverDate,
			&i.NoOfFloor,
			&i.NoOfUnits,
			&i.MinArea,
			&i.MaxArea,
			&i.ServiceCharge,
			&i.Parking,
			&i.AskPrice,
			&i.Price,
			&i.RentType,
			&i.NoOfPayment,
			&i.NoOfRetail,
			&i.NoOfPool,
			&i.Elevator,
			&i.StartingPrice,
			&i.LifeStyle,
			&i.PropertiesID,
			&i.Property_2,
			&i.IsBranch,
			&i.CreatedAt_7,
			&i.UpdatedAt_7,
			&i.AvailableUnits,
			&i.CommercialTax,
			&i.MunicipalityTax,
			&i.IsProjectFact,
			&i.ProjectID,
			&i.CompletionPercentage,
			&i.CompletionPercentageDate,
			&i.TypeNameID,
			&i.ScCurrencyID,
			&i.UnitOfMeasure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatLngValuesForProjectProperty = `-- name: GetLatLngValuesForProjectProperty :many
select project_properties.id, property_name, property_name_arabic, project_properties.description, description_arabic, project_properties.status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, project_properties.created_at, project_properties.updated_at, projects_id, is_show_owner_info, property, live_status, project_properties.countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public, addresses.id, addresses.countries_id, addresses.states_id, addresses.cities_id, addresses.communities_id, sub_communities_id, locations_id, addresses.created_at, addresses.updated_at, property_map_location_id, full_address, full_address_ar, cities.id, city, cities.states_id, cities.created_at, cities.updated_at, cities.lat, cities.lng, cities.status, cities.deleted_at, cities.updated_by, city_ar, cover_image, cities.description, communities.id, community, communities.cities_id, communities.created_at, communities.updated_at, communities.lat, communities.lng, communities.status, communities.deleted_at, communities.updated_by, community_ar, sub_communities.id, sub_community, sub_communities.communities_id, sub_communities.created_at, sub_communities.updated_at, sub_communities.lng, sub_communities.lat, sub_communities.status, sub_communities.deleted_at, sub_communities.updated_by, sub_community_ar, locations.id, locations.lat, locations.lng, locations.created_at, locations.updated_at from project_properties
LEFT JOIN addresses ON project_properties.addresses_id = addresses.id 
LEFT JOIN cities ON addresses.cities_id = cities.id
LEFT JOIN communities ON addresses.communities_id = communities.id
LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
LEFT JOIN locations on addresses.locations_id = locations.id 
where project_properties.status != 5 and project_properties.status != 6
`

type GetLatLngValuesForProjectPropertyRow struct {
	ID                    int64              `json:"id"`
	PropertyName          string             `json:"property_name"`
	PropertyNameArabic    string             `json:"property_name_arabic"`
	Description           string             `json:"description"`
	DescriptionArabic     string             `json:"description_arabic"`
	Status                int64              `json:"status"`
	IsVerified            pgtype.Bool        `json:"is_verified"`
	PropertyRank          int64              `json:"property_rank"`
	AmenitiesID           []int64            `json:"amenities_id"`
	AddressesID           int64              `json:"addresses_id"`
	PhasesID              pgtype.Int8        `json:"phases_id"`
	PropertyTypesID       []int64            `json:"property_types_id"`
	CreatedAt             time.Time          `json:"created_at"`
	UpdatedAt             time.Time          `json:"updated_at"`
	ProjectsID            int64              `json:"projects_id"`
	IsShowOwnerInfo       pgtype.Bool        `json:"is_show_owner_info"`
	Property              int64              `json:"property"`
	LiveStatus            pgtype.Bool        `json:"live_status"`
	CountriesID           int64              `json:"countries_id"`
	DeveloperCompaniesID  int64              `json:"developer_companies_id"`
	RefNo                 string             `json:"ref_no"`
	UsersID               int64              `json:"users_id"`
	OwnerUsersID          pgtype.Int8        `json:"owner_users_id"`
	IsMultiphase          pgtype.Bool        `json:"is_multiphase"`
	PropertyTitle         pgtype.Text        `json:"property_title"`
	Notes                 pgtype.Text        `json:"notes"`
	NotesArabic           pgtype.Text        `json:"notes_arabic"`
	IsNotesPublic         pgtype.Bool        `json:"is_notes_public"`
	ID_2                  pgtype.Int8        `json:"id_2"`
	CountriesID_2         pgtype.Int8        `json:"countries_id_2"`
	StatesID              pgtype.Int8        `json:"states_id"`
	CitiesID              pgtype.Int8        `json:"cities_id"`
	CommunitiesID         pgtype.Int8        `json:"communities_id"`
	SubCommunitiesID      pgtype.Int8        `json:"sub_communities_id"`
	LocationsID           pgtype.Int8        `json:"locations_id"`
	CreatedAt_2           pgtype.Timestamptz `json:"created_at_2"`
	UpdatedAt_2           pgtype.Timestamptz `json:"updated_at_2"`
	PropertyMapLocationID pgtype.Int8        `json:"property_map_location_id"`
	FullAddress           pgtype.Text        `json:"full_address"`
	FullAddressAr         pgtype.Text        `json:"full_address_ar"`
	ID_3                  pgtype.Int8        `json:"id_3"`
	City                  pgtype.Text        `json:"city"`
	StatesID_2            pgtype.Int8        `json:"states_id_2"`
	CreatedAt_3           pgtype.Timestamptz `json:"created_at_3"`
	UpdatedAt_3           pgtype.Timestamptz `json:"updated_at_3"`
	Lat                   pgtype.Float8      `json:"lat"`
	Lng                   pgtype.Float8      `json:"lng"`
	Status_2              pgtype.Int8        `json:"status_2"`
	DeletedAt             pgtype.Timestamptz `json:"deleted_at"`
	UpdatedBy             pgtype.Int8        `json:"updated_by"`
	CityAr                pgtype.Text        `json:"city_ar"`
	CoverImage            pgtype.Text        `json:"cover_image"`
	Description_2         pgtype.Text        `json:"description_2"`
	ID_4                  pgtype.Int8        `json:"id_4"`
	Community             pgtype.Text        `json:"community"`
	CitiesID_2            pgtype.Int8        `json:"cities_id_2"`
	CreatedAt_4           pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4           pgtype.Timestamptz `json:"updated_at_4"`
	Lat_2                 pgtype.Float8      `json:"lat_2"`
	Lng_2                 pgtype.Float8      `json:"lng_2"`
	Status_3              pgtype.Int8        `json:"status_3"`
	DeletedAt_2           pgtype.Timestamptz `json:"deleted_at_2"`
	UpdatedBy_2           pgtype.Int8        `json:"updated_by_2"`
	CommunityAr           pgtype.Text        `json:"community_ar"`
	ID_5                  pgtype.Int8        `json:"id_5"`
	SubCommunity          pgtype.Text        `json:"sub_community"`
	CommunitiesID_2       pgtype.Int8        `json:"communities_id_2"`
	CreatedAt_5           pgtype.Timestamptz `json:"created_at_5"`
	UpdatedAt_5           pgtype.Timestamptz `json:"updated_at_5"`
	Lng_3                 pgtype.Float8      `json:"lng_3"`
	Lat_3                 pgtype.Float8      `json:"lat_3"`
	Status_4              pgtype.Int8        `json:"status_4"`
	DeletedAt_3           pgtype.Timestamptz `json:"deleted_at_3"`
	UpdatedBy_3           pgtype.Int8        `json:"updated_by_3"`
	SubCommunityAr        pgtype.Text        `json:"sub_community_ar"`
	ID_6                  pgtype.Int8        `json:"id_6"`
	Lat_4                 pgtype.Text        `json:"lat_4"`
	Lng_4                 pgtype.Text        `json:"lng_4"`
	CreatedAt_6           pgtype.Timestamptz `json:"created_at_6"`
	UpdatedAt_6           pgtype.Timestamptz `json:"updated_at_6"`
}

// left join property_types on project_properties.property_types_id = property_types.id
func (q *Queries) GetLatLngValuesForProjectProperty(ctx context.Context) ([]GetLatLngValuesForProjectPropertyRow, error) {
	rows, err := q.db.Query(ctx, getLatLngValuesForProjectProperty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLatLngValuesForProjectPropertyRow
	for rows.Next() {
		var i GetLatLngValuesForProjectPropertyRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
			&i.ID_2,
			&i.CountriesID_2,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubCommunitiesID,
			&i.LocationsID,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyMapLocationID,
			&i.FullAddress,
			&i.FullAddressAr,
			&i.ID_3,
			&i.City,
			&i.StatesID_2,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.Lat,
			&i.Lng,
			&i.Status_2,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CityAr,
			&i.CoverImage,
			&i.Description_2,
			&i.ID_4,
			&i.Community,
			&i.CitiesID_2,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.Lat_2,
			&i.Lng_2,
			&i.Status_3,
			&i.DeletedAt_2,
			&i.UpdatedBy_2,
			&i.CommunityAr,
			&i.ID_5,
			&i.SubCommunity,
			&i.CommunitiesID_2,
			&i.CreatedAt_5,
			&i.UpdatedAt_5,
			&i.Lng_3,
			&i.Lat_3,
			&i.Status_4,
			&i.DeletedAt_3,
			&i.UpdatedBy_3,
			&i.SubCommunityAr,
			&i.ID_6,
			&i.Lat_4,
			&i.Lng_4,
			&i.CreatedAt_6,
			&i.UpdatedAt_6,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
