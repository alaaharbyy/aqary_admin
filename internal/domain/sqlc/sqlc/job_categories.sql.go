// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: job_categories.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllSubCatgories = `-- name: GetAllSubCatgories :many
SELECT catg.id, catg.parent_category_id, catg.category_name, catg.description, catg.category_image, catg.created_at, catg.status, catg.updated_at,pcatg.category_name as parent_catg_name
from job_categories catg
JOIN job_categories pcatg on pcatg.id= catg.parent_category_id
WHERE catg.parent_category_id=$1 AND catg.status!=5 AND catg.status!=6
`

type GetAllSubCatgoriesRow struct {
	ID               int64              `json:"id"`
	ParentCategoryID pgtype.Int8        `json:"parent_category_id"`
	CategoryName     string             `json:"category_name"`
	Description      string             `json:"description"`
	CategoryImage    string             `json:"category_image"`
	CreatedAt        time.Time          `json:"created_at"`
	Status           int64              `json:"status"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	ParentCatgName   string             `json:"parent_catg_name"`
}

func (q *Queries) GetAllSubCatgories(ctx context.Context, parentCategoryID pgtype.Int8) ([]GetAllSubCatgoriesRow, error) {
	rows, err := q.db.Query(ctx, getAllSubCatgories, parentCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSubCatgoriesRow
	for rows.Next() {
		var i GetAllSubCatgoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.ParentCategoryID,
			&i.CategoryName,
			&i.Description,
			&i.CategoryImage,
			&i.CreatedAt,
			&i.Status,
			&i.UpdatedAt,
			&i.ParentCatgName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesCount = `-- name: GetCategoriesCount :one

select count(*) from job_categories where status != 5 AND status!=6
`

// -- name: GetAllParentJobCategories :many
// select id, ref_no, parent_category_id, category_name, description, company_types_id, companies_id, is_branch, category_image, created_at, created_by, status, company_name from job_categories where parent_category_id = 0 and status != 5 AND status!=6 order by id desc;
func (q *Queries) GetCategoriesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCategoriesCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllSubCatgories = `-- name: GetCountAllSubCatgories :one
SELECT COUNT(*) from job_categories WHERE parent_category_id=$1 AND status!=5 AND status!=6
`

func (q *Queries) GetCountAllSubCatgories(ctx context.Context, parentCategoryID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllSubCatgories, parentCategoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getJobCategoryByName = `-- name: GetJobCategoryByName :one
SELECT id, parent_category_id, category_name, description, category_image, created_at, status, updated_at FROM job_categories WHERE category_name=$1 AND status!=6 AND status!=5 Limit 1
`

func (q *Queries) GetJobCategoryByName(ctx context.Context, categoryName string) (JobCategory, error) {
	row := q.db.QueryRow(ctx, getJobCategoryByName, categoryName)
	var i JobCategory
	err := row.Scan(
		&i.ID,
		&i.ParentCategoryID,
		&i.CategoryName,
		&i.Description,
		&i.CategoryImage,
		&i.CreatedAt,
		&i.Status,
		&i.UpdatedAt,
	)
	return i, err
}

const searchSubCatgoriesByTitle = `-- name: SearchSubCatgoriesByTitle :many
SELECT id, parent_category_id, category_name, description, category_image, created_at, status, updated_at from job_categories WHERE parent_category_id=$1 AND status!=5 AND status!=6 AND category_name ILIKE '%' || $2 || '%'
`

type SearchSubCatgoriesByTitleParams struct {
	ParentCategoryID pgtype.Int8 `json:"parent_category_id"`
	Column2          pgtype.Text `json:"column_2"`
}

func (q *Queries) SearchSubCatgoriesByTitle(ctx context.Context, arg SearchSubCatgoriesByTitleParams) ([]JobCategory, error) {
	rows, err := q.db.Query(ctx, searchSubCatgoriesByTitle, arg.ParentCategoryID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []JobCategory
	for rows.Next() {
		var i JobCategory
		if err := rows.Scan(
			&i.ID,
			&i.ParentCategoryID,
			&i.CategoryName,
			&i.Description,
			&i.CategoryImage,
			&i.CreatedAt,
			&i.Status,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
