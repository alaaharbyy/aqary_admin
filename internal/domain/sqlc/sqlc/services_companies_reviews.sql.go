// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: services_companies_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceCompaniesReviews = `-- name: CreateServiceCompaniesReviews :one
INSERT INTO services_companies_reviews (
 rating,
 review,
 profiles_id,
 status,
 services_companies_id,
 created_at,
 updated_at,
 users_id
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, rating, review, profiles_id, status, services_companies_id, created_at, updated_at, users_id
`

type CreateServiceCompaniesReviewsParams struct {
	Rating              string    `json:"rating"`
	Review              string    `json:"review"`
	ProfilesID          int64     `json:"profiles_id"`
	Status              int64     `json:"status"`
	ServicesCompaniesID int64     `json:"services_companies_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
	UsersID             int64     `json:"users_id"`
}

func (q *Queries) CreateServiceCompaniesReviews(ctx context.Context, arg CreateServiceCompaniesReviewsParams) (ServicesCompaniesReview, error) {
	row := q.db.QueryRow(ctx, createServiceCompaniesReviews,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.ServicesCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i ServicesCompaniesReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServicesCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteServiceCompaniesReviews = `-- name: DeleteServiceCompaniesReviews :exec
DELETE FROM services_companies_reviews
Where id = $1
`

func (q *Queries) DeleteServiceCompaniesReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServiceCompaniesReviews, id)
	return err
}

const getAllServiceCompaniesReviews = `-- name: GetAllServiceCompaniesReviews :many
SELECT id, rating, review, profiles_id, status, services_companies_id, created_at, updated_at, users_id FROM services_companies_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllServiceCompaniesReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllServiceCompaniesReviews(ctx context.Context, arg GetAllServiceCompaniesReviewsParams) ([]ServicesCompaniesReview, error) {
	rows, err := q.db.Query(ctx, getAllServiceCompaniesReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompaniesReview
	for rows.Next() {
		var i ServicesCompaniesReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.ServicesCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgServiceCompanyReview = `-- name: GetAvgServiceCompanyReview :one
SELECT AVG(rating::bigint)::NUMERIC(2,1) FROM services_companies_reviews  Where services_companies_id = $1
`

func (q *Queries) GetAvgServiceCompanyReview(ctx context.Context, servicesCompaniesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgServiceCompanyReview, servicesCompaniesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getServiceCompaniesReviews = `-- name: GetServiceCompaniesReviews :one
SELECT id, rating, review, profiles_id, status, services_companies_id, created_at, updated_at, users_id FROM services_companies_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetServiceCompaniesReviews(ctx context.Context, limit int32) (ServicesCompaniesReview, error) {
	row := q.db.QueryRow(ctx, getServiceCompaniesReviews, limit)
	var i ServicesCompaniesReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServicesCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getServiceCompaniesReviewsByCompanyId = `-- name: GetServiceCompaniesReviewsByCompanyId :many
SELECT id, rating, review, profiles_id, status, services_companies_id, created_at, updated_at, users_id FROM services_companies_reviews 
WHERE services_companies_id = $3 LIMIT $1 OFFSET $2
`

type GetServiceCompaniesReviewsByCompanyIdParams struct {
	Limit               int32 `json:"limit"`
	Offset              int32 `json:"offset"`
	ServicesCompaniesID int64 `json:"services_companies_id"`
}

func (q *Queries) GetServiceCompaniesReviewsByCompanyId(ctx context.Context, arg GetServiceCompaniesReviewsByCompanyIdParams) ([]ServicesCompaniesReview, error) {
	rows, err := q.db.Query(ctx, getServiceCompaniesReviewsByCompanyId, arg.Limit, arg.Offset, arg.ServicesCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServicesCompaniesReview
	for rows.Next() {
		var i ServicesCompaniesReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.ServicesCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceCompaniesReviews = `-- name: UpdateServiceCompaniesReviews :one
UPDATE services_companies_reviews
SET   
 rating = $2,
 review = $3,
 profiles_id = $4,
 status = $5,
 services_companies_id = $6,
 created_at = $7,
 updated_at = $8,
 users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, services_companies_id, created_at, updated_at, users_id
`

type UpdateServiceCompaniesReviewsParams struct {
	ID                  int64     `json:"id"`
	Rating              string    `json:"rating"`
	Review              string    `json:"review"`
	ProfilesID          int64     `json:"profiles_id"`
	Status              int64     `json:"status"`
	ServicesCompaniesID int64     `json:"services_companies_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
	UsersID             int64     `json:"users_id"`
}

func (q *Queries) UpdateServiceCompaniesReviews(ctx context.Context, arg UpdateServiceCompaniesReviewsParams) (ServicesCompaniesReview, error) {
	row := q.db.QueryRow(ctx, updateServiceCompaniesReviews,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.ServicesCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i ServicesCompaniesReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServicesCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
