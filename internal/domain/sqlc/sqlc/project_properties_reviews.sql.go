// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_properties_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCountProjectPropertiesReviews = `-- name: GetCountProjectPropertiesReviews :one
SELECT 
COUNT(*)
FROM 
project_properties pp
JOIN properties_reviews pr ON pr.projects_id=pp.projects_id AND pr.properties_id=pp.id
WHERE pp.users_id=$1
`

func (q *Queries) GetCountProjectPropertiesReviews(ctx context.Context, usersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProjectPropertiesReviews, usersID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProjectPropertiesReviews = `-- name: GetProjectPropertiesReviews :many
SELECT 
p.project_name,
pp.property_name,
u.email,
u.username,
pr.id, pr.ref_no, pr.projects_id, pr.phases_id, pr.properties_id, pr.project_clean, pr.project_location, pr.project_facilities, pr.project_securities, pr.description, pr.reviewer, pr.review_date, pr.proof_images, pr.title
FROM 
project_properties pp
JOIN properties_reviews pr ON pr.projects_id=pp.projects_id AND pr.properties_id=pp.id
JOIN projects p ON pp.projects_id=p.id
JOIN users u ON u.id=pr.reviewer
WHERE pp.users_id=$1
LIMIT $2
OFFSET $3
`

type GetProjectPropertiesReviewsParams struct {
	UsersID int64 `json:"users_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetProjectPropertiesReviewsRow struct {
	ProjectName       string      `json:"project_name"`
	PropertyName      string      `json:"property_name"`
	Email             string      `json:"email"`
	Username          string      `json:"username"`
	ID                int64       `json:"id"`
	RefNo             string      `json:"ref_no"`
	ProjectsID        int64       `json:"projects_id"`
	PhasesID          pgtype.Int8 `json:"phases_id"`
	PropertiesID      int64       `json:"properties_id"`
	ProjectClean      int32       `json:"project_clean"`
	ProjectLocation   int32       `json:"project_location"`
	ProjectFacilities int32       `json:"project_facilities"`
	ProjectSecurities int32       `json:"project_securities"`
	Description       string      `json:"description"`
	Reviewer          int64       `json:"reviewer"`
	ReviewDate        time.Time   `json:"review_date"`
	ProofImages       []string    `json:"proof_images"`
	Title             pgtype.Text `json:"title"`
}

func (q *Queries) GetProjectPropertiesReviews(ctx context.Context, arg GetProjectPropertiesReviewsParams) ([]GetProjectPropertiesReviewsRow, error) {
	rows, err := q.db.Query(ctx, getProjectPropertiesReviews, arg.UsersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectPropertiesReviewsRow
	for rows.Next() {
		var i GetProjectPropertiesReviewsRow
		if err := rows.Scan(
			&i.ProjectName,
			&i.PropertyName,
			&i.Email,
			&i.Username,
			&i.ID,
			&i.RefNo,
			&i.ProjectsID,
			&i.PhasesID,
			&i.PropertiesID,
			&i.ProjectClean,
			&i.ProjectLocation,
			&i.ProjectFacilities,
			&i.ProjectSecurities,
			&i.Description,
			&i.Reviewer,
			&i.ReviewDate,
			&i.ProofImages,
			&i.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
