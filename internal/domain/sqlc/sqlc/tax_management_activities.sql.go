// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tax_management_activities.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTaxMangementActivities = `-- name: CreateTaxMangementActivities :one
 
INSERT INTO tax_management_activities (
    ref_activity_id,
    company_types_id,
    companies_id,
    is_branch,
    activity_type,
    module_name,
    activity,
    activity_date,
    user_id
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9) RETURNING id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id
`

type CreateTaxMangementActivitiesParams struct {
	RefActivityID  int64       `json:"ref_activity_id"`
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	ActivityType   int64       `json:"activity_type"`
	ModuleName     string      `json:"module_name"`
	Activity       string      `json:"activity"`
	ActivityDate   time.Time   `json:"activity_date"`
	UserID         int64       `json:"user_id"`
}

func (q *Queries) CreateTaxMangementActivities(ctx context.Context, arg CreateTaxMangementActivitiesParams) (TaxManagementActivity, error) {
	row := q.db.QueryRow(ctx, createTaxMangementActivities,
		arg.RefActivityID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.ActivityType,
		arg.ModuleName,
		arg.Activity,
		arg.ActivityDate,
		arg.UserID,
	)
	var i TaxManagementActivity
	err := row.Scan(
		&i.ID,
		&i.RefActivityID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ActivityType,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const deleteTaxMangementActivities = `-- name: DeleteTaxMangementActivities :exec
DELETE FROM tax_management_activities
WHERE id = $1
`

func (q *Queries) DeleteTaxMangementActivities(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTaxMangementActivities, id)
	return err
}

const getTaxManagementActivities = `-- name: GetTaxManagementActivities :many
SELECT id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id FROM tax_management_activities WHERE activity_type = $1 
LIMIT $2 OFFSET $3
`

type GetTaxManagementActivitiesParams struct {
	ActivityType int64 `json:"activity_type"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) GetTaxManagementActivities(ctx context.Context, arg GetTaxManagementActivitiesParams) ([]TaxManagementActivity, error) {
	rows, err := q.db.Query(ctx, getTaxManagementActivities, arg.ActivityType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxManagementActivity
	for rows.Next() {
		var i TaxManagementActivity
		if err := rows.Scan(
			&i.ID,
			&i.RefActivityID,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.ActivityType,
			&i.ModuleName,
			&i.Activity,
			&i.ActivityDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaxManagementActivitiesChanges = `-- name: GetTaxManagementActivitiesChanges :many
SELECT tax_man_act.id, act_chan.activity_date, act_chan.field_name, act_chan.before, act_chan.after FROM activity_changes AS act_chan
INNER JOIN tax_management_activities AS tax_man_act
ON act_chan.activities_id = tax_man_act.id
WHERE act_chan.activities_id = $1
`

type GetTaxManagementActivitiesChangesRow struct {
	ID           int64              `json:"id"`
	ActivityDate pgtype.Timestamptz `json:"activity_date"`
	FieldName    pgtype.Text        `json:"field_name"`
	Before       pgtype.Text        `json:"before"`
	After        pgtype.Text        `json:"after"`
}

func (q *Queries) GetTaxManagementActivitiesChanges(ctx context.Context, activitiesID int64) ([]GetTaxManagementActivitiesChangesRow, error) {
	rows, err := q.db.Query(ctx, getTaxManagementActivitiesChanges, activitiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTaxManagementActivitiesChangesRow
	for rows.Next() {
		var i GetTaxManagementActivitiesChangesRow
		if err := rows.Scan(
			&i.ID,
			&i.ActivityDate,
			&i.FieldName,
			&i.Before,
			&i.After,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaxMangementActivities = `-- name: GetTaxMangementActivities :many
SELECT id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id FROM tax_management_activities
`

func (q *Queries) GetTaxMangementActivities(ctx context.Context) ([]TaxManagementActivity, error) {
	rows, err := q.db.Query(ctx, getTaxMangementActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxManagementActivity
	for rows.Next() {
		var i TaxManagementActivity
		if err := rows.Scan(
			&i.ID,
			&i.RefActivityID,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.ActivityType,
			&i.ModuleName,
			&i.Activity,
			&i.ActivityDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaxMangementActivitiesById = `-- name: GetTaxMangementActivitiesById :one
SELECT id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id FROM tax_management_activities WHERE id = $1
`

func (q *Queries) GetTaxMangementActivitiesById(ctx context.Context, id int64) (TaxManagementActivity, error) {
	row := q.db.QueryRow(ctx, getTaxMangementActivitiesById, id)
	var i TaxManagementActivity
	err := row.Scan(
		&i.ID,
		&i.RefActivityID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ActivityType,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const getTaxMangementActivitiesWithPg = `-- name: GetTaxMangementActivitiesWithPg :many
SELECT id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id FROM tax_management_activities LIMIT $1 OFFSET $2
`

type GetTaxMangementActivitiesWithPgParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTaxMangementActivitiesWithPg(ctx context.Context, arg GetTaxMangementActivitiesWithPgParams) ([]TaxManagementActivity, error) {
	rows, err := q.db.Query(ctx, getTaxMangementActivitiesWithPg, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxManagementActivity
	for rows.Next() {
		var i TaxManagementActivity
		if err := rows.Scan(
			&i.ID,
			&i.RefActivityID,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.ActivityType,
			&i.ModuleName,
			&i.Activity,
			&i.ActivityDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaxMangementActivityByRefIdAndModuleName = `-- name: GetTaxMangementActivityByRefIdAndModuleName :one
SELECT
id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id
FROM
    tax_management_activities
WHERE
     ref_activity_id = $1 and module_name=$2
`

type GetTaxMangementActivityByRefIdAndModuleNameParams struct {
	RefActivityID int64  `json:"ref_activity_id"`
	ModuleName    string `json:"module_name"`
}

func (q *Queries) GetTaxMangementActivityByRefIdAndModuleName(ctx context.Context, arg GetTaxMangementActivityByRefIdAndModuleNameParams) (TaxManagementActivity, error) {
	row := q.db.QueryRow(ctx, getTaxMangementActivityByRefIdAndModuleName, arg.RefActivityID, arg.ModuleName)
	var i TaxManagementActivity
	err := row.Scan(
		&i.ID,
		&i.RefActivityID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ActivityType,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const updateTaxMangementActivities = `-- name: UpdateTaxMangementActivities :one
UPDATE tax_management_activities
SET
    ref_activity_id = $2,
    company_types_id = $3,
    companies_id = $4, 
    is_branch = $5,
    activity_type = $6,
    module_name = $7,
    activity = $8,
    activity_date = $9,
    user_id = $10
WHERE id = $1 RETURNING id, ref_activity_id, company_types_id, companies_id, is_branch, activity_type, module_name, activity, activity_date, user_id
`

type UpdateTaxMangementActivitiesParams struct {
	ID             int64       `json:"id"`
	RefActivityID  int64       `json:"ref_activity_id"`
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	ActivityType   int64       `json:"activity_type"`
	ModuleName     string      `json:"module_name"`
	Activity       string      `json:"activity"`
	ActivityDate   time.Time   `json:"activity_date"`
	UserID         int64       `json:"user_id"`
}

func (q *Queries) UpdateTaxMangementActivities(ctx context.Context, arg UpdateTaxMangementActivitiesParams) (TaxManagementActivity, error) {
	row := q.db.QueryRow(ctx, updateTaxMangementActivities,
		arg.ID,
		arg.RefActivityID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.ActivityType,
		arg.ModuleName,
		arg.Activity,
		arg.ActivityDate,
		arg.UserID,
	)
	var i TaxManagementActivity
	err := row.Scan(
		&i.ID,
		&i.RefActivityID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ActivityType,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}
