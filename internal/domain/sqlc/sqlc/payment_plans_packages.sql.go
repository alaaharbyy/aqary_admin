// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_plans_packages.sql

package sqlc

import (
	"context"
)

const getPaymentPlanPackages = `-- name: GetPaymentPlanPackages :many
WITH paymentPlanIds as(
	SELECT 
	pkg.id as pkgId, pkg.no_of_plans as no_of_plans, UNNEST(pkg.payment_plans_id)  as paymentplan_id
	FROM payment_plans_packages pkg
	WHERE pkg.entity_id= $1::bigint AND pkg.entity_type_id= $2::bigint AND pkg.is_enabled=TRUE
)
SELECT 
plids.pkgId as payment_plans_packages_id,
plids.no_of_plans as no_of_plans,
pl.id, pl.reference_no, pl.payment_plan_title, pl.no_of_installments, pl.is_enabled,
pstl.id, pstl.payment_plans, pstl.percentage, pstl.date, pstl.milestone
 
FROM payment_plans pl
JOIN paymentPlanIds plids ON pl.id=plids.paymentplan_id
JOIN plan_installments pstl ON pstl.payment_plans=pl.id
`

type GetPaymentPlanPackagesParams struct {
	EntityID   int64 `json:"entity_id"`
	EntityType int64 `json:"entity_type"`
}

type GetPaymentPlanPackagesRow struct {
	PaymentPlansPackagesID int64           `json:"payment_plans_packages_id"`
	NoOfPlans              int64           `json:"no_of_plans"`
	PaymentPlan            PaymentPlan     `json:"payment_plan"`
	PlanInstallment        PlanInstallment `json:"plan_installment"`
}

func (q *Queries) GetPaymentPlanPackages(ctx context.Context, arg GetPaymentPlanPackagesParams) ([]GetPaymentPlanPackagesRow, error) {
	rows, err := q.db.Query(ctx, getPaymentPlanPackages, arg.EntityID, arg.EntityType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPaymentPlanPackagesRow
	for rows.Next() {
		var i GetPaymentPlanPackagesRow
		if err := rows.Scan(
			&i.PaymentPlansPackagesID,
			&i.NoOfPlans,
			&i.PaymentPlan.ID,
			&i.PaymentPlan.ReferenceNo,
			&i.PaymentPlan.PaymentPlanTitle,
			&i.PaymentPlan.NoOfInstallments,
			&i.PaymentPlan.IsEnabled,
			&i.PlanInstallment.ID,
			&i.PlanInstallment.PaymentPlans,
			&i.PlanInstallment.Percentage,
			&i.PlanInstallment.Date,
			&i.PlanInstallment.Milestone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
