// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: owner_properties_media.sql

package sqlc

import (
	"context"
	"time"
)

const createOwnerPropertyMedia = `-- name: CreateOwnerPropertyMedia :one
INSERT INTO owner_properties_media (
     image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    owner_properties_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at
`

type CreateOwnerPropertyMediaParams struct {
	ImageUrl          []string  `json:"image_url"`
	Image360Url       []string  `json:"image360_url"`
	VideoUrl          []string  `json:"video_url"`
	PanaromaUrl       []string  `json:"panaroma_url"`
	MainMediaSection  string    `json:"main_media_section"`
	OwnerPropertiesID int64     `json:"owner_properties_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateOwnerPropertyMedia(ctx context.Context, arg CreateOwnerPropertyMediaParams) (OwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createOwnerPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.OwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.OwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOwnerPropertyMedia = `-- name: DeleteOwnerPropertyMedia :exec
DELETE FROM owner_properties_media
Where id = $1
`

func (q *Queries) DeleteOwnerPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOwnerPropertyMedia, id)
	return err
}

const getAllOwnerPropertiesByMainMediaSectionAndId = `-- name: GetAllOwnerPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at FROM owner_properties_media
 WHERE main_media_section = $2 AND owner_properties_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at From x
`

type GetAllOwnerPropertiesByMainMediaSectionAndIdParams struct {
	OwnerPropertiesID int64  `json:"owner_properties_id"`
	MainMediaSection  string `json:"main_media_section"`
}

type GetAllOwnerPropertiesByMainMediaSectionAndIdRow struct {
	ID                int64     `json:"id"`
	ImageUrl          []string  `json:"image_url"`
	Image360Url       []string  `json:"image360_url"`
	VideoUrl          []string  `json:"video_url"`
	PanaromaUrl       []string  `json:"panaroma_url"`
	MainMediaSection  string    `json:"main_media_section"`
	OwnerPropertiesID int64     `json:"owner_properties_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) GetAllOwnerPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllOwnerPropertiesByMainMediaSectionAndIdParams) (GetAllOwnerPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllOwnerPropertiesByMainMediaSectionAndId, arg.OwnerPropertiesID, arg.MainMediaSection)
	var i GetAllOwnerPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.OwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOwnerPropertiesMainMediaSectionById = `-- name: GetAllOwnerPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM owner_properties_media
 WHERE owner_properties_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllOwnerPropertiesMainMediaSectionById(ctx context.Context, ownerPropertiesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllOwnerPropertiesMainMediaSectionById, ownerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOwnerPropertyMedia = `-- name: GetAllOwnerPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at FROM owner_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllOwnerPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllOwnerPropertyMedia(ctx context.Context, arg GetAllOwnerPropertyMediaParams) ([]OwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllOwnerPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OwnerPropertiesMedium
	for rows.Next() {
		var i OwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.OwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllOwnerPropertyMediaByid = `-- name: GetAllOwnerPropertyMediaByid :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at FROM owner_properties_media
WHERE owner_properties_id = $1
`

func (q *Queries) GetAllOwnerPropertyMediaByid(ctx context.Context, ownerPropertiesID int64) ([]OwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllOwnerPropertyMediaByid, ownerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OwnerPropertiesMedium
	for rows.Next() {
		var i OwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.OwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOwnerPropertyMedia = `-- name: GetOwnerPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at FROM owner_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetOwnerPropertyMedia(ctx context.Context, limit int32) (OwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getOwnerPropertyMedia, limit)
	var i OwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.OwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOwnerPropertyMediaByPropertyIdAndMediaSection = `-- name: GetOwnerPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at FROM owner_properties_media
WHERE owner_properties_id = $1 AND main_media_section = $2  LIMIT 1
`

type GetOwnerPropertyMediaByPropertyIdAndMediaSectionParams struct {
	OwnerPropertiesID int64  `json:"owner_properties_id"`
	MainMediaSection  string `json:"main_media_section"`
}

func (q *Queries) GetOwnerPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetOwnerPropertyMediaByPropertyIdAndMediaSectionParams) (OwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getOwnerPropertyMediaByPropertyIdAndMediaSection, arg.OwnerPropertiesID, arg.MainMediaSection)
	var i OwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.OwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOwnerPropertyMedia = `-- name: UpdateOwnerPropertyMedia :one
UPDATE owner_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    owner_properties_id = $7,
    created_at = $8,
    updated_at = $9
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, owner_properties_id, created_at, updated_at
`

type UpdateOwnerPropertyMediaParams struct {
	ID                int64     `json:"id"`
	ImageUrl          []string  `json:"image_url"`
	Image360Url       []string  `json:"image360_url"`
	VideoUrl          []string  `json:"video_url"`
	PanaromaUrl       []string  `json:"panaroma_url"`
	MainMediaSection  string    `json:"main_media_section"`
	OwnerPropertiesID int64     `json:"owner_properties_id"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateOwnerPropertyMedia(ctx context.Context, arg UpdateOwnerPropertyMediaParams) (OwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateOwnerPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.OwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.OwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
