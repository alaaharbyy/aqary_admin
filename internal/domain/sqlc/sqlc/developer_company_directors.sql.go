// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_company_directors.sql

package sqlc

import (
	"context"
	"time"
)

const createDeveloperCompanyDirector = `-- name: CreateDeveloperCompanyDirector :one
INSERT INTO developer_company_directors (
    profile_image ,
    name,
    description,
    director_designations_id,
    developer_companies_id,
    created_at,
    updated_at,
    ref_no
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8
) RETURNING id, profile_image, name, description, director_designations_id, developer_companies_id, created_at, updated_at, ref_no
`

type CreateDeveloperCompanyDirectorParams struct {
	ProfileImage           string    `json:"profile_image"`
	Name                   string    `json:"name"`
	Description            string    `json:"description"`
	DirectorDesignationsID int64     `json:"director_designations_id"`
	DeveloperCompaniesID   int64     `json:"developer_companies_id"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	RefNo                  string    `json:"ref_no"`
}

func (q *Queries) CreateDeveloperCompanyDirector(ctx context.Context, arg CreateDeveloperCompanyDirectorParams) (DeveloperCompanyDirector, error) {
	row := q.db.QueryRow(ctx, createDeveloperCompanyDirector,
		arg.ProfileImage,
		arg.Name,
		arg.Description,
		arg.DirectorDesignationsID,
		arg.DeveloperCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
	)
	var i DeveloperCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}

const deleteDeveloperCompanyDirector = `-- name: DeleteDeveloperCompanyDirector :exec
DELETE FROM developer_company_directors
Where id = $1
`

func (q *Queries) DeleteDeveloperCompanyDirector(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperCompanyDirector, id)
	return err
}

const getAllDeveloperCompanyDirector = `-- name: GetAllDeveloperCompanyDirector :many
SELECT id, profile_image, name, description, director_designations_id, developer_companies_id, created_at, updated_at, ref_no FROM developer_company_directors
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperCompanyDirectorParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperCompanyDirector(ctx context.Context, arg GetAllDeveloperCompanyDirectorParams) ([]DeveloperCompanyDirector, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyDirector, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompanyDirector
	for rows.Next() {
		var i DeveloperCompanyDirector
		if err := rows.Scan(
			&i.ID,
			&i.ProfileImage,
			&i.Name,
			&i.Description,
			&i.DirectorDesignationsID,
			&i.DeveloperCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyDirectorByCompanyId = `-- name: GetAllDeveloperCompanyDirectorByCompanyId :many
SELECT id, name, position, description_ar, description, image_url, is_verified, companies_id, created_by, created_at, updated_at FROM companies_leadership 
WHERE companies_id = $1
`

func (q *Queries) GetAllDeveloperCompanyDirectorByCompanyId(ctx context.Context, companiesID int64) ([]CompaniesLeadership, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyDirectorByCompanyId, companiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompaniesLeadership
	for rows.Next() {
		var i CompaniesLeadership
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Position,
			&i.DescriptionAr,
			&i.Description,
			&i.ImageUrl,
			&i.IsVerified,
			&i.CompaniesID,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyDirectorByCompanyIdWithoutPagination = `-- name: GetAllDeveloperCompanyDirectorByCompanyIdWithoutPagination :many

SELECT id, profile_image, name, description, director_designations_id, developer_companies_id, created_at, updated_at, ref_no FROM developer_company_directors 
WHERE developer_companies_id = $1
`

// LIMIT $1;
func (q *Queries) GetAllDeveloperCompanyDirectorByCompanyIdWithoutPagination(ctx context.Context, developerCompaniesID int64) ([]DeveloperCompanyDirector, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyDirectorByCompanyIdWithoutPagination, developerCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompanyDirector
	for rows.Next() {
		var i DeveloperCompanyDirector
		if err := rows.Scan(
			&i.ID,
			&i.ProfileImage,
			&i.Name,
			&i.Description,
			&i.DirectorDesignationsID,
			&i.DeveloperCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperCompanyDirector = `-- name: GetDeveloperCompanyDirector :one
SELECT id, profile_image, name, description, director_designations_id, developer_companies_id, created_at, updated_at, ref_no FROM developer_company_directors 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDeveloperCompanyDirector(ctx context.Context, limit int32) (DeveloperCompanyDirector, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyDirector, limit)
	var i DeveloperCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}

const updateDeveloperCompanyDirector = `-- name: UpdateDeveloperCompanyDirector :one
UPDATE developer_company_directors
SET   profile_image = $2,
    name = $3,
    description = $4,
    director_designations_id = $5,
    developer_companies_id = $6,
    created_at = $7,
    updated_at = $8,
    ref_no = $9
Where id = $1
RETURNING id, profile_image, name, description, director_designations_id, developer_companies_id, created_at, updated_at, ref_no
`

type UpdateDeveloperCompanyDirectorParams struct {
	ID                     int64     `json:"id"`
	ProfileImage           string    `json:"profile_image"`
	Name                   string    `json:"name"`
	Description            string    `json:"description"`
	DirectorDesignationsID int64     `json:"director_designations_id"`
	DeveloperCompaniesID   int64     `json:"developer_companies_id"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	RefNo                  string    `json:"ref_no"`
}

func (q *Queries) UpdateDeveloperCompanyDirector(ctx context.Context, arg UpdateDeveloperCompanyDirectorParams) (DeveloperCompanyDirector, error) {
	row := q.db.QueryRow(ctx, updateDeveloperCompanyDirector,
		arg.ID,
		arg.ProfileImage,
		arg.Name,
		arg.Description,
		arg.DirectorDesignationsID,
		arg.DeveloperCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
	)
	var i DeveloperCompanyDirector
	err := row.Scan(
		&i.ID,
		&i.ProfileImage,
		&i.Name,
		&i.Description,
		&i.DirectorDesignationsID,
		&i.DeveloperCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
	)
	return i, err
}
