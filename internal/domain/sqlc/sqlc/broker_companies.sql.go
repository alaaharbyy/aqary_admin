// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_companies.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompany = `-- name: CreateBrokerCompany :one
INSERT INTO broker_companies (
    company_name,
    description,
    logo_url,
    addresses_id,
    email,
    phone_number,
    whatsapp_number,
    commercial_license_no,
    commercial_license_file_url,
    commercial_license_expiry,
    rera_no,
    rera_file_url,
    rera_expiry,
    is_verified,
    website_url,
    cover_image_url,
    tag_line,
    vat_no,
    vat_status,
    vat_file_url,
    facebook_profile_url,
    instagram_profile_url,
    twitter_profile_url,
    no_of_employees,
    users_id,
    linkedin_profile_url,
    company_rank,
    status,
    country_id,
    company_type,
    is_branch,
    created_at,
    updated_at,
    ref_no,
    rera_registration_date,
    rera_issue_date,
    commercial_license_registration_date,
    commercial_license_issue_date,
    youtube_profile_url,
    orn_license_no,
    orn_license_file_url,
    orn_registration_date,
    orn_license_expiry,
    bank_account_details_id,
    created_by,
    trakhees_permit_no,
    extra_license_nos,
    extra_license_files,
    extra_license_names,
    extra_license_issue_date,
    extra_license_expiry_date,
    license_dcci_no,
    register_no,
    other_social_media
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, 
    $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, 
    $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54
) RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no
`

type CreateBrokerCompanyParams struct {
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	ReraNo                            string             `json:"rera_no"`
	ReraFileUrl                       string             `json:"rera_file_url"`
	ReraExpiry                        time.Time          `json:"rera_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	ReraRegistrationDate              pgtype.Timestamptz `json:"rera_registration_date"`
	ReraIssueDate                     pgtype.Timestamptz `json:"rera_issue_date"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	OrnLicenseNo                      pgtype.Text        `json:"orn_license_no"`
	OrnLicenseFileUrl                 pgtype.Text        `json:"orn_license_file_url"`
	OrnRegistrationDate               pgtype.Timestamptz `json:"orn_registration_date"`
	OrnLicenseExpiry                  pgtype.Timestamptz `json:"orn_license_expiry"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CreatedBy                         int64              `json:"created_by"`
	TrakheesPermitNo                  pgtype.Text        `json:"trakhees_permit_no"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
}

func (q *Queries) CreateBrokerCompany(ctx context.Context, arg CreateBrokerCompanyParams) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, createBrokerCompany,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.ReraNo,
		arg.ReraFileUrl,
		arg.ReraExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.ReraRegistrationDate,
		arg.ReraIssueDate,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.YoutubeProfileUrl,
		arg.OrnLicenseNo,
		arg.OrnLicenseFileUrl,
		arg.OrnRegistrationDate,
		arg.OrnLicenseExpiry,
		arg.BankAccountDetailsID,
		arg.CreatedBy,
		arg.TrakheesPermitNo,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
	)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const deleteBrokerCompany = `-- name: DeleteBrokerCompany :exec
DELETE FROM broker_companies
Where id = $1
`

func (q *Queries) DeleteBrokerCompany(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompany, id)
	return err
}

const getAllBrokerCompaniesByCountryAndState = `-- name: GetAllBrokerCompaniesByCountryAndState :many
WITH x AS (
    SELECT companies.id, companies.company_name
    FROM companies
    INNER JOIN addresses ON addresses.id = companies.addresses_id
    WHERE addresses.countries_id = $1   
    AND CASE  
        WHEN $2::bigint = 0 THEN true
        ELSE addresses.states_id = $2::bigint
    END
 )
SELECT MIN(id) AS id, company_name 
FROM x
GROUP BY company_name
`

type GetAllBrokerCompaniesByCountryAndStateParams struct {
	CountriesID pgtype.Int8 `json:"countries_id"`
	StateID     int64       `json:"state_id"`
}

type GetAllBrokerCompaniesByCountryAndStateRow struct {
	ID          interface{} `json:"id"`
	CompanyName string      `json:"company_name"`
}

func (q *Queries) GetAllBrokerCompaniesByCountryAndState(ctx context.Context, arg GetAllBrokerCompaniesByCountryAndStateParams) ([]GetAllBrokerCompaniesByCountryAndStateRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompaniesByCountryAndState, arg.CountriesID, arg.StateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerCompaniesByCountryAndStateRow
	for rows.Next() {
		var i GetAllBrokerCompaniesByCountryAndStateRow
		if err := rows.Scan(&i.ID, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompany = `-- name: GetAllBrokerCompany :many

SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// -- name: GetBrokerCompanyByName :one
// SELECT * FROM broker_companies
// WHERE company_name ILIKE $1 LIMIT 1;
func (q *Queries) GetAllBrokerCompany(ctx context.Context, arg GetAllBrokerCompanyParams) ([]BrokerCompany, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompany, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompany
	for rows.Next() {
		var i BrokerCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyByCountry = `-- name: GetAllBrokerCompanyByCountry :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies 
WHERE country_id = $3   LIMIT $1 OFFSET $2
`

type GetAllBrokerCompanyByCountryParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

func (q *Queries) GetAllBrokerCompanyByCountry(ctx context.Context, arg GetAllBrokerCompanyByCountryParams) ([]BrokerCompany, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyByCountry, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompany
	for rows.Next() {
		var i BrokerCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyByCountryNotEqual = `-- name: GetAllBrokerCompanyByCountryNotEqual :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies 
WHERE country_id != $3    LIMIT $1 OFFSET $2
`

type GetAllBrokerCompanyByCountryNotEqualParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

func (q *Queries) GetAllBrokerCompanyByCountryNotEqual(ctx context.Context, arg GetAllBrokerCompanyByCountryNotEqualParams) ([]BrokerCompany, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyByCountryNotEqual, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompany
	for rows.Next() {
		var i BrokerCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyByRank = `-- name: GetAllBrokerCompanyByRank :many


SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies 
WHERE company_rank = $3 LIMIT $1 OFFSET $2
`

type GetAllBrokerCompanyByRankParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetAllBrokerCompanyByMainServiceId :many
// SELECT * FROM broker_companies
// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetAllBrokerCompanyByRank(ctx context.Context, arg GetAllBrokerCompanyByRankParams) ([]BrokerCompany, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyByRank, arg.Limit, arg.Offset, arg.CompanyRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompany
	for rows.Next() {
		var i BrokerCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyByStatus = `-- name: GetAllBrokerCompanyByStatus :many
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies 
WHERE status = $3 LIMIT $1 OFFSET $2
`

type GetAllBrokerCompanyByStatusParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Status int64 `json:"status"`
}

func (q *Queries) GetAllBrokerCompanyByStatus(ctx context.Context, arg GetAllBrokerCompanyByStatusParams) ([]BrokerCompany, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyByStatus, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompany
	for rows.Next() {
		var i BrokerCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyNames = `-- name: GetAllBrokerCompanyNames :many
SELECT company_name, id, company_type, is_branch FROM broker_companies
UNION ALL
SELECT company_name, id, company_type, is_branch FROM  broker_companies_branches
`

type GetAllBrokerCompanyNamesRow struct {
	CompanyName string      `json:"company_name"`
	ID          int64       `json:"id"`
	CompanyType int64       `json:"company_type"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllBrokerCompanyNames(ctx context.Context) ([]GetAllBrokerCompanyNamesRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerCompanyNamesRow
	for rows.Next() {
		var i GetAllBrokerCompanyNamesRow
		if err := rows.Scan(
			&i.CompanyName,
			&i.ID,
			&i.CompanyType,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyNamesByCityId = `-- name: GetAllBrokerCompanyNamesByCityId :many
With broker As (
SELECT broker_companies.id, broker_companies.company_name, broker_companies.is_branch FROM broker_companies
  LEFT JOIN addresses ON broker_companies.addresses_id = addresses.id 
  LEFT JOIN cities ON addresses.cities_id = cities.id
 
   WHERE addresses.cities_id = $1
 ) SELECT id, company_name, is_branch from broker 
UNION ALL
SELECT combine_table.id, combine_table.company_name, combine_table.is_branch FROM (
SELECT broker_companies_branches.id, broker_companies_branches.company_name, broker_companies_branches.is_branch From broker_companies_branches
   LEFT JOIN addresses ON broker_companies_branches.addresses_id = addresses.id 
  LEFT JOIN cities ON addresses.cities_id = cities.id
   WHERE addresses.cities_id = $1
) as combine_table
`

type GetAllBrokerCompanyNamesByCityIdRow struct {
	ID          int64       `json:"id"`
	CompanyName string      `json:"company_name"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllBrokerCompanyNamesByCityId(ctx context.Context, citiesID pgtype.Int8) ([]GetAllBrokerCompanyNamesByCityIdRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyNamesByCityId, citiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerCompanyNamesByCityIdRow
	for rows.Next() {
		var i GetAllBrokerCompanyNamesByCityIdRow
		if err := rows.Scan(&i.ID, &i.CompanyName, &i.IsBranch); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyNamesByStateId = `-- name: GetAllBrokerCompanyNamesByStateId :many
With broker As (
SELECT broker_companies.id, broker_companies.company_name, broker_companies.is_branch FROM broker_companies
  LEFT JOIN addresses ON broker_companies.addresses_id = addresses.id 
  LEFT JOIN states ON addresses.states_id =  states.id

   WHERE addresses.states_id = $1
 ) SELECT id, company_name, is_branch from broker 
UNION ALL

SELECT combine_table.id, combine_table.company_name, combine_table.is_branch FROM (
SELECT broker_companies_branches.id, broker_companies_branches.company_name, broker_companies_branches.is_branch From broker_companies_branches
   LEFT JOIN addresses ON broker_companies_branches.addresses_id = addresses.id 
   LEFT JOIN states ON addresses.states_id = states.id
   WHERE addresses.states_id = $1
   
) as combine_table
`

type GetAllBrokerCompanyNamesByStateIdRow struct {
	ID          int64       `json:"id"`
	CompanyName string      `json:"company_name"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllBrokerCompanyNamesByStateId(ctx context.Context, statesID pgtype.Int8) ([]GetAllBrokerCompanyNamesByStateIdRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyNamesByStateId, statesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerCompanyNamesByStateIdRow
	for rows.Next() {
		var i GetAllBrokerCompanyNamesByStateIdRow
		if err := rows.Scan(&i.ID, &i.CompanyName, &i.IsBranch); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyNames = `-- name: GetAllDeveloperCompanyNames :many
SELECT company_name, id, company_type, is_branch FROM developer_companies
UNION ALL
SELECT company_name, id, company_type, is_branch FROM developer_company_branches
`

type GetAllDeveloperCompanyNamesRow struct {
	CompanyName string      `json:"company_name"`
	ID          int64       `json:"id"`
	CompanyType int64       `json:"company_type"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllDeveloperCompanyNames(ctx context.Context) ([]GetAllDeveloperCompanyNamesRow, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDeveloperCompanyNamesRow
	for rows.Next() {
		var i GetAllDeveloperCompanyNamesRow
		if err := rows.Scan(
			&i.CompanyName,
			&i.ID,
			&i.CompanyType,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServiceCompanyNames = `-- name: GetAllServiceCompanyNames :many
SELECT company_name, id, company_type, is_branch FROM services_companies
UNION ALL
SELECT company_name, id, company_type, is_branch FROM service_company_branches
`

type GetAllServiceCompanyNamesRow struct {
	CompanyName string      `json:"company_name"`
	ID          int64       `json:"id"`
	CompanyType int64       `json:"company_type"`
	IsBranch    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllServiceCompanyNames(ctx context.Context) ([]GetAllServiceCompanyNamesRow, error) {
	rows, err := q.db.Query(ctx, getAllServiceCompanyNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllServiceCompanyNamesRow
	for rows.Next() {
		var i GetAllServiceCompanyNamesRow
		if err := rows.Scan(
			&i.CompanyName,
			&i.ID,
			&i.CompanyType,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompany = `-- name: GetBrokerCompany :one
SELECT id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no FROM broker_companies 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompany(ctx context.Context, id int64) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, getBrokerCompany, id)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const getBrokerCompanyAddressId = `-- name: GetBrokerCompanyAddressId :one
SELECT addresses_id FROM broker_companies WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyAddressId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAddressId, id)
	var addresses_id int64
	err := row.Scan(&addresses_id)
	return addresses_id, err
}

const getBrokerCompanyCountryAndStateById = `-- name: GetBrokerCompanyCountryAndStateById :one

 





SELECT countries.id,countries.country, states.id,states."state" 
FROM broker_companies
LEFT JOIN addresses ON addresses.id = broker_companies.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
WHERE broker_companies.id = $1 LIMIT $1
`

type GetBrokerCompanyCountryAndStateByIdRow struct {
	ID      pgtype.Int8 `json:"id"`
	Country pgtype.Text `json:"country"`
	ID_2    pgtype.Int8 `json:"id_2"`
	State   pgtype.Text `json:"state"`
}

// ----------------  ------------------------
// -- name: GetBrokerCompanyByIdAndIsBranch :many
// With x As (
//
//	SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url,
//	commercial_license_expiry, vat_no, vat_status, vat_file_url ,
//	facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id,
//	broker_subscription_id , main_services_id, no_of_employees,
//	logo_url, cover_image_url, description, is_verified, website_url, phone_number, email,
//	whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch,
//	created_at, updated_at, subcompany_type, ref_no
//	FROM broker_companies WHERE broker_companies.id = $1 AND broker_companies.is_branch = $2
//	UNION all
//	 SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url,
//	 commercial_license_expiry, vat_no, vat_status, vat_file_url ,
//	 facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url,
//	 users_id, broker_subscription_id , main_services_id,
//	 no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number,
//	 email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch,
//	 created_at, updated_at, subcompany_type, ref_no FROM broker_companies_branches
//	  WHERE broker_companies_branches.id = $1 AND broker_companies_branches.is_branch = $2 )
//	select id, is_branch from x;
func (q *Queries) GetBrokerCompanyCountryAndStateById(ctx context.Context, limit int32) (GetBrokerCompanyCountryAndStateByIdRow, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyCountryAndStateById, limit)
	var i GetBrokerCompanyCountryAndStateByIdRow
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.ID_2,
		&i.State,
	)
	return i, err
}

const getBrokerCompanyDocs = `-- name: GetBrokerCompanyDocs :one







SELECT logo_url, commercial_license_file_url,
 rera_file_url,
  cover_image_url, 
  vat_file_url 
FROM broker_companies Where id = $1 LIMIT 1
`

type GetBrokerCompanyDocsRow struct {
	LogoUrl                  string      `json:"logo_url"`
	CommercialLicenseFileUrl string      `json:"commercial_license_file_url"`
	ReraFileUrl              string      `json:"rera_file_url"`
	CoverImageUrl            pgtype.Text `json:"cover_image_url"`
	VatFileUrl               pgtype.Text `json:"vat_file_url"`
}

// -- name: GetBrokerCompanySubscriptionById :one
// SELECT broker_subscription_id FROM broker_companies
// WHERE id = $1 LIMIT $1;
// -- name: GetBrokerCompanyBySubscriptionId :one
// SELECT * FROM broker_companies
// WHERE  broker_subscription_id = $1 LIMIT 1;
func (q *Queries) GetBrokerCompanyDocs(ctx context.Context, id int64) (GetBrokerCompanyDocsRow, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyDocs, id)
	var i GetBrokerCompanyDocsRow
	err := row.Scan(
		&i.LogoUrl,
		&i.CommercialLicenseFileUrl,
		&i.ReraFileUrl,
		&i.CoverImageUrl,
		&i.VatFileUrl,
	)
	return i, err
}

const getCountBrokerCompany = `-- name: GetCountBrokerCompany :one
SELECT COUNT(*) FROM broker_companies LIMIT 1
`

func (q *Queries) GetCountBrokerCompany(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerCompany)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountBrokerCompanyByCountryId = `-- name: GetCountBrokerCompanyByCountryId :one

SELECT COUNT(*) FROM broker_companies 
WHERE country_id = $1
LIMIT 1
`

// -- name: GetCountBrokerCompanyByMainServiceId :one
// SELECT COUNT(*) FROM broker_companies
// WHERE main_services_id = $1;
func (q *Queries) GetCountBrokerCompanyByCountryId(ctx context.Context, countryID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerCompanyByCountryId, countryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBrokerCompany = `-- name: UpdateBrokerCompany :one
UPDATE broker_companies
SET   company_name =$2,
    description =$3,
    logo_url =$4,
    addresses_id =$5,
    email =$6,
    phone_number =$7,
    whatsapp_number =$8,
    commercial_license_no =$9,
    commercial_license_file_url =$10,
    commercial_license_expiry =$11,
    rera_no =$12,
    rera_file_url = $13,
    rera_expiry = $14,
    is_verified = $15,
    website_url =$16,
    cover_image_url = $17,
    tag_line =$18,
    vat_no =$19,
    vat_status =$20,
    vat_file_url =$21,
    facebook_profile_url =$22,
    instagram_profile_url =$23,
    twitter_profile_url= $24,
    no_of_employees = $25,
    users_id = $26,
    linkedin_profile_url = $27,
    company_rank = $28,
    status = $29,
    country_id = $30,
    company_type = $31,
    is_branch = $32,
    created_at = $33,
    updated_at = $34,
    ref_no = $35,
    rera_registration_date = $36,
    rera_issue_date = $37,
    commercial_license_registration_date = $38,
    commercial_license_issue_date = $39,
    trakhees_permit_no = $40,
     extra_license_nos = $41,
    extra_license_files = $42,
    extra_license_names = $43,
    extra_license_issue_date = $44,
    extra_license_expiry_date = $45,
    license_dcci_no = $46,
    register_no = $47,
    other_social_media = $48,
    youtube_profile_url = $49,
    orn_license_no = $50,
    orn_license_file_url = $51,
    orn_registration_date = $52,
    orn_license_expiry = $53,
    bank_account_details_id = $54,
    created_by = $55
Where id = $1
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no
`

type UpdateBrokerCompanyParams struct {
	ID                                int64              `json:"id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	ReraNo                            string             `json:"rera_no"`
	ReraFileUrl                       string             `json:"rera_file_url"`
	ReraExpiry                        time.Time          `json:"rera_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	ReraRegistrationDate              pgtype.Timestamptz `json:"rera_registration_date"`
	ReraIssueDate                     pgtype.Timestamptz `json:"rera_issue_date"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	TrakheesPermitNo                  pgtype.Text        `json:"trakhees_permit_no"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	OrnLicenseNo                      pgtype.Text        `json:"orn_license_no"`
	OrnLicenseFileUrl                 pgtype.Text        `json:"orn_license_file_url"`
	OrnRegistrationDate               pgtype.Timestamptz `json:"orn_registration_date"`
	OrnLicenseExpiry                  pgtype.Timestamptz `json:"orn_license_expiry"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CreatedBy                         int64              `json:"created_by"`
}

func (q *Queries) UpdateBrokerCompany(ctx context.Context, arg UpdateBrokerCompanyParams) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompany,
		arg.ID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.ReraNo,
		arg.ReraFileUrl,
		arg.ReraExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.ReraRegistrationDate,
		arg.ReraIssueDate,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.TrakheesPermitNo,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.OrnLicenseNo,
		arg.OrnLicenseFileUrl,
		arg.OrnRegistrationDate,
		arg.OrnLicenseExpiry,
		arg.BankAccountDetailsID,
		arg.CreatedBy,
	)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const updateBrokerCompanyRank = `-- name: UpdateBrokerCompanyRank :one

UPDATE broker_companies 
SET company_rank=$2 
Where id = $1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no
`

type UpdateBrokerCompanyRankParams struct {
	ID          int64 `json:"id"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: UpdateBrokerCompanyMainService :one
// UPDATE broker_companies
// SET main_services_id = $2
// Where id = $1
// RETURNING *;
func (q *Queries) UpdateBrokerCompanyRank(ctx context.Context, arg UpdateBrokerCompanyRankParams) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyRank, arg.ID, arg.CompanyRank)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const updateBrokerCompanyStatus = `-- name: UpdateBrokerCompanyStatus :one
UPDATE broker_companies 
SET status=$2
Where id =$1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no
`

type UpdateBrokerCompanyStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyStatus(ctx context.Context, arg UpdateBrokerCompanyStatusParams) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyStatus, arg.ID, arg.Status)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const verifyBrokerBranchCompany = `-- name: VerifyBrokerBranchCompany :one



UPDATE broker_companies_branches 
SET status= 2,
is_verified = TRUE 
Where id =$1 
RETURNING id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media
`

// -----------------------
func (q *Queries) VerifyBrokerBranchCompany(ctx context.Context, id int64) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, verifyBrokerBranchCompany, id)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const verifyBrokerCompany = `-- name: VerifyBrokerCompany :one

UPDATE broker_companies 
SET status = 2,
is_verified = true
Where id =$1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no
`

// ---------------- verification of all companies ------------------------
func (q *Queries) VerifyBrokerCompany(ctx context.Context, id int64) (BrokerCompany, error) {
	row := q.db.QueryRow(ctx, verifyBrokerCompany, id)
	var i BrokerCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
	)
	return i, err
}

const verifyDeveloperBranchCompany = `-- name: VerifyDeveloperBranchCompany :one
UPDATE developer_company_branches
SET status= 2,
is_verified = TRUE 
Where id =$1 
RETURNING id, developer_companies_id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

func (q *Queries) VerifyDeveloperBranchCompany(ctx context.Context, id int64) (DeveloperCompanyBranch, error) {
	row := q.db.QueryRow(ctx, verifyDeveloperBranchCompany, id)
	var i DeveloperCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.DeveloperCompaniesID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const verifyDeveloperCompany = `-- name: VerifyDeveloperCompany :one
UPDATE developer_companies
SET status= 2,
is_verified = TRUE 
Where id =$1 
RETURNING id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by
`

func (q *Queries) VerifyDeveloperCompany(ctx context.Context, id int64) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, verifyDeveloperCompany, id)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const verifyServiceBranchCompany = `-- name: VerifyServiceBranchCompany :one
UPDATE service_company_branches 
SET status = 2,
is_verified = TRUE 
Where id =$1
RETURNING id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

func (q *Queries) VerifyServiceBranchCompany(ctx context.Context, id int64) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, verifyServiceBranchCompany, id)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const verifyServiceCompany = `-- name: VerifyServiceCompany :one
UPDATE services_companies 
SET status= 2,
is_verified = TRUE 
Where id =$1 
RETURNING id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, youtube_profile_url, created_by, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media
`

func (q *Queries) VerifyServiceCompany(ctx context.Context, id int64) (ServicesCompany, error) {
	row := q.db.QueryRow(ctx, verifyServiceCompany, id)
	var i ServicesCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}
