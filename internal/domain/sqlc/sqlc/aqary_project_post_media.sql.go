// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_project_post_media.sql

package sqlc

import (
	"context"
	"time"
)

const createProjectPostMedia = `-- name: CreateProjectPostMedia :one
INSERT INTO aqary_project_post_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    aqary_project_posts,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_project_posts, created_at, updated_at
`

type CreateProjectPostMediaParams struct {
	ImageUrl          []string  `json:"image_url"`
	Image360Url       []string  `json:"image360_url"`
	VideoUrl          []string  `json:"video_url"`
	PanaromaUrl       []string  `json:"panaroma_url"`
	MainMediaSection  string    `json:"main_media_section"`
	AqaryProjectPosts int64     `json:"aqary_project_posts"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateProjectPostMedia(ctx context.Context, arg CreateProjectPostMediaParams) (AqaryProjectPostMedium, error) {
	row := q.db.QueryRow(ctx, createProjectPostMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.AqaryProjectPosts,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AqaryProjectPostMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AqaryProjectPosts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAqaryProjectPostMedia = `-- name: DeleteAqaryProjectPostMedia :one
DELETE FROM aqary_project_post_media WHERE id = $1 RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_project_posts, created_at, updated_at
`

func (q *Queries) DeleteAqaryProjectPostMedia(ctx context.Context, id int64) (AqaryProjectPostMedium, error) {
	row := q.db.QueryRow(ctx, deleteAqaryProjectPostMedia, id)
	var i AqaryProjectPostMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AqaryProjectPosts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAqaryProjectPostMediaByPostID = `-- name: DeleteAqaryProjectPostMediaByPostID :many
DELETE FROM aqary_project_post_media WHERE aqary_project_posts = $1 RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_project_posts, created_at, updated_at
`

func (q *Queries) DeleteAqaryProjectPostMediaByPostID(ctx context.Context, aqaryProjectPosts int64) ([]AqaryProjectPostMedium, error) {
	rows, err := q.db.Query(ctx, deleteAqaryProjectPostMediaByPostID, aqaryProjectPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryProjectPostMedium
	for rows.Next() {
		var i AqaryProjectPostMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AqaryProjectPosts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAqaryProjectPostMediaByPostId = `-- name: GetAllAqaryProjectPostMediaByPostId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_project_posts, created_at, updated_at FROM aqary_project_post_media WHERE aqary_project_posts = $3 LIMIT $1 OFFSET $2
`

type GetAllAqaryProjectPostMediaByPostIdParams struct {
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
	AqaryProjectPosts int64 `json:"aqary_project_posts"`
}

func (q *Queries) GetAllAqaryProjectPostMediaByPostId(ctx context.Context, arg GetAllAqaryProjectPostMediaByPostIdParams) ([]AqaryProjectPostMedium, error) {
	rows, err := q.db.Query(ctx, getAllAqaryProjectPostMediaByPostId, arg.Limit, arg.Offset, arg.AqaryProjectPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryProjectPostMedium
	for rows.Next() {
		var i AqaryProjectPostMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.AqaryProjectPosts,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryProjectPostMedia = `-- name: GetAqaryProjectPostMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, aqary_project_posts, created_at, updated_at FROM aqary_project_post_media WHERE id = $3 LIMIT $1 OFFSET $2
`

type GetAqaryProjectPostMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetAqaryProjectPostMedia(ctx context.Context, arg GetAqaryProjectPostMediaParams) (AqaryProjectPostMedium, error) {
	row := q.db.QueryRow(ctx, getAqaryProjectPostMedia, arg.Limit, arg.Offset, arg.ID)
	var i AqaryProjectPostMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.AqaryProjectPosts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
