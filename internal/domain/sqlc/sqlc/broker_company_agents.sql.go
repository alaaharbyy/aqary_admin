// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerAgent = `-- name: CreateBrokerAgent :one
INSERT INTO broker_company_agents (
    brn,
    experience_since,
    users_id,
    nationalities,
    brn_expiry,
    verification_document_url,
    about,
    about_arabic,
    linkedin_profile_url,
    facebook_profile_url,
    twitter_profile_url,
    broker_companies_id,
    created_at,
    updated_at,
    status,
    is_verified,
    profiles_id,
    telegram,
    botim,
    tawasal,
    service_areas,
    agent_rank
)VALUES (
    $1 ,$2, $3, $4, $5,$6,$7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22
) RETURNING id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type CreateBrokerAgentParams struct {
	Brn                     string             `json:"brn"`
	ExperienceSince         pgtype.Timestamptz `json:"experience_since"`
	UsersID                 int64              `json:"users_id"`
	Nationalities           []int64            `json:"nationalities"`
	BrnExpiry               time.Time          `json:"brn_expiry"`
	VerificationDocumentUrl string             `json:"verification_document_url"`
	About                   pgtype.Text        `json:"about"`
	AboutArabic             pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl      pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl      pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl       pgtype.Text        `json:"twitter_profile_url"`
	BrokerCompaniesID       pgtype.Int8        `json:"broker_companies_id"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	Status                  int64              `json:"status"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	ProfilesID              int64              `json:"profiles_id"`
	Telegram                pgtype.Text        `json:"telegram"`
	Botim                   pgtype.Text        `json:"botim"`
	Tawasal                 pgtype.Text        `json:"tawasal"`
	ServiceAreas            []int64            `json:"service_areas"`
	AgentRank               int64              `json:"agent_rank"`
}

func (q *Queries) CreateBrokerAgent(ctx context.Context, arg CreateBrokerAgentParams) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, createBrokerAgent,
		arg.Brn,
		arg.ExperienceSince,
		arg.UsersID,
		arg.Nationalities,
		arg.BrnExpiry,
		arg.VerificationDocumentUrl,
		arg.About,
		arg.AboutArabic,
		arg.LinkedinProfileUrl,
		arg.FacebookProfileUrl,
		arg.TwitterProfileUrl,
		arg.BrokerCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.IsVerified,
		arg.ProfilesID,
		arg.Telegram,
		arg.Botim,
		arg.Tawasal,
		arg.ServiceAreas,
		arg.AgentRank,
	)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const deleteBrokerAgent = `-- name: DeleteBrokerAgent :exec
DELETE FROM broker_company_agents
Where id = $1
`

func (q *Queries) DeleteBrokerAgent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerAgent, id)
	return err
}

const getAgentFromAll = `-- name: GetAgentFromAll :one
With x As (
 SELECT users.id, users.username  FROM broker_company_agents
  INNER JOIN users ON broker_company_agents.users_id = users.id
  WHERE  
        users.id = $1
    UNION ALL 
  SELECT users.id, users.username  FROM broker_company_branches_agents
  INNER JOIN users ON broker_company_branches_agents.users_id = users.id
  WHERE  
            users.id = $1
  UNION ALL
  SELECT users.id, users.username  FROM freelancers
  INNER JOIN users ON freelancers.users_id = users.id  
  WHERE  
       users.id = $1
) SELECT id, username FROM x LIMIT 1
`

type GetAgentFromAllRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetAgentFromAll(ctx context.Context, id int64) (GetAgentFromAllRow, error) {
	row := q.db.QueryRow(ctx, getAgentFromAll, id)
	var i GetAgentFromAllRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getAllBrokerAgent = `-- name: GetAllBrokerAgent :many
SELECT id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_agents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerAgentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerAgent(ctx context.Context, arg GetAllBrokerAgentParams) ([]BrokerCompanyAgent, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgent
	for rows.Next() {
		var i BrokerCompanyAgent
		if err := rows.Scan(
			&i.ID,
			&i.Brn,
			&i.ExperienceSince,
			&i.UsersID,
			&i.Nationalities,
			&i.BrnExpiry,
			&i.VerificationDocumentUrl,
			&i.About,
			&i.AboutArabic,
			&i.LinkedinProfileUrl,
			&i.FacebookProfileUrl,
			&i.TwitterProfileUrl,
			&i.BrokerCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.IsVerified,
			&i.ProfilesID,
			&i.Telegram,
			&i.Botim,
			&i.Tawasal,
			&i.ServiceAreas,
			&i.AgentRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentByCompanyId = `-- name: GetAllBrokerAgentByCompanyId :many
SELECT id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_agents
Where broker_companies_id = $1
LIMIT $2
OFFSET $3
`

type GetAllBrokerAgentByCompanyIdParams struct {
	BrokerCompaniesID pgtype.Int8 `json:"broker_companies_id"`
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
}

func (q *Queries) GetAllBrokerAgentByCompanyId(ctx context.Context, arg GetAllBrokerAgentByCompanyIdParams) ([]BrokerCompanyAgent, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentByCompanyId, arg.BrokerCompaniesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgent
	for rows.Next() {
		var i BrokerCompanyAgent
		if err := rows.Scan(
			&i.ID,
			&i.Brn,
			&i.ExperienceSince,
			&i.UsersID,
			&i.Nationalities,
			&i.BrnExpiry,
			&i.VerificationDocumentUrl,
			&i.About,
			&i.AboutArabic,
			&i.LinkedinProfileUrl,
			&i.FacebookProfileUrl,
			&i.TwitterProfileUrl,
			&i.BrokerCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.IsVerified,
			&i.ProfilesID,
			&i.Telegram,
			&i.Botim,
			&i.Tawasal,
			&i.ServiceAreas,
			&i.AgentRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentByCompanyIdWithoutLimit = `-- name: GetAllBrokerAgentByCompanyIdWithoutLimit :many
SELECT id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_agents
Where broker_companies_id = $1
`

func (q *Queries) GetAllBrokerAgentByCompanyIdWithoutLimit(ctx context.Context, brokerCompaniesID pgtype.Int8) ([]BrokerCompanyAgent, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentByCompanyIdWithoutLimit, brokerCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgent
	for rows.Next() {
		var i BrokerCompanyAgent
		if err := rows.Scan(
			&i.ID,
			&i.Brn,
			&i.ExperienceSince,
			&i.UsersID,
			&i.Nationalities,
			&i.BrnExpiry,
			&i.VerificationDocumentUrl,
			&i.About,
			&i.AboutArabic,
			&i.LinkedinProfileUrl,
			&i.FacebookProfileUrl,
			&i.TwitterProfileUrl,
			&i.BrokerCompaniesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.IsVerified,
			&i.ProfilesID,
			&i.Telegram,
			&i.Botim,
			&i.Tawasal,
			&i.ServiceAreas,
			&i.AgentRank,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentNamesByBrokerCompId = `-- name: GetAllBrokerAgentNamesByBrokerCompId :many
SELECT profiles.id AS profile_id,profiles.first_name,profiles.last_name,broker_company_agents.broker_companies_id AS broker_company_id,broker_company_agents.id AS broker_company_agent_id, users.id AS user_id 
FROM broker_companies 
RIGHT JOIN broker_company_agents ON broker_company_agents.broker_companies_id = broker_companies.id 
RIGHT JOIN users ON users.id = broker_company_agents.users_id 
RIGHT JOIN profiles ON profiles.users_id = users.id
WHERE broker_companies.id = $1
`

type GetAllBrokerAgentNamesByBrokerCompIdRow struct {
	ProfileID            int64       `json:"profile_id"`
	FirstName            string      `json:"first_name"`
	LastName             string      `json:"last_name"`
	BrokerCompanyID      pgtype.Int8 `json:"broker_company_id"`
	BrokerCompanyAgentID int64       `json:"broker_company_agent_id"`
	UserID               int64       `json:"user_id"`
}

func (q *Queries) GetAllBrokerAgentNamesByBrokerCompId(ctx context.Context, id int64) ([]GetAllBrokerAgentNamesByBrokerCompIdRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentNamesByBrokerCompId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerAgentNamesByBrokerCompIdRow
	for rows.Next() {
		var i GetAllBrokerAgentNamesByBrokerCompIdRow
		if err := rows.Scan(
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.BrokerCompanyID,
			&i.BrokerCompanyAgentID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentNamesByBrokerCompIdWithPagination = `-- name: GetAllBrokerAgentNamesByBrokerCompIdWithPagination :many
SELECT profiles.id AS profile_id,profiles.first_name,profiles.last_name,broker_company_agents.broker_companies_id AS broker_company_id,broker_company_agents.id AS broker_company_agent_id ,users.id AS user_id 
FROM broker_companies 
LEFT JOIN broker_company_agents ON broker_company_agents.broker_companies_id = broker_companies.id 
LEFT JOIN users ON users.id = broker_company_agents.users_id 
LEFT JOIN profiles ON profiles.users_id = users.id
WHERE broker_companies.id = $3 LIMIT $1 OFFSET $2
`

type GetAllBrokerAgentNamesByBrokerCompIdWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	ID     int64 `json:"id"`
}

type GetAllBrokerAgentNamesByBrokerCompIdWithPaginationRow struct {
	ProfileID            pgtype.Int8 `json:"profile_id"`
	FirstName            pgtype.Text `json:"first_name"`
	LastName             pgtype.Text `json:"last_name"`
	BrokerCompanyID      pgtype.Int8 `json:"broker_company_id"`
	BrokerCompanyAgentID pgtype.Int8 `json:"broker_company_agent_id"`
	UserID               pgtype.Int8 `json:"user_id"`
}

func (q *Queries) GetAllBrokerAgentNamesByBrokerCompIdWithPagination(ctx context.Context, arg GetAllBrokerAgentNamesByBrokerCompIdWithPaginationParams) ([]GetAllBrokerAgentNamesByBrokerCompIdWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentNamesByBrokerCompIdWithPagination, arg.Limit, arg.Offset, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerAgentNamesByBrokerCompIdWithPaginationRow
	for rows.Next() {
		var i GetAllBrokerAgentNamesByBrokerCompIdWithPaginationRow
		if err := rows.Scan(
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.BrokerCompanyID,
			&i.BrokerCompanyAgentID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerAgentNamesByBrokerCompIdWithoutFreelance = `-- name: GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelance :many
SELECT profiles.id AS profile_id,profiles.first_name,profiles.last_name,broker_company_agents.broker_companies_id AS broker_company_id,broker_company_agents.id AS broker_company_agent_id ,users.id AS user_id
FROM broker_companies
RIGHT JOIN broker_company_agents ON broker_company_agents.broker_companies_id = broker_companies.id
RIGHT JOIN users ON users.id = broker_company_agents.users_id
RIGHT JOIN profiles ON profiles.users_id = users.id
WHERE broker_companies.id = $1
`

type GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelanceRow struct {
	ProfileID            int64       `json:"profile_id"`
	FirstName            string      `json:"first_name"`
	LastName             string      `json:"last_name"`
	BrokerCompanyID      pgtype.Int8 `json:"broker_company_id"`
	BrokerCompanyAgentID int64       `json:"broker_company_agent_id"`
	UserID               int64       `json:"user_id"`
}

func (q *Queries) GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelance(ctx context.Context, id int64) ([]GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelanceRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentNamesByBrokerCompIdWithoutFreelance, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelanceRow
	for rows.Next() {
		var i GetAllBrokerAgentNamesByBrokerCompIdWithoutFreelanceRow
		if err := rows.Scan(
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.BrokerCompanyID,
			&i.BrokerCompanyAgentID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFreelancerNames = `-- name: GetAllFreelancerNames :many
SELECT freelancers.id,profiles.id AS profile_id,profiles.first_name,profiles.last_name,users.id AS user_id 
FROM freelancers
 LEFT JOIN users ON users.id=freelancers.users_id 
LEFT JOIN profiles ON profiles.users_id = users.id
`

type GetAllFreelancerNamesRow struct {
	ID        int64       `json:"id"`
	ProfileID pgtype.Int8 `json:"profile_id"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	UserID    pgtype.Int8 `json:"user_id"`
}

func (q *Queries) GetAllFreelancerNames(ctx context.Context) ([]GetAllFreelancerNamesRow, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFreelancerNamesRow
	for rows.Next() {
		var i GetAllFreelancerNamesRow
		if err := rows.Scan(
			&i.ID,
			&i.ProfileID,
			&i.FirstName,
			&i.LastName,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerAgent = `-- name: GetBrokerAgent :one
SELECT id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_agents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerAgent(ctx context.Context, limit int32) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerAgent, limit)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getBrokerAgentByUserId = `-- name: GetBrokerAgentByUserId :one
SELECT id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_agents WHERE users_id = $1
`

func (q *Queries) GetBrokerAgentByUserId(ctx context.Context, usersID int64) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerAgentByUserId, usersID)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getBrokerAgentsByUserID = `-- name: GetBrokerAgentsByUserID :one
select id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank from broker_company_agents where users_id=$1
`

func (q *Queries) GetBrokerAgentsByUserID(ctx context.Context, usersID int64) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerAgentsByUserID, usersID)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getBrokerBranchAgentByUserId = `-- name: GetBrokerBranchAgentByUserId :one
SELECT id, brn, experience_since, users_id, nationalities, broker_companies_branches_id, created_at, updated_at, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank FROM broker_company_branches_agents WHERE users_id = $1
`

func (q *Queries) GetBrokerBranchAgentByUserId(ctx context.Context, usersID int64) (BrokerCompanyBranchesAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerBranchAgentByUserId, usersID)
	var i BrokerCompanyBranchesAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrokerCompaniesBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getBrokerCompanyAgentByUsername = `-- name: GetBrokerCompanyAgentByUsername :one
SELECT broker_company_agents.id, broker_company_agents.brn, broker_company_agents.experience_since, broker_company_agents.users_id, broker_company_agents.nationalities, broker_company_agents.brn_expiry, broker_company_agents.verification_document_url, broker_company_agents.about, broker_company_agents.about_arabic, broker_company_agents.linkedin_profile_url, broker_company_agents.facebook_profile_url, broker_company_agents.twitter_profile_url, broker_company_agents.broker_companies_id, broker_company_agents.created_at, broker_company_agents.updated_at, broker_company_agents.status, broker_company_agents.is_verified, broker_company_agents.profiles_id, broker_company_agents.telegram, broker_company_agents.botim, broker_company_agents.tawasal, broker_company_agents.service_areas, broker_company_agents.agent_rank FROM broker_company_agents LEFT JOIN users ON users.id = broker_company_agents.users_id WHERE users.user_types_id = 2 AND users.username = $1
`

func (q *Queries) GetBrokerCompanyAgentByUsername(ctx context.Context, username string) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentByUsername, username)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const getCompanyUserAgentAndQuotaByUserId = `-- name: GetCompanyUserAgentAndQuotaByUserId :one
SELECT
	broker_company_agents.id AS broker_company_agents_id,
	broker_company_agents.brn,
	broker_company_agents.experience_since,
	broker_company_agents.nationalities,
	broker_company_agents.brn_expiry,
	broker_company_agents.verification_document_url,
	broker_company_agents.about,
	broker_company_agents.about_arabic,
	broker_company_agents.linkedin_profile_url,
	broker_company_agents.facebook_profile_url,
	broker_company_agents.twitter_profile_url,
	broker_company_agents.is_verified,
	broker_company_agents.profiles_id,
	broker_company_agents.service_areas,
	agent_subscription_quota.id AS agent_subscription_quota_id,
	agent_subscription_quota.standard,
	agent_subscription_quota.featured,
	agent_subscription_quota.premium,
	agent_subscription_quota.top_deal
FROM
	broker_company_agents
	LEFT JOIN agent_subscription_quota ON agent_subscription_quota.broker_company_agents_id = broker_company_agents.id
WHERE
	broker_company_agents.users_id = $1
`

type GetCompanyUserAgentAndQuotaByUserIdRow struct {
	BrokerCompanyAgentsID    int64              `json:"broker_company_agents_id"`
	Brn                      string             `json:"brn"`
	ExperienceSince          pgtype.Timestamptz `json:"experience_since"`
	Nationalities            []int64            `json:"nationalities"`
	BrnExpiry                time.Time          `json:"brn_expiry"`
	VerificationDocumentUrl  string             `json:"verification_document_url"`
	About                    pgtype.Text        `json:"about"`
	AboutArabic              pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl       pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl       pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl        pgtype.Text        `json:"twitter_profile_url"`
	IsVerified               pgtype.Bool        `json:"is_verified"`
	ProfilesID               int64              `json:"profiles_id"`
	ServiceAreas             []int64            `json:"service_areas"`
	AgentSubscriptionQuotaID pgtype.Int8        `json:"agent_subscription_quota_id"`
	Standard                 pgtype.Int8        `json:"standard"`
	Featured                 pgtype.Int8        `json:"featured"`
	Premium                  pgtype.Int8        `json:"premium"`
	TopDeal                  pgtype.Int8        `json:"top_deal"`
}

func (q *Queries) GetCompanyUserAgentAndQuotaByUserId(ctx context.Context, usersID int64) (GetCompanyUserAgentAndQuotaByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getCompanyUserAgentAndQuotaByUserId, usersID)
	var i GetCompanyUserAgentAndQuotaByUserIdRow
	err := row.Scan(
		&i.BrokerCompanyAgentsID,
		&i.Brn,
		&i.ExperienceSince,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.IsVerified,
		&i.ProfilesID,
		&i.ServiceAreas,
		&i.AgentSubscriptionQuotaID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
	)
	return i, err
}

const getCountBrokerAgentByCompanyId = `-- name: GetCountBrokerAgentByCompanyId :one

SELECT COUNT(*) FROM broker_company_agents 
WHERE broker_companies_id = $1 LIMIT 1
`

// -- name: GetBrokerAgentByCountryId :many
// SELECT * FROM broker_company_agents
// WHERE broker_companies_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetCountBrokerAgentByCompanyId(ctx context.Context, brokerCompaniesID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerAgentByCompanyId, brokerCompaniesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const searchAllAgent = `-- name: SearchAllAgent :many
With x As (
 SELECT users.id, users.username, users.phone_number FROM broker_company_agents
  INNER JOIN users ON broker_company_agents.users_id = users.id
  INNER JOIN profiles ON broker_company_agents.profiles_id = profiles.id
  
  WHERE  
        users.username ILIKE $1 OR
        profiles.first_name ILIKE $1 OR
        profiles.last_name ILIKE $1 OR 
        users.phone_number ILIKE $1
    UNION ALL 
    
  SELECT users.id, users.username,users.phone_number FROM broker_company_branches_agents
  INNER JOIN users ON broker_company_branches_agents.users_id = users.id
  INNER JOIN profiles ON broker_company_branches_agents.profiles_id = profiles.id
  
  WHERE  
             users.username ILIKE $1 OR
        profiles.first_name ILIKE $1 OR
        profiles.last_name ILIKE $1 OR 
        users.phone_number ILIKE $1
              
  
  UNION ALL
  
  SELECT users.id, users.username,users.phone_number FROM freelancers
  INNER JOIN users ON freelancers.users_id = users.id
  INNER JOIN profiles ON freelancers.profiles_id = profiles.id
  
  WHERE  
        users.username ILIKE $1 OR
        profiles.first_name ILIKE $1 OR
        profiles.last_name ILIKE $1 OR 
        users.phone_number ILIKE $1
) SELECT id, username, phone_number FROM x LIMIT 50
`

type SearchAllAgentRow struct {
	ID          int64       `json:"id"`
	Username    string      `json:"username"`
	PhoneNumber pgtype.Text `json:"phone_number"`
}

func (q *Queries) SearchAllAgent(ctx context.Context, username string) ([]SearchAllAgentRow, error) {
	rows, err := q.db.Query(ctx, searchAllAgent, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchAllAgentRow
	for rows.Next() {
		var i SearchAllAgentRow
		if err := rows.Scan(&i.ID, &i.Username, &i.PhoneNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrokerAgent = `-- name: UpdateBrokerAgent :one
UPDATE broker_company_agents
SET  
    brn = $2,
    experience_since = $3,
    users_id = $4,
    nationalities = $5,
    brn_expiry = $6,
    verification_document_url = $7,
    about = $8,
    about_arabic = $9,
    linkedin_profile_url = $10,
    facebook_profile_url = $11,
    twitter_profile_url = $12,
    broker_companies_id = $13,
    created_at = $14,
    updated_at = $15,
    status = $16,
    is_verified = $17,
    profiles_id = $18,
    telegram = $19,
    botim = $20,
    tawasal = $21,
     service_areas = $22,
     agent_rank = $23
Where id = $1
RETURNING id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type UpdateBrokerAgentParams struct {
	ID                      int64              `json:"id"`
	Brn                     string             `json:"brn"`
	ExperienceSince         pgtype.Timestamptz `json:"experience_since"`
	UsersID                 int64              `json:"users_id"`
	Nationalities           []int64            `json:"nationalities"`
	BrnExpiry               time.Time          `json:"brn_expiry"`
	VerificationDocumentUrl string             `json:"verification_document_url"`
	About                   pgtype.Text        `json:"about"`
	AboutArabic             pgtype.Text        `json:"about_arabic"`
	LinkedinProfileUrl      pgtype.Text        `json:"linkedin_profile_url"`
	FacebookProfileUrl      pgtype.Text        `json:"facebook_profile_url"`
	TwitterProfileUrl       pgtype.Text        `json:"twitter_profile_url"`
	BrokerCompaniesID       pgtype.Int8        `json:"broker_companies_id"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	Status                  int64              `json:"status"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	ProfilesID              int64              `json:"profiles_id"`
	Telegram                pgtype.Text        `json:"telegram"`
	Botim                   pgtype.Text        `json:"botim"`
	Tawasal                 pgtype.Text        `json:"tawasal"`
	ServiceAreas            []int64            `json:"service_areas"`
	AgentRank               int64              `json:"agent_rank"`
}

func (q *Queries) UpdateBrokerAgent(ctx context.Context, arg UpdateBrokerAgentParams) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, updateBrokerAgent,
		arg.ID,
		arg.Brn,
		arg.ExperienceSince,
		arg.UsersID,
		arg.Nationalities,
		arg.BrnExpiry,
		arg.VerificationDocumentUrl,
		arg.About,
		arg.AboutArabic,
		arg.LinkedinProfileUrl,
		arg.FacebookProfileUrl,
		arg.TwitterProfileUrl,
		arg.BrokerCompaniesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.IsVerified,
		arg.ProfilesID,
		arg.Telegram,
		arg.Botim,
		arg.Tawasal,
		arg.ServiceAreas,
		arg.AgentRank,
	)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}

const updateBrokerAgentByStatus = `-- name: UpdateBrokerAgentByStatus :one
UPDATE broker_company_agents SET status = $2 WHERE id = $1 RETURNING id, brn, experience_since, users_id, nationalities, brn_expiry, verification_document_url, about, about_arabic, linkedin_profile_url, facebook_profile_url, twitter_profile_url, broker_companies_id, created_at, updated_at, status, is_verified, profiles_id, telegram, botim, tawasal, service_areas, agent_rank
`

type UpdateBrokerAgentByStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerAgentByStatus(ctx context.Context, arg UpdateBrokerAgentByStatusParams) (BrokerCompanyAgent, error) {
	row := q.db.QueryRow(ctx, updateBrokerAgentByStatus, arg.ID, arg.Status)
	var i BrokerCompanyAgent
	err := row.Scan(
		&i.ID,
		&i.Brn,
		&i.ExperienceSince,
		&i.UsersID,
		&i.Nationalities,
		&i.BrnExpiry,
		&i.VerificationDocumentUrl,
		&i.About,
		&i.AboutArabic,
		&i.LinkedinProfileUrl,
		&i.FacebookProfileUrl,
		&i.TwitterProfileUrl,
		&i.BrokerCompaniesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.IsVerified,
		&i.ProfilesID,
		&i.Telegram,
		&i.Botim,
		&i.Tawasal,
		&i.ServiceAreas,
		&i.AgentRank,
	)
	return i, err
}
