// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_project_ads.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProjectAd = `-- name: AddProjectAd :one
INSERT INTO aqary_project_ads (company_types_id, companies_id, is_branch, title, project_id, ads_category, created_by,is_project_branch,ads_schema,ads_status, is_public, is_verified, tags) VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,$12, $13) RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags
`

type AddProjectAdParams struct {
	CompanyTypesID  int64       `json:"company_types_id"`
	CompaniesID     int64       `json:"companies_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	Title           string      `json:"title"`
	ProjectID       int64       `json:"project_id"`
	AdsCategory     string      `json:"ads_category"`
	CreatedBy       int64       `json:"created_by"`
	IsProjectBranch pgtype.Bool `json:"is_project_branch"`
	AdsSchema       string      `json:"ads_schema"`
	AdsStatus       int64       `json:"ads_status"`
	IsPublic        pgtype.Bool `json:"is_public"`
	IsVerified      pgtype.Bool `json:"is_verified"`
	Tags            []int64     `json:"tags"`
}

func (q *Queries) AddProjectAd(ctx context.Context, arg AddProjectAdParams) (AqaryProjectAd, error) {
	row := q.db.QueryRow(ctx, addProjectAd,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.ProjectID,
		arg.AdsCategory,
		arg.CreatedBy,
		arg.IsProjectBranch,
		arg.AdsSchema,
		arg.AdsStatus,
		arg.IsPublic,
		arg.IsVerified,
		arg.Tags,
	)
	var i AqaryProjectAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
	)
	return i, err
}

const deleteProjectAd = `-- name: DeleteProjectAd :exec
DELETE FROM aqary_project_ads WHERE id = $1
`

func (q *Queries) DeleteProjectAd(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectAd, id)
	return err
}

const getAllProjectAds = `-- name: GetAllProjectAds :many
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_ads app JOIN users u ON app.created_by = u.id LIMIT $1 OFFSET $2
`

type GetAllProjectAdsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllProjectAdsRow struct {
	ID              int64              `json:"id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	AdsCategory     string             `json:"ads_category"`
	CompanyTypesID  int64              `json:"company_types_id"`
	CompaniesID     int64              `json:"companies_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	AdsStatus       int64              `json:"ads_status"`
	AdsSchema       string             `json:"ads_schema"`
	CreatedBy       int64              `json:"created_by"`
	CreatedAt       time.Time          `json:"created_at"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	Tags            []int64            `json:"tags"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetAllProjectAds(ctx context.Context, arg GetAllProjectAdsParams) ([]GetAllProjectAdsRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectAds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectAdsRow
	for rows.Next() {
		var i GetAllProjectAdsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProjectID,
			&i.AdsCategory,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.IsProjectBranch,
			&i.AdsStatus,
			&i.AdsSchema,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.IsPublic,
			&i.IsVerified,
			&i.Tags,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectAdsByPostedBy = `-- name: GetAllProjectAdsByPostedBy :many
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_ads app JOIN users u ON app.created_by = u.id WHERE app.created_by = $3 LIMIT $1 OFFSET $2
`

type GetAllProjectAdsByPostedByParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CreatedBy int64 `json:"created_by"`
}

type GetAllProjectAdsByPostedByRow struct {
	ID              int64              `json:"id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	AdsCategory     string             `json:"ads_category"`
	CompanyTypesID  int64              `json:"company_types_id"`
	CompaniesID     int64              `json:"companies_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	AdsStatus       int64              `json:"ads_status"`
	AdsSchema       string             `json:"ads_schema"`
	CreatedBy       int64              `json:"created_by"`
	CreatedAt       time.Time          `json:"created_at"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	Tags            []int64            `json:"tags"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetAllProjectAdsByPostedBy(ctx context.Context, arg GetAllProjectAdsByPostedByParams) ([]GetAllProjectAdsByPostedByRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectAdsByPostedBy, arg.Limit, arg.Offset, arg.CreatedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectAdsByPostedByRow
	for rows.Next() {
		var i GetAllProjectAdsByPostedByRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ProjectID,
			&i.AdsCategory,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.IsProjectBranch,
			&i.AdsStatus,
			&i.AdsSchema,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.IsPublic,
			&i.IsVerified,
			&i.Tags,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectAdByID = `-- name: GetProjectAdByID :one
SELECT app.id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, app.created_at, is_public, app.is_verified, tags, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, u.created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_ads app JOIN users u ON app.created_by = u.id WHERE app.id = $1 LIMIT 1
`

type GetProjectAdByIDRow struct {
	ID              int64              `json:"id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	AdsCategory     string             `json:"ads_category"`
	CompanyTypesID  int64              `json:"company_types_id"`
	CompaniesID     int64              `json:"companies_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	AdsStatus       int64              `json:"ads_status"`
	AdsSchema       string             `json:"ads_schema"`
	CreatedBy       int64              `json:"created_by"`
	CreatedAt       time.Time          `json:"created_at"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	Tags            []int64            `json:"tags"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt_2     time.Time          `json:"created_at_2"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetProjectAdByID(ctx context.Context, id int64) (GetProjectAdByIDRow, error) {
	row := q.db.QueryRow(ctx, getProjectAdByID, id)
	var i GetProjectAdByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified_2,
		&i.CreatedAt_2,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const updateProjectAd = `-- name: UpdateProjectAd :one
UPDATE aqary_project_ads SET company_types_id = $2 ,companies_id=$3,is_branch=$4,title=$5,project_id=$6,ads_category=$7,created_by=$8,is_project_branch=$9,ads_schema=$10,ads_status=$11, tags= $12 WHERE id = $1 RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags
`

type UpdateProjectAdParams struct {
	ID              int64       `json:"id"`
	CompanyTypesID  int64       `json:"company_types_id"`
	CompaniesID     int64       `json:"companies_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	Title           string      `json:"title"`
	ProjectID       int64       `json:"project_id"`
	AdsCategory     string      `json:"ads_category"`
	CreatedBy       int64       `json:"created_by"`
	IsProjectBranch pgtype.Bool `json:"is_project_branch"`
	AdsSchema       string      `json:"ads_schema"`
	AdsStatus       int64       `json:"ads_status"`
	Tags            []int64     `json:"tags"`
}

func (q *Queries) UpdateProjectAd(ctx context.Context, arg UpdateProjectAdParams) (AqaryProjectAd, error) {
	row := q.db.QueryRow(ctx, updateProjectAd,
		arg.ID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.ProjectID,
		arg.AdsCategory,
		arg.CreatedBy,
		arg.IsProjectBranch,
		arg.AdsSchema,
		arg.AdsStatus,
		arg.Tags,
	)
	var i AqaryProjectAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
	)
	return i, err
}

const updateProjectAdIsVerified = `-- name: UpdateProjectAdIsVerified :one
UPDATE aqary_project_ads SET is_verified = $2 WHERE id = $1 RETURNING id, title, project_id, ads_category, company_types_id, companies_id, is_branch, is_project_branch, ads_status, ads_schema, created_by, created_at, is_public, is_verified, tags
`

type UpdateProjectAdIsVerifiedParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateProjectAdIsVerified(ctx context.Context, arg UpdateProjectAdIsVerifiedParams) (AqaryProjectAd, error) {
	row := q.db.QueryRow(ctx, updateProjectAdIsVerified, arg.ID, arg.IsVerified)
	var i AqaryProjectAd
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ProjectID,
		&i.AdsCategory,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.IsProjectBranch,
		&i.AdsStatus,
		&i.AdsSchema,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.IsPublic,
		&i.IsVerified,
		&i.Tags,
	)
	return i, err
}
