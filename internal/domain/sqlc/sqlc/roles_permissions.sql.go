// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: roles_permissions.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO roles_permissions (
    roles_id,
    permissions_id,
    sub_section_permission,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, roles_id, permissions_id, sub_section_permission, created_at, updated_at
`

type CreateRolePermissionParams struct {
	RolesID              int64     `json:"roles_id"`
	PermissionsID        []int64   `json:"permissions_id"`
	SubSectionPermission []int64   `json:"sub_section_permission"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolesPermission, error) {
	row := q.db.QueryRow(ctx, createRolePermission,
		arg.RolesID,
		arg.PermissionsID,
		arg.SubSectionPermission,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i RolesPermission
	err := row.Scan(
		&i.ID,
		&i.RolesID,
		&i.PermissionsID,
		&i.SubSectionPermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOnePermissionInRole = `-- name: DeleteOnePermissionInRole :one
UPDATE roles_permissions
SET permissions_id = array_remove(permissions_id, $2::bigint)
WHERE id = $1
RETURNING id, roles_id, permissions_id, sub_section_permission, created_at, updated_at
`

type DeleteOnePermissionInRoleParams struct {
	ID      int64 `json:"id"`
	Column2 int64 `json:"column_2"`
}

func (q *Queries) DeleteOnePermissionInRole(ctx context.Context, arg DeleteOnePermissionInRoleParams) (RolesPermission, error) {
	row := q.db.QueryRow(ctx, deleteOnePermissionInRole, arg.ID, arg.Column2)
	var i RolesPermission
	err := row.Scan(
		&i.ID,
		&i.RolesID,
		&i.PermissionsID,
		&i.SubSectionPermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRolePermission = `-- name: DeleteRolePermission :exec
DELETE FROM roles_permissions
Where roles_id = $1
`

func (q *Queries) DeleteRolePermission(ctx context.Context, rolesID int64) error {
	_, err := q.db.Exec(ctx, deleteRolePermission, rolesID)
	return err
}

const getAllRolePermission = `-- name: GetAllRolePermission :many



SELECT roles_permissions.id, roles_id, permissions_id, sub_section_permission, roles_permissions.created_at, roles_permissions.updated_at, roles.id, role, roles.created_at, roles.updated_at, department_id, role_ar FROM roles_permissions
INNER JOIN roles ON roles_permissions.roles_id = roles.id
WHERE  
      ( $3 = '%%'
        OR roles."role" ILIKE $3
       )
ORDER BY roles_permissions.updated_at DESC
LIMIT $1
OFFSET $2
`

type GetAllRolePermissionParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Search interface{} `json:"search"`
}

type GetAllRolePermissionRow struct {
	ID                   int64       `json:"id"`
	RolesID              int64       `json:"roles_id"`
	PermissionsID        []int64     `json:"permissions_id"`
	SubSectionPermission []int64     `json:"sub_section_permission"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	ID_2                 int64       `json:"id_2"`
	Role                 string      `json:"role"`
	CreatedAt_2          time.Time   `json:"created_at_2"`
	UpdatedAt_2          time.Time   `json:"updated_at_2"`
	DepartmentID         pgtype.Int8 `json:"department_id"`
	RoleAr               pgtype.Text `json:"role_ar"`
}

// -- name: GetAllRolePermissionByRole :many
// SELECT rp.id, rp.roles_id,
//
//	CASE
//	    WHEN u.user_types_id = 6 THEN rp.permissions_id
//	    ELSE u.permissions_id
//	END as permissions_id
//
// FROM roles_permissions rp
// CROSS JOIN LATERAL (
//
//	SELECT users.id, users.permissions_id, users.user_types_id
//	FROM users
//	WHERE users.id = $2
//
// ) u
// WHERE rp.roles_id = $1;
func (q *Queries) GetAllRolePermission(ctx context.Context, arg GetAllRolePermissionParams) ([]GetAllRolePermissionRow, error) {
	rows, err := q.db.Query(ctx, getAllRolePermission, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRolePermissionRow
	for rows.Next() {
		var i GetAllRolePermissionRow
		if err := rows.Scan(
			&i.ID,
			&i.RolesID,
			&i.PermissionsID,
			&i.SubSectionPermission,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.Role,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.DepartmentID,
			&i.RoleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRolePermissionRolesWithoutPagination = `-- name: GetAllRolePermissionRolesWithoutPagination :many
SELECT id, roles_id FROM roles_permissions
ORDER BY id
`

type GetAllRolePermissionRolesWithoutPaginationRow struct {
	ID      int64 `json:"id"`
	RolesID int64 `json:"roles_id"`
}

func (q *Queries) GetAllRolePermissionRolesWithoutPagination(ctx context.Context) ([]GetAllRolePermissionRolesWithoutPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllRolePermissionRolesWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRolePermissionRolesWithoutPaginationRow
	for rows.Next() {
		var i GetAllRolePermissionRolesWithoutPaginationRow
		if err := rows.Scan(&i.ID, &i.RolesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRolePermissionWithoutPagination = `-- name: GetAllRolePermissionWithoutPagination :many
SELECT id, roles_id, permissions_id, sub_section_permission, created_at, updated_at FROM roles_permissions
ORDER BY id
`

func (q *Queries) GetAllRolePermissionWithoutPagination(ctx context.Context) ([]RolesPermission, error) {
	rows, err := q.db.Query(ctx, getAllRolePermissionWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RolesPermission
	for rows.Next() {
		var i RolesPermission
		if err := rows.Scan(
			&i.ID,
			&i.RolesID,
			&i.PermissionsID,
			&i.SubSectionPermission,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllRolePermission = `-- name: GetCountAllRolePermission :one
SELECT COUNT(roles_permissions.id) FROM roles_permissions
INNER JOIN roles ON roles_permissions.roles_id = roles.id
WHERE  
      ( $1 = '%%'
        OR roles."role" ILIKE $1
       )
`

func (q *Queries) GetCountAllRolePermission(ctx context.Context, search interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllRolePermission, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountRolePermissionRoles = `-- name: GetCountRolePermissionRoles :one
SELECT COUNT(*) FROM roles_permissions
LIMIT $1
OFFSET $2
`

type GetCountRolePermissionRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetCountRolePermissionRoles(ctx context.Context, arg GetCountRolePermissionRolesParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountRolePermissionRoles, arg.Limit, arg.Offset)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getRolePermission = `-- name: GetRolePermission :one
SELECT id, roles_id, permissions_id, sub_section_permission, created_at, updated_at FROM roles_permissions 
WHERE id = $1
`

func (q *Queries) GetRolePermission(ctx context.Context, id int64) (RolesPermission, error) {
	row := q.db.QueryRow(ctx, getRolePermission, id)
	var i RolesPermission
	err := row.Scan(
		&i.ID,
		&i.RolesID,
		&i.PermissionsID,
		&i.SubSectionPermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRolePermissionByRole = `-- name: GetRolePermissionByRole :one
SELECT id, roles_id, permissions_id, sub_section_permission, created_at, updated_at FROM roles_permissions 
WHERE roles_id = $1
`

func (q *Queries) GetRolePermissionByRole(ctx context.Context, rolesID int64) (RolesPermission, error) {
	row := q.db.QueryRow(ctx, getRolePermissionByRole, rolesID)
	var i RolesPermission
	err := row.Scan(
		&i.ID,
		&i.RolesID,
		&i.PermissionsID,
		&i.SubSectionPermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRolePermissionRoles = `-- name: GetRolePermissionRoles :many


SELECT id, roles_id FROM roles_permissions
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetRolePermissionRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetRolePermissionRolesRow struct {
	ID      int64 `json:"id"`
	RolesID int64 `json:"roles_id"`
}

// SELECT COUNT(*) FROM roles_permissions;
func (q *Queries) GetRolePermissionRoles(ctx context.Context, arg GetRolePermissionRolesParams) ([]GetRolePermissionRolesRow, error) {
	rows, err := q.db.Query(ctx, getRolePermissionRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRolePermissionRolesRow
	for rows.Next() {
		var i GetRolePermissionRolesRow
		if err := rows.Scan(&i.ID, &i.RolesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRolePermission = `-- name: UpdateRolePermission :one
UPDATE roles_permissions
 SET 
 permissions_id = $2,
 sub_section_permission = $3,
 updated_at = $4  
 Where roles_id = $1
RETURNING id, roles_id, permissions_id, sub_section_permission, created_at, updated_at
`

type UpdateRolePermissionParams struct {
	RolesID              int64     `json:"roles_id"`
	PermissionsID        []int64   `json:"permissions_id"`
	SubSectionPermission []int64   `json:"sub_section_permission"`
	UpdatedAt            time.Time `json:"updated_at"`
}

func (q *Queries) UpdateRolePermission(ctx context.Context, arg UpdateRolePermissionParams) (RolesPermission, error) {
	row := q.db.QueryRow(ctx, updateRolePermission,
		arg.RolesID,
		arg.PermissionsID,
		arg.SubSectionPermission,
		arg.UpdatedAt,
	)
	var i RolesPermission
	err := row.Scan(
		&i.ID,
		&i.RolesID,
		&i.PermissionsID,
		&i.SubSectionPermission,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
