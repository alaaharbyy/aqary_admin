// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: propertytype_unittype.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyTypeUnitType = `-- name: CreatePropertyTypeUnitType :many
INSERT INTO property_type_unit_type (unit_type_id, property_type_id)
SELECT unnest($1::bigint[]), $2::bigint 
RETURNING id, unit_type_id, property_type_id
`

type CreatePropertyTypeUnitTypeParams struct {
	UnitTypeIds    []int64 `json:"unit_type_ids"`
	PropertyTypeID int64   `json:"property_type_id"`
}

func (q *Queries) CreatePropertyTypeUnitType(ctx context.Context, arg CreatePropertyTypeUnitTypeParams) ([]PropertyTypeUnitType, error) {
	rows, err := q.db.Query(ctx, createPropertyTypeUnitType, arg.UnitTypeIds, arg.PropertyTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyTypeUnitType
	for rows.Next() {
		var i PropertyTypeUnitType
		if err := rows.Scan(&i.ID, &i.UnitTypeID, &i.PropertyTypeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteUnitTypesByPropertyTypeId = `-- name: DeleteUnitTypesByPropertyTypeId :exec
DELETE FROM property_type_unit_type 
WHERE property_type_id = $1
`

func (q *Queries) DeleteUnitTypesByPropertyTypeId(ctx context.Context, propertyTypeID int64) error {
	_, err := q.db.Exec(ctx, deleteUnitTypesByPropertyTypeId, propertyTypeID)
	return err
}

const deleteUnitTypesByPropertyTypeUnitTypeId = `-- name: DeleteUnitTypesByPropertyTypeUnitTypeId :exec
DELETE FROM property_type_unit_type
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteUnitTypesByPropertyTypeUnitTypeId(ctx context.Context, ids []int64) error {
	_, err := q.db.Exec(ctx, deleteUnitTypesByPropertyTypeUnitTypeId, ids)
	return err
}

const getAllPropertyTypeUnitType = `-- name: GetAllPropertyTypeUnitType :many
SELECT 
	property_type_id,global_property_type."type" AS property_type,  (global_property_type.is_project)::BOOLEAN AS is_project,  -- Explicit boolean cast
	JSON_AGG(JSON_BUILD_OBJECT('id', unit_type_id, 'label', unit_type."type", 'label_ar', unit_type.type_ar)) AS unit_types,
	COUNT(*) OVER() AS total_count
FROM property_type_unit_type
INNER JOIN global_property_type ON global_property_type.id = property_type_id
INNER JOIN unit_type ON unit_type.id = unit_type_id
GROUP BY property_type_unit_type.property_type_id,global_property_type.id
LIMIT $2
OFFSET $1
`

type GetAllPropertyTypeUnitTypeParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetAllPropertyTypeUnitTypeRow struct {
	PropertyTypeID int64  `json:"property_type_id"`
	PropertyType   string `json:"property_type"`
	IsProject      bool   `json:"is_project"`
	UnitTypes      []byte `json:"unit_types"`
	TotalCount     int64  `json:"total_count"`
}

func (q *Queries) GetAllPropertyTypeUnitType(ctx context.Context, arg GetAllPropertyTypeUnitTypeParams) ([]GetAllPropertyTypeUnitTypeRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyTypeUnitType, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyTypeUnitTypeRow
	for rows.Next() {
		var i GetAllPropertyTypeUnitTypeRow
		if err := rows.Scan(
			&i.PropertyTypeID,
			&i.PropertyType,
			&i.IsProject,
			&i.UnitTypes,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypesByPropertyType = `-- name: GetAllUnitTypesByPropertyType :many
SELECT property_type_unit_type.id,property_type_unit_type.property_type_id,global_property_type."type" AS property_type,
property_type_unit_type.unit_type_id,unit_type."type" AS unit_type
FROM property_type_unit_type
INNER JOIN global_property_type ON global_property_type.id = property_type_id
INNER JOIN unit_type ON unit_type.id = unit_type_id
WHERE property_type_id = $1
`

type GetAllUnitTypesByPropertyTypeRow struct {
	ID             int64  `json:"id"`
	PropertyTypeID int64  `json:"property_type_id"`
	PropertyType   string `json:"property_type"`
	UnitTypeID     int64  `json:"unit_type_id"`
	UnitType       string `json:"unit_type"`
}

func (q *Queries) GetAllUnitTypesByPropertyType(ctx context.Context, propertyTypeID int64) ([]GetAllUnitTypesByPropertyTypeRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypesByPropertyType, propertyTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypesByPropertyTypeRow
	for rows.Next() {
		var i GetAllUnitTypesByPropertyTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTypeID,
			&i.PropertyType,
			&i.UnitTypeID,
			&i.UnitType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
