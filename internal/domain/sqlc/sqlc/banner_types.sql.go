// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banner_types.sql

package sqlc

import (
	"context"
)

const createBannerType = `-- name: CreateBannerType :one
INSERT INTO banner_types
(title,title_ar)VALUES($1,$2) RETURNING id, title, title_ar
`

type CreateBannerTypeParams struct {
	Title   string `json:"title"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) CreateBannerType(ctx context.Context, arg CreateBannerTypeParams) (BannerType, error) {
	row := q.db.QueryRow(ctx, createBannerType, arg.Title, arg.TitleAr)
	var i BannerType
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const deleteBannerType = `-- name: DeleteBannerType :exec
DELETE FROM banner_types WHERE id=$1
`

func (q *Queries) DeleteBannerType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBannerType, id)
	return err
}

const getAllBannerTypes = `-- name: GetAllBannerTypes :many
SELECT id, title, title_ar FROM banner_types 
LIMIT $1 OFFSET $2
`

type GetAllBannerTypesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBannerTypes(ctx context.Context, arg GetAllBannerTypesParams) ([]BannerType, error) {
	rows, err := q.db.Query(ctx, getAllBannerTypes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BannerType
	for rows.Next() {
		var i BannerType
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBannerTargetUrl = `-- name: GetBannerTargetUrl :one
SELECT target_url 
FROM 
    banners 
WHERE
    id=$1
`

func (q *Queries) GetBannerTargetUrl(ctx context.Context, id int64) (string, error) {
	row := q.db.QueryRow(ctx, getBannerTargetUrl, id)
	var target_url string
	err := row.Scan(&target_url)
	return target_url, err
}

const getCountBannerTypes = `-- name: GetCountBannerTypes :one
SELECT COUNT(*) FROM banner_types
`

func (q *Queries) GetCountBannerTypes(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBannerTypes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleBannerType = `-- name: GetSingleBannerType :one
SELECT id, title, title_ar FROM banner_types WHERE id=$1
`

func (q *Queries) GetSingleBannerType(ctx context.Context, id int64) (BannerType, error) {
	row := q.db.QueryRow(ctx, getSingleBannerType, id)
	var i BannerType
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const updateBannerType = `-- name: UpdateBannerType :one
UPDATE banner_types 
SET
title_ar = $1,
title=$2
WHERE id=$3
RETURNING id, title, title_ar
`

type UpdateBannerTypeParams struct {
	TitleAr string `json:"title_ar"`
	Title   string `json:"title"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateBannerType(ctx context.Context, arg UpdateBannerTypeParams) (BannerType, error) {
	row := q.db.QueryRow(ctx, updateBannerType, arg.TitleAr, arg.Title, arg.ID)
	var i BannerType
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}
