// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: service_request.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceRequest = `-- name: CreateServiceRequest :one
INSERT INTO service_request (
    ref_no,
    company_types_id,
    is_branch,
    companies_id,
    request_date,
    services_id,
    requested_by,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, ref_no, company_types_id, is_branch, companies_id, request_date, services_id, requested_by, status
`

type CreateServiceRequestParams struct {
	RefNo          string      `json:"ref_no"`
	CompanyTypesID pgtype.Int8 `json:"company_types_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	CompaniesID    pgtype.Int8 `json:"companies_id"`
	RequestDate    time.Time   `json:"request_date"`
	ServicesID     int64       `json:"services_id"`
	RequestedBy    int64       `json:"requested_by"`
	Status         int64       `json:"status"`
}

func (q *Queries) CreateServiceRequest(ctx context.Context, arg CreateServiceRequestParams) (ServiceRequest, error) {
	row := q.db.QueryRow(ctx, createServiceRequest,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompaniesID,
		arg.RequestDate,
		arg.ServicesID,
		arg.RequestedBy,
		arg.Status,
	)
	var i ServiceRequest
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.RequestDate,
		&i.ServicesID,
		&i.RequestedBy,
		&i.Status,
	)
	return i, err
}

const deleteServiceRequest = `-- name: DeleteServiceRequest :exec
DELETE FROM service_request
WHERE id = $1
`

func (q *Queries) DeleteServiceRequest(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServiceRequest, id)
	return err
}

const getCountServiceRequests = `-- name: GetCountServiceRequests :one

SELECT COUNT(*) FROM service_request WHERE status != 6
`

// -- name: GetAllServiceRequests :many
// SELECT
//
//	sr.id,
//	sr.ref_no,
//	sr.company_types_id,
//	sr.is_branch,
//	sr.companies_id,
//	sr.request_date,
//	sr.services_id,
//	sr.requested_by,
//	sr.status,
//	p.id AS profile_id,
//	p.first_name,
//	p.last_name,
//	p.phone_number,
//	p.company_number,
//	s.title AS service_title,
//	ms.title AS main_service_title,
//	srh.reason
//
// FROM
//
//	service_request AS sr
//
// INNER JOIN
//
//	users AS u ON sr.requested_by = u.id
//
// INNER JOIN
//
//	profiles AS p ON u.profiles_id = p.id
//
// INNER JOIN
//
//	services AS s ON sr.services_id = s.id
//
// INNER JOIN
//
//	main_services AS ms ON s.main_services_id=ms.id
//
// LEFT JOIN
//
//	service_request_history AS srh ON srh.service_request_id = sr.id AND sr.status=srh.status AND srh.status!=6
//
// WHERE
//
//	sr.status != 6
//	AND s.status != 6
//	AND s.status != 5
//
// OFFSET $1 LIMIT  $2;
func (q *Queries) GetCountServiceRequests(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountServiceRequests)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getServiceRequestByID = `-- name: GetServiceRequestByID :one
SELECT id, ref_no, company_types_id, is_branch, companies_id, request_date, services_id, requested_by, status FROM service_request 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetServiceRequestByID(ctx context.Context, id int64) (ServiceRequest, error) {
	row := q.db.QueryRow(ctx, getServiceRequestByID, id)
	var i ServiceRequest
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.RequestDate,
		&i.ServicesID,
		&i.RequestedBy,
		&i.Status,
	)
	return i, err
}

const getServiceRequestsByStatus = `-- name: GetServiceRequestsByStatus :many

SELECT id, ref_no, company_types_id, is_branch, companies_id, request_date, services_id, requested_by, status FROM service_request 
WHERE status = $1
`

// -- name: GetServiceRequestDetailsByID :one
// SELECT
//
//	sr.id,
//	sr.ref_no,
//	sr.company_types_id,
//	sr.is_branch,
//	sr.companies_id,
//	sr.request_date,
//	sr.services_id,
//	sr.requested_by,
//	sr.status,
//	p.id AS profile_id,
//	p.first_name,
//	p.last_name,
//	p.phone_number,
//	p.company_number,
//	s.title AS service_title,
//	ms.title AS main_service_title,
//	srh.reason,
//	srh.id as service_request_id
//
// FROM
//
//	service_request AS sr
//
// INNER JOIN
//
//	users AS u ON sr.requested_by = u.id
//
// INNER JOIN
//
//	profiles AS p ON u.profiles_id = p.id
//
// INNER JOIN
//
//	services AS s ON sr.services_id = s.id
//
// INNER JOIN
//
//	main_services AS ms ON s.main_services_id=ms.id
//
// INNER JOIN
//
//	service_request_history AS srh ON srh.service_request_id = sr.id
//
// WHERE
//
//	sr.id=$1
//	AND sr.status= srh.status
//	AND sr.status != 6
//	AND s.status != 6
//	AND s.status != 5
//	AND srh.status!=6;
func (q *Queries) GetServiceRequestsByStatus(ctx context.Context, status int64) ([]ServiceRequest, error) {
	rows, err := q.db.Query(ctx, getServiceRequestsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceRequest
	for rows.Next() {
		var i ServiceRequest
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.RequestDate,
			&i.ServicesID,
			&i.RequestedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceRequestStatus = `-- name: UpdateServiceRequestStatus :one
UPDATE service_request
SET  
    status = $2
WHERE id = $1
RETURNING id, ref_no, company_types_id, is_branch, companies_id, request_date, services_id, requested_by, status
`

type UpdateServiceRequestStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateServiceRequestStatus(ctx context.Context, arg UpdateServiceRequestStatusParams) (ServiceRequest, error) {
	row := q.db.QueryRow(ctx, updateServiceRequestStatus, arg.ID, arg.Status)
	var i ServiceRequest
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.RequestDate,
		&i.ServicesID,
		&i.RequestedBy,
		&i.Status,
	)
	return i, err
}
