// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_reviews_common.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllReviewsByserviceCompanyID = `-- name: GetAllReviewsByserviceCompanyID :many
with x as (
select scr.id, p.first_name as "refiewer", scr.review, scr.rating  from services_companies_reviews scr LEFT JOIN users u ON scr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where scr.services_companies_id = $1 AND FALSE = $2 AND 1 = $3
UNION
select dcr.id, p.first_name as "refiewer", dcr.review, dcr.rating  from developer_company_reviews dcr LEFT JOIN users u ON dcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where dcr.developer_companies_id = $1 AND FALSE = $2 AND 2 = $3
UNION
select bcr.id, p.first_name as "refiewer", bcr.review, bcr.rating  from broker_company_reviews bcr LEFT JOIN users u ON bcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where bcr.broker_companies_id = $1 AND FALSE = $2 AND 3 = $3
UNION
select sbcr.id, p.first_name as "refiewer", sbcr.review, sbcr.rating  from service_branch_company_reviews sbcr LEFT JOIN users u ON sbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where sbcr.service_company_branches_id = $1 AND TRUE = $2 AND 1 = $3
UNION
select dbcr.id, p.first_name as "refiewer", dbcr.review, dbcr.rating  from developer_branch_company_reviews dbcr LEFT JOIN users u ON dbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where dbcr.developer_company_branches_id = $1 AND TRUE = $2 AND 2 = $3
UNION
select bbcr.id, p.first_name as "refiewer", bbcr.review, bbcr.rating  from broker_branch_company_reviews bbcr LEFT JOIN users u ON bbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where bbcr.broker_companies_branches_id = $1 AND TRUE = $2 AND 3 = $3) SELECT id, refiewer, review, rating FROM x LIMIT $4 OFFSET $5
`

type GetAllReviewsByserviceCompanyIDParams struct {
	ServicesCompaniesID int64       `json:"services_companies_id"`
	Column2             interface{} `json:"column_2"`
	Column3             interface{} `json:"column_3"`
	Limit               int32       `json:"limit"`
	Offset              int32       `json:"offset"`
}

type GetAllReviewsByserviceCompanyIDRow struct {
	ID       int64       `json:"id"`
	Refiewer pgtype.Text `json:"refiewer"`
	Review   string      `json:"review"`
	Rating   string      `json:"rating"`
}

func (q *Queries) GetAllReviewsByserviceCompanyID(ctx context.Context, arg GetAllReviewsByserviceCompanyIDParams) ([]GetAllReviewsByserviceCompanyIDRow, error) {
	rows, err := q.db.Query(ctx, getAllReviewsByserviceCompanyID,
		arg.ServicesCompaniesID,
		arg.Column2,
		arg.Column3,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReviewsByserviceCompanyIDRow
	for rows.Next() {
		var i GetAllReviewsByserviceCompanyIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Refiewer,
			&i.Review,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllReviewsByserviceCompanyID = `-- name: GetCountAllReviewsByserviceCompanyID :one
with x as (
select scr.id, p.first_name as "refiewer", scr.review, scr.rating  from services_companies_reviews scr LEFT JOIN users u ON scr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where scr.services_companies_id = $1 AND FALSE = $2 AND 1 = $3
UNION
select dcr.id, p.first_name as "refiewer", dcr.review, dcr.rating  from developer_company_reviews dcr LEFT JOIN users u ON dcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where dcr.developer_companies_id = $1 AND FALSE = $2 AND 2 = $3
UNION
select bcr.id, p.first_name as "refiewer", bcr.review, bcr.rating  from broker_company_reviews bcr LEFT JOIN users u ON bcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where bcr.broker_companies_id = $1 AND FALSE = $2 AND 3 = $3
UNION
select sbcr.id, p.first_name as "refiewer", sbcr.review, sbcr.rating  from service_branch_company_reviews sbcr LEFT JOIN users u ON sbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where sbcr.service_company_branches_id = $1 AND TRUE = $2 AND 1 = $3
UNION
select dbcr.id, p.first_name as "refiewer", dbcr.review, dbcr.rating  from developer_branch_company_reviews dbcr LEFT JOIN users u ON dbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where dbcr.developer_company_branches_id = $1 AND TRUE = $2 AND 2 = $3
UNION
select bbcr.id, p.first_name as "refiewer", bbcr.review, bbcr.rating  from broker_branch_company_reviews bbcr LEFT JOIN users u ON bbcr.users_id = u.id LEFT JOIN profiles p ON u.profiles_id = p.id where bbcr.broker_companies_branches_id = $1 AND TRUE = $2 AND 3 = $3) SELECT count(*) FROM x
`

type GetCountAllReviewsByserviceCompanyIDParams struct {
	ServicesCompaniesID int64       `json:"services_companies_id"`
	Column2             interface{} `json:"column_2"`
	Column3             interface{} `json:"column_3"`
}

func (q *Queries) GetCountAllReviewsByserviceCompanyID(ctx context.Context, arg GetCountAllReviewsByserviceCompanyIDParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllReviewsByserviceCompanyID, arg.ServicesCompaniesID, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}
