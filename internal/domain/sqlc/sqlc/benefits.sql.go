// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: benefits.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBenefit = `-- name: CreateBenefit :one
INSERT INTO benefits (
    career,
    title,
    title_ar,
    icon_url,
    created_at,
    status,
    updated_at
 ) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, career, title, title_ar, icon_url, created_at, updated_at, status
`

type CreateBenefitParams struct {
	Career    int64              `json:"career"`
	Title     string             `json:"title"`
	TitleAr   pgtype.Text        `json:"title_ar"`
	IconUrl   pgtype.Text        `json:"icon_url"`
	CreatedAt time.Time          `json:"created_at"`
	Status    int64              `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateBenefit(ctx context.Context, arg CreateBenefitParams) (Benefit, error) {
	row := q.db.QueryRow(ctx, createBenefit,
		arg.Career,
		arg.Title,
		arg.TitleAr,
		arg.IconUrl,
		arg.CreatedAt,
		arg.Status,
		arg.UpdatedAt,
	)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.Career,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getAllBenefits = `-- name: GetAllBenefits :many
SELECT benefits.id, benefits.career, benefits.title, benefits.title_ar, benefits.icon_url, benefits.created_at, benefits.updated_at, benefits.status FROM benefits where status!=6 and status!=5 
ORDER BY updated_at DESC 
LIMIT $1 OFFSET $2
`

type GetAllBenefitsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllBenefitsRow struct {
	Benefit Benefit `json:"benefit"`
}

func (q *Queries) GetAllBenefits(ctx context.Context, arg GetAllBenefitsParams) ([]GetAllBenefitsRow, error) {
	rows, err := q.db.Query(ctx, getAllBenefits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBenefitsRow
	for rows.Next() {
		var i GetAllBenefitsRow
		if err := rows.Scan(
			&i.Benefit.ID,
			&i.Benefit.Career,
			&i.Benefit.Title,
			&i.Benefit.TitleAr,
			&i.Benefit.IconUrl,
			&i.Benefit.CreatedAt,
			&i.Benefit.UpdatedAt,
			&i.Benefit.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBenefitsByCareer = `-- name: GetAllBenefitsByCareer :many
SELECT id, career, title, title_ar, icon_url, created_at, updated_at, status FROM benefits WHERE career= $1 and status!=6
`

func (q *Queries) GetAllBenefitsByCareer(ctx context.Context, career int64) ([]Benefit, error) {
	rows, err := q.db.Query(ctx, getAllBenefitsByCareer, career)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Benefit
	for rows.Next() {
		var i Benefit
		if err := rows.Scan(
			&i.ID,
			&i.Career,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBenefitById = `-- name: GetBenefitById :one
SELECT id, career, title, title_ar, icon_url, created_at, updated_at, status FROM benefits WHERE id = $1
`

func (q *Queries) GetBenefitById(ctx context.Context, id int64) (Benefit, error) {
	row := q.db.QueryRow(ctx, getBenefitById, id)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.Career,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getBenefitsCount = `-- name: GetBenefitsCount :one
select count(*) from benefits where status != 5 AND status!=6
`

func (q *Queries) GetBenefitsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getBenefitsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBenefitById = `-- name: UpdateBenefitById :one
UPDATE benefits SET
    title = $1,
    title_ar = $2,
    icon_url = $3,
    updated_at = $4
WHERE id = $5
RETURNING id, career, title, title_ar, icon_url, created_at, updated_at, status
`

type UpdateBenefitByIdParams struct {
	Title     string             `json:"title"`
	TitleAr   pgtype.Text        `json:"title_ar"`
	IconUrl   pgtype.Text        `json:"icon_url"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        int64              `json:"id"`
}

func (q *Queries) UpdateBenefitById(ctx context.Context, arg UpdateBenefitByIdParams) (Benefit, error) {
	row := q.db.QueryRow(ctx, updateBenefitById,
		arg.Title,
		arg.TitleAr,
		arg.IconUrl,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.Career,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateBenefitStatus = `-- name: UpdateBenefitStatus :one
UPDATE benefits SET
     status = $1
WHERE id = $2
RETURNING id, career, title, title_ar, icon_url, created_at, updated_at, status
`

type UpdateBenefitStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateBenefitStatus(ctx context.Context, arg UpdateBenefitStatusParams) (Benefit, error) {
	row := q.db.QueryRow(ctx, updateBenefitStatus, arg.Status, arg.ID)
	var i Benefit
	err := row.Scan(
		&i.ID,
		&i.Career,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
