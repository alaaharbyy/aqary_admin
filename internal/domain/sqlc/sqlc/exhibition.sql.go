// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeStatusOfExhibitionByID = `-- name: ChangeStatusOfExhibitionByID :exec
UPDATE exhibitions 
SET 
	event_status=$2, 
	updated_at=$3 
WHERE
	id=$1
`

type ChangeStatusOfExhibitionByIDParams struct {
	ID          int64     `json:"id"`
	EventStatus int64     `json:"event_status"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) ChangeStatusOfExhibitionByID(ctx context.Context, arg ChangeStatusOfExhibitionByIDParams) error {
	_, err := q.db.Exec(ctx, changeStatusOfExhibitionByID, arg.ID, arg.EventStatus, arg.UpdatedAt)
	return err
}

const createExhibition = `-- name: CreateExhibition :one
INSERT INTO exhibitions (
    ref_no,
    self_hosted,
    hosted_by_id,
    is_host_branch,
    hosted_company_type,
    exhibition_type,
    exhibition_category,
    title,
    start_date,
    end_date,
    countries_id,
    states_id,
    cities_id,
    community_id,
    sub_communities_id,
    specific_address,
    mobile,
    email,
    whatsapp,
    registration_link,
    registration_fees,
    event_banner_url,
    event_logo_url,
    promotion_video,
    description,
    description_ar,
    event_status,
    created_by,
    created_at,
    updated_at,
    facilities,
    is_verified,
    no_of_booths, 
    no_of_floors, 
    location_url, 
    addresses_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19,
    $20,
    $21,
    $22,
    $23,
    $24,
    $25,
    $26,
    $27,
    $28,
    $29,
    $30,
    $31,
    $32,
    $33,
    $34, 
    $35,
    $36
)RETURNING id, ref_no, is_verified, self_hosted, hosted_by_id, is_host_branch, exhibition_type, exhibition_category, title, start_date, end_date, countries_id, states_id, cities_id, community_id, specific_address, mobile, email, whatsapp, registration_link, registration_fees, event_banner_url, event_logo_url, promotion_video, description, description_ar, event_status, created_by, created_at, updated_at, hosted_company_type, facilities, no_of_booths, sub_communities_id, no_of_floors, location_url, addresses_id
`

type CreateExhibitionParams struct {
	RefNo              string        `json:"ref_no"`
	SelfHosted         pgtype.Bool   `json:"self_hosted"`
	HostedByID         pgtype.Int8   `json:"hosted_by_id"`
	IsHostBranch       pgtype.Bool   `json:"is_host_branch"`
	HostedCompanyType  int64         `json:"hosted_company_type"`
	ExhibitionType     int64         `json:"exhibition_type"`
	ExhibitionCategory int64         `json:"exhibition_category"`
	Title              string        `json:"title"`
	StartDate          time.Time     `json:"start_date"`
	EndDate            time.Time     `json:"end_date"`
	CountriesID        int64         `json:"countries_id"`
	StatesID           int64         `json:"states_id"`
	CitiesID           int64         `json:"cities_id"`
	CommunityID        int64         `json:"community_id"`
	SubCommunitiesID   int64         `json:"sub_communities_id"`
	SpecificAddress    string        `json:"specific_address"`
	Mobile             string        `json:"mobile"`
	Email              string        `json:"email"`
	Whatsapp           string        `json:"whatsapp"`
	RegistrationLink   string        `json:"registration_link"`
	RegistrationFees   pgtype.Float8 `json:"registration_fees"`
	EventBannerUrl     string        `json:"event_banner_url"`
	EventLogoUrl       string        `json:"event_logo_url"`
	PromotionVideo     pgtype.Text   `json:"promotion_video"`
	Description        string        `json:"description"`
	DescriptionAr      pgtype.Text   `json:"description_ar"`
	EventStatus        int64         `json:"event_status"`
	CreatedBy          int64         `json:"created_by"`
	CreatedAt          time.Time     `json:"created_at"`
	UpdatedAt          time.Time     `json:"updated_at"`
	Facilities         []int64       `json:"facilities"`
	IsVerified         pgtype.Bool   `json:"is_verified"`
	NoOfBooths         pgtype.Int8   `json:"no_of_booths"`
	NoOfFloors         pgtype.Int8   `json:"no_of_floors"`
	LocationUrl        string        `json:"location_url"`
	AddressesID        int64         `json:"addresses_id"`
}

func (q *Queries) CreateExhibition(ctx context.Context, arg CreateExhibitionParams) (Exhibition, error) {
	row := q.db.QueryRow(ctx, createExhibition,
		arg.RefNo,
		arg.SelfHosted,
		arg.HostedByID,
		arg.IsHostBranch,
		arg.HostedCompanyType,
		arg.ExhibitionType,
		arg.ExhibitionCategory,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunityID,
		arg.SubCommunitiesID,
		arg.SpecificAddress,
		arg.Mobile,
		arg.Email,
		arg.Whatsapp,
		arg.RegistrationLink,
		arg.RegistrationFees,
		arg.EventBannerUrl,
		arg.EventLogoUrl,
		arg.PromotionVideo,
		arg.Description,
		arg.DescriptionAr,
		arg.EventStatus,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Facilities,
		arg.IsVerified,
		arg.NoOfBooths,
		arg.NoOfFloors,
		arg.LocationUrl,
		arg.AddressesID,
	)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.IsVerified,
		&i.SelfHosted,
		&i.HostedByID,
		&i.IsHostBranch,
		&i.ExhibitionType,
		&i.ExhibitionCategory,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SpecificAddress,
		&i.Mobile,
		&i.Email,
		&i.Whatsapp,
		&i.RegistrationLink,
		&i.RegistrationFees,
		&i.EventBannerUrl,
		&i.EventLogoUrl,
		&i.PromotionVideo,
		&i.Description,
		&i.DescriptionAr,
		&i.EventStatus,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HostedCompanyType,
		&i.Facilities,
		&i.NoOfBooths,
		&i.SubCommunitiesID,
		&i.NoOfFloors,
		&i.LocationUrl,
		&i.AddressesID,
	)
	return i, err
}

const createExhibitionBooth = `-- name: CreateExhibitionBooth :one
INSERT INTO exhibition_booths (
	exhibitions_id, 
	floor_no, 
	no_of_booths, 
	interactive_link
) VALUES(
	$1, 
	$2, 
	$3, 
	$4 
)RETURNING id, exhibitions_id, floor_no, no_of_booths, interactive_link
`

type CreateExhibitionBoothParams struct {
	ExhibitionsID   int64       `json:"exhibitions_id"`
	FloorNo         pgtype.Text `json:"floor_no"`
	NoOfBooths      pgtype.Int8 `json:"no_of_booths"`
	InteractiveLink pgtype.Text `json:"interactive_link"`
}

func (q *Queries) CreateExhibitionBooth(ctx context.Context, arg CreateExhibitionBoothParams) (ExhibitionBooth, error) {
	row := q.db.QueryRow(ctx, createExhibitionBooth,
		arg.ExhibitionsID,
		arg.FloorNo,
		arg.NoOfBooths,
		arg.InteractiveLink,
	)
	var i ExhibitionBooth
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.FloorNo,
		&i.NoOfBooths,
		&i.InteractiveLink,
	)
	return i, err
}

const deleteExhibitionBooth = `-- name: DeleteExhibitionBooth :exec
DELETE FROM exhibition_booths 
WHERE id=$1
`

func (q *Queries) DeleteExhibitionBooth(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExhibitionBooth, id)
	return err
}

const getAllExhibition = `-- name: GetAllExhibition :many
SELECT 
	ex.id,
	ex.ref_no,
	ex.title,
	c.country, 
	ex.specific_address AS "address",
	ex.start_date,
	ex.end_date, 
	ex.event_banner_url AS "banner",
	CASE 
		WHEN ex.hosted_company_type=3 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	services_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
		 WHEN ex.hosted_company_type=3 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	service_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )
	    WHEN ex.hosted_company_type=2 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	developer_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
		 WHEN ex.hosted_company_type=2 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	developer_company_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =false THEN( 
																		select company_name
																		FROM
																	    	product_companies 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
	    WHEN ex.hosted_company_type=4 AND ex.is_host_branch =true THEN( 
																		select company_name
																		FROM
																	    	product_companies_branches 	
																	    WHERE 
																	    	id=ex.hosted_by_id AND status!=6
																	  )  
	END AS "hosted by"
FROM 
	exhibitions ex 
INNER JOIN 
	countries c
			 ON c.id=ex.countries_id 
WHERE ex.event_status !=5
ORDER BY ex.id DESC 
LIMIT $1 
OFFSET $2
`

type GetAllExhibitionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllExhibitionRow struct {
	ID        int64       `json:"id"`
	RefNo     string      `json:"ref_no"`
	Title     string      `json:"title"`
	Country   string      `json:"country"`
	Address   string      `json:"address"`
	StartDate time.Time   `json:"start_date"`
	EndDate   time.Time   `json:"end_date"`
	Banner    string      `json:"banner"`
	HostedBy  interface{} `json:"hosted by"`
}

func (q *Queries) GetAllExhibition(ctx context.Context, arg GetAllExhibitionParams) ([]GetAllExhibitionRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibition, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionRow
	for rows.Next() {
		var i GetAllExhibitionRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Title,
			&i.Country,
			&i.Address,
			&i.StartDate,
			&i.EndDate,
			&i.Banner,
			&i.HostedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllExhibitionBooths = `-- name: GetAllExhibitionBooths :many
SELECT eb.id, eb.exhibitions_id, eb.floor_no, eb.no_of_booths, eb.interactive_link FROM exhibition_booths eb
INNER JOIN exhibitions 
ON exhibitions.id = eb.exhibitions_id AND exhibitions.event_status !=5 
ORDER BY eb.id DESC 
LIMIT $1
OFFSET $2
`

type GetAllExhibitionBoothsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllExhibitionBooths(ctx context.Context, arg GetAllExhibitionBoothsParams) ([]ExhibitionBooth, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionBooths, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExhibitionBooth
	for rows.Next() {
		var i ExhibitionBooth
		if err := rows.Scan(
			&i.ID,
			&i.ExhibitionsID,
			&i.FloorNo,
			&i.NoOfBooths,
			&i.InteractiveLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllcompaniesForExhibition = `-- name: GetAllcompaniesForExhibition :many
SELECT id AS company_id,false AS is_branch,3 AS company_type,company_name
FROM services_companies 
WHERE status!=6
UNION 
SELECT id AS company_id,true AS is_branch,3 AS company_type,company_name
FROM service_company_branches  
WHERE status!=6
UNION 
SELECT id AS company_id,false AS is_branch,2 AS company_type,company_name
FROM developer_companies 
WHERE status!=6
UNION
SELECT id AS company_id,true AS is_branch,2 AS company_type,company_name
FROM developer_company_branches
WHERE status!=6 
UNION
SELECT id AS company_id,false AS is_branch,4 AS company_type,company_name
FROM product_companies 
WHERE status!=6 
UNION
SELECT id AS company_id,true AS is_branch,4 AS company_type,company_name
FROM product_companies_branches 
WHERE status!=6
`

type GetAllcompaniesForExhibitionRow struct {
	CompanyID   int64       `json:"company_id"`
	IsBranch    pgtype.Bool `json:"is_branch"`
	CompanyType pgtype.Int8 `json:"company_type"`
	CompanyName string      `json:"company_name"`
}

func (q *Queries) GetAllcompaniesForExhibition(ctx context.Context) ([]GetAllcompaniesForExhibitionRow, error) {
	rows, err := q.db.Query(ctx, getAllcompaniesForExhibition)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllcompaniesForExhibitionRow
	for rows.Next() {
		var i GetAllcompaniesForExhibitionRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.IsBranch,
			&i.CompanyType,
			&i.CompanyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionBoothById = `-- name: GetExhibitionBoothById :one
SELECT eb.id, eb.exhibitions_id, eb.floor_no, eb.no_of_booths, eb.interactive_link FROM exhibition_booths eb
INNER JOIN exhibitions 
ON exhibitions.id = eb.exhibitions_id AND exhibitions.event_status !=5 
WHERE eb.id=$1
`

func (q *Queries) GetExhibitionBoothById(ctx context.Context, id int64) (ExhibitionBooth, error) {
	row := q.db.QueryRow(ctx, getExhibitionBoothById, id)
	var i ExhibitionBooth
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.FloorNo,
		&i.NoOfBooths,
		&i.InteractiveLink,
	)
	return i, err
}

const getExhibitionByID = `-- name: GetExhibitionByID :one
SELECT id, ref_no, is_verified, self_hosted, hosted_by_id, is_host_branch, exhibition_type, exhibition_category, title, start_date, end_date, countries_id, states_id, cities_id, community_id, specific_address, mobile, email, whatsapp, registration_link, registration_fees, event_banner_url, event_logo_url, promotion_video, description, description_ar, event_status, created_by, created_at, updated_at, hosted_company_type, facilities, no_of_booths, sub_communities_id, no_of_floors, location_url, addresses_id
	FROM exhibitions 
WHERE 
	exhibitions.id=$1 AND event_status!=5
`

func (q *Queries) GetExhibitionByID(ctx context.Context, id int64) (Exhibition, error) {
	row := q.db.QueryRow(ctx, getExhibitionByID, id)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.IsVerified,
		&i.SelfHosted,
		&i.HostedByID,
		&i.IsHostBranch,
		&i.ExhibitionType,
		&i.ExhibitionCategory,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SpecificAddress,
		&i.Mobile,
		&i.Email,
		&i.Whatsapp,
		&i.RegistrationLink,
		&i.RegistrationFees,
		&i.EventBannerUrl,
		&i.EventLogoUrl,
		&i.PromotionVideo,
		&i.Description,
		&i.DescriptionAr,
		&i.EventStatus,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HostedCompanyType,
		&i.Facilities,
		&i.NoOfBooths,
		&i.SubCommunitiesID,
		&i.NoOfFloors,
		&i.LocationUrl,
		&i.AddressesID,
	)
	return i, err
}

const getNumberOfAllExhibitions = `-- name: GetNumberOfAllExhibitions :one
SELECT 
	COUNT(id) 
FROM 
	exhibitions  
WHERE 
	event_status!=5
`

func (q *Queries) GetNumberOfAllExhibitions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAllExhibitions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateExhibitionBooth = `-- name: UpdateExhibitionBooth :one
UPDATE exhibition_booths 
SET 
	exhibitions_id=$2, 
	floor_no=$3, 
	no_of_booths=$4, 
	interactive_link=$5
WHERE id=$1 
RETURNING id, exhibitions_id, floor_no, no_of_booths, interactive_link
`

type UpdateExhibitionBoothParams struct {
	ID              int64       `json:"id"`
	ExhibitionsID   int64       `json:"exhibitions_id"`
	FloorNo         pgtype.Text `json:"floor_no"`
	NoOfBooths      pgtype.Int8 `json:"no_of_booths"`
	InteractiveLink pgtype.Text `json:"interactive_link"`
}

func (q *Queries) UpdateExhibitionBooth(ctx context.Context, arg UpdateExhibitionBoothParams) (ExhibitionBooth, error) {
	row := q.db.QueryRow(ctx, updateExhibitionBooth,
		arg.ID,
		arg.ExhibitionsID,
		arg.FloorNo,
		arg.NoOfBooths,
		arg.InteractiveLink,
	)
	var i ExhibitionBooth
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.FloorNo,
		&i.NoOfBooths,
		&i.InteractiveLink,
	)
	return i, err
}

const updateExhibitionByID = `-- name: UpdateExhibitionByID :one
UPDATE exhibitions
SET 
    self_hosted = $1,
    hosted_by_id = $2,
    is_host_branch = $3,  
    exhibition_type = $4, 
    exhibition_category = $5, 
    title = $6, 
    start_date = $7, 
    end_date = $8, 
    countries_id = $9, 
    states_id = $10,
    cities_id = $11, 
    community_id = $12, 
    specific_address = $13, 
    mobile = $14, 
    email = $15, 
    whatsapp = $16, 
    registration_link = $17,
    registration_fees = $18, 
    event_banner_url = $19, 
    event_logo_url = $20, 
    promotion_video = $21, 
    description = $22, 
    description_ar = $23, 
    no_of_booths = $24,
    hosted_company_type = $25,
    facilities = $26,
    sub_communities_id = $27,
    no_of_floors = $28,
    location_url = $29, 
    addresses_id=$30, 
    updated_at=$31
WHERE
    id = $32 AND event_status != 5 
RETURNING id, ref_no, is_verified, self_hosted, hosted_by_id, is_host_branch, exhibition_type, exhibition_category, title, start_date, end_date, countries_id, states_id, cities_id, community_id, specific_address, mobile, email, whatsapp, registration_link, registration_fees, event_banner_url, event_logo_url, promotion_video, description, description_ar, event_status, created_by, created_at, updated_at, hosted_company_type, facilities, no_of_booths, sub_communities_id, no_of_floors, location_url, addresses_id
`

type UpdateExhibitionByIDParams struct {
	SelfHosted         pgtype.Bool   `json:"self_hosted"`
	HostedByID         pgtype.Int8   `json:"hosted_by_id"`
	IsHostBranch       pgtype.Bool   `json:"is_host_branch"`
	ExhibitionType     int64         `json:"exhibition_type"`
	ExhibitionCategory int64         `json:"exhibition_category"`
	Title              string        `json:"title"`
	StartDate          time.Time     `json:"start_date"`
	EndDate            time.Time     `json:"end_date"`
	CountriesID        int64         `json:"countries_id"`
	StatesID           int64         `json:"states_id"`
	CitiesID           int64         `json:"cities_id"`
	CommunityID        int64         `json:"community_id"`
	SpecificAddress    string        `json:"specific_address"`
	Mobile             string        `json:"mobile"`
	Email              string        `json:"email"`
	Whatsapp           string        `json:"whatsapp"`
	RegistrationLink   string        `json:"registration_link"`
	RegistrationFees   pgtype.Float8 `json:"registration_fees"`
	EventBannerUrl     string        `json:"event_banner_url"`
	EventLogoUrl       string        `json:"event_logo_url"`
	PromotionVideo     pgtype.Text   `json:"promotion_video"`
	Description        string        `json:"description"`
	DescriptionAr      pgtype.Text   `json:"description_ar"`
	NoOfBooths         pgtype.Int8   `json:"no_of_booths"`
	HostedCompanyType  int64         `json:"hosted_company_type"`
	Facilities         []int64       `json:"facilities"`
	SubCommunitiesID   int64         `json:"sub_communities_id"`
	NoOfFloors         pgtype.Int8   `json:"no_of_floors"`
	LocationUrl        string        `json:"location_url"`
	AddressesID        int64         `json:"addresses_id"`
	UpdatedAt          time.Time     `json:"updated_at"`
	ID                 int64         `json:"id"`
}

func (q *Queries) UpdateExhibitionByID(ctx context.Context, arg UpdateExhibitionByIDParams) (Exhibition, error) {
	row := q.db.QueryRow(ctx, updateExhibitionByID,
		arg.SelfHosted,
		arg.HostedByID,
		arg.IsHostBranch,
		arg.ExhibitionType,
		arg.ExhibitionCategory,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunityID,
		arg.SpecificAddress,
		arg.Mobile,
		arg.Email,
		arg.Whatsapp,
		arg.RegistrationLink,
		arg.RegistrationFees,
		arg.EventBannerUrl,
		arg.EventLogoUrl,
		arg.PromotionVideo,
		arg.Description,
		arg.DescriptionAr,
		arg.NoOfBooths,
		arg.HostedCompanyType,
		arg.Facilities,
		arg.SubCommunitiesID,
		arg.NoOfFloors,
		arg.LocationUrl,
		arg.AddressesID,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Exhibition
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.IsVerified,
		&i.SelfHosted,
		&i.HostedByID,
		&i.IsHostBranch,
		&i.ExhibitionType,
		&i.ExhibitionCategory,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SpecificAddress,
		&i.Mobile,
		&i.Email,
		&i.Whatsapp,
		&i.RegistrationLink,
		&i.RegistrationFees,
		&i.EventBannerUrl,
		&i.EventLogoUrl,
		&i.PromotionVideo,
		&i.Description,
		&i.DescriptionAr,
		&i.EventStatus,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HostedCompanyType,
		&i.Facilities,
		&i.NoOfBooths,
		&i.SubCommunitiesID,
		&i.NoOfFloors,
		&i.LocationUrl,
		&i.AddressesID,
	)
	return i, err
}

const updateExhibitionsMedia = `-- name: UpdateExhibitionsMedia :one
UPDATE exhibitions_media
	SET
		media_url=$1,
		updated_at=$2
	WHERE exhibitions_media.id=$3 AND ( select event_status from exhibitions where  exhibitions.id = $4) != 5
RETURNING id, exhibitions_id, gallery_type, media_type, media_url, created_at, updated_at
`

type UpdateExhibitionsMediaParams struct {
	MediaUrl  []string           `json:"media_url"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
	ID        int64              `json:"id"`
	ID_2      int64              `json:"id_2"`
}

func (q *Queries) UpdateExhibitionsMedia(ctx context.Context, arg UpdateExhibitionsMediaParams) (ExhibitionsMedium, error) {
	row := q.db.QueryRow(ctx, updateExhibitionsMedia,
		arg.MediaUrl,
		arg.UpdatedAt,
		arg.ID,
		arg.ID_2,
	)
	var i ExhibitionsMedium
	err := row.Scan(
		&i.ID,
		&i.ExhibitionsID,
		&i.GalleryType,
		&i.MediaType,
		&i.MediaUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
