// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: specialization.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCareerSpecialization = `-- name: CreateCareerSpecialization :one
INSERT INTO specialization (title, title_ar)
VALUES ($1, $2)
RETURNING id, title, title_ar
`

type CreateCareerSpecializationParams struct {
	Title   string      `json:"title"`
	TitleAr pgtype.Text `json:"title_ar"`
}

func (q *Queries) CreateCareerSpecialization(ctx context.Context, arg CreateCareerSpecializationParams) (Specialization, error) {
	row := q.db.QueryRow(ctx, createCareerSpecialization, arg.Title, arg.TitleAr)
	var i Specialization
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const getAllSpecialization = `-- name: GetAllSpecialization :many
SELECT id, title, title_ar FROM specialization 
ORDER BY id DESC
`

func (q *Queries) GetAllSpecialization(ctx context.Context) ([]Specialization, error) {
	rows, err := q.db.Query(ctx, getAllSpecialization)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialization
	for rows.Next() {
		var i Specialization
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSpecializations = `-- name: GetAllSpecializations :many
SELECT id, title, title_ar FROM specialization
`

func (q *Queries) GetAllSpecializations(ctx context.Context) ([]Specialization, error) {
	rows, err := q.db.Query(ctx, getAllSpecializations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Specialization
	for rows.Next() {
		var i Specialization
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCareerSpecializationById = `-- name: GetCareerSpecializationById :one
SELECT id, title, title_ar FROM specialization where id=$1
`

func (q *Queries) GetCareerSpecializationById(ctx context.Context, id int64) (Specialization, error) {
	row := q.db.QueryRow(ctx, getCareerSpecializationById, id)
	var i Specialization
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const getCareerSpecializationByTitle = `-- name: GetCareerSpecializationByTitle :one
SELECT id, title, title_ar FROM specialization where title=$1
`

func (q *Queries) GetCareerSpecializationByTitle(ctx context.Context, title string) (Specialization, error) {
	row := q.db.QueryRow(ctx, getCareerSpecializationByTitle, title)
	var i Specialization
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}

const updateCareerSpecialization = `-- name: UpdateCareerSpecialization :one
UPDATE specialization
SET title = $1, title_ar = $2
WHERE id = $3
RETURNING id, title, title_ar
`

type UpdateCareerSpecializationParams struct {
	Title   string      `json:"title"`
	TitleAr pgtype.Text `json:"title_ar"`
	ID      int64       `json:"id"`
}

func (q *Queries) UpdateCareerSpecialization(ctx context.Context, arg UpdateCareerSpecializationParams) (Specialization, error) {
	row := q.db.QueryRow(ctx, updateCareerSpecialization, arg.Title, arg.TitleAr, arg.ID)
	var i Specialization
	err := row.Scan(&i.ID, &i.Title, &i.TitleAr)
	return i, err
}
