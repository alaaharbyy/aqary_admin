// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_other_contact.sql

package sqlc

import (
	"context"
)

const checkOtherContact = `-- name: CheckOtherContact :one
SELECT id, contacts_id, relationship, other_contacts_id, date_added FROM contacts_other_contact WHERE contacts_id = $1 AND other_contacts_id = $2 LIMIT 1
`

type CheckOtherContactParams struct {
	ContactsID      int64 `json:"contacts_id"`
	OtherContactsID int64 `json:"other_contacts_id"`
}

func (q *Queries) CheckOtherContact(ctx context.Context, arg CheckOtherContactParams) (ContactsOtherContact, error) {
	row := q.db.QueryRow(ctx, checkOtherContact, arg.ContactsID, arg.OtherContactsID)
	var i ContactsOtherContact
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.Relationship,
		&i.OtherContactsID,
		&i.DateAdded,
	)
	return i, err
}

const updateMultipleContactsOtherContactConactID = `-- name: UpdateMultipleContactsOtherContactConactID :one
UPDATE contacts_other_contact SET contacts_id = $1 WHERE id = ANY($2::bigint[]) RETURNING id, contacts_id, relationship, other_contacts_id, date_added
`

type UpdateMultipleContactsOtherContactConactIDParams struct {
	ContactsID int64   `json:"contacts_id"`
	Column2    []int64 `json:"column_2"`
}

func (q *Queries) UpdateMultipleContactsOtherContactConactID(ctx context.Context, arg UpdateMultipleContactsOtherContactConactIDParams) (ContactsOtherContact, error) {
	row := q.db.QueryRow(ctx, updateMultipleContactsOtherContactConactID, arg.ContactsID, arg.Column2)
	var i ContactsOtherContact
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.Relationship,
		&i.OtherContactsID,
		&i.DateAdded,
	)
	return i, err
}
