// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_broker_agent_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialBrokerAgentPropertyDoc = `-- name: CreateIndustrialBrokerAgentPropertyDoc :one
INSERT INTO industrial_broker_agent_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    industrial_broker_agent_properties_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_id, status, is_branch
`

type CreateIndustrialBrokerAgentPropertyDocParams struct {
	DocumentsCategoryID               int64       `json:"documents_category_id"`
	DocumentsSubcategoryID            int64       `json:"documents_subcategory_id"`
	FileUrl                           []string    `json:"file_url"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	Status                            int64       `json:"status"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrialBrokerAgentPropertyDoc(ctx context.Context, arg CreateIndustrialBrokerAgentPropertyDocParams) (IndustrialBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createIndustrialBrokerAgentPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialBrokerAgentPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrialBrokerAgentPropertyDoc = `-- name: DeleteIndustrialBrokerAgentPropertyDoc :exec
DELETE FROM industrial_broker_agent_properties_documents
Where id = $1
`

func (q *Queries) DeleteIndustrialBrokerAgentPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialBrokerAgentPropertyDoc, id)
	return err
}

const getAllIndustrialBrokerAgentPropertyDoc = `-- name: GetAllIndustrialBrokerAgentPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_id, status, is_branch FROM industrial_broker_agent_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialBrokerAgentPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyDoc(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyDocParams) ([]IndustrialBrokerAgentPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesDocument
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialBrokerAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialBrokerAgentPropertyDocByPropertyId = `-- name: GetAllIndustrialBrokerAgentPropertyDocByPropertyId :many
SELECT
industrial_broker_agent_properties_documents.id, industrial_broker_agent_properties_documents.documents_category_id, industrial_broker_agent_properties_documents.documents_subcategory_id, industrial_broker_agent_properties_documents.file_url, industrial_broker_agent_properties_documents.created_at, industrial_broker_agent_properties_documents.updated_at, industrial_broker_agent_properties_documents.industrial_broker_agent_properties_id, industrial_broker_agent_properties_documents.status, industrial_broker_agent_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_broker_agent_properties_documents
LEFT JOIN documents_category ON documents_category.id = industrial_broker_agent_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_broker_agent_properties_documents.documents_subcategory_id
WHERE
industrial_broker_agent_properties_id = $3
ORDER BY
industrial_broker_agent_properties_documents.id OFFSET $2
LIMIT $1
`

type GetAllIndustrialBrokerAgentPropertyDocByPropertyIdParams struct {
	Limit                             int32 `json:"limit"`
	Offset                            int32 `json:"offset"`
	IndustrialBrokerAgentPropertiesID int64 `json:"industrial_broker_agent_properties_id"`
}

type GetAllIndustrialBrokerAgentPropertyDocByPropertyIdRow struct {
	ID                                int64       `json:"id"`
	DocumentsCategoryID               int64       `json:"documents_category_id"`
	DocumentsSubcategoryID            int64       `json:"documents_subcategory_id"`
	FileUrl                           []string    `json:"file_url"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	Status                            int64       `json:"status"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
	Category                          pgtype.Text `json:"category"`
	SubCategory                       pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllIndustrialBrokerAgentPropertyDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyDocByPropertyId, arg.Limit, arg.Offset, arg.IndustrialBrokerAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialBrokerAgentPropertyDocByPropertyIdRow
	for rows.Next() {
		var i GetAllIndustrialBrokerAgentPropertyDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialBrokerAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountIndustrialBrokerAgentPropertyDocByPropertyId = `-- name: GetCountIndustrialBrokerAgentPropertyDocByPropertyId :one
SELECT count(*) FROM industrial_broker_agent_properties_documents
WHERE industrial_broker_agent_properties_id = $1
`

func (q *Queries) GetCountIndustrialBrokerAgentPropertyDocByPropertyId(ctx context.Context, industrialBrokerAgentPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountIndustrialBrokerAgentPropertyDocByPropertyId, industrialBrokerAgentPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIndustrialBrokerAgentPropertyDoc = `-- name: GetIndustrialBrokerAgentPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_id, status, is_branch FROM industrial_broker_agent_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialBrokerAgentPropertyDoc(ctx context.Context, limit int32) (IndustrialBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyDoc, limit)
	var i IndustrialBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT  id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_id, status, is_branch FROM industrial_broker_agent_properties_documents
WHERE industrial_broker_agent_properties_id = $1
AND
 documents_category_id = $2
AND
documents_subcategory_id = $3
`

type GetIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	IndustrialBrokerAgentPropertiesID int64 `json:"industrial_broker_agent_properties_id"`
	DocumentsCategoryID               int64 `json:"documents_category_id"`
	DocumentsSubcategoryID            int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (IndustrialBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.IndustrialBrokerAgentPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i IndustrialBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyDocById = `-- name: GetIndustrialBrokerAgentPropertyDocById :one

SELECT
industrial_broker_agent_properties_documents.id, industrial_broker_agent_properties_documents.documents_category_id, industrial_broker_agent_properties_documents.documents_subcategory_id, industrial_broker_agent_properties_documents.file_url, industrial_broker_agent_properties_documents.created_at, industrial_broker_agent_properties_documents.updated_at, industrial_broker_agent_properties_documents.industrial_broker_agent_properties_id, industrial_broker_agent_properties_documents.status, industrial_broker_agent_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_broker_agent_properties_documents
LEFT JOIN documents_category ON documents_category.id = industrial_broker_agent_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_broker_agent_properties_documents.documents_subcategory_id
WHERE
industrial_broker_agent_properties_documents.id = $1
`

type GetIndustrialBrokerAgentPropertyDocByIdRow struct {
	ID                                int64       `json:"id"`
	DocumentsCategoryID               int64       `json:"documents_category_id"`
	DocumentsSubcategoryID            int64       `json:"documents_subcategory_id"`
	FileUrl                           []string    `json:"file_url"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	Status                            int64       `json:"status"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
	Category                          pgtype.Text `json:"category"`
	SubCategory                       pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetIndustrialBrokerAgentPropertyDocById(ctx context.Context, id int64) (GetIndustrialBrokerAgentPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyDocById, id)
	var i GetIndustrialBrokerAgentPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyDoc = `-- name: UpdateIndustrialBrokerAgentPropertyDoc :one
UPDATE industrial_broker_agent_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    industrial_broker_agent_properties_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_broker_agent_properties_id, status, is_branch
`

type UpdateIndustrialBrokerAgentPropertyDocParams struct {
	ID                                int64       `json:"id"`
	DocumentsCategoryID               int64       `json:"documents_category_id"`
	DocumentsSubcategoryID            int64       `json:"documents_subcategory_id"`
	FileUrl                           []string    `json:"file_url"`
	CreatedAt                         time.Time   `json:"created_at"`
	UpdatedAt                         time.Time   `json:"updated_at"`
	IndustrialBrokerAgentPropertiesID int64       `json:"industrial_broker_agent_properties_id"`
	Status                            int64       `json:"status"`
	IsBranch                          pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyDoc(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyDocParams) (IndustrialBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialBrokerAgentPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
