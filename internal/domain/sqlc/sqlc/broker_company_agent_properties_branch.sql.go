// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agent_properties_branch.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyAgentPropertyBranch = `-- name: CreateBrokerCompanyAgentPropertyBranch :one
INSERT INTO  broker_company_agent_properties_branch (
  property_title,
  property_title_arabic,
  description,
  description_arabic,
  is_verified,
  property_rank,
  addresses_id,
  locations_id, 
  property_types_id,
  profiles_id,
  status,
  created_at,
  updated_at,
  facilities_id,
  amenities_id,
  broker_companies_branches_id,
  broker_company_branches_agents,
  is_show_owner_info,
  property,
  -- facts_values,
  countries_id,
  ref_no,
  developer_company_name,
  sub_developer_company_name,
  is_branch,
  category,
  investment,
  contract_start_datetime,
  contract_end_datetime,
  amount,
  -- ask_price,
  unit_types,
  users_id, 
  from_xml,
  property_name,
   list_of_date,
  list_of_notes,
  list_of_agent,
  owner_users_id
)VALUES (
    $1 ,$2,$3, $4,$5,$6,$7,$8,$9,$10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25,  $26, $27, $28, $29, $30, $31, $32, $33,  $34, $35, $36, $37
) RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type CreateBrokerCompanyAgentPropertyBranchParams struct {
	PropertyTitle               string             `json:"property_title"`
	PropertyTitleArabic         string             `json:"property_title_arabic"`
	Description                 string             `json:"description"`
	DescriptionArabic           string             `json:"description_arabic"`
	IsVerified                  pgtype.Bool        `json:"is_verified"`
	PropertyRank                int64              `json:"property_rank"`
	AddressesID                 int64              `json:"addresses_id"`
	LocationsID                 int64              `json:"locations_id"`
	PropertyTypesID             int64              `json:"property_types_id"`
	ProfilesID                  int64              `json:"profiles_id"`
	Status                      int64              `json:"status"`
	CreatedAt                   time.Time          `json:"created_at"`
	UpdatedAt                   time.Time          `json:"updated_at"`
	FacilitiesID                []int64            `json:"facilities_id"`
	AmenitiesID                 []int64            `json:"amenities_id"`
	BrokerCompaniesBranchesID   int64              `json:"broker_companies_branches_id"`
	BrokerCompanyBranchesAgents int64              `json:"broker_company_branches_agents"`
	IsShowOwnerInfo             pgtype.Bool        `json:"is_show_owner_info"`
	Property                    int64              `json:"property"`
	CountriesID                 int64              `json:"countries_id"`
	RefNo                       string             `json:"ref_no"`
	DeveloperCompanyName        pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName     pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                    pgtype.Bool        `json:"is_branch"`
	Category                    string             `json:"category"`
	Investment                  pgtype.Bool        `json:"investment"`
	ContractStartDatetime       pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime         pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                      float64            `json:"amount"`
	UnitTypes                   []int64            `json:"unit_types"`
	UsersID                     int64              `json:"users_id"`
	FromXml                     pgtype.Bool        `json:"from_xml"`
	PropertyName                string             `json:"property_name"`
	ListOfDate                  []time.Time        `json:"list_of_date"`
	ListOfNotes                 []string           `json:"list_of_notes"`
	ListOfAgent                 []int64            `json:"list_of_agent"`
	OwnerUsersID                pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) CreateBrokerCompanyAgentPropertyBranch(ctx context.Context, arg CreateBrokerCompanyAgentPropertyBranchParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyAgentPropertyBranch,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.BrokerCompaniesBranchesID,
		arg.BrokerCompanyBranchesAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.FromXml,
		arg.PropertyName,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const deleteBrokerCompanyAgentPropertyBranch = `-- name: DeleteBrokerCompanyAgentPropertyBranch :exec
DELETE FROM  broker_company_agent_properties_branch
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyAgentPropertyBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyAgentPropertyBranch, id)
	return err
}

const getAllBrokerCompanyAgentPropertyBranch = `-- name: GetAllBrokerCompanyAgentPropertyBranch :many
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM  broker_company_agent_properties_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyAgentPropertyBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyAgentPropertyBranch(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyBranchParams) ([]BrokerCompanyAgentPropertiesBranch, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertyBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentPropertiesBranch
	for rows.Next() {
		var i BrokerCompanyAgentPropertiesBranch
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.ProfilesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.BrokerCompaniesBranchesID,
			&i.BrokerCompanyBranchesAgents,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.IsBranch,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.FromXml,
			&i.ListOfDate,
			&i.ListOfNotes,
			&i.ListOfAgent,
			&i.OwnerUsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAmenitiesIdByBrokerCompanyAgentPropertyBranchId = `-- name: GetAmenitiesIdByBrokerCompanyAgentPropertyBranchId :one
SELECT broker_company_agent_properties_branch.amenities_id FROM broker_company_agent_properties_branch WHERE id = $1
`

func (q *Queries) GetAmenitiesIdByBrokerCompanyAgentPropertyBranchId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAmenitiesIdByBrokerCompanyAgentPropertyBranchId, id)
	var amenities_id []int64
	err := row.Scan(&amenities_id)
	return amenities_id, err
}

const getBrokerBranchAgentPropertiesByBrokerAgentId = `-- name: GetBrokerBranchAgentPropertiesByBrokerAgentId :many
 select id, property_title, property from broker_company_agent_properties_branch bcapb where bcapb.broker_company_branches_agents = $1
`

type GetBrokerBranchAgentPropertiesByBrokerAgentIdRow struct {
	ID            int64  `json:"id"`
	PropertyTitle string `json:"property_title"`
	Property      int64  `json:"property"`
}

func (q *Queries) GetBrokerBranchAgentPropertiesByBrokerAgentId(ctx context.Context, brokerCompanyBranchesAgents int64) ([]GetBrokerBranchAgentPropertiesByBrokerAgentIdRow, error) {
	rows, err := q.db.Query(ctx, getBrokerBranchAgentPropertiesByBrokerAgentId, brokerCompanyBranchesAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrokerBranchAgentPropertiesByBrokerAgentIdRow
	for rows.Next() {
		var i GetBrokerBranchAgentPropertiesByBrokerAgentIdRow
		if err := rows.Scan(&i.ID, &i.PropertyTitle, &i.Property); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyAgentPropertiesBranchByRefrenceNumber = `-- name: GetBrokerCompanyAgentPropertiesBranchByRefrenceNumber :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM broker_company_agent_properties_branch WHERE ref_no = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyAgentPropertiesBranchByRefrenceNumber(ctx context.Context, refNo string) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertiesBranchByRefrenceNumber, refNo)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyBranch = `-- name: GetBrokerCompanyAgentPropertyBranch :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM  broker_company_agent_properties_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompanyAgentPropertyBranch(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyBranch, limit)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyBranchByName = `-- name: GetBrokerCompanyAgentPropertyBranchByName :one
SELECT id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id FROM  broker_company_agent_properties_branch 
WHERE property_title = $2 LIMIT $1
`

type GetBrokerCompanyAgentPropertyBranchByNameParams struct {
	Limit         int32  `json:"limit"`
	PropertyTitle string `json:"property_title"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyBranchByName(ctx context.Context, arg GetBrokerCompanyAgentPropertyBranchByNameParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyBranchByName, arg.Limit, arg.PropertyTitle)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyBranchWithValidation = `-- name: GetBrokerCompanyAgentPropertyBranchWithValidation :one
SELECT
    id,
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    profiles_id,
    status,
    created_at,
    updated_at,
    facilities_id,
    amenities_id,
    broker_companies_branches_id,
    broker_company_branches_agents,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    developer_company_name,
    sub_developer_company_name,
    is_branch,
    category,
    investment,
    contract_start_datetime,
    contract_end_datetime,
    amount,
    unit_types,
    users_id,
    property_name,
    from_xml,
    list_of_date,
    list_of_notes,
    list_of_agent,
    owner_users_id
from
    broker_company_agent_properties_branch fp
WHERE
    CASE
        WHEN $1 :: bigint = 0 THEN true
        WHEN $1 :: bigint = 1 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
        )
        WHEN $1 :: bigint = 2 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
        )
        WHEN $1 :: bigint = 3 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
        )
        WHEN $1 :: bigint = 4 THEN fp.addresses_id IN (
            SELECT
                id
            FROM
                addresses
            WHERE
                addresses.cities_id = $2
                AND communities_id = ANY($3 :: bigint [])
                AND sub_communities_id = ANY($4 :: bigint [])
                AND addresses.locations_id = $5
        )
    END
    AND (
        status != 5
        AND status != 6
    )
    AND fp.id = $6
LIMIT
    1
`

type GetBrokerCompanyAgentPropertyBranchWithValidationParams struct {
	Column1     int64       `json:"column_1"`
	CitiesID    pgtype.Int8 `json:"cities_id"`
	Column3     []int64     `json:"column_3"`
	Column4     []int64     `json:"column_4"`
	LocationsID pgtype.Int8 `json:"locations_id"`
	ID          int64       `json:"id"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyBranchWithValidation(ctx context.Context, arg GetBrokerCompanyAgentPropertyBranchWithValidationParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyBranchWithValidation,
		arg.Column1,
		arg.CitiesID,
		arg.Column3,
		arg.Column4,
		arg.LocationsID,
		arg.ID,
	)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const getBrokerbranchAgentPropertiesByBrokerBranchCompaniesId = `-- name: GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesId :many
select id, property_title, property, is_branch
from broker_company_agent_properties_branch bcapb where bcapb.broker_companies_branches_id = $1 and bcapb.category = 'rent' and bcapb.from_xml = false
`

type GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesIdRow struct {
	ID            int64       `json:"id"`
	PropertyTitle string      `json:"property_title"`
	Property      int64       `json:"property"`
	IsBranch      pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesId(ctx context.Context, brokerCompaniesBranchesID int64) ([]GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesIdRow, error) {
	rows, err := q.db.Query(ctx, getBrokerbranchAgentPropertiesByBrokerBranchCompaniesId, brokerCompaniesBranchesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesIdRow
	for rows.Next() {
		var i GetBrokerbranchAgentPropertiesByBrokerBranchCompaniesIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.Property,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacilitiesIdByBrokerCompanyAgentPropertyBranchId = `-- name: GetFacilitiesIdByBrokerCompanyAgentPropertyBranchId :one
SELECT broker_company_agent_properties_branch.facilities_id FROM broker_company_agent_properties_branch WHERE id = $1
`

func (q *Queries) GetFacilitiesIdByBrokerCompanyAgentPropertyBranchId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getFacilitiesIdByBrokerCompanyAgentPropertyBranchId, id)
	var facilities_id []int64
	err := row.Scan(&facilities_id)
	return facilities_id, err
}

const updateBrokerCompanyAgentPropertyBranch = `-- name: UpdateBrokerCompanyAgentPropertyBranch :one
UPDATE  broker_company_agent_properties_branch
SET    property_title = $2,
  property_title_arabic = $3,
  description = $4,
  description_arabic = $5,
  is_verified = $6,
  property_rank = $7,
  addresses_id = $8,
  locations_id = $9, 
  property_types_id = $10,
  profiles_id = $11,
  status = $12,
  created_at = $13,
  updated_at = $14,
  facilities_id = $15,
  amenities_id = $16,
  broker_companies_branches_id = $17,
  broker_company_branches_agents = $18,
  is_show_owner_info = $19,
  property = $20,
  -- facts_values = $21,
  countries_id = $21,
  ref_no  = $22,
  developer_company_name= $23,
  sub_developer_company_name= $24,
  is_branch = $25,
    category = $26,
  investment = $27,
  contract_start_datetime = $28,
  contract_end_datetime = $29,
  amount = $30,
  -- ask_price = $31,
  unit_types = $31,
  users_id = $32,
  from_xml = $33,
  property_name = $34,
          list_of_date = $35,
  list_of_notes = $36,
  list_of_agent = $37,
  owner_users_id = $38
Where id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyBranchParams struct {
	ID                          int64              `json:"id"`
	PropertyTitle               string             `json:"property_title"`
	PropertyTitleArabic         string             `json:"property_title_arabic"`
	Description                 string             `json:"description"`
	DescriptionArabic           string             `json:"description_arabic"`
	IsVerified                  pgtype.Bool        `json:"is_verified"`
	PropertyRank                int64              `json:"property_rank"`
	AddressesID                 int64              `json:"addresses_id"`
	LocationsID                 int64              `json:"locations_id"`
	PropertyTypesID             int64              `json:"property_types_id"`
	ProfilesID                  int64              `json:"profiles_id"`
	Status                      int64              `json:"status"`
	CreatedAt                   time.Time          `json:"created_at"`
	UpdatedAt                   time.Time          `json:"updated_at"`
	FacilitiesID                []int64            `json:"facilities_id"`
	AmenitiesID                 []int64            `json:"amenities_id"`
	BrokerCompaniesBranchesID   int64              `json:"broker_companies_branches_id"`
	BrokerCompanyBranchesAgents int64              `json:"broker_company_branches_agents"`
	IsShowOwnerInfo             pgtype.Bool        `json:"is_show_owner_info"`
	Property                    int64              `json:"property"`
	CountriesID                 int64              `json:"countries_id"`
	RefNo                       string             `json:"ref_no"`
	DeveloperCompanyName        pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName     pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                    pgtype.Bool        `json:"is_branch"`
	Category                    string             `json:"category"`
	Investment                  pgtype.Bool        `json:"investment"`
	ContractStartDatetime       pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime         pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                      float64            `json:"amount"`
	UnitTypes                   []int64            `json:"unit_types"`
	UsersID                     int64              `json:"users_id"`
	FromXml                     pgtype.Bool        `json:"from_xml"`
	PropertyName                string             `json:"property_name"`
	ListOfDate                  []time.Time        `json:"list_of_date"`
	ListOfNotes                 []string           `json:"list_of_notes"`
	ListOfAgent                 []int64            `json:"list_of_agent"`
	OwnerUsersID                pgtype.Int8        `json:"owner_users_id"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyBranch(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyBranch,
		arg.ID,
		arg.PropertyTitle,
		arg.PropertyTitleArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AddressesID,
		arg.LocationsID,
		arg.PropertyTypesID,
		arg.ProfilesID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.FacilitiesID,
		arg.AmenitiesID,
		arg.BrokerCompaniesBranchesID,
		arg.BrokerCompanyBranchesAgents,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.CountriesID,
		arg.RefNo,
		arg.DeveloperCompanyName,
		arg.SubDeveloperCompanyName,
		arg.IsBranch,
		arg.Category,
		arg.Investment,
		arg.ContractStartDatetime,
		arg.ContractEndDatetime,
		arg.Amount,
		arg.UnitTypes,
		arg.UsersID,
		arg.FromXml,
		arg.PropertyName,
		arg.ListOfDate,
		arg.ListOfNotes,
		arg.ListOfAgent,
		arg.OwnerUsersID,
	)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyBranchRankById = `-- name: UpdateBrokerCompanyAgentPropertyBranchRankById :one
UPDATE  broker_company_agent_properties_branch 
SET property_rank = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyBranchRankByIdParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyBranchRankById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchRankByIdParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyBranchRankById, arg.ID, arg.PropertyRank)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyBranchStatusById = `-- name: UpdateBrokerCompanyAgentPropertyBranchStatusById :one
UPDATE  broker_company_agent_properties_branch 
SET status = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyBranchStatusByIdParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyBranchStatusById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchStatusByIdParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyBranchStatusById, arg.ID, arg.Status)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyBranchVerificationById = `-- name: UpdateBrokerCompanyAgentPropertyBranchVerificationById :one
UPDATE  broker_company_agent_properties_branch 
SET is_verified = $2 
WHERE id = $1
RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, profiles_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id, broker_company_branches_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml, list_of_date, list_of_notes, list_of_agent, owner_users_id
`

type UpdateBrokerCompanyAgentPropertyBranchVerificationByIdParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyBranchVerificationById(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchVerificationByIdParams) (BrokerCompanyAgentPropertiesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyBranchVerificationById, arg.ID, arg.IsVerified)
	var i BrokerCompanyAgentPropertiesBranch
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.ProfilesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.BrokerCompaniesBranchesID,
		&i.BrokerCompanyBranchesAgents,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.IsBranch,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.FromXml,
		&i.ListOfDate,
		&i.ListOfNotes,
		&i.ListOfAgent,
		&i.OwnerUsersID,
	)
	return i, err
}
