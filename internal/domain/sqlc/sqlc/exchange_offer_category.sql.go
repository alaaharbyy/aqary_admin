// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exchange_offer_category.sql

package sqlc

import (
	"context"
)

const createExchangeOfferCategory = `-- name: CreateExchangeOfferCategory :one
INSERT INTO exchange_offer_category (
   title,
   ref_id
)VALUES (
    $1, $2
) RETURNING id, title, ref_id
`

type CreateExchangeOfferCategoryParams struct {
	Title string `json:"title"`
	RefID string `json:"ref_id"`
}

func (q *Queries) CreateExchangeOfferCategory(ctx context.Context, arg CreateExchangeOfferCategoryParams) (ExchangeOfferCategory, error) {
	row := q.db.QueryRow(ctx, createExchangeOfferCategory, arg.Title, arg.RefID)
	var i ExchangeOfferCategory
	err := row.Scan(&i.ID, &i.Title, &i.RefID)
	return i, err
}

const deleteExchangeOfferCategory = `-- name: DeleteExchangeOfferCategory :exec
DELETE FROM exchange_offer_category
Where id = $1
`

func (q *Queries) DeleteExchangeOfferCategory(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExchangeOfferCategory, id)
	return err
}

const getAllExchangeOfferCategory = `-- name: GetAllExchangeOfferCategory :many
SELECT id, title, ref_id FROM exchange_offer_category
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllExchangeOfferCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllExchangeOfferCategory(ctx context.Context, arg GetAllExchangeOfferCategoryParams) ([]ExchangeOfferCategory, error) {
	rows, err := q.db.Query(ctx, getAllExchangeOfferCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExchangeOfferCategory
	for rows.Next() {
		var i ExchangeOfferCategory
		if err := rows.Scan(&i.ID, &i.Title, &i.RefID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllOfferCategories = `-- name: GetCountAllOfferCategories :one
SELECT Count(*) FROM exchange_offer_category
`

func (q *Queries) GetCountAllOfferCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllOfferCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getExchangeOfferCategory = `-- name: GetExchangeOfferCategory :one
SELECT id, title, ref_id FROM exchange_offer_category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExchangeOfferCategory(ctx context.Context, id int64) (ExchangeOfferCategory, error) {
	row := q.db.QueryRow(ctx, getExchangeOfferCategory, id)
	var i ExchangeOfferCategory
	err := row.Scan(&i.ID, &i.Title, &i.RefID)
	return i, err
}

const updateExchangeOfferCategory = `-- name: UpdateExchangeOfferCategory :one
UPDATE exchange_offer_category
SET title = $2,
   ref_id = $3
Where id = $1
RETURNING id, title, ref_id
`

type UpdateExchangeOfferCategoryParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
	RefID string `json:"ref_id"`
}

func (q *Queries) UpdateExchangeOfferCategory(ctx context.Context, arg UpdateExchangeOfferCategoryParams) (ExchangeOfferCategory, error) {
	row := q.db.QueryRow(ctx, updateExchangeOfferCategory, arg.ID, arg.Title, arg.RefID)
	var i ExchangeOfferCategory
	err := row.Scan(&i.ID, &i.Title, &i.RefID)
	return i, err
}
