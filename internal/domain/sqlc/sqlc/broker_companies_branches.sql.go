// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_companies_branches.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerBranchCompany = `-- name: CreateBrokerBranchCompany :one
INSERT INTO broker_companies_branches (
    broker_companies_id,
    company_name,
    description,
    logo_url,
    addresses_id,
    email,
    phone_number,
    whatsapp_number,
    commercial_license_no,
    commercial_license_file_url,
    commercial_license_expiry,
    rera_no,
    rera_file_url,
    rera_expiry,
    is_verified,
    website_url,
    cover_image_url,
    tag_line,
    vat_no,
    vat_status,
    vat_file_url,
    facebook_profile_url,
    instagram_profile_url,
    twitter_profile_url,
    no_of_employees,
    -- admin of the company
    users_id,
    linkedin_profile_url,
    bank_account_details_id,
    company_rank,
    status,
    country_id,
    company_type,
    is_branch,
    created_at,
    updated_at,
    ref_no,
    -- when the rera registered for the first time
    rera_registration_date,
    rera_issue_date,
    -- when the commercial license registered for the first time
    commercial_license_registration_date,
    commercial_license_issue_date,
    extra_license_names,
    extra_license_files,
    extra_license_nos,
    extra_license_issue_date,
    extra_license_expiry_date,
    youtube_profile_url,
    orn_license_no,
    orn_license_file_url,
    orn_registration_date,
    orn_license_expiry,
    created_by,
    -- only for dubai
    trakhees_permit_no,
    -- only for dubai
    license_dcci_no,
    -- only for dubai
    register_no,
    other_social_media
    
)VALUES (
     $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
     $21,$22,$23,$24,$25,$26,$27,$28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, 
     $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55
) RETURNING id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media
`

type CreateBrokerBranchCompanyParams struct {
	BrokerCompaniesID                 int64              `json:"broker_companies_id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	ReraNo                            string             `json:"rera_no"`
	ReraFileUrl                       string             `json:"rera_file_url"`
	ReraExpiry                        time.Time          `json:"rera_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	ReraRegistrationDate              pgtype.Timestamptz `json:"rera_registration_date"`
	ReraIssueDate                     pgtype.Timestamptz `json:"rera_issue_date"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	OrnLicenseNo                      pgtype.Text        `json:"orn_license_no"`
	OrnLicenseFileUrl                 pgtype.Text        `json:"orn_license_file_url"`
	OrnRegistrationDate               pgtype.Timestamptz `json:"orn_registration_date"`
	OrnLicenseExpiry                  pgtype.Timestamptz `json:"orn_license_expiry"`
	CreatedBy                         int64              `json:"created_by"`
	TrakheesPermitNo                  pgtype.Text        `json:"trakhees_permit_no"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
}

func (q *Queries) CreateBrokerBranchCompany(ctx context.Context, arg CreateBrokerBranchCompanyParams) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, createBrokerBranchCompany,
		arg.BrokerCompaniesID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.ReraNo,
		arg.ReraFileUrl,
		arg.ReraExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.BankAccountDetailsID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.ReraRegistrationDate,
		arg.ReraIssueDate,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.YoutubeProfileUrl,
		arg.OrnLicenseNo,
		arg.OrnLicenseFileUrl,
		arg.OrnRegistrationDate,
		arg.OrnLicenseExpiry,
		arg.CreatedBy,
		arg.TrakheesPermitNo,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
	)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const deleteBrokerCompanyBranch = `-- name: DeleteBrokerCompanyBranch :exec
DELETE FROM broker_companies_branches
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyBranch, id)
	return err
}

const getAllBrokerCompanyBranch = `-- name: GetAllBrokerCompanyBranch :many
SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyBranch(ctx context.Context, arg GetAllBrokerCompanyBranchParams) ([]BrokerCompaniesBranch, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompaniesBranch
	for rows.Next() {
		var i BrokerCompaniesBranch
		if err := rows.Scan(
			&i.ID,
			&i.BrokerCompaniesID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyBranchByCompanyId = `-- name: GetAllBrokerCompanyBranchByCompanyId :many
SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches
Where broker_companies_id = $1
LIMIT $2
OFFSET $3
`

type GetAllBrokerCompanyBranchByCompanyIdParams struct {
	BrokerCompaniesID int64 `json:"broker_companies_id"`
	Limit             int32 `json:"limit"`
	Offset            int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyBranchByCompanyId(ctx context.Context, arg GetAllBrokerCompanyBranchByCompanyIdParams) ([]BrokerCompaniesBranch, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyBranchByCompanyId, arg.BrokerCompaniesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompaniesBranch
	for rows.Next() {
		var i BrokerCompaniesBranch
		if err := rows.Scan(
			&i.ID,
			&i.BrokerCompaniesID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.ReraNo,
			&i.ReraFileUrl,
			&i.ReraExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.ReraRegistrationDate,
			&i.ReraIssueDate,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.YoutubeProfileUrl,
			&i.OrnLicenseNo,
			&i.OrnLicenseFileUrl,
			&i.OrnRegistrationDate,
			&i.OrnLicenseExpiry,
			&i.CreatedBy,
			&i.TrakheesPermitNo,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyBranch = `-- name: GetBrokerCompanyBranch :one
SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyBranch(ctx context.Context, id int64) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranch, id)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getBrokerCompanyBranchAddressId = `-- name: GetBrokerCompanyBranchAddressId :one
SELECT addresses_id FROM broker_companies_branches WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyBranchAddressId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranchAddressId, id)
	var addresses_id int64
	err := row.Scan(&addresses_id)
	return addresses_id, err
}

const getBrokerCompanyBranchByCommercialLicNo = `-- name: GetBrokerCompanyBranchByCommercialLicNo :one
SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches 
WHERE commercial_license_no ILIKE $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyBranchByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranchByCommercialLicNo, commercialLicenseNo)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getBrokerCompanyBranchByName = `-- name: GetBrokerCompanyBranchByName :one



SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches 
WHERE company_name ILIKE $1 LIMIT 1
`

// -- name: GetCountBrokerCompanyBranchByMainServiceId :one
// SELECT COUNT(*) FROM broker_companies_branches WHERE main_services_id = $1  LIMIT 1;
// -- name: GetBrokerCompanyBranchByMainServiceId :many
// SELECT * FROM broker_companies_branches
// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetBrokerCompanyBranchByName(ctx context.Context, companyName string) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranchByName, companyName)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getBrokerCompanyBranchByReraNo = `-- name: GetBrokerCompanyBranchByReraNo :one
SELECT id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media FROM broker_companies_branches 
WHERE rera_no ILIKE $1 LIMIT 1
`

func (q *Queries) GetBrokerCompanyBranchByReraNo(ctx context.Context, reraNo string) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyBranchByReraNo, reraNo)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getCountAllBrokerCompanyBranchByCompanyId = `-- name: GetCountAllBrokerCompanyBranchByCompanyId :one
SELECT COUNT(*) FROM broker_companies_branches
Where broker_companies_id = $1
`

func (q *Queries) GetCountAllBrokerCompanyBranchByCompanyId(ctx context.Context, brokerCompaniesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllBrokerCompanyBranchByCompanyId, brokerCompaniesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountBrokerCompanyBranch = `-- name: GetCountBrokerCompanyBranch :one
SELECT COUNT(*) FROM broker_companies_branches  LIMIT 1
`

func (q *Queries) GetCountBrokerCompanyBranch(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerCompanyBranch)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBrokerBranchCompanyMainService = `-- name: UpdateBrokerBranchCompanyMainService :one







 



UPDATE broker_companies_branches 
SET company_rank=$2 
Where id =$1 
RETURNING id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media
`

type UpdateBrokerBranchCompanyMainServiceParams struct {
	ID          int64 `json:"id"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetBrokerBranchCompanySubscriptionById :one
// SELECT broker_subscription_id FROM broker_companies_branches
// WHERE id = $1;
// -- name: UpdateBrokerBranchCompanyMainService :one
// UPDATE broker_companies_branches
// SET main_services_id = $2
// Where id = $1
// RETURNING *;
// UPDATE broker_companies_branches
// SET main_services_id = $2
// Where id = $1
// RETURNING *;
func (q *Queries) UpdateBrokerBranchCompanyMainService(ctx context.Context, arg UpdateBrokerBranchCompanyMainServiceParams) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerBranchCompanyMainService, arg.ID, arg.CompanyRank)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateBrokerCompanyBranch = `-- name: UpdateBrokerCompanyBranch :one
UPDATE broker_companies_branches
SET   company_name = $2,
    description = $3,
    logo_url = $4,
    addresses_id = $5,
    email = $6,
    phone_number = $7,
    whatsapp_number = $8,
    commercial_license_no = $9,
    commercial_license_file_url = $10,
    commercial_license_expiry = $11,
    rera_no = $12,
    rera_file_url = $13,
    rera_expiry = $14,
    is_verified = $15,
    website_url = $16,
    cover_image_url = $17,
    tag_line = $18,
    vat_no = $19,
    vat_status = $20,
    vat_file_url = $21,
    facebook_profile_url = $22,
    instagram_profile_url = $23,
    twitter_profile_url = $24,
    no_of_employees = $25,
    users_id = $26,
    linkedin_profile_url = $27, 
    company_rank = $28,
    status = $29,
    broker_companies_id = $30,
    country_id = $31,
    company_type = $32,
    is_branch = $33,
    created_at = $34,
    updated_at = $35, 
    ref_no = $36,
    rera_registration_date = $37,
    rera_issue_date = $38,
    commercial_license_registration_date= $39,
    commercial_license_issue_date= $40,
    trakhees_permit_no = $41,
     extra_license_nos = $42,
    extra_license_files = $43,
    extra_license_names = $44,
    extra_license_issue_date = $45,
    extra_license_expiry_date = $46,
    license_dcci_no = $47,
    register_no = $48,
    other_social_media = $49,
    youtube_profile_url = $50,
    orn_license_no = $51,
    orn_license_file_url = $52,
    orn_registration_date = $53,
    orn_license_expiry = $54,
    created_by = $55,
    bank_account_details_id = $56
Where id = $1
RETURNING id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media
`

type UpdateBrokerCompanyBranchParams struct {
	ID                                int64              `json:"id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	ReraNo                            string             `json:"rera_no"`
	ReraFileUrl                       string             `json:"rera_file_url"`
	ReraExpiry                        time.Time          `json:"rera_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	BrokerCompaniesID                 int64              `json:"broker_companies_id"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	ReraRegistrationDate              pgtype.Timestamptz `json:"rera_registration_date"`
	ReraIssueDate                     pgtype.Timestamptz `json:"rera_issue_date"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	TrakheesPermitNo                  pgtype.Text        `json:"trakhees_permit_no"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	OrnLicenseNo                      pgtype.Text        `json:"orn_license_no"`
	OrnLicenseFileUrl                 pgtype.Text        `json:"orn_license_file_url"`
	OrnRegistrationDate               pgtype.Timestamptz `json:"orn_registration_date"`
	OrnLicenseExpiry                  pgtype.Timestamptz `json:"orn_license_expiry"`
	CreatedBy                         int64              `json:"created_by"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
}

func (q *Queries) UpdateBrokerCompanyBranch(ctx context.Context, arg UpdateBrokerCompanyBranchParams) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyBranch,
		arg.ID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.ReraNo,
		arg.ReraFileUrl,
		arg.ReraExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.CompanyRank,
		arg.Status,
		arg.BrokerCompaniesID,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.ReraRegistrationDate,
		arg.ReraIssueDate,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.TrakheesPermitNo,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.OrnLicenseNo,
		arg.OrnLicenseFileUrl,
		arg.OrnRegistrationDate,
		arg.OrnLicenseExpiry,
		arg.CreatedBy,
		arg.BankAccountDetailsID,
	)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateBrokerCompanyBranchStatus = `-- name: UpdateBrokerCompanyBranchStatus :one
UPDATE broker_companies_branches 
SET status=$2 
Where id =$1 
RETURNING id, broker_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, rera_no, rera_file_url, rera_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, rera_registration_date, rera_issue_date, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, orn_license_no, orn_license_file_url, orn_registration_date, orn_license_expiry, created_by, trakhees_permit_no, license_dcci_no, register_no, other_social_media
`

type UpdateBrokerCompanyBranchStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyBranchStatus(ctx context.Context, arg UpdateBrokerCompanyBranchStatusParams) (BrokerCompaniesBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyBranchStatus, arg.ID, arg.Status)
	var i BrokerCompaniesBranch
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.ReraNo,
		&i.ReraFileUrl,
		&i.ReraExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.ReraRegistrationDate,
		&i.ReraIssueDate,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.OrnLicenseNo,
		&i.OrnLicenseFileUrl,
		&i.OrnRegistrationDate,
		&i.OrnLicenseExpiry,
		&i.CreatedBy,
		&i.TrakheesPermitNo,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}
