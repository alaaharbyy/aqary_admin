// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: properties_videos.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyVideo = `-- name: CreatePropertyVideo :one
 
INSERT INTO properties_videos
(ref_no,company_types,is_branch,companies_id,projects_id,phases_id,properties_id,title,is_deleted,created_by,created_at,video_url)VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) RETURNING id, ref_no, company_types, is_branch, companies_id, projects_id, phases_id, properties_id, title, is_deleted, created_by, created_at, video_url
`

type CreatePropertyVideoParams struct {
	RefNo        string      `json:"ref_no"`
	CompanyTypes pgtype.Int8 `json:"company_types"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	CompaniesID  int64       `json:"companies_id"`
	ProjectsID   pgtype.Int8 `json:"projects_id"`
	PhasesID     pgtype.Int8 `json:"phases_id"`
	PropertiesID int64       `json:"properties_id"`
	Title        string      `json:"title"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedBy    int64       `json:"created_by"`
	CreatedAt    time.Time   `json:"created_at"`
	VideoUrl     string      `json:"video_url"`
}

func (q *Queries) CreatePropertyVideo(ctx context.Context, arg CreatePropertyVideoParams) (PropertiesVideo, error) {
	row := q.db.QueryRow(ctx, createPropertyVideo,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.ProjectsID,
		arg.PhasesID,
		arg.PropertiesID,
		arg.Title,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.VideoUrl,
	)
	var i PropertiesVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectsID,
		&i.PhasesID,
		&i.PropertiesID,
		&i.Title,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const deletePropertyVideo = `-- name: DeletePropertyVideo :one
UPDATE properties_videos
SET 
is_deleted=TRUE
WHERE id=$1 RETURNING id, ref_no, company_types, is_branch, companies_id, projects_id, phases_id, properties_id, title, is_deleted, created_by, created_at, video_url
`

func (q *Queries) DeletePropertyVideo(ctx context.Context, id int64) (PropertiesVideo, error) {
	row := q.db.QueryRow(ctx, deletePropertyVideo, id)
	var i PropertiesVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectsID,
		&i.PhasesID,
		&i.PropertiesID,
		&i.Title,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const getAllPropertyVideos = `-- name: GetAllPropertyVideos :many
 
SELECT id, ref_no, company_types, is_branch, companies_id, projects_id, phases_id, properties_id, title, is_deleted, created_by, created_at, video_url FROM properties_videos
WHERE is_deleted!=TRUE
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type GetAllPropertyVideosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPropertyVideos(ctx context.Context, arg GetAllPropertyVideosParams) ([]PropertiesVideo, error) {
	rows, err := q.db.Query(ctx, getAllPropertyVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertiesVideo
	for rows.Next() {
		var i PropertiesVideo
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypes,
			&i.IsBranch,
			&i.CompaniesID,
			&i.ProjectsID,
			&i.PhasesID,
			&i.PropertiesID,
			&i.Title,
			&i.IsDeleted,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.VideoUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPropertyVideos = `-- name: GetCountPropertyVideos :one
 
SELECT COUNT(*) FROM properties_videos
WHERE is_deleted!=TRUE
`

func (q *Queries) GetCountPropertyVideos(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountPropertyVideos)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSinglePropertyVideo = `-- name: GetSinglePropertyVideo :one
 
SELECT id, ref_no, company_types, is_branch, companies_id, projects_id, phases_id, properties_id, title, is_deleted, created_by, created_at, video_url FROM properties_videos WHERE id=$1
`

func (q *Queries) GetSinglePropertyVideo(ctx context.Context, id int64) (PropertiesVideo, error) {
	row := q.db.QueryRow(ctx, getSinglePropertyVideo, id)
	var i PropertiesVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectsID,
		&i.PhasesID,
		&i.PropertiesID,
		&i.Title,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const updatePropertiesVideo = `-- name: UpdatePropertiesVideo :one
UPDATE properties_videos
SET
    ref_no = $2,
    company_types = $3,
    is_branch = $4,
    companies_id = $5,
    projects_id = $6,
    phases_id = $7,
    properties_id = $8,
    title = $9,
    is_deleted = $10,
    created_by = $11,
    created_at = $12,
    video_url = $13
WHERE
    id = $1
RETURNING id, ref_no, company_types, is_branch, companies_id, projects_id, phases_id, properties_id, title, is_deleted, created_by, created_at, video_url
`

type UpdatePropertiesVideoParams struct {
	ID           int64       `json:"id"`
	RefNo        string      `json:"ref_no"`
	CompanyTypes pgtype.Int8 `json:"company_types"`
	IsBranch     pgtype.Bool `json:"is_branch"`
	CompaniesID  int64       `json:"companies_id"`
	ProjectsID   pgtype.Int8 `json:"projects_id"`
	PhasesID     pgtype.Int8 `json:"phases_id"`
	PropertiesID int64       `json:"properties_id"`
	Title        string      `json:"title"`
	IsDeleted    pgtype.Bool `json:"is_deleted"`
	CreatedBy    int64       `json:"created_by"`
	CreatedAt    time.Time   `json:"created_at"`
	VideoUrl     string      `json:"video_url"`
}

func (q *Queries) UpdatePropertiesVideo(ctx context.Context, arg UpdatePropertiesVideoParams) (PropertiesVideo, error) {
	row := q.db.QueryRow(ctx, updatePropertiesVideo,
		arg.ID,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.ProjectsID,
		arg.PhasesID,
		arg.PropertiesID,
		arg.Title,
		arg.IsDeleted,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.VideoUrl,
	)
	var i PropertiesVideo
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.ProjectsID,
		&i.PhasesID,
		&i.PropertiesID,
		&i.Title,
		&i.IsDeleted,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.VideoUrl,
	)
	return i, err
}
