// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leads_progress.sql

package sqlc

import (
	"context"
	"time"
)

const createLeadProgress = `-- name: CreateLeadProgress :one
INSERT INTO leads_progress(
leads_id,
progress_date,
progress_status,
lead_status
) VALUES (
$1,
$2,
$3,
$4
) RETURNING id, leads_id, progress_date, progress_status, lead_status
`

type CreateLeadProgressParams struct {
	LeadsID        int64     `json:"leads_id"`
	ProgressDate   time.Time `json:"progress_date"`
	ProgressStatus int64     `json:"progress_status"`
	LeadStatus     int64     `json:"lead_status"`
}

func (q *Queries) CreateLeadProgress(ctx context.Context, arg CreateLeadProgressParams) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, createLeadProgress,
		arg.LeadsID,
		arg.ProgressDate,
		arg.ProgressStatus,
		arg.LeadStatus,
	)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}

const getLeadProgressByLeadsID = `-- name: GetLeadProgressByLeadsID :one
SELECT id, leads_id, progress_date, progress_status, lead_status
FROM leads_progress
WHERE leads_id = $1
LIMIT 1
`

func (q *Queries) GetLeadProgressByLeadsID(ctx context.Context, leadsID int64) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, getLeadProgressByLeadsID, leadsID)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}

const updateLeadProgressByLeadsId = `-- name: UpdateLeadProgressByLeadsId :one
UPDATE leads_progress
SET
    progress_date = $2,
    progress_status = $3,
    lead_status = $4
WHERE
    leads_id = $1
RETURNING id, leads_id, progress_date, progress_status, lead_status
`

type UpdateLeadProgressByLeadsIdParams struct {
	LeadsID        int64     `json:"leads_id"`
	ProgressDate   time.Time `json:"progress_date"`
	ProgressStatus int64     `json:"progress_status"`
	LeadStatus     int64     `json:"lead_status"`
}

func (q *Queries) UpdateLeadProgressByLeadsId(ctx context.Context, arg UpdateLeadProgressByLeadsIdParams) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, updateLeadProgressByLeadsId,
		arg.LeadsID,
		arg.ProgressDate,
		arg.ProgressStatus,
		arg.LeadStatus,
	)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}

const updateLeadProgressStatus = `-- name: UpdateLeadProgressStatus :one
UPDATE leads_progress SET progress_status = $2 WHERE leads_id = $1 RETURNING id, leads_id, progress_date, progress_status, lead_status
`

type UpdateLeadProgressStatusParams struct {
	LeadsID        int64 `json:"leads_id"`
	ProgressStatus int64 `json:"progress_status"`
}

func (q *Queries) UpdateLeadProgressStatus(ctx context.Context, arg UpdateLeadProgressStatusParams) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, updateLeadProgressStatus, arg.LeadsID, arg.ProgressStatus)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}

const updateLeadProgressStatusAndStatus = `-- name: UpdateLeadProgressStatusAndStatus :one
UPDATE leads_progress SET progress_status = $2, lead_status = $3 WHERE leads_id = $1 RETURNING id, leads_id, progress_date, progress_status, lead_status
`

type UpdateLeadProgressStatusAndStatusParams struct {
	LeadsID        int64 `json:"leads_id"`
	ProgressStatus int64 `json:"progress_status"`
	LeadStatus     int64 `json:"lead_status"`
}

func (q *Queries) UpdateLeadProgressStatusAndStatus(ctx context.Context, arg UpdateLeadProgressStatusAndStatusParams) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, updateLeadProgressStatusAndStatus, arg.LeadsID, arg.ProgressStatus, arg.LeadStatus)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}

const updateLeadStatus = `-- name: UpdateLeadStatus :one
UPDATE leads_progress SET lead_status = $2 WHERE leads_id = $1 RETURNING id, leads_id, progress_date, progress_status, lead_status
`

type UpdateLeadStatusParams struct {
	LeadsID    int64 `json:"leads_id"`
	LeadStatus int64 `json:"lead_status"`
}

func (q *Queries) UpdateLeadStatus(ctx context.Context, arg UpdateLeadStatusParams) (LeadsProgress, error) {
	row := q.db.QueryRow(ctx, updateLeadStatus, arg.LeadsID, arg.LeadStatus)
	var i LeadsProgress
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.ProgressDate,
		&i.ProgressStatus,
		&i.LeadStatus,
	)
	return i, err
}
