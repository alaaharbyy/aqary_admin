// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posted_hotel_media.sql

package sqlc

import (
	"context"
)

const createPostedHotelMedia = `-- name: CreatePostedHotelMedia :one
INSERT INTO posted_hotel_media(posted_hotel_id, image_url, video_url, video_360_url)
VALUES($1, $2, $3, $4) RETURNING id, posted_hotel_id, image_url, video_url, video_360_url
`

type CreatePostedHotelMediaParams struct {
	PostedHotelID int64    `json:"posted_hotel_id"`
	ImageUrl      []string `json:"image_url"`
	VideoUrl      []string `json:"video_url"`
	Video360Url   []string `json:"video_360_url"`
}

func (q *Queries) CreatePostedHotelMedia(ctx context.Context, arg CreatePostedHotelMediaParams) (PostedHotelMedium, error) {
	row := q.db.QueryRow(ctx, createPostedHotelMedia,
		arg.PostedHotelID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Video360Url,
	)
	var i PostedHotelMedium
	err := row.Scan(
		&i.ID,
		&i.PostedHotelID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const deletePostedHotelBookingMediaById = `-- name: DeletePostedHotelBookingMediaById :exec
DELETE FROM posted_hotel_media
WHERE id = $1
`

func (q *Queries) DeletePostedHotelBookingMediaById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePostedHotelBookingMediaById, id)
	return err
}

const getAllPostedHotelMedia = `-- name: GetAllPostedHotelMedia :many
SELECT id, posted_hotel_id, image_url, video_url, video_360_url FROM posted_hotel_media
`

func (q *Queries) GetAllPostedHotelMedia(ctx context.Context) ([]PostedHotelMedium, error) {
	rows, err := q.db.Query(ctx, getAllPostedHotelMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostedHotelMedium
	for rows.Next() {
		var i PostedHotelMedium
		if err := rows.Scan(
			&i.ID,
			&i.PostedHotelID,
			&i.ImageUrl,
			&i.VideoUrl,
			&i.Video360Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingMediaByPostedHotelId = `-- name: GetHotelBookingMediaByPostedHotelId :one
SELECT id, posted_hotel_id, image_url, video_url, video_360_url 
FROM posted_hotel_media
WHERE posted_hotel_id =$1
`

func (q *Queries) GetHotelBookingMediaByPostedHotelId(ctx context.Context, postedHotelID int64) (PostedHotelMedium, error) {
	row := q.db.QueryRow(ctx, getHotelBookingMediaByPostedHotelId, postedHotelID)
	var i PostedHotelMedium
	err := row.Scan(
		&i.ID,
		&i.PostedHotelID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const getPostedHotelMediaByID = `-- name: GetPostedHotelMediaByID :one
SELECT id, posted_hotel_id, image_url, video_url, video_360_url FROM posted_hotel_media WHERE id=$1
`

func (q *Queries) GetPostedHotelMediaByID(ctx context.Context, id int64) (PostedHotelMedium, error) {
	row := q.db.QueryRow(ctx, getPostedHotelMediaByID, id)
	var i PostedHotelMedium
	err := row.Scan(
		&i.ID,
		&i.PostedHotelID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}

const updatePostedHotelMedia = `-- name: UpdatePostedHotelMedia :one
UPDATE posted_hotel_media
SET image_url = $2,
    video_url = $3,
    video_360_url = $4
WHERE id = $1 RETURNING id, posted_hotel_id, image_url, video_url, video_360_url
`

type UpdatePostedHotelMediaParams struct {
	ID          int64    `json:"id"`
	ImageUrl    []string `json:"image_url"`
	VideoUrl    []string `json:"video_url"`
	Video360Url []string `json:"video_360_url"`
}

func (q *Queries) UpdatePostedHotelMedia(ctx context.Context, arg UpdatePostedHotelMediaParams) (PostedHotelMedium, error) {
	row := q.db.QueryRow(ctx, updatePostedHotelMedia,
		arg.ID,
		arg.ImageUrl,
		arg.VideoUrl,
		arg.Video360Url,
	)
	var i PostedHotelMedium
	err := row.Scan(
		&i.ID,
		&i.PostedHotelID,
		&i.ImageUrl,
		&i.VideoUrl,
		&i.Video360Url,
	)
	return i, err
}
