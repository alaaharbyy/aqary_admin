// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition_booths.sql

package sqlc

import (
	"context"
)

const getExhibitionBoothByExhibitionId = `-- name: GetExhibitionBoothByExhibitionId :many
SELECT id, exhibitions_id, floor_no, no_of_booths, interactive_link 
FROM 
	exhibition_booths
WHERE 
	exhibitions_id=$1
`

func (q *Queries) GetExhibitionBoothByExhibitionId(ctx context.Context, exhibitionsID int64) ([]ExhibitionBooth, error) {
	rows, err := q.db.Query(ctx, getExhibitionBoothByExhibitionId, exhibitionsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExhibitionBooth
	for rows.Next() {
		var i ExhibitionBooth
		if err := rows.Scan(
			&i.ID,
			&i.ExhibitionsID,
			&i.FloorNo,
			&i.NoOfBooths,
			&i.InteractiveLink,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfExhibitionBooths = `-- name: GetNumberOfExhibitionBooths :one
SELECT COUNT(exhibition_booths.id) FROM exhibition_booths
INNER JOIN exhibitions 
ON exhibitions.id = exhibition_booths.exhibitions_id AND exhibitions.event_status !=5
`

func (q *Queries) GetNumberOfExhibitionBooths(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfExhibitionBooths)
	var count int64
	err := row.Scan(&count)
	return count, err
}
