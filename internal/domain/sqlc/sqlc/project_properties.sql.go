// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_properties.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfUnitBelongToProject = `-- name: CheckIfUnitBelongToProject :one
SELECT pp.projects_id,
       pp.id AS property_id,
       u.id AS units_id
FROM project_properties pp
JOIN units u ON u.properties_id=pp.id
WHERE pp.projects_id=$1
  AND u.id=$2
  AND pp.status!=6
`

type CheckIfUnitBelongToProjectParams struct {
	ProjectsID int64 `json:"projects_id"`
	ID         int64 `json:"id"`
}

type CheckIfUnitBelongToProjectRow struct {
	ProjectsID int64 `json:"projects_id"`
	PropertyID int64 `json:"property_id"`
	UnitsID    int64 `json:"units_id"`
}

func (q *Queries) CheckIfUnitBelongToProject(ctx context.Context, arg CheckIfUnitBelongToProjectParams) (CheckIfUnitBelongToProjectRow, error) {
	row := q.db.QueryRow(ctx, checkIfUnitBelongToProject, arg.ProjectsID, arg.ID)
	var i CheckIfUnitBelongToProjectRow
	err := row.Scan(&i.ProjectsID, &i.PropertyID, &i.UnitsID)
	return i, err
}

const createProjectProperties = `-- name: CreateProjectProperties :one
INSERT INTO project_properties (
  property_name,
  property_name_arabic,
  description,
  description_arabic,
  status,
  is_verified,
  property_rank,
  amenities_id,
  addresses_id,
  phases_id,
  property_types_id,
  created_at,
  updated_at,
  projects_id,
  is_show_owner_info,
  property,
  live_status,
  countries_id,
  developer_companies_id,
  ref_no,
  users_id,
  owner_users_id,
  is_multiphase,
  property_title,
  notes,
  notes_arabic,
  is_notes_public
)VALUES (
    $1 ,$2, $3, $4,$5,$6,$7,$8,$9,$10, $11, $12, $13, $14,  $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27
) RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type CreateProjectPropertiesParams struct {
	PropertyName         string      `json:"property_name"`
	PropertyNameArabic   string      `json:"property_name_arabic"`
	Description          string      `json:"description"`
	DescriptionArabic    string      `json:"description_arabic"`
	Status               int64       `json:"status"`
	IsVerified           pgtype.Bool `json:"is_verified"`
	PropertyRank         int64       `json:"property_rank"`
	AmenitiesID          []int64     `json:"amenities_id"`
	AddressesID          int64       `json:"addresses_id"`
	PhasesID             pgtype.Int8 `json:"phases_id"`
	PropertyTypesID      []int64     `json:"property_types_id"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	ProjectsID           int64       `json:"projects_id"`
	IsShowOwnerInfo      pgtype.Bool `json:"is_show_owner_info"`
	Property             int64       `json:"property"`
	LiveStatus           pgtype.Bool `json:"live_status"`
	CountriesID          int64       `json:"countries_id"`
	DeveloperCompaniesID int64       `json:"developer_companies_id"`
	RefNo                string      `json:"ref_no"`
	UsersID              int64       `json:"users_id"`
	OwnerUsersID         pgtype.Int8 `json:"owner_users_id"`
	IsMultiphase         pgtype.Bool `json:"is_multiphase"`
	PropertyTitle        pgtype.Text `json:"property_title"`
	Notes                pgtype.Text `json:"notes"`
	NotesArabic          pgtype.Text `json:"notes_arabic"`
	IsNotesPublic        pgtype.Bool `json:"is_notes_public"`
}

func (q *Queries) CreateProjectProperties(ctx context.Context, arg CreateProjectPropertiesParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, createProjectProperties,
		arg.PropertyName,
		arg.PropertyNameArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.Status,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AmenitiesID,
		arg.AddressesID,
		arg.PhasesID,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProjectsID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.LiveStatus,
		arg.CountriesID,
		arg.DeveloperCompaniesID,
		arg.RefNo,
		arg.UsersID,
		arg.OwnerUsersID,
		arg.IsMultiphase,
		arg.PropertyTitle,
		arg.Notes,
		arg.NotesArabic,
		arg.IsNotesPublic,
	)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const deleteProjectProperties = `-- name: DeleteProjectProperties :exec
DELETE FROM project_properties
Where id = $1
`

func (q *Queries) DeleteProjectProperties(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectProperties, id)
	return err
}

const getAllProjectProperties = `-- name: GetAllProjectProperties :many
SELECT id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public FROM project_properties
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllProjectPropertiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProjectProperties(ctx context.Context, arg GetAllProjectPropertiesParams) ([]ProjectProperty, error) {
	rows, err := q.db.Query(ctx, getAllProjectProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectProperty
	for rows.Next() {
		var i ProjectProperty
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectPropertiesByProjectId = `-- name: GetAllProjectPropertiesByProjectId :many
SELECT 
 project_properties.id, property_name, property_name_arabic, project_properties.description, project_properties.description_arabic, project_properties.status, project_properties.is_verified, property_rank, amenities_id, project_properties.addresses_id, phases_id, property_types_id, project_properties.created_at, project_properties.updated_at, project_properties.projects_id, is_show_owner_info, project_properties.property, project_properties.live_status, project_properties.countries_id, project_properties.developer_companies_id, project_properties.ref_no, project_properties.users_id, owner_users_id, project_properties.is_multiphase, property_title, notes, notes_arabic, is_notes_public, projects.id, project_name, ref_number, no_of_views, projects.is_verified, project_rank, projects.addresses_id, projects.status, projects.developer_companies_id, developer_company_branches_id, projects.countries_id, projects.created_at, projects.updated_at, projects.is_multiphase, projects.live_status, project_no, license_no, projects.users_id, projects.description, projects.description_arabic, projects.rating, projects.polygon_coords, projects.facts, projects.exclusive, projects.start_date, projects.end_date, slug, projects.deleted_at, projects.bank_name, projects.registration_date, projects.escrow_number, refreshed_at, companies.id, companies.ref_no, company_name, company_activities_id, company_parent_id, tag_line, companies.description, companies.description_ar, logo_url, email, phone_number, whatsapp_number, companies.is_verified, website_url, cover_image_url, no_of_employees, company_rank, companies.status, company_type, companies.addresses_id, companies.users_id, created_by, companies.created_at, companies.updated_at, companies.updated_by, location_url, vat_no, vat_status, vat_file_url, addresses.id, addresses.countries_id, addresses.states_id, addresses.cities_id, addresses.communities_id, sub_communities_id, locations_id, addresses.created_at, addresses.updated_at, property_map_location_id, full_address, full_address_ar, countries.id, country, flag, countries.created_at, countries.updated_at, alpha2_code, alpha3_code, country_code, countries.lat, countries.lng, name, numcode, default_settings, countries.status, countries.deleted_at, countries.updated_by, country_ar, states.id, state, states.countries_id, is_capital, states.created_at, states.updated_at, states.lat, states.lng, states.status, states.deleted_at, states.updated_by, state_ar, cities.id, city, cities.states_id, cities.created_at, cities.updated_at, cities.lat, cities.lng, cities.status, cities.deleted_at, cities.updated_by, city_ar, cover_image, cities.description, communities.id, community, communities.cities_id, communities.created_at, communities.updated_at, communities.lat, communities.lng, communities.status, communities.deleted_at, communities.updated_by, community_ar, sub_communities.id, sub_community, sub_communities.communities_id, sub_communities.created_at, sub_communities.updated_at, sub_communities.lng, sub_communities.lat, sub_communities.status, sub_communities.deleted_at, sub_communities.updated_by, sub_community_ar, properties_facts.id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, properties_facts.start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, properties_facts.property, is_branch, properties_facts.created_at, properties_facts.updated_at, available_units, commercial_tax, municipality_tax, is_project_fact, project_id, completion_percentage, completion_percentage_date, type_name_id, sc_currency_id, unit_of_measure, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, property_types.status, unit_types, icon, phases.id, phase_name, phases.addresses_id, phases.created_at, phases.updated_at, phases.status, phases.live_status, phases.ref_no, phases.projects_id, phases.rating, phases.description, phases.description_ar, phases.polygon_coords, phases.facts, phases.exclusive, phases.start_date, phases.end_date, phases.bank_name, phases.registration_date, phases.escrow_number
  FROM project_properties 
LEFT JOIN projects ON projects.id = project_properties.projects_id
LEFT JOIN companies ON companies.id = projects.developer_companies_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
LEFT JOIN properties_facts ON project_properties.id = properties_facts.properties_id
LEFT JOIN property_types ON properties_facts.id = ANY(property_types.property_type_facts_id)
LEFT JOIN phases ON project_properties.phases_id = phases.id
WHERE 
   ( 
      $3 = '%%' OR
      project_properties.property_name ILIKE $3   
      OR     project_properties.ref_no ILIKE $3
      OR  projects.project_name % $3 
      OR phase_name ILIKE $3 
      OR property_types.type ILIKE $3 
   )
AND CASE 
  WHEN
  project_properties.projects_id = $4 AND project_properties.phases_id IS NULL
  AND project_properties.status!= 5 
  AND project_properties.status != 6 THEN TRUE
  ELSE
  project_properties.projects_id = $4 AND project_properties.phases_id = $5
  AND 
  project_properties.status!= 5 
  AND project_properties.status != 6 
  END
 
GROUP BY 
 project_properties.created_at,
 project_properties.id,
 projects.id,
 companies.id,
 addresses.id,
 countries.id,
 states.id,
 cities.id,
 communities.id,
 sub_communities.id,
 properties_facts.id,
 property_types.id,
 phases.id
ORDER BY project_properties.created_at DESC 
LIMIT $1 OFFSET $2
`

type GetAllProjectPropertiesByProjectIdParams struct {
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
	Search    interface{} `json:"search"`
	ProjectID int64       `json:"project_id"`
	PhaseID   pgtype.Int8 `json:"phase_id"`
}

type GetAllProjectPropertiesByProjectIdRow struct {
	ID                         int64              `json:"id"`
	PropertyName               string             `json:"property_name"`
	PropertyNameArabic         string             `json:"property_name_arabic"`
	Description                string             `json:"description"`
	DescriptionArabic          string             `json:"description_arabic"`
	Status                     int64              `json:"status"`
	IsVerified                 pgtype.Bool        `json:"is_verified"`
	PropertyRank               int64              `json:"property_rank"`
	AmenitiesID                []int64            `json:"amenities_id"`
	AddressesID                int64              `json:"addresses_id"`
	PhasesID                   pgtype.Int8        `json:"phases_id"`
	PropertyTypesID            []int64            `json:"property_types_id"`
	CreatedAt                  time.Time          `json:"created_at"`
	UpdatedAt                  time.Time          `json:"updated_at"`
	ProjectsID                 int64              `json:"projects_id"`
	IsShowOwnerInfo            pgtype.Bool        `json:"is_show_owner_info"`
	Property                   int64              `json:"property"`
	LiveStatus                 pgtype.Bool        `json:"live_status"`
	CountriesID                int64              `json:"countries_id"`
	DeveloperCompaniesID       int64              `json:"developer_companies_id"`
	RefNo                      string             `json:"ref_no"`
	UsersID                    int64              `json:"users_id"`
	OwnerUsersID               pgtype.Int8        `json:"owner_users_id"`
	IsMultiphase               pgtype.Bool        `json:"is_multiphase"`
	PropertyTitle              pgtype.Text        `json:"property_title"`
	Notes                      pgtype.Text        `json:"notes"`
	NotesArabic                pgtype.Text        `json:"notes_arabic"`
	IsNotesPublic              pgtype.Bool        `json:"is_notes_public"`
	ID_2                       pgtype.Int8        `json:"id_2"`
	ProjectName                pgtype.Text        `json:"project_name"`
	RefNumber                  pgtype.Text        `json:"ref_number"`
	NoOfViews                  pgtype.Int8        `json:"no_of_views"`
	IsVerified_2               pgtype.Bool        `json:"is_verified_2"`
	ProjectRank                pgtype.Int8        `json:"project_rank"`
	AddressesID_2              pgtype.Int8        `json:"addresses_id_2"`
	Status_2                   pgtype.Int8        `json:"status_2"`
	DeveloperCompaniesID_2     pgtype.Int8        `json:"developer_companies_id_2"`
	DeveloperCompanyBranchesID pgtype.Int8        `json:"developer_company_branches_id"`
	CountriesID_2              pgtype.Int8        `json:"countries_id_2"`
	CreatedAt_2                pgtype.Timestamptz `json:"created_at_2"`
	UpdatedAt_2                pgtype.Timestamptz `json:"updated_at_2"`
	IsMultiphase_2             pgtype.Bool        `json:"is_multiphase_2"`
	LiveStatus_2               pgtype.Bool        `json:"live_status_2"`
	ProjectNo                  pgtype.Text        `json:"project_no"`
	LicenseNo                  pgtype.Text        `json:"license_no"`
	UsersID_2                  pgtype.Int8        `json:"users_id_2"`
	Description_2              pgtype.Text        `json:"description_2"`
	DescriptionArabic_2        pgtype.Text        `json:"description_arabic_2"`
	Rating                     pgtype.Float8      `json:"rating"`
	PolygonCoords              []byte             `json:"polygon_coords"`
	Facts                      []byte             `json:"facts"`
	Exclusive                  pgtype.Bool        `json:"exclusive"`
	StartDate                  pgtype.Date        `json:"start_date"`
	EndDate                    pgtype.Date        `json:"end_date"`
	Slug                       pgtype.Text        `json:"slug"`
	DeletedAt                  pgtype.Timestamptz `json:"deleted_at"`
	BankName                   pgtype.Text        `json:"bank_name"`
	RegistrationDate           pgtype.Date        `json:"registration_date"`
	EscrowNumber               pgtype.Text        `json:"escrow_number"`
	RefreshedAt                pgtype.Timestamptz `json:"refreshed_at"`
	ID_3                       pgtype.Int8        `json:"id_3"`
	RefNo_2                    pgtype.Text        `json:"ref_no_2"`
	CompanyName                pgtype.Text        `json:"company_name"`
	CompanyActivitiesID        []int64            `json:"company_activities_id"`
	CompanyParentID            pgtype.Int8        `json:"company_parent_id"`
	TagLine                    pgtype.Text        `json:"tag_line"`
	Description_3              pgtype.Text        `json:"description_3"`
	DescriptionAr              pgtype.Text        `json:"description_ar"`
	LogoUrl                    pgtype.Text        `json:"logo_url"`
	Email                      pgtype.Text        `json:"email"`
	PhoneNumber                pgtype.Text        `json:"phone_number"`
	WhatsappNumber             pgtype.Text        `json:"whatsapp_number"`
	IsVerified_3               pgtype.Bool        `json:"is_verified_3"`
	WebsiteUrl                 pgtype.Text        `json:"website_url"`
	CoverImageUrl              pgtype.Text        `json:"cover_image_url"`
	NoOfEmployees              pgtype.Int8        `json:"no_of_employees"`
	CompanyRank                pgtype.Int8        `json:"company_rank"`
	Status_3                   pgtype.Int8        `json:"status_3"`
	CompanyType                pgtype.Int8        `json:"company_type"`
	AddressesID_3              pgtype.Int8        `json:"addresses_id_3"`
	UsersID_3                  pgtype.Int8        `json:"users_id_3"`
	CreatedBy                  pgtype.Int8        `json:"created_by"`
	CreatedAt_3                pgtype.Timestamptz `json:"created_at_3"`
	UpdatedAt_3                pgtype.Timestamptz `json:"updated_at_3"`
	UpdatedBy                  pgtype.Int8        `json:"updated_by"`
	LocationUrl                pgtype.Text        `json:"location_url"`
	VatNo                      pgtype.Text        `json:"vat_no"`
	VatStatus                  pgtype.Int8        `json:"vat_status"`
	VatFileUrl                 pgtype.Text        `json:"vat_file_url"`
	ID_4                       pgtype.Int8        `json:"id_4"`
	CountriesID_3              pgtype.Int8        `json:"countries_id_3"`
	StatesID                   pgtype.Int8        `json:"states_id"`
	CitiesID                   pgtype.Int8        `json:"cities_id"`
	CommunitiesID              pgtype.Int8        `json:"communities_id"`
	SubCommunitiesID           pgtype.Int8        `json:"sub_communities_id"`
	LocationsID                pgtype.Int8        `json:"locations_id"`
	CreatedAt_4                pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4                pgtype.Timestamptz `json:"updated_at_4"`
	PropertyMapLocationID      pgtype.Int8        `json:"property_map_location_id"`
	FullAddress                pgtype.Text        `json:"full_address"`
	FullAddressAr              pgtype.Text        `json:"full_address_ar"`
	ID_5                       pgtype.Int8        `json:"id_5"`
	Country                    pgtype.Text        `json:"country"`
	Flag                       pgtype.Text        `json:"flag"`
	CreatedAt_5                pgtype.Timestamptz `json:"created_at_5"`
	UpdatedAt_5                pgtype.Timestamptz `json:"updated_at_5"`
	Alpha2Code                 pgtype.Text        `json:"alpha2_code"`
	Alpha3Code                 pgtype.Text        `json:"alpha3_code"`
	CountryCode                pgtype.Int8        `json:"country_code"`
	Lat                        pgtype.Float8      `json:"lat"`
	Lng                        pgtype.Float8      `json:"lng"`
	Name                       pgtype.Text        `json:"name"`
	Numcode                    pgtype.Int8        `json:"numcode"`
	DefaultSettings            []byte             `json:"default_settings"`
	Status_4                   pgtype.Int8        `json:"status_4"`
	DeletedAt_2                pgtype.Timestamptz `json:"deleted_at_2"`
	UpdatedBy_2                pgtype.Int8        `json:"updated_by_2"`
	CountryAr                  pgtype.Text        `json:"country_ar"`
	ID_6                       pgtype.Int8        `json:"id_6"`
	State                      pgtype.Text        `json:"state"`
	CountriesID_4              pgtype.Int8        `json:"countries_id_4"`
	IsCapital                  pgtype.Bool        `json:"is_capital"`
	CreatedAt_6                pgtype.Timestamptz `json:"created_at_6"`
	UpdatedAt_6                pgtype.Timestamptz `json:"updated_at_6"`
	Lat_2                      pgtype.Float8      `json:"lat_2"`
	Lng_2                      pgtype.Float8      `json:"lng_2"`
	Status_5                   pgtype.Int8        `json:"status_5"`
	DeletedAt_3                pgtype.Timestamptz `json:"deleted_at_3"`
	UpdatedBy_3                pgtype.Int8        `json:"updated_by_3"`
	StateAr                    pgtype.Text        `json:"state_ar"`
	ID_7                       pgtype.Int8        `json:"id_7"`
	City                       pgtype.Text        `json:"city"`
	StatesID_2                 pgtype.Int8        `json:"states_id_2"`
	CreatedAt_7                pgtype.Timestamptz `json:"created_at_7"`
	UpdatedAt_7                pgtype.Timestamptz `json:"updated_at_7"`
	Lat_3                      pgtype.Float8      `json:"lat_3"`
	Lng_3                      pgtype.Float8      `json:"lng_3"`
	Status_6                   pgtype.Int8        `json:"status_6"`
	DeletedAt_4                pgtype.Timestamptz `json:"deleted_at_4"`
	UpdatedBy_4                pgtype.Int8        `json:"updated_by_4"`
	CityAr                     pgtype.Text        `json:"city_ar"`
	CoverImage                 pgtype.Text        `json:"cover_image"`
	Description_4              pgtype.Text        `json:"description_4"`
	ID_8                       pgtype.Int8        `json:"id_8"`
	Community                  pgtype.Text        `json:"community"`
	CitiesID_2                 pgtype.Int8        `json:"cities_id_2"`
	CreatedAt_8                pgtype.Timestamptz `json:"created_at_8"`
	UpdatedAt_8                pgtype.Timestamptz `json:"updated_at_8"`
	Lat_4                      pgtype.Float8      `json:"lat_4"`
	Lng_4                      pgtype.Float8      `json:"lng_4"`
	Status_7                   pgtype.Int8        `json:"status_7"`
	DeletedAt_5                pgtype.Timestamptz `json:"deleted_at_5"`
	UpdatedBy_5                pgtype.Int8        `json:"updated_by_5"`
	CommunityAr                pgtype.Text        `json:"community_ar"`
	ID_9                       pgtype.Int8        `json:"id_9"`
	SubCommunity               pgtype.Text        `json:"sub_community"`
	CommunitiesID_2            pgtype.Int8        `json:"communities_id_2"`
	CreatedAt_9                pgtype.Timestamptz `json:"created_at_9"`
	UpdatedAt_9                pgtype.Timestamptz `json:"updated_at_9"`
	Lng_5                      pgtype.Float8      `json:"lng_5"`
	Lat_5                      pgtype.Float8      `json:"lat_5"`
	Status_8                   pgtype.Int8        `json:"status_8"`
	DeletedAt_6                pgtype.Timestamptz `json:"deleted_at_6"`
	UpdatedBy_6                pgtype.Int8        `json:"updated_by_6"`
	SubCommunityAr             pgtype.Text        `json:"sub_community_ar"`
	ID_10                      pgtype.Int8        `json:"id_10"`
	Bedroom                    pgtype.Text        `json:"bedroom"`
	Bathroom                   pgtype.Int8        `json:"bathroom"`
	PlotArea                   pgtype.Float8      `json:"plot_area"`
	BuiltUpArea                pgtype.Float8      `json:"built_up_area"`
	View                       []int64            `json:"view"`
	Furnished                  pgtype.Int8        `json:"furnished"`
	Ownership                  pgtype.Int8        `json:"ownership"`
	CompletionStatus           pgtype.Int8        `json:"completion_status"`
	StartDate_2                pgtype.Timestamptz `json:"start_date_2"`
	CompletionDate             pgtype.Timestamptz `json:"completion_date"`
	HandoverDate               pgtype.Timestamptz `json:"handover_date"`
	NoOfFloor                  pgtype.Int8        `json:"no_of_floor"`
	NoOfUnits                  pgtype.Int8        `json:"no_of_units"`
	MinArea                    pgtype.Float8      `json:"min_area"`
	MaxArea                    pgtype.Float8      `json:"max_area"`
	ServiceCharge              pgtype.Int8        `json:"service_charge"`
	Parking                    pgtype.Int8        `json:"parking"`
	AskPrice                   pgtype.Bool        `json:"ask_price"`
	Price                      pgtype.Float8      `json:"price"`
	RentType                   pgtype.Int8        `json:"rent_type"`
	NoOfPayment                pgtype.Int8        `json:"no_of_payment"`
	NoOfRetail                 pgtype.Int8        `json:"no_of_retail"`
	NoOfPool                   pgtype.Int8        `json:"no_of_pool"`
	Elevator                   pgtype.Int8        `json:"elevator"`
	StartingPrice              pgtype.Int8        `json:"starting_price"`
	LifeStyle                  pgtype.Int8        `json:"life_style"`
	PropertiesID               pgtype.Int8        `json:"properties_id"`
	Property_2                 pgtype.Int8        `json:"property_2"`
	IsBranch                   pgtype.Bool        `json:"is_branch"`
	CreatedAt_10               pgtype.Timestamptz `json:"created_at_10"`
	UpdatedAt_10               pgtype.Timestamptz `json:"updated_at_10"`
	AvailableUnits             pgtype.Int8        `json:"available_units"`
	CommercialTax              pgtype.Float8      `json:"commercial_tax"`
	MunicipalityTax            pgtype.Float8      `json:"municipality_tax"`
	IsProjectFact              pgtype.Bool        `json:"is_project_fact"`
	ProjectID                  pgtype.Int8        `json:"project_id"`
	CompletionPercentage       pgtype.Int8        `json:"completion_percentage"`
	CompletionPercentageDate   pgtype.Timestamptz `json:"completion_percentage_date"`
	TypeNameID                 pgtype.Int8        `json:"type_name_id"`
	ScCurrencyID               pgtype.Int8        `json:"sc_currency_id"`
	UnitOfMeasure              pgtype.Text        `json:"unit_of_measure"`
	ID_11                      pgtype.Int8        `json:"id_11"`
	Type                       pgtype.Text        `json:"type"`
	Code                       pgtype.Text        `json:"code"`
	IsResidential              pgtype.Bool        `json:"is_residential"`
	IsCommercial               pgtype.Bool        `json:"is_commercial"`
	CreatedAt_11               pgtype.Timestamptz `json:"created_at_11"`
	UpdatedAt_11               pgtype.Timestamptz `json:"updated_at_11"`
	PropertyTypeFactsID        []int64            `json:"property_type_facts_id"`
	Category                   pgtype.Text        `json:"category"`
	Status_9                   pgtype.Int8        `json:"status_9"`
	UnitTypes                  []int64            `json:"unit_types"`
	Icon                       pgtype.Text        `json:"icon"`
	ID_12                      pgtype.Int8        `json:"id_12"`
	PhaseName                  pgtype.Text        `json:"phase_name"`
	AddressesID_4              pgtype.Int8        `json:"addresses_id_4"`
	CreatedAt_12               pgtype.Timestamptz `json:"created_at_12"`
	UpdatedAt_12               pgtype.Timestamptz `json:"updated_at_12"`
	Status_10                  pgtype.Int8        `json:"status_10"`
	LiveStatus_3               pgtype.Bool        `json:"live_status_3"`
	RefNo_3                    pgtype.Text        `json:"ref_no_3"`
	ProjectsID_2               pgtype.Int8        `json:"projects_id_2"`
	Rating_2                   pgtype.Float8      `json:"rating_2"`
	Description_5              pgtype.Text        `json:"description_5"`
	DescriptionAr_2            pgtype.Text        `json:"description_ar_2"`
	PolygonCoords_2            []byte             `json:"polygon_coords_2"`
	Facts_2                    []byte             `json:"facts_2"`
	Exclusive_2                pgtype.Bool        `json:"exclusive_2"`
	StartDate_3                pgtype.Date        `json:"start_date_3"`
	EndDate_2                  pgtype.Date        `json:"end_date_2"`
	BankName_2                 pgtype.Text        `json:"bank_name_2"`
	RegistrationDate_2         pgtype.Date        `json:"registration_date_2"`
	EscrowNumber_2             pgtype.Text        `json:"escrow_number_2"`
}

func (q *Queries) GetAllProjectPropertiesByProjectId(ctx context.Context, arg GetAllProjectPropertiesByProjectIdParams) ([]GetAllProjectPropertiesByProjectIdRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPropertiesByProjectId,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.ProjectID,
		arg.PhaseID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPropertiesByProjectIdRow
	for rows.Next() {
		var i GetAllProjectPropertiesByProjectIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
			&i.ID_2,
			&i.ProjectName,
			&i.RefNumber,
			&i.NoOfViews,
			&i.IsVerified_2,
			&i.ProjectRank,
			&i.AddressesID_2,
			&i.Status_2,
			&i.DeveloperCompaniesID_2,
			&i.DeveloperCompanyBranchesID,
			&i.CountriesID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.IsMultiphase_2,
			&i.LiveStatus_2,
			&i.ProjectNo,
			&i.LicenseNo,
			&i.UsersID_2,
			&i.Description_2,
			&i.DescriptionArabic_2,
			&i.Rating,
			&i.PolygonCoords,
			&i.Facts,
			&i.Exclusive,
			&i.StartDate,
			&i.EndDate,
			&i.Slug,
			&i.DeletedAt,
			&i.BankName,
			&i.RegistrationDate,
			&i.EscrowNumber,
			&i.RefreshedAt,
			&i.ID_3,
			&i.RefNo_2,
			&i.CompanyName,
			&i.CompanyActivitiesID,
			&i.CompanyParentID,
			&i.TagLine,
			&i.Description_3,
			&i.DescriptionAr,
			&i.LogoUrl,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.IsVerified_3,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.NoOfEmployees,
			&i.CompanyRank,
			&i.Status_3,
			&i.CompanyType,
			&i.AddressesID_3,
			&i.UsersID_3,
			&i.CreatedBy,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.UpdatedBy,
			&i.LocationUrl,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.ID_4,
			&i.CountriesID_3,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubCommunitiesID,
			&i.LocationsID,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.PropertyMapLocationID,
			&i.FullAddress,
			&i.FullAddressAr,
			&i.ID_5,
			&i.Country,
			&i.Flag,
			&i.CreatedAt_5,
			&i.UpdatedAt_5,
			&i.Alpha2Code,
			&i.Alpha3Code,
			&i.CountryCode,
			&i.Lat,
			&i.Lng,
			&i.Name,
			&i.Numcode,
			&i.DefaultSettings,
			&i.Status_4,
			&i.DeletedAt_2,
			&i.UpdatedBy_2,
			&i.CountryAr,
			&i.ID_6,
			&i.State,
			&i.CountriesID_4,
			&i.IsCapital,
			&i.CreatedAt_6,
			&i.UpdatedAt_6,
			&i.Lat_2,
			&i.Lng_2,
			&i.Status_5,
			&i.DeletedAt_3,
			&i.UpdatedBy_3,
			&i.StateAr,
			&i.ID_7,
			&i.City,
			&i.StatesID_2,
			&i.CreatedAt_7,
			&i.UpdatedAt_7,
			&i.Lat_3,
			&i.Lng_3,
			&i.Status_6,
			&i.DeletedAt_4,
			&i.UpdatedBy_4,
			&i.CityAr,
			&i.CoverImage,
			&i.Description_4,
			&i.ID_8,
			&i.Community,
			&i.CitiesID_2,
			&i.CreatedAt_8,
			&i.UpdatedAt_8,
			&i.Lat_4,
			&i.Lng_4,
			&i.Status_7,
			&i.DeletedAt_5,
			&i.UpdatedBy_5,
			&i.CommunityAr,
			&i.ID_9,
			&i.SubCommunity,
			&i.CommunitiesID_2,
			&i.CreatedAt_9,
			&i.UpdatedAt_9,
			&i.Lng_5,
			&i.Lat_5,
			&i.Status_8,
			&i.DeletedAt_6,
			&i.UpdatedBy_6,
			&i.SubCommunityAr,
			&i.ID_10,
			&i.Bedroom,
			&i.Bathroom,
			&i.PlotArea,
			&i.BuiltUpArea,
			&i.View,
			&i.Furnished,
			&i.Ownership,
			&i.CompletionStatus,
			&i.StartDate_2,
			&i.CompletionDate,
			&i.HandoverDate,
			&i.NoOfFloor,
			&i.NoOfUnits,
			&i.MinArea,
			&i.MaxArea,
			&i.ServiceCharge,
			&i.Parking,
			&i.AskPrice,
			&i.Price,
			&i.RentType,
			&i.NoOfPayment,
			&i.NoOfRetail,
			&i.NoOfPool,
			&i.Elevator,
			&i.StartingPrice,
			&i.LifeStyle,
			&i.PropertiesID,
			&i.Property_2,
			&i.IsBranch,
			&i.CreatedAt_10,
			&i.UpdatedAt_10,
			&i.AvailableUnits,
			&i.CommercialTax,
			&i.MunicipalityTax,
			&i.IsProjectFact,
			&i.ProjectID,
			&i.CompletionPercentage,
			&i.CompletionPercentageDate,
			&i.TypeNameID,
			&i.ScCurrencyID,
			&i.UnitOfMeasure,
			&i.ID_11,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_11,
			&i.UpdatedAt_11,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status_9,
			&i.UnitTypes,
			&i.Icon,
			&i.ID_12,
			&i.PhaseName,
			&i.AddressesID_4,
			&i.CreatedAt_12,
			&i.UpdatedAt_12,
			&i.Status_10,
			&i.LiveStatus_3,
			&i.RefNo_3,
			&i.ProjectsID_2,
			&i.Rating_2,
			&i.Description_5,
			&i.DescriptionAr_2,
			&i.PolygonCoords_2,
			&i.Facts_2,
			&i.Exclusive_2,
			&i.StartDate_3,
			&i.EndDate_2,
			&i.BankName_2,
			&i.RegistrationDate_2,
			&i.EscrowNumber_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectPropertiesByStatus = `-- name: GetAllProjectPropertiesByStatus :many
SELECT project_properties.id, property_name, property_name_arabic, project_properties.description, project_properties.description_arabic, project_properties.status, project_properties.is_verified, property_rank, amenities_id, project_properties.addresses_id, phases_id, property_types_id, project_properties.created_at, project_properties.updated_at, project_properties.projects_id, is_show_owner_info, project_properties.property, project_properties.live_status, project_properties.countries_id, project_properties.developer_companies_id, project_properties.ref_no, project_properties.users_id, owner_users_id, project_properties.is_multiphase, property_title, notes, notes_arabic, is_notes_public, projects.id, project_name, ref_number, no_of_views, projects.is_verified, project_rank, projects.addresses_id, projects.status, projects.developer_companies_id, developer_company_branches_id, projects.countries_id, projects.created_at, projects.updated_at, projects.is_multiphase, projects.live_status, project_no, license_no, projects.users_id, projects.description, projects.description_arabic, projects.rating, projects.polygon_coords, projects.facts, projects.exclusive, projects.start_date, projects.end_date, slug, projects.deleted_at, projects.bank_name, projects.registration_date, projects.escrow_number, refreshed_at, companies.id, companies.ref_no, company_name, company_activities_id, company_parent_id, tag_line, companies.description, companies.description_ar, logo_url, email, phone_number, whatsapp_number, companies.is_verified, website_url, cover_image_url, no_of_employees, company_rank, companies.status, company_type, companies.addresses_id, companies.users_id, created_by, companies.created_at, companies.updated_at, companies.updated_by, location_url, vat_no, vat_status, vat_file_url, addresses.id, addresses.countries_id, addresses.states_id, addresses.cities_id, addresses.communities_id, sub_communities_id, locations_id, addresses.created_at, addresses.updated_at, property_map_location_id, full_address, full_address_ar, countries.id, country, flag, countries.created_at, countries.updated_at, alpha2_code, alpha3_code, country_code, countries.lat, countries.lng, name, numcode, default_settings, countries.status, countries.deleted_at, countries.updated_by, country_ar, states.id, state, states.countries_id, is_capital, states.created_at, states.updated_at, states.lat, states.lng, states.status, states.deleted_at, states.updated_by, state_ar, cities.id, city, cities.states_id, cities.created_at, cities.updated_at, cities.lat, cities.lng, cities.status, cities.deleted_at, cities.updated_by, city_ar, cover_image, cities.description, communities.id, community, communities.cities_id, communities.created_at, communities.updated_at, communities.lat, communities.lng, communities.status, communities.deleted_at, communities.updated_by, community_ar, sub_communities.id, sub_community, sub_communities.communities_id, sub_communities.created_at, sub_communities.updated_at, sub_communities.lng, sub_communities.lat, sub_communities.status, sub_communities.deleted_at, sub_communities.updated_by, sub_community_ar, properties_facts.id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, properties_facts.start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, properties_facts.property, is_branch, properties_facts.created_at, properties_facts.updated_at, available_units, commercial_tax, municipality_tax, is_project_fact, project_id, completion_percentage, completion_percentage_date, type_name_id, sc_currency_id, unit_of_measure, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, property_types.status, unit_types, icon, phases.id, phase_name, phases.addresses_id, phases.created_at, phases.updated_at, phases.status, phases.live_status, phases.ref_no, phases.projects_id, phases.rating, phases.description, phases.description_ar, phases.polygon_coords, phases.facts, phases.exclusive, phases.start_date, phases.end_date, phases.bank_name, phases.registration_date, phases.escrow_number
FROM project_properties
LEFT JOIN projects ON projects.id = project_properties.projects_id
LEFT JOIN companies ON companies.id = projects.developer_companies_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
LEFT JOIN properties_facts ON project_properties.id = properties_facts.properties_id
LEFT JOIN property_types ON properties_facts.id = ANY(property_types.property_type_facts_id)
LEFT JOIN phases ON project_properties.phases_id = phases.id
WHERE 
( 
      $3 = '%%' OR
      project_properties.property_name ILIKE $3   
      OR     project_properties.ref_no ILIKE $3
      OR  projects.project_name % $3 
      OR phase_name ILIKE $3 
      OR property_types.type ILIKE $3 
   )
AND
project_properties.status = $4
ORDER BY project_properties.id 
LIMIT $1 OFFSET $2
`

type GetAllProjectPropertiesByStatusParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Search interface{} `json:"search"`
	Status int64       `json:"status"`
}

type GetAllProjectPropertiesByStatusRow struct {
	ID                         int64              `json:"id"`
	PropertyName               string             `json:"property_name"`
	PropertyNameArabic         string             `json:"property_name_arabic"`
	Description                string             `json:"description"`
	DescriptionArabic          string             `json:"description_arabic"`
	Status                     int64              `json:"status"`
	IsVerified                 pgtype.Bool        `json:"is_verified"`
	PropertyRank               int64              `json:"property_rank"`
	AmenitiesID                []int64            `json:"amenities_id"`
	AddressesID                int64              `json:"addresses_id"`
	PhasesID                   pgtype.Int8        `json:"phases_id"`
	PropertyTypesID            []int64            `json:"property_types_id"`
	CreatedAt                  time.Time          `json:"created_at"`
	UpdatedAt                  time.Time          `json:"updated_at"`
	ProjectsID                 int64              `json:"projects_id"`
	IsShowOwnerInfo            pgtype.Bool        `json:"is_show_owner_info"`
	Property                   int64              `json:"property"`
	LiveStatus                 pgtype.Bool        `json:"live_status"`
	CountriesID                int64              `json:"countries_id"`
	DeveloperCompaniesID       int64              `json:"developer_companies_id"`
	RefNo                      string             `json:"ref_no"`
	UsersID                    int64              `json:"users_id"`
	OwnerUsersID               pgtype.Int8        `json:"owner_users_id"`
	IsMultiphase               pgtype.Bool        `json:"is_multiphase"`
	PropertyTitle              pgtype.Text        `json:"property_title"`
	Notes                      pgtype.Text        `json:"notes"`
	NotesArabic                pgtype.Text        `json:"notes_arabic"`
	IsNotesPublic              pgtype.Bool        `json:"is_notes_public"`
	ID_2                       pgtype.Int8        `json:"id_2"`
	ProjectName                pgtype.Text        `json:"project_name"`
	RefNumber                  pgtype.Text        `json:"ref_number"`
	NoOfViews                  pgtype.Int8        `json:"no_of_views"`
	IsVerified_2               pgtype.Bool        `json:"is_verified_2"`
	ProjectRank                pgtype.Int8        `json:"project_rank"`
	AddressesID_2              pgtype.Int8        `json:"addresses_id_2"`
	Status_2                   pgtype.Int8        `json:"status_2"`
	DeveloperCompaniesID_2     pgtype.Int8        `json:"developer_companies_id_2"`
	DeveloperCompanyBranchesID pgtype.Int8        `json:"developer_company_branches_id"`
	CountriesID_2              pgtype.Int8        `json:"countries_id_2"`
	CreatedAt_2                pgtype.Timestamptz `json:"created_at_2"`
	UpdatedAt_2                pgtype.Timestamptz `json:"updated_at_2"`
	IsMultiphase_2             pgtype.Bool        `json:"is_multiphase_2"`
	LiveStatus_2               pgtype.Bool        `json:"live_status_2"`
	ProjectNo                  pgtype.Text        `json:"project_no"`
	LicenseNo                  pgtype.Text        `json:"license_no"`
	UsersID_2                  pgtype.Int8        `json:"users_id_2"`
	Description_2              pgtype.Text        `json:"description_2"`
	DescriptionArabic_2        pgtype.Text        `json:"description_arabic_2"`
	Rating                     pgtype.Float8      `json:"rating"`
	PolygonCoords              []byte             `json:"polygon_coords"`
	Facts                      []byte             `json:"facts"`
	Exclusive                  pgtype.Bool        `json:"exclusive"`
	StartDate                  pgtype.Date        `json:"start_date"`
	EndDate                    pgtype.Date        `json:"end_date"`
	Slug                       pgtype.Text        `json:"slug"`
	DeletedAt                  pgtype.Timestamptz `json:"deleted_at"`
	BankName                   pgtype.Text        `json:"bank_name"`
	RegistrationDate           pgtype.Date        `json:"registration_date"`
	EscrowNumber               pgtype.Text        `json:"escrow_number"`
	RefreshedAt                pgtype.Timestamptz `json:"refreshed_at"`
	ID_3                       pgtype.Int8        `json:"id_3"`
	RefNo_2                    pgtype.Text        `json:"ref_no_2"`
	CompanyName                pgtype.Text        `json:"company_name"`
	CompanyActivitiesID        []int64            `json:"company_activities_id"`
	CompanyParentID            pgtype.Int8        `json:"company_parent_id"`
	TagLine                    pgtype.Text        `json:"tag_line"`
	Description_3              pgtype.Text        `json:"description_3"`
	DescriptionAr              pgtype.Text        `json:"description_ar"`
	LogoUrl                    pgtype.Text        `json:"logo_url"`
	Email                      pgtype.Text        `json:"email"`
	PhoneNumber                pgtype.Text        `json:"phone_number"`
	WhatsappNumber             pgtype.Text        `json:"whatsapp_number"`
	IsVerified_3               pgtype.Bool        `json:"is_verified_3"`
	WebsiteUrl                 pgtype.Text        `json:"website_url"`
	CoverImageUrl              pgtype.Text        `json:"cover_image_url"`
	NoOfEmployees              pgtype.Int8        `json:"no_of_employees"`
	CompanyRank                pgtype.Int8        `json:"company_rank"`
	Status_3                   pgtype.Int8        `json:"status_3"`
	CompanyType                pgtype.Int8        `json:"company_type"`
	AddressesID_3              pgtype.Int8        `json:"addresses_id_3"`
	UsersID_3                  pgtype.Int8        `json:"users_id_3"`
	CreatedBy                  pgtype.Int8        `json:"created_by"`
	CreatedAt_3                pgtype.Timestamptz `json:"created_at_3"`
	UpdatedAt_3                pgtype.Timestamptz `json:"updated_at_3"`
	UpdatedBy                  pgtype.Int8        `json:"updated_by"`
	LocationUrl                pgtype.Text        `json:"location_url"`
	VatNo                      pgtype.Text        `json:"vat_no"`
	VatStatus                  pgtype.Int8        `json:"vat_status"`
	VatFileUrl                 pgtype.Text        `json:"vat_file_url"`
	ID_4                       pgtype.Int8        `json:"id_4"`
	CountriesID_3              pgtype.Int8        `json:"countries_id_3"`
	StatesID                   pgtype.Int8        `json:"states_id"`
	CitiesID                   pgtype.Int8        `json:"cities_id"`
	CommunitiesID              pgtype.Int8        `json:"communities_id"`
	SubCommunitiesID           pgtype.Int8        `json:"sub_communities_id"`
	LocationsID                pgtype.Int8        `json:"locations_id"`
	CreatedAt_4                pgtype.Timestamptz `json:"created_at_4"`
	UpdatedAt_4                pgtype.Timestamptz `json:"updated_at_4"`
	PropertyMapLocationID      pgtype.Int8        `json:"property_map_location_id"`
	FullAddress                pgtype.Text        `json:"full_address"`
	FullAddressAr              pgtype.Text        `json:"full_address_ar"`
	ID_5                       pgtype.Int8        `json:"id_5"`
	Country                    pgtype.Text        `json:"country"`
	Flag                       pgtype.Text        `json:"flag"`
	CreatedAt_5                pgtype.Timestamptz `json:"created_at_5"`
	UpdatedAt_5                pgtype.Timestamptz `json:"updated_at_5"`
	Alpha2Code                 pgtype.Text        `json:"alpha2_code"`
	Alpha3Code                 pgtype.Text        `json:"alpha3_code"`
	CountryCode                pgtype.Int8        `json:"country_code"`
	Lat                        pgtype.Float8      `json:"lat"`
	Lng                        pgtype.Float8      `json:"lng"`
	Name                       pgtype.Text        `json:"name"`
	Numcode                    pgtype.Int8        `json:"numcode"`
	DefaultSettings            []byte             `json:"default_settings"`
	Status_4                   pgtype.Int8        `json:"status_4"`
	DeletedAt_2                pgtype.Timestamptz `json:"deleted_at_2"`
	UpdatedBy_2                pgtype.Int8        `json:"updated_by_2"`
	CountryAr                  pgtype.Text        `json:"country_ar"`
	ID_6                       pgtype.Int8        `json:"id_6"`
	State                      pgtype.Text        `json:"state"`
	CountriesID_4              pgtype.Int8        `json:"countries_id_4"`
	IsCapital                  pgtype.Bool        `json:"is_capital"`
	CreatedAt_6                pgtype.Timestamptz `json:"created_at_6"`
	UpdatedAt_6                pgtype.Timestamptz `json:"updated_at_6"`
	Lat_2                      pgtype.Float8      `json:"lat_2"`
	Lng_2                      pgtype.Float8      `json:"lng_2"`
	Status_5                   pgtype.Int8        `json:"status_5"`
	DeletedAt_3                pgtype.Timestamptz `json:"deleted_at_3"`
	UpdatedBy_3                pgtype.Int8        `json:"updated_by_3"`
	StateAr                    pgtype.Text        `json:"state_ar"`
	ID_7                       pgtype.Int8        `json:"id_7"`
	City                       pgtype.Text        `json:"city"`
	StatesID_2                 pgtype.Int8        `json:"states_id_2"`
	CreatedAt_7                pgtype.Timestamptz `json:"created_at_7"`
	UpdatedAt_7                pgtype.Timestamptz `json:"updated_at_7"`
	Lat_3                      pgtype.Float8      `json:"lat_3"`
	Lng_3                      pgtype.Float8      `json:"lng_3"`
	Status_6                   pgtype.Int8        `json:"status_6"`
	DeletedAt_4                pgtype.Timestamptz `json:"deleted_at_4"`
	UpdatedBy_4                pgtype.Int8        `json:"updated_by_4"`
	CityAr                     pgtype.Text        `json:"city_ar"`
	CoverImage                 pgtype.Text        `json:"cover_image"`
	Description_4              pgtype.Text        `json:"description_4"`
	ID_8                       pgtype.Int8        `json:"id_8"`
	Community                  pgtype.Text        `json:"community"`
	CitiesID_2                 pgtype.Int8        `json:"cities_id_2"`
	CreatedAt_8                pgtype.Timestamptz `json:"created_at_8"`
	UpdatedAt_8                pgtype.Timestamptz `json:"updated_at_8"`
	Lat_4                      pgtype.Float8      `json:"lat_4"`
	Lng_4                      pgtype.Float8      `json:"lng_4"`
	Status_7                   pgtype.Int8        `json:"status_7"`
	DeletedAt_5                pgtype.Timestamptz `json:"deleted_at_5"`
	UpdatedBy_5                pgtype.Int8        `json:"updated_by_5"`
	CommunityAr                pgtype.Text        `json:"community_ar"`
	ID_9                       pgtype.Int8        `json:"id_9"`
	SubCommunity               pgtype.Text        `json:"sub_community"`
	CommunitiesID_2            pgtype.Int8        `json:"communities_id_2"`
	CreatedAt_9                pgtype.Timestamptz `json:"created_at_9"`
	UpdatedAt_9                pgtype.Timestamptz `json:"updated_at_9"`
	Lng_5                      pgtype.Float8      `json:"lng_5"`
	Lat_5                      pgtype.Float8      `json:"lat_5"`
	Status_8                   pgtype.Int8        `json:"status_8"`
	DeletedAt_6                pgtype.Timestamptz `json:"deleted_at_6"`
	UpdatedBy_6                pgtype.Int8        `json:"updated_by_6"`
	SubCommunityAr             pgtype.Text        `json:"sub_community_ar"`
	ID_10                      pgtype.Int8        `json:"id_10"`
	Bedroom                    pgtype.Text        `json:"bedroom"`
	Bathroom                   pgtype.Int8        `json:"bathroom"`
	PlotArea                   pgtype.Float8      `json:"plot_area"`
	BuiltUpArea                pgtype.Float8      `json:"built_up_area"`
	View                       []int64            `json:"view"`
	Furnished                  pgtype.Int8        `json:"furnished"`
	Ownership                  pgtype.Int8        `json:"ownership"`
	CompletionStatus           pgtype.Int8        `json:"completion_status"`
	StartDate_2                pgtype.Timestamptz `json:"start_date_2"`
	CompletionDate             pgtype.Timestamptz `json:"completion_date"`
	HandoverDate               pgtype.Timestamptz `json:"handover_date"`
	NoOfFloor                  pgtype.Int8        `json:"no_of_floor"`
	NoOfUnits                  pgtype.Int8        `json:"no_of_units"`
	MinArea                    pgtype.Float8      `json:"min_area"`
	MaxArea                    pgtype.Float8      `json:"max_area"`
	ServiceCharge              pgtype.Int8        `json:"service_charge"`
	Parking                    pgtype.Int8        `json:"parking"`
	AskPrice                   pgtype.Bool        `json:"ask_price"`
	Price                      pgtype.Float8      `json:"price"`
	RentType                   pgtype.Int8        `json:"rent_type"`
	NoOfPayment                pgtype.Int8        `json:"no_of_payment"`
	NoOfRetail                 pgtype.Int8        `json:"no_of_retail"`
	NoOfPool                   pgtype.Int8        `json:"no_of_pool"`
	Elevator                   pgtype.Int8        `json:"elevator"`
	StartingPrice              pgtype.Int8        `json:"starting_price"`
	LifeStyle                  pgtype.Int8        `json:"life_style"`
	PropertiesID               pgtype.Int8        `json:"properties_id"`
	Property_2                 pgtype.Int8        `json:"property_2"`
	IsBranch                   pgtype.Bool        `json:"is_branch"`
	CreatedAt_10               pgtype.Timestamptz `json:"created_at_10"`
	UpdatedAt_10               pgtype.Timestamptz `json:"updated_at_10"`
	AvailableUnits             pgtype.Int8        `json:"available_units"`
	CommercialTax              pgtype.Float8      `json:"commercial_tax"`
	MunicipalityTax            pgtype.Float8      `json:"municipality_tax"`
	IsProjectFact              pgtype.Bool        `json:"is_project_fact"`
	ProjectID                  pgtype.Int8        `json:"project_id"`
	CompletionPercentage       pgtype.Int8        `json:"completion_percentage"`
	CompletionPercentageDate   pgtype.Timestamptz `json:"completion_percentage_date"`
	TypeNameID                 pgtype.Int8        `json:"type_name_id"`
	ScCurrencyID               pgtype.Int8        `json:"sc_currency_id"`
	UnitOfMeasure              pgtype.Text        `json:"unit_of_measure"`
	ID_11                      pgtype.Int8        `json:"id_11"`
	Type                       pgtype.Text        `json:"type"`
	Code                       pgtype.Text        `json:"code"`
	IsResidential              pgtype.Bool        `json:"is_residential"`
	IsCommercial               pgtype.Bool        `json:"is_commercial"`
	CreatedAt_11               pgtype.Timestamptz `json:"created_at_11"`
	UpdatedAt_11               pgtype.Timestamptz `json:"updated_at_11"`
	PropertyTypeFactsID        []int64            `json:"property_type_facts_id"`
	Category                   pgtype.Text        `json:"category"`
	Status_9                   pgtype.Int8        `json:"status_9"`
	UnitTypes                  []int64            `json:"unit_types"`
	Icon                       pgtype.Text        `json:"icon"`
	ID_12                      pgtype.Int8        `json:"id_12"`
	PhaseName                  pgtype.Text        `json:"phase_name"`
	AddressesID_4              pgtype.Int8        `json:"addresses_id_4"`
	CreatedAt_12               pgtype.Timestamptz `json:"created_at_12"`
	UpdatedAt_12               pgtype.Timestamptz `json:"updated_at_12"`
	Status_10                  pgtype.Int8        `json:"status_10"`
	LiveStatus_3               pgtype.Bool        `json:"live_status_3"`
	RefNo_3                    pgtype.Text        `json:"ref_no_3"`
	ProjectsID_2               pgtype.Int8        `json:"projects_id_2"`
	Rating_2                   pgtype.Float8      `json:"rating_2"`
	Description_5              pgtype.Text        `json:"description_5"`
	DescriptionAr_2            pgtype.Text        `json:"description_ar_2"`
	PolygonCoords_2            []byte             `json:"polygon_coords_2"`
	Facts_2                    []byte             `json:"facts_2"`
	Exclusive_2                pgtype.Bool        `json:"exclusive_2"`
	StartDate_3                pgtype.Date        `json:"start_date_3"`
	EndDate_2                  pgtype.Date        `json:"end_date_2"`
	BankName_2                 pgtype.Text        `json:"bank_name_2"`
	RegistrationDate_2         pgtype.Date        `json:"registration_date_2"`
	EscrowNumber_2             pgtype.Text        `json:"escrow_number_2"`
}

func (q *Queries) GetAllProjectPropertiesByStatus(ctx context.Context, arg GetAllProjectPropertiesByStatusParams) ([]GetAllProjectPropertiesByStatusRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPropertiesByStatus,
		arg.Limit,
		arg.Offset,
		arg.Search,
		arg.Status,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPropertiesByStatusRow
	for rows.Next() {
		var i GetAllProjectPropertiesByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyName,
			&i.PropertyNameArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.Status,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AmenitiesID,
			&i.AddressesID,
			&i.PhasesID,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProjectsID,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.LiveStatus,
			&i.CountriesID,
			&i.DeveloperCompaniesID,
			&i.RefNo,
			&i.UsersID,
			&i.OwnerUsersID,
			&i.IsMultiphase,
			&i.PropertyTitle,
			&i.Notes,
			&i.NotesArabic,
			&i.IsNotesPublic,
			&i.ID_2,
			&i.ProjectName,
			&i.RefNumber,
			&i.NoOfViews,
			&i.IsVerified_2,
			&i.ProjectRank,
			&i.AddressesID_2,
			&i.Status_2,
			&i.DeveloperCompaniesID_2,
			&i.DeveloperCompanyBranchesID,
			&i.CountriesID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.IsMultiphase_2,
			&i.LiveStatus_2,
			&i.ProjectNo,
			&i.LicenseNo,
			&i.UsersID_2,
			&i.Description_2,
			&i.DescriptionArabic_2,
			&i.Rating,
			&i.PolygonCoords,
			&i.Facts,
			&i.Exclusive,
			&i.StartDate,
			&i.EndDate,
			&i.Slug,
			&i.DeletedAt,
			&i.BankName,
			&i.RegistrationDate,
			&i.EscrowNumber,
			&i.RefreshedAt,
			&i.ID_3,
			&i.RefNo_2,
			&i.CompanyName,
			&i.CompanyActivitiesID,
			&i.CompanyParentID,
			&i.TagLine,
			&i.Description_3,
			&i.DescriptionAr,
			&i.LogoUrl,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.IsVerified_3,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.NoOfEmployees,
			&i.CompanyRank,
			&i.Status_3,
			&i.CompanyType,
			&i.AddressesID_3,
			&i.UsersID_3,
			&i.CreatedBy,
			&i.CreatedAt_3,
			&i.UpdatedAt_3,
			&i.UpdatedBy,
			&i.LocationUrl,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.ID_4,
			&i.CountriesID_3,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubCommunitiesID,
			&i.LocationsID,
			&i.CreatedAt_4,
			&i.UpdatedAt_4,
			&i.PropertyMapLocationID,
			&i.FullAddress,
			&i.FullAddressAr,
			&i.ID_5,
			&i.Country,
			&i.Flag,
			&i.CreatedAt_5,
			&i.UpdatedAt_5,
			&i.Alpha2Code,
			&i.Alpha3Code,
			&i.CountryCode,
			&i.Lat,
			&i.Lng,
			&i.Name,
			&i.Numcode,
			&i.DefaultSettings,
			&i.Status_4,
			&i.DeletedAt_2,
			&i.UpdatedBy_2,
			&i.CountryAr,
			&i.ID_6,
			&i.State,
			&i.CountriesID_4,
			&i.IsCapital,
			&i.CreatedAt_6,
			&i.UpdatedAt_6,
			&i.Lat_2,
			&i.Lng_2,
			&i.Status_5,
			&i.DeletedAt_3,
			&i.UpdatedBy_3,
			&i.StateAr,
			&i.ID_7,
			&i.City,
			&i.StatesID_2,
			&i.CreatedAt_7,
			&i.UpdatedAt_7,
			&i.Lat_3,
			&i.Lng_3,
			&i.Status_6,
			&i.DeletedAt_4,
			&i.UpdatedBy_4,
			&i.CityAr,
			&i.CoverImage,
			&i.Description_4,
			&i.ID_8,
			&i.Community,
			&i.CitiesID_2,
			&i.CreatedAt_8,
			&i.UpdatedAt_8,
			&i.Lat_4,
			&i.Lng_4,
			&i.Status_7,
			&i.DeletedAt_5,
			&i.UpdatedBy_5,
			&i.CommunityAr,
			&i.ID_9,
			&i.SubCommunity,
			&i.CommunitiesID_2,
			&i.CreatedAt_9,
			&i.UpdatedAt_9,
			&i.Lng_5,
			&i.Lat_5,
			&i.Status_8,
			&i.DeletedAt_6,
			&i.UpdatedBy_6,
			&i.SubCommunityAr,
			&i.ID_10,
			&i.Bedroom,
			&i.Bathroom,
			&i.PlotArea,
			&i.BuiltUpArea,
			&i.View,
			&i.Furnished,
			&i.Ownership,
			&i.CompletionStatus,
			&i.StartDate_2,
			&i.CompletionDate,
			&i.HandoverDate,
			&i.NoOfFloor,
			&i.NoOfUnits,
			&i.MinArea,
			&i.MaxArea,
			&i.ServiceCharge,
			&i.Parking,
			&i.AskPrice,
			&i.Price,
			&i.RentType,
			&i.NoOfPayment,
			&i.NoOfRetail,
			&i.NoOfPool,
			&i.Elevator,
			&i.StartingPrice,
			&i.LifeStyle,
			&i.PropertiesID,
			&i.Property_2,
			&i.IsBranch,
			&i.CreatedAt_10,
			&i.UpdatedAt_10,
			&i.AvailableUnits,
			&i.CommercialTax,
			&i.MunicipalityTax,
			&i.IsProjectFact,
			&i.ProjectID,
			&i.CompletionPercentage,
			&i.CompletionPercentageDate,
			&i.TypeNameID,
			&i.ScCurrencyID,
			&i.UnitOfMeasure,
			&i.ID_11,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_11,
			&i.UpdatedAt_11,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status_9,
			&i.UnitTypes,
			&i.Icon,
			&i.ID_12,
			&i.PhaseName,
			&i.AddressesID_4,
			&i.CreatedAt_12,
			&i.UpdatedAt_12,
			&i.Status_10,
			&i.LiveStatus_3,
			&i.RefNo_3,
			&i.ProjectsID_2,
			&i.Rating_2,
			&i.Description_5,
			&i.DescriptionAr_2,
			&i.PolygonCoords_2,
			&i.Facts_2,
			&i.Exclusive_2,
			&i.StartDate_3,
			&i.EndDate_2,
			&i.BankName_2,
			&i.RegistrationDate_2,
			&i.EscrowNumber_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAmenitiesIdByProjectPropertyId = `-- name: GetAmenitiesIdByProjectPropertyId :one

SELECT project_properties.amenities_id FROM project_properties WHERE id = $1
`

// -- name: GetFacilitiesIdByProjectPropertyId :one
// WITH x AS (
//
//	SELECT projects.facilities_id AS facilities FROM projects
//	LEFT JOIN project_properties ON project_properties.projects_id = projects.id AND project_properties.is_multiphase = FALSE
//	WHERE project_properties.id = $1
//
// UNION ALL
//
//	SELECT phases.facilities AS facilities FROM phases
//	LEFT JOIN project_properties ON project_properties.phases_id = phases.id AND project_properties.is_multiphase = TRUE
//	WHERE project_properties.id = $1
//
// )SELECT * FROM x;
func (q *Queries) GetAmenitiesIdByProjectPropertyId(ctx context.Context, id int64) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAmenitiesIdByProjectPropertyId, id)
	var amenities_id []int64
	err := row.Scan(&amenities_id)
	return amenities_id, err
}

const getCountAllProjectPropertiesByStatus = `-- name: GetCountAllProjectPropertiesByStatus :one
SELECT COUNT(*)
FROM project_properties
LEFT JOIN projects ON projects.id = project_properties.projects_id
LEFT JOIN companies ON companies.id = projects.developer_companies_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
LEFT JOIN properties_facts ON project_properties.id = properties_facts.properties_id
LEFT JOIN property_types ON properties_facts.id = ANY(property_types.property_type_facts_id)
LEFT JOIN phases ON project_properties.phases_id = phases.id
WHERE 
( 
      $1 = '%%' OR
      project_properties.property_name ILIKE $1   
      OR     project_properties.ref_no ILIKE $1
      OR  projects.project_name % $1 
      OR phase_name ILIKE $1 
      OR property_types.type ILIKE $1 
   )
AND
project_properties.status = $2
`

type GetCountAllProjectPropertiesByStatusParams struct {
	Search interface{} `json:"search"`
	Status int64       `json:"status"`
}

func (q *Queries) GetCountAllProjectPropertiesByStatus(ctx context.Context, arg GetCountAllProjectPropertiesByStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectPropertiesByStatus, arg.Search, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountCommunityProjectProperty = `-- name: GetCountCommunityProjectProperty :one

With x As(

 SELECT project_properties.id FROM project_properties 

 INNER JOIN addresses ON project_properties.addresses_id = addresses.id 

 INNER JOIN cities ON addresses.cities_id = cities.id

 INNER JOIN communities ON addresses.communities_id = communities.id

 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id

 -- INNER JOIN property_types ON project_properties.property_types_id = property_types.id

 INNER JOIN properties_facts ON project_properties.id = properties_facts.properties_id and properties_facts.property = 2

 WHERE 

         addresses.communities_id = $1 AND

         ($2::bigint[] is NULL OR project_properties.property_rank = ANY($2::bigint[]))  

         AND ($3::bool is NULL OR is_verified = $3::bool)

         AND (

             project_properties.property_title ILIKE '%' || $4 || '%'  OR 

             project_properties.property_title_arabic ILIKE '%' || $4 || '%'  OR   


             cities.city ILIKE '%' || $4 || '%' OR

             communities.community ILIKE '%' || $4 || '%' OR

             sub_communities.sub_community ILIKE '%' || $4 || '%'

            ) AND project_properties.status != 5 AND project_properties.status != 6

) SELECT COUNT(id) FROM x
`

type GetCountCommunityProjectPropertyParams struct {
	CommunitiesID pgtype.Int8 `json:"communities_id"`
	Column2       []int64     `json:"column_2"`
	Column3       pgtype.Bool `json:"column_3"`
	Column4       pgtype.Text `json:"column_4"`
}

// property_types.type  ILIKE '%' || $4 || '%'  OR
func (q *Queries) GetCountCommunityProjectProperty(ctx context.Context, arg GetCountCommunityProjectPropertyParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCommunityProjectProperty,
		arg.CommunitiesID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountProjectPropertiesByProjectId = `-- name: GetCountProjectPropertiesByProjectId :one
SELECT 
 COUNT(*)
  FROM project_properties 
LEFT JOIN projects ON projects.id = project_properties.projects_id
LEFT JOIN companies ON companies.id = projects.developer_companies_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
LEFT JOIN properties_facts ON project_properties.id = properties_facts.properties_id
LEFT JOIN property_types ON properties_facts.id = ANY(property_types.property_type_facts_id)
LEFT JOIN phases ON project_properties.phases_id = phases.id
WHERE 
   ( 
      $1 = '%%' OR
      project_properties.property_name ILIKE $1   
      OR     project_properties.ref_no ILIKE $1
      OR  projects.project_name % $1 
      OR phase_name ILIKE $1 
      OR property_types.type ILIKE $1 
   )
AND CASE 
  WHEN
  project_properties.projects_id = $2 AND project_properties.phases_id IS NULL
  AND project_properties.status!= 5 
  AND project_properties.status != 6 THEN TRUE
  ELSE
  project_properties.projects_id = $2 AND project_properties.phases_id = $3
  AND 
  project_properties.status!= 5 
  AND project_properties.status != 6 
  END
`

type GetCountProjectPropertiesByProjectIdParams struct {
	Search    interface{} `json:"search"`
	ProjectID int64       `json:"project_id"`
	PhaseID   pgtype.Int8 `json:"phase_id"`
}

func (q *Queries) GetCountProjectPropertiesByProjectId(ctx context.Context, arg GetCountProjectPropertiesByProjectIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProjectPropertiesByProjectId, arg.Search, arg.ProjectID, arg.PhaseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountProjectPropertyDocumentByProjectPropertyId = `-- name: GetCountProjectPropertyDocumentByProjectPropertyId :one
SELECT count(*) FROM project_properties_documents
WHERE project_properties_id = $1 LIMIT 1
`

func (q *Queries) GetCountProjectPropertyDocumentByProjectPropertyId(ctx context.Context, projectPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountProjectPropertyDocumentByProjectPropertyId, projectPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountSimilarPropertiesForProjectProperties = `-- name: GetCountSimilarPropertiesForProjectProperties :one
SELECT COUNT(*) 

FROM project_properties 

WHERE id != $2

AND EXISTS (

    SELECT 1 

    FROM unnest(property_types_id) AS pt_id 

    WHERE pt_id = ANY ($1::bigint[]) AND status != 6

)
`

type GetCountSimilarPropertiesForProjectPropertiesParams struct {
	Column1 []int64 `json:"column_1"`
	ID      int64   `json:"id"`
}

func (q *Queries) GetCountSimilarPropertiesForProjectProperties(ctx context.Context, arg GetCountSimilarPropertiesForProjectPropertiesParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountSimilarPropertiesForProjectProperties, arg.Column1, arg.ID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountStateProjectProperty = `-- name: GetCountStateProjectProperty :one
With x As(
 SELECT project_properties.id FROM project_properties 
 INNER JOIN addresses ON project_properties.addresses_id = addresses.id 
 INNER JOIN cities ON addresses.cities_id = cities.id
 INNER JOIN communities ON addresses.communities_id = communities.id
 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 INNER JOIN properties_facts ON project_properties.id = properties_facts.properties_id and properties_facts.property = 2
 WHERE 
         addresses.cities_id = $1 AND
         ($2::bigint[] is NULL OR project_properties.property_rank = ANY($2::bigint[]))  
         AND ($3::bool is NULL OR is_verified = $3::bool)
         AND (
             project_properties.property_name ILIKE '%' || $4 || '%'  OR 
             project_properties.property_name_arabic ILIKE '%' || $4 || '%'  OR   


             cities.city ILIKE '%' || $4 || '%' OR

             communities.community ILIKE '%' || $4 || '%' OR

             sub_communities.sub_community ILIKE '%' || $4 || '%'

             ) AND project_properties.status != 5 AND project_properties.status != 6

) SELECT COUNT(id) FROM x
`

type GetCountStateProjectPropertyParams struct {
	CitiesID pgtype.Int8 `json:"cities_id"`
	Column2  []int64     `json:"column_2"`
	Column3  pgtype.Bool `json:"column_3"`
	Column4  pgtype.Text `json:"column_4"`
}

// INNER JOIN property_types ON project_properties.property_types_id = property_types.id
//
//	property_types.type  ILIKE '%' || $4 || '%'  OR
func (q *Queries) GetCountStateProjectProperty(ctx context.Context, arg GetCountStateProjectPropertyParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountStateProjectProperty,
		arg.CitiesID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountSubCommunityProjectProperty = `-- name: GetCountSubCommunityProjectProperty :one

With x As(

 SELECT project_properties.id FROM project_properties 

 INNER JOIN addresses ON project_properties.addresses_id = addresses.id 

 INNER JOIN cities ON addresses.cities_id = cities.id

 INNER JOIN communities ON addresses.communities_id = communities.id

 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id


 INNER JOIN properties_facts ON project_properties.id = properties_facts.properties_id and properties_facts.property = 2

 WHERE 

         addresses.sub_communities_id = $1 AND

         ($2::bigint[] is NULL OR project_properties.property_rank = ANY($2::bigint[]))  

         AND ($3::bool is NULL OR is_verified = $3::bool)

         AND (

             project_properties.property_title ILIKE '%' || $4 || '%'  OR 

             project_properties.property_title_arabic ILIKE '%' || $4 || '%'  OR   


             cities.city ILIKE '%' || $4 || '%' OR

             communities.community ILIKE '%' || $4 || '%' OR

             sub_communities.sub_community ILIKE '%' || $4 || '%'

            ) AND project_properties.status != 5 AND project_properties.status != 6

) SELECT COUNT(id) FROM x
`

type GetCountSubCommunityProjectPropertyParams struct {
	SubCommunitiesID pgtype.Int8 `json:"sub_communities_id"`
	Column2          []int64     `json:"column_2"`
	Column3          pgtype.Bool `json:"column_3"`
	Column4          pgtype.Text `json:"column_4"`
}

// INNER JOIN property_types ON project_properties.property_types_id = property_types.id
//
//	property_types.type  ILIKE '%' || $4 || '%'  OR
func (q *Queries) GetCountSubCommunityProjectProperty(ctx context.Context, arg GetCountSubCommunityProjectPropertyParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountSubCommunityProjectProperty,
		arg.SubCommunitiesID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getGlobalPropertyCompletionStatus = `-- name: GetGlobalPropertyCompletionStatus :one
SELECT 
    COALESCE((property.facts->> 'completion_status')::BIGINT, 0)
FROM property
WHERE property.id = $1
`

func (q *Queries) GetGlobalPropertyCompletionStatus(ctx context.Context, id int64) (interface{}, error) {
	row := q.db.QueryRow(ctx, getGlobalPropertyCompletionStatus, id)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getProjectProperties = `-- name: GetProjectProperties :one
SELECT id, company_id, property_type_id, unit_type_id, property_title, property_title_arabic, is_verified, addresses_id, entity_type_id, entity_id, status, is_show_owner_info, property_name, description, description_arabic, owner_users_id, user_id, updated_by, from_xml, facts, notes, created_at, updated_at, notes_ar, is_public_note, is_project_property, exclusive, start_date, end_date  FROM property
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProjectProperties(ctx context.Context, id int64) (Property, error) {
	row := q.db.QueryRow(ctx, getProjectProperties, id)
	var i Property
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.PropertyTypeID,
		&i.UnitTypeID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.IsVerified,
		&i.AddressesID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.Status,
		&i.IsShowOwnerInfo,
		&i.PropertyName,
		&i.Description,
		&i.DescriptionArabic,
		&i.OwnerUsersID,
		&i.UserID,
		&i.UpdatedBy,
		&i.FromXml,
		&i.Facts,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NotesAr,
		&i.IsPublicNote,
		&i.IsProjectProperty,
		&i.Exclusive,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getProjectPropertiesByDeveloperCompaniesId = `-- name: GetProjectPropertiesByDeveloperCompaniesId :many
select id, property_name, property from project_properties pp where pp.developer_companies_id  = $1
`

type GetProjectPropertiesByDeveloperCompaniesIdRow struct {
	ID           int64  `json:"id"`
	PropertyName string `json:"property_name"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetProjectPropertiesByDeveloperCompaniesId(ctx context.Context, developerCompaniesID int64) ([]GetProjectPropertiesByDeveloperCompaniesIdRow, error) {
	rows, err := q.db.Query(ctx, getProjectPropertiesByDeveloperCompaniesId, developerCompaniesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectPropertiesByDeveloperCompaniesIdRow
	for rows.Next() {
		var i GetProjectPropertiesByDeveloperCompaniesIdRow
		if err := rows.Scan(&i.ID, &i.PropertyName, &i.Property); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPropertiesByNameAndProjectPhase = `-- name: GetProjectPropertiesByNameAndProjectPhase :one
SELECT id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public FROM project_properties 
WHERE
CASE
WHEN property_name ILIKE $1 AND projects_id = $2 AND phases_id IS NULL THEN TRUE
ELSE property_name ILIKE $1 AND projects_id = $2 AND phases_id = $3 END AND (status != 5 AND status != 6)
`

type GetProjectPropertiesByNameAndProjectPhaseParams struct {
	PropertyName string      `json:"property_name"`
	ProjectsID   int64       `json:"projects_id"`
	PhasesID     pgtype.Int8 `json:"phases_id"`
}

func (q *Queries) GetProjectPropertiesByNameAndProjectPhase(ctx context.Context, arg GetProjectPropertiesByNameAndProjectPhaseParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, getProjectPropertiesByNameAndProjectPhase, arg.PropertyName, arg.ProjectsID, arg.PhasesID)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const getProjectPropertiesByPhaseId = `-- name: GetProjectPropertiesByPhaseId :one
select project_properties.id, project_properties.property_name, project_properties.property_name_arabic, project_properties.description, project_properties.description_arabic, project_properties.status, project_properties.is_verified, project_properties.property_rank, project_properties.amenities_id, project_properties.addresses_id, project_properties.phases_id, project_properties.property_types_id, project_properties.created_at, project_properties.updated_at, project_properties.projects_id, project_properties.is_show_owner_info, project_properties.property, project_properties.live_status, project_properties.countries_id, project_properties.developer_companies_id, project_properties.ref_no, project_properties.users_id, project_properties.owner_users_id, project_properties.is_multiphase, project_properties.property_title, project_properties.notes, project_properties.notes_arabic, project_properties.is_notes_public from project_properties 
inner join properties_facts on project_properties.id = properties_facts.properties_id and properties_facts.property = 1 
where project_properties.phases_id = $1 and project_properties.projects_id = $2
order by properties_facts.starting_price asc 
limit 1
`

type GetProjectPropertiesByPhaseIdParams struct {
	PhasesID   pgtype.Int8 `json:"phases_id"`
	ProjectsID int64       `json:"projects_id"`
}

func (q *Queries) GetProjectPropertiesByPhaseId(ctx context.Context, arg GetProjectPropertiesByPhaseIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, getProjectPropertiesByPhaseId, arg.PhasesID, arg.ProjectsID)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const getProjectPropertiesByProjectId = `-- name: GetProjectPropertiesByProjectId :one
SELECT id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public FROM project_properties 
WHERE projects_id = $1 LIMIT 1
`

func (q *Queries) GetProjectPropertiesByProjectId(ctx context.Context, projectsID int64) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, getProjectPropertiesByProjectId, projectsID)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const getProjectPropertyByProjectIDAndPropertyId = `-- name: GetProjectPropertyByProjectIDAndPropertyId :one
SELECT id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public FROM project_properties
Where  project_properties.projects_id = $1 AND id = $2 LIMIT 1
`

type GetProjectPropertyByProjectIDAndPropertyIdParams struct {
	ProjectsID int64 `json:"projects_id"`
	ID         int64 `json:"id"`
}

func (q *Queries) GetProjectPropertyByProjectIDAndPropertyId(ctx context.Context, arg GetProjectPropertyByProjectIDAndPropertyIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, getProjectPropertyByProjectIDAndPropertyId, arg.ProjectsID, arg.ID)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const getProperty = `-- name: GetProperty :one
SELECT 
   property.id, property.company_id, property.property_type_id, property.unit_type_id, property.property_title, property.property_title_arabic, property.is_verified, property.addresses_id, property.entity_type_id, property.entity_id, property.status, property.is_show_owner_info, property.property_name, property.description, property.description_arabic, property.owner_users_id, property.user_id, property.updated_by, property.from_xml, property.facts, property.notes, property.created_at, property.updated_at, property.notes_ar, property.is_public_note, property.is_project_property, property.exclusive, property.start_date, property.end_date,
    CASE 
        WHEN property.entity_type_id = 1 THEN property.entity_id::bigint  -- Direct project
        WHEN property.entity_type_id = 2 THEN phases.projects_id ::bigint  -- Project via phases
    END AS project_id
FROM property
LEFT JOIN phases ON phases.id = property.entity_id AND property.entity_type_id = 2
WHERE property.id = $1
LIMIT 1
`

type GetPropertyRow struct {
	ID                  int64       `json:"id"`
	CompanyID           pgtype.Int8 `json:"company_id"`
	PropertyTypeID      int64       `json:"property_type_id"`
	UnitTypeID          []int64     `json:"unit_type_id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic pgtype.Text `json:"property_title_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	AddressesID         int64       `json:"addresses_id"`
	EntityTypeID        int64       `json:"entity_type_id"`
	EntityID            int64       `json:"entity_id"`
	Status              int64       `json:"status"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	PropertyName        string      `json:"property_name"`
	Description         string      `json:"description"`
	DescriptionArabic   pgtype.Text `json:"description_arabic"`
	OwnerUsersID        pgtype.Int8 `json:"owner_users_id"`
	UserID              int64       `json:"user_id"`
	UpdatedBy           int64       `json:"updated_by"`
	FromXml             pgtype.Bool `json:"from_xml"`
	Facts               []byte      `json:"facts"`
	Notes               pgtype.Text `json:"notes"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	NotesAr             pgtype.Text `json:"notes_ar"`
	IsPublicNote        bool        `json:"is_public_note"`
	IsProjectProperty   bool        `json:"is_project_property"`
	Exclusive           bool        `json:"exclusive"`
	StartDate           pgtype.Date `json:"start_date"`
	EndDate             pgtype.Date `json:"end_date"`
	ProjectID           interface{} `json:"project_id"`
}

// Only join phases if entity_type_id = 2
func (q *Queries) GetProperty(ctx context.Context, id int64) (GetPropertyRow, error) {
	row := q.db.QueryRow(ctx, getProperty, id)
	var i GetPropertyRow
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.PropertyTypeID,
		&i.UnitTypeID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.IsVerified,
		&i.AddressesID,
		&i.EntityTypeID,
		&i.EntityID,
		&i.Status,
		&i.IsShowOwnerInfo,
		&i.PropertyName,
		&i.Description,
		&i.DescriptionArabic,
		&i.OwnerUsersID,
		&i.UserID,
		&i.UpdatedBy,
		&i.FromXml,
		&i.Facts,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.NotesAr,
		&i.IsPublicNote,
		&i.IsProjectProperty,
		&i.Exclusive,
		&i.StartDate,
		&i.EndDate,
		&i.ProjectID,
	)
	return i, err
}

const getSimilarPropertiesForProjectProperties = `-- name: GetSimilarPropertiesForProjectProperties :many
SELECT 
	p.id, p.property_name, p.property_name_arabic, p.description, p.description_arabic, p.status, p.is_verified, p.property_rank, p.amenities_id, p.addresses_id, p.phases_id, p.property_types_id, p.created_at, p.updated_at, p.projects_id, p.is_show_owner_info, p.property, p.live_status, p.countries_id, p.developer_companies_id, p.ref_no, p.users_id, p.owner_users_id, p.is_multiphase, p.property_title, p.notes, p.notes_arabic, p.is_notes_public,
	c.id, c.city, c.states_id, c.created_at, c.updated_at, c.lat, c.lng, c.status, c.deleted_at, c.updated_by, c.city_ar, c.cover_image, c.description,
	co.id, co.country, co.flag, co.created_at, co.updated_at, co.alpha2_code, co.alpha3_code, co.country_code, co.lat, co.lng, co.name, co.numcode, co.default_settings, co.status, co.deleted_at, co.updated_by, co.country_ar,
	s.id, s.state, s.countries_id, s.is_capital, s.created_at, s.updated_at, s.lat, s.lng, s.status, s.deleted_at, s.updated_by, s.state_ar,
	com.id, com.community, com.cities_id, com.created_at, com.updated_at, com.lat, com.lng, com.status, com.deleted_at, com.updated_by, com.community_ar,
	scom.id, scom.sub_community, scom.communities_id, scom.created_at, scom.updated_at, scom.lng, scom.lat, scom.status, scom.deleted_at, scom.updated_by, scom.sub_community_ar,
	COALESCE(images.id, 0) AS images_media_id,
    COALESCE(images.file_urls, ARRAY[]::text[]) AS images,
    COALESCE(img360.id, 0) AS img360_media_id,
    COALESCE(img360.file_urls, ARRAY[]::text[]) AS img360,
    COALESCE(video.id, 0) AS video_media_id,
    COALESCE(video.file_urls, ARRAY[]::text[]) AS video,
    COALESCE(panorama.id, 0) AS panorama_media_id,
    COALESCE(panorama.file_urls, ARRAY[]::text[]) AS panorama
FROM project_properties p
JOIN addresses a ON a.id=p.addresses_id
JOIN cities c ON a.cities_id = c.id
JOIN countries co ON a.countries_id = co.id
JOIN states s ON s.id = a.states_id
LEFT JOIN communities com ON com.id = a.communities_id
LEFT JOIN sub_communities scom ON scom.id = a.sub_communities_id
LEFT JOIN project_media images ON images.projects_id=p.id AND images.media_type = 1 AND images.gallery_type = 'Main'
LEFT JOIN project_media img360 ON img360.projects_id=p.id AND img360.media_type = 2 AND img360.gallery_type = 'Main'
LEFT JOIN project_media video ON video.projects_id=p.id AND video.media_type = 3 AND video.gallery_type = 'Main'
LEFT JOIN project_media panorama ON panorama.projects_id=p.id AND panorama.media_type = 4 AND panorama.gallery_type = 'Main'
WHERE p.id != $2
 
AND EXISTS (
 
    SELECT 1
 
    FROM unnest(p.property_types_id) AS pt_id
 
    WHERE pt_id = ANY ($1::bigint[]) AND p.status != 6
 
) LIMIT $3 OFFSET $4
`

type GetSimilarPropertiesForProjectPropertiesParams struct {
	Column1 []int64 `json:"column_1"`
	ID      int64   `json:"id"`
	Limit   int32   `json:"limit"`
	Offset  int32   `json:"offset"`
}

type GetSimilarPropertiesForProjectPropertiesRow struct {
	ProjectProperty ProjectProperty `json:"project_property"`
	City            City            `json:"city"`
	Country         Country         `json:"country"`
	State           State           `json:"state"`
	Community       Community       `json:"community"`
	SubCommunity    SubCommunity    `json:"sub_community"`
	ImagesMediaID   int64           `json:"images_media_id"`
	Images          []string        `json:"images"`
	Img360MediaID   int64           `json:"img360_media_id"`
	Img360          []string        `json:"img360"`
	VideoMediaID    int64           `json:"video_media_id"`
	Video           []string        `json:"video"`
	PanoramaMediaID int64           `json:"panorama_media_id"`
	Panorama        []string        `json:"panorama"`
}

func (q *Queries) GetSimilarPropertiesForProjectProperties(ctx context.Context, arg GetSimilarPropertiesForProjectPropertiesParams) ([]GetSimilarPropertiesForProjectPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getSimilarPropertiesForProjectProperties,
		arg.Column1,
		arg.ID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSimilarPropertiesForProjectPropertiesRow
	for rows.Next() {
		var i GetSimilarPropertiesForProjectPropertiesRow
		if err := rows.Scan(
			&i.ProjectProperty.ID,
			&i.ProjectProperty.PropertyName,
			&i.ProjectProperty.PropertyNameArabic,
			&i.ProjectProperty.Description,
			&i.ProjectProperty.DescriptionArabic,
			&i.ProjectProperty.Status,
			&i.ProjectProperty.IsVerified,
			&i.ProjectProperty.PropertyRank,
			&i.ProjectProperty.AmenitiesID,
			&i.ProjectProperty.AddressesID,
			&i.ProjectProperty.PhasesID,
			&i.ProjectProperty.PropertyTypesID,
			&i.ProjectProperty.CreatedAt,
			&i.ProjectProperty.UpdatedAt,
			&i.ProjectProperty.ProjectsID,
			&i.ProjectProperty.IsShowOwnerInfo,
			&i.ProjectProperty.Property,
			&i.ProjectProperty.LiveStatus,
			&i.ProjectProperty.CountriesID,
			&i.ProjectProperty.DeveloperCompaniesID,
			&i.ProjectProperty.RefNo,
			&i.ProjectProperty.UsersID,
			&i.ProjectProperty.OwnerUsersID,
			&i.ProjectProperty.IsMultiphase,
			&i.ProjectProperty.PropertyTitle,
			&i.ProjectProperty.Notes,
			&i.ProjectProperty.NotesArabic,
			&i.ProjectProperty.IsNotesPublic,
			&i.City.ID,
			&i.City.City,
			&i.City.StatesID,
			&i.City.CreatedAt,
			&i.City.UpdatedAt,
			&i.City.Lat,
			&i.City.Lng,
			&i.City.Status,
			&i.City.DeletedAt,
			&i.City.UpdatedBy,
			&i.City.CityAr,
			&i.City.CoverImage,
			&i.City.Description,
			&i.Country.ID,
			&i.Country.Country,
			&i.Country.Flag,
			&i.Country.CreatedAt,
			&i.Country.UpdatedAt,
			&i.Country.Alpha2Code,
			&i.Country.Alpha3Code,
			&i.Country.CountryCode,
			&i.Country.Lat,
			&i.Country.Lng,
			&i.Country.Name,
			&i.Country.Numcode,
			&i.Country.DefaultSettings,
			&i.Country.Status,
			&i.Country.DeletedAt,
			&i.Country.UpdatedBy,
			&i.Country.CountryAr,
			&i.State.ID,
			&i.State.State,
			&i.State.CountriesID,
			&i.State.IsCapital,
			&i.State.CreatedAt,
			&i.State.UpdatedAt,
			&i.State.Lat,
			&i.State.Lng,
			&i.State.Status,
			&i.State.DeletedAt,
			&i.State.UpdatedBy,
			&i.State.StateAr,
			&i.Community.ID,
			&i.Community.Community,
			&i.Community.CitiesID,
			&i.Community.CreatedAt,
			&i.Community.UpdatedAt,
			&i.Community.Lat,
			&i.Community.Lng,
			&i.Community.Status,
			&i.Community.DeletedAt,
			&i.Community.UpdatedBy,
			&i.Community.CommunityAr,
			&i.SubCommunity.ID,
			&i.SubCommunity.SubCommunity,
			&i.SubCommunity.CommunitiesID,
			&i.SubCommunity.CreatedAt,
			&i.SubCommunity.UpdatedAt,
			&i.SubCommunity.Lng,
			&i.SubCommunity.Lat,
			&i.SubCommunity.Status,
			&i.SubCommunity.DeletedAt,
			&i.SubCommunity.UpdatedBy,
			&i.SubCommunity.SubCommunityAr,
			&i.ImagesMediaID,
			&i.Images,
			&i.Img360MediaID,
			&i.Img360,
			&i.VideoMediaID,
			&i.Video,
			&i.PanoramaMediaID,
			&i.Panorama,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSingleProjectPropertyReference = `-- name: GetSingleProjectPropertyReference :one
SELECT fp.id, fp.ref_no, fp.property_name, fp.property_types_id as "property_types_id", pt.type as "property_type", fp.status,  pf.properties_id, pf.property, pf.is_branch 
FROM project_properties fp
JOIN property_types pt ON pt.id = ANY(fp.property_types_id)
LEFT JOIN properties_facts pf ON pf.properties_id = fp.id WHERE fp.id = $1 AND fp.property = 1 LIMIT 1
`

type GetSingleProjectPropertyReferenceRow struct {
	ID              int64       `json:"id"`
	RefNo           string      `json:"ref_no"`
	PropertyName    string      `json:"property_name"`
	PropertyTypesID []int64     `json:"property_types_id"`
	PropertyType    string      `json:"property_type"`
	Status          int64       `json:"status"`
	PropertiesID    pgtype.Int8 `json:"properties_id"`
	Property        pgtype.Int8 `json:"property"`
	IsBranch        pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetSingleProjectPropertyReference(ctx context.Context, id int64) (GetSingleProjectPropertyReferenceRow, error) {
	row := q.db.QueryRow(ctx, getSingleProjectPropertyReference, id)
	var i GetSingleProjectPropertyReferenceRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.PropertyName,
		&i.PropertyTypesID,
		&i.PropertyType,
		&i.Status,
		&i.PropertiesID,
		&i.Property,
		&i.IsBranch,
	)
	return i, err
}

const updateAddressInProjectProperty = `-- name: UpdateAddressInProjectProperty :execrows
WITH 
adres AS(UPDATE addresses 
SET countries_id = $1,
	states_id = $2,
	cities_id = $3,
	communities_id = $4
WHERE id IN (
SELECT addresses_id FROM project_properties
WHERE
CASE
WHEN project_properties.phases_id IS NULL AND project_properties.projects_id = $5
THEN TRUE
ELSE project_properties.phases_id = $6 AND project_properties.projects_id = $5
END) RETURNING id, countries_id, states_id, cities_id, communities_id, sub_communities_id, locations_id, created_at, updated_at, property_map_location_id, full_address, full_address_ar),
pp AS(UPDATE project_properties SET countries_id = $1 
WHERE
CASE
WHEN project_properties.phases_id IS NULL AND project_properties.projects_id = $5
THEN TRUE
ELSE project_properties.phases_id = $6 AND project_properties.projects_id = $5
END RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public)
SELECT id, 'address_id' AS source FROM adres
UNION ALL
SELECT id,'project_property_id' AS source FROM pp
`

type UpdateAddressInProjectPropertyParams struct {
	CountriesID   pgtype.Int8 `json:"countries_id"`
	StatesID      pgtype.Int8 `json:"states_id"`
	CitiesID      pgtype.Int8 `json:"cities_id"`
	CommunitiesID pgtype.Int8 `json:"communities_id"`
	ProjectsID    int64       `json:"projects_id"`
	PhasesID      pgtype.Int8 `json:"phases_id"`
}

func (q *Queries) UpdateAddressInProjectProperty(ctx context.Context, arg UpdateAddressInProjectPropertyParams) (int64, error) {
	result, err := q.db.Exec(ctx, updateAddressInProjectProperty,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunitiesID,
		arg.ProjectsID,
		arg.PhasesID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateProjectProperties = `-- name: UpdateProjectProperties :one
UPDATE project_properties
SET   property_name = $2,
  property_name_arabic = $3,
  description = $4,
  description_arabic = $5,
  status = $6,
  is_verified = $7,
  property_rank = $8,
  amenities_id = $9,
  addresses_id = $10,
  phases_id = $11,
  property_types_id = $12,
  created_at = $13,
  updated_at = $14,
  projects_id = $15,
  is_show_owner_info = $16,
  property = $17,
  live_status = $18,
   countries_id = $19,
  developer_companies_id = $20,
  ref_no = $21,
  users_id = $22,
  owner_users_id = $23,
  is_multiphase = $24,
    property_title = $25,
  notes = $26,
  notes_arabic = $27,
  is_notes_public = $28
Where id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertiesParams struct {
	ID                   int64       `json:"id"`
	PropertyName         string      `json:"property_name"`
	PropertyNameArabic   string      `json:"property_name_arabic"`
	Description          string      `json:"description"`
	DescriptionArabic    string      `json:"description_arabic"`
	Status               int64       `json:"status"`
	IsVerified           pgtype.Bool `json:"is_verified"`
	PropertyRank         int64       `json:"property_rank"`
	AmenitiesID          []int64     `json:"amenities_id"`
	AddressesID          int64       `json:"addresses_id"`
	PhasesID             pgtype.Int8 `json:"phases_id"`
	PropertyTypesID      []int64     `json:"property_types_id"`
	CreatedAt            time.Time   `json:"created_at"`
	UpdatedAt            time.Time   `json:"updated_at"`
	ProjectsID           int64       `json:"projects_id"`
	IsShowOwnerInfo      pgtype.Bool `json:"is_show_owner_info"`
	Property             int64       `json:"property"`
	LiveStatus           pgtype.Bool `json:"live_status"`
	CountriesID          int64       `json:"countries_id"`
	DeveloperCompaniesID int64       `json:"developer_companies_id"`
	RefNo                string      `json:"ref_no"`
	UsersID              int64       `json:"users_id"`
	OwnerUsersID         pgtype.Int8 `json:"owner_users_id"`
	IsMultiphase         pgtype.Bool `json:"is_multiphase"`
	PropertyTitle        pgtype.Text `json:"property_title"`
	Notes                pgtype.Text `json:"notes"`
	NotesArabic          pgtype.Text `json:"notes_arabic"`
	IsNotesPublic        pgtype.Bool `json:"is_notes_public"`
}

func (q *Queries) UpdateProjectProperties(ctx context.Context, arg UpdateProjectPropertiesParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectProperties,
		arg.ID,
		arg.PropertyName,
		arg.PropertyNameArabic,
		arg.Description,
		arg.DescriptionArabic,
		arg.Status,
		arg.IsVerified,
		arg.PropertyRank,
		arg.AmenitiesID,
		arg.AddressesID,
		arg.PhasesID,
		arg.PropertyTypesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProjectsID,
		arg.IsShowOwnerInfo,
		arg.Property,
		arg.LiveStatus,
		arg.CountriesID,
		arg.DeveloperCompaniesID,
		arg.RefNo,
		arg.UsersID,
		arg.OwnerUsersID,
		arg.IsMultiphase,
		arg.PropertyTitle,
		arg.Notes,
		arg.NotesArabic,
		arg.IsNotesPublic,
	)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updateProjectPropertyByProjectId = `-- name: UpdateProjectPropertyByProjectId :one
UPDATE project_properties 
SET status = $2 
where projects_id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertyByProjectIdParams struct {
	ProjectsID int64 `json:"projects_id"`
	Status     int64 `json:"status"`
}

func (q *Queries) UpdateProjectPropertyByProjectId(ctx context.Context, arg UpdateProjectPropertyByProjectIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectPropertyByProjectId, arg.ProjectsID, arg.Status)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updateProjectPropertyLiveStatus = `-- name: UpdateProjectPropertyLiveStatus :one
UPDATE project_properties
SET live_status = $2
WHERE projects_id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertyLiveStatusParams struct {
	ProjectsID int64       `json:"projects_id"`
	LiveStatus pgtype.Bool `json:"live_status"`
}

func (q *Queries) UpdateProjectPropertyLiveStatus(ctx context.Context, arg UpdateProjectPropertyLiveStatusParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectPropertyLiveStatus, arg.ProjectsID, arg.LiveStatus)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updateProjectPropertyRankById = `-- name: UpdateProjectPropertyRankById :one
UPDATE project_properties 
SET property_rank = $2 
where id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertyRankByIdParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateProjectPropertyRankById(ctx context.Context, arg UpdateProjectPropertyRankByIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectPropertyRankById, arg.ID, arg.PropertyRank)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updateProjectPropertyStatusById = `-- name: UpdateProjectPropertyStatusById :one
UPDATE project_properties 
SET status = $2 
where id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertyStatusByIdParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateProjectPropertyStatusById(ctx context.Context, arg UpdateProjectPropertyStatusByIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectPropertyStatusById, arg.ID, arg.Status)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updateProjectPropertyVerificationById = `-- name: UpdateProjectPropertyVerificationById :one
UPDATE project_properties 
SET is_verified = $2 
where id = $1
RETURNING id, property_name, property_name_arabic, description, description_arabic, status, is_verified, property_rank, amenities_id, addresses_id, phases_id, property_types_id, created_at, updated_at, projects_id, is_show_owner_info, property, live_status, countries_id, developer_companies_id, ref_no, users_id, owner_users_id, is_multiphase, property_title, notes, notes_arabic, is_notes_public
`

type UpdateProjectPropertyVerificationByIdParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateProjectPropertyVerificationById(ctx context.Context, arg UpdateProjectPropertyVerificationByIdParams) (ProjectProperty, error) {
	row := q.db.QueryRow(ctx, updateProjectPropertyVerificationById, arg.ID, arg.IsVerified)
	var i ProjectProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyName,
		&i.PropertyNameArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.Status,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AmenitiesID,
		&i.AddressesID,
		&i.PhasesID,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectsID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.LiveStatus,
		&i.CountriesID,
		&i.DeveloperCompaniesID,
		&i.RefNo,
		&i.UsersID,
		&i.OwnerUsersID,
		&i.IsMultiphase,
		&i.PropertyTitle,
		&i.Notes,
		&i.NotesArabic,
		&i.IsNotesPublic,
	)
	return i, err
}

const updatePropertiesAddressesBelongToProjectID = `-- name: UpdatePropertiesAddressesBelongToProjectID :exec
UPDATE addresses
SET 
    countries_id = $1,
    states_id = $2,
    cities_id = $3,
    communities_id = $4,
    sub_communities_id = $5
FROM (
    SELECT property.addresses_id
    FROM property
    WHERE entity_id = $6::BIGINT AND entity_type_id= $7::BIGINT AND is_project_property = TRUE

    UNION ALL

    SELECT property.addresses_id
    FROM phases
    INNER JOIN property ON property.entity_type_id = $8::BIGINT 
                        AND property.entity_id = phases.id
    WHERE phases.projects_id = $6::BIGINT
) AS subquery
WHERE addresses.id = subquery.addresses_id
`

type UpdatePropertiesAddressesBelongToProjectIDParams struct {
	CountriesID       pgtype.Int8 `json:"countries_id"`
	StatesID          pgtype.Int8 `json:"states_id"`
	CitiesID          pgtype.Int8 `json:"cities_id"`
	CommunitiesID     pgtype.Int8 `json:"communities_id"`
	SubCommunitiesID  pgtype.Int8 `json:"sub_communities_id"`
	ProjectID         int64       `json:"project_id"`
	ProjectEntityType int64       `json:"project_entity_type"`
	PhaseEntityType   int64       `json:"phase_entity_type"`
}

func (q *Queries) UpdatePropertiesAddressesBelongToProjectID(ctx context.Context, arg UpdatePropertiesAddressesBelongToProjectIDParams) error {
	_, err := q.db.Exec(ctx, updatePropertiesAddressesBelongToProjectID,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunitiesID,
		arg.SubCommunitiesID,
		arg.ProjectID,
		arg.ProjectEntityType,
		arg.PhaseEntityType,
	)
	return err
}
