// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewHolidayHome = `-- name: CreateNewHolidayHome :one
INSERT INTO holiday_home (
    ref_no,
    company_types_id,
    is_branch,
    companies_id,
    title,
    title_ar,
    holiday_home_categories,
    countries_id,
    states_id,
    cities_id,
    communities_id,
    subcommunity_id,
    lat,
    lng,
    ranking,
    price_per_night,
    no_of_hours,
    no_of_rooms,
    no_of_bathrooms,
    views,
    facilities,
    holiday_package_inclusions,
    description,
    description_ar,
    posted_by,
    status,
    holiday_home_type,
    created_at,
    updated_at,
    price_per_adults,
    price_per_children,
    no_of_guest,
    amenities,
    location_url
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32 ,$33,$34) RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url
`

type CreateNewHolidayHomeParams struct {
	RefNo                    string             `json:"ref_no"`
	CompanyTypesID           pgtype.Int8        `json:"company_types_id"`
	IsBranch                 pgtype.Bool        `json:"is_branch"`
	CompaniesID              pgtype.Int8        `json:"companies_id"`
	Title                    string             `json:"title"`
	TitleAr                  pgtype.Text        `json:"title_ar"`
	HolidayHomeCategories    []int64            `json:"holiday_home_categories"`
	CountriesID              int64              `json:"countries_id"`
	StatesID                 int64              `json:"states_id"`
	CitiesID                 int64              `json:"cities_id"`
	CommunitiesID            int64              `json:"communities_id"`
	SubcommunityID           pgtype.Int8        `json:"subcommunity_id"`
	Lat                      float64            `json:"lat"`
	Lng                      float64            `json:"lng"`
	Ranking                  int64              `json:"ranking"`
	PricePerNight            pgtype.Float8      `json:"price_per_night"`
	NoOfHours                pgtype.Int8        `json:"no_of_hours"`
	NoOfRooms                pgtype.Int8        `json:"no_of_rooms"`
	NoOfBathrooms            pgtype.Int8        `json:"no_of_bathrooms"`
	Views                    []int64            `json:"views"`
	Facilities               []int64            `json:"facilities"`
	HolidayPackageInclusions []int64            `json:"holiday_package_inclusions"`
	Description              string             `json:"description"`
	DescriptionAr            pgtype.Text        `json:"description_ar"`
	PostedBy                 int64              `json:"posted_by"`
	Status                   int64              `json:"status"`
	HolidayHomeType          int64              `json:"holiday_home_type"`
	CreatedAt                time.Time          `json:"created_at"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
	PricePerAdults           pgtype.Float8      `json:"price_per_adults"`
	PricePerChildren         pgtype.Float8      `json:"price_per_children"`
	NoOfGuest                pgtype.Int8        `json:"no_of_guest"`
	Amenities                []int64            `json:"amenities"`
	LocationUrl              string             `json:"location_url"`
}

func (q *Queries) CreateNewHolidayHome(ctx context.Context, arg CreateNewHolidayHomeParams) (HolidayHome, error) {
	row := q.db.QueryRow(ctx, createNewHolidayHome,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompaniesID,
		arg.Title,
		arg.TitleAr,
		arg.HolidayHomeCategories,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunitiesID,
		arg.SubcommunityID,
		arg.Lat,
		arg.Lng,
		arg.Ranking,
		arg.PricePerNight,
		arg.NoOfHours,
		arg.NoOfRooms,
		arg.NoOfBathrooms,
		arg.Views,
		arg.Facilities,
		arg.HolidayPackageInclusions,
		arg.Description,
		arg.DescriptionAr,
		arg.PostedBy,
		arg.Status,
		arg.HolidayHomeType,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PricePerAdults,
		arg.PricePerChildren,
		arg.NoOfGuest,
		arg.Amenities,
		arg.LocationUrl,
	)
	var i HolidayHome
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.TitleAr,
		&i.HolidayHomeCategories,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfHours,
		&i.NoOfRooms,
		&i.NoOfBathrooms,
		&i.Views,
		&i.Facilities,
		&i.HolidayPackageInclusions,
		&i.Description,
		&i.DescriptionAr,
		&i.PostedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomeType,
		&i.NoOfGuest,
		&i.PricePerNight,
		&i.PricePerAdults,
		&i.PricePerChildren,
		&i.Amenities,
		&i.LocationUrl,
	)
	return i, err
}

const filterHolidayHome = `-- name: FilterHolidayHome :many
SELECT
    holiday_home.id, holiday_home.ref_no, holiday_home.company_types_id, holiday_home.is_branch, holiday_home.companies_id, holiday_home.title, holiday_home.title_ar, holiday_home.holiday_home_categories, holiday_home.countries_id, holiday_home.states_id, holiday_home.cities_id, holiday_home.communities_id, holiday_home.subcommunity_id, holiday_home.lat, holiday_home.lng, holiday_home.ranking, holiday_home.no_of_hours, holiday_home.no_of_rooms, holiday_home.no_of_bathrooms, holiday_home.views, holiday_home.facilities, holiday_home.holiday_package_inclusions, holiday_home.description, holiday_home.description_ar, holiday_home.posted_by, holiday_home.created_at, holiday_home.updated_at, holiday_home.status, holiday_home.holiday_home_type, holiday_home.no_of_guest, holiday_home.price_per_night, holiday_home.price_per_adults, holiday_home.price_per_children, holiday_home.amenities, holiday_home.location_url
FROM
    holiday_home
LEFT JOIN cities ON holiday_home.cities_id = cities.id
LEFT JOIN communities ON holiday_home.communities_id = communities.id
LEFT JOIN states ON holiday_home.states_id = states.id
LEFT JOIN countries ON holiday_home.countries_id = countries.id
LEFT JOIN sub_communities ON holiday_home.subcommunity_id = sub_communities.id
LEFT JOIN holiday_home_categories ON holiday_home_categories.id = ANY (holiday_home.holiday_home_categories)
LEFT JOIN holiday_media ON holiday_home.id = holiday_media.holiday_home_id
WHERE
    ( $3::bigint = 0 OR holiday_home.countries_id =  $3::bigint)  -- UAE
    AND ( $4::bigint = 0  OR holiday_home.states_id = $4::bigint )  -- states filter
    AND ( $5::bigint = 0  OR holiday_home.cities_id = $5::bigint )  -- subcommunity filter
    AND ( $6::bigint = 0  OR holiday_home.cities_id = $6::bigint )  -- City filter
    AND ($7::bigint = 0 OR holiday_home.holiday_home_type =  $7::bigint)  -- Type filter
    AND (holiday_home.price BETWEEN $8::bigint AND $9::bigint)  -- Price range filter
    AND (ARRAY_LENGTH($10::bigint[], 1) IS NULL OR holiday_home.no_of_rooms = ANY ($10::bigint[])) -- Bedrooms filter
    AND (ARRAY_LENGTH($11::bigint[], 1) IS NULL OR holiday_home.no_of_bathrooms = ANY ($11::bigint[]))  -- Bathrooms filter
    AND (CASE WHEN $12::bigint IS NULL THEN TRUE WHEN $12::bigint = 0 THEN TRUE ELSE holiday_home.status = $12::bigint END)  -- Status filter
    AND ($13::bigint = 0  OR holiday_home.posted_by = $13::bigint  ) -- Ownership filter
    AND (ARRAY_LENGTH($14::bigint[], 1) IS NULL OR (holiday_home.holiday_home_categories IS NOT NULL AND holiday_home.holiday_home_categories && $14::bigint[])) --categories filter
    AND (CASE WHEN ARRAY_LENGTH($15::bigint[], 1) IS NULL THEN TRUE ELSE holiday_home.facilities && $15::bigint[] END)  -- facilities filter
    	AND(
		CASE WHEN ARRAY_LENGTH($16::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			holiday_home."views" && $16::bigint []
		END) -- views
	-- media
	AND($17::bigint = 0
		OR(array_length(image_url,
				$18) IS NOT NULL)
		OR(array_length(image360_url,
				$19) IS NOT NULL)
		OR(array_length(video_url,
				$20) IS NOT NULL)
		OR(array_length(panaroma_url,
				$21) IS NOT NULL))
    AND (ARRAY_LENGTH($22::bigint[], 1) IS NULL OR holiday_home.ranking = ANY ($22::bigint[])) -- Ranking filter
    AND ($23::varchar IS NULL OR communities.community ILIKE $23::varchar)  -- Community filter 
    AND (CASE WHEN $24::varchar IS NULL THEN TRUE ELSE holiday_home.title ILIKE $24::varchar OR holiday_home.title_ar ILIKE $24::varchar OR cities.city ILIKE $24::varchar OR sub_communities.sub_community ILIKE $24::varchar OR holiday_home_categories.title ILIKE $24::varchar END)  -- Search purpose filter
    AND holiday_home.status NOT IN (5, 6) GROUP BY holiday_home.id LIMIT $1 OFFSET $2
`

type FilterHolidayHomeParams struct {
	Limit                 int32   `json:"limit"`
	Offset                int32   `json:"offset"`
	CountryID             int64   `json:"country_id"`
	StatesID              int64   `json:"states_id"`
	SubcommunityID        int64   `json:"subcommunity_id"`
	CitiesID              int64   `json:"cities_id"`
	HolidayHomeType       int64   `json:"holiday_home_type"`
	MinPrice              int64   `json:"min_price"`
	MaxPrice              int64   `json:"max_price"`
	NoOfRooms             []int64 `json:"no_of_rooms"`
	NoOfBathrooms         []int64 `json:"no_of_bathrooms"`
	Status                int64   `json:"status"`
	UserID                int64   `json:"user_id"`
	HolidayHomeCategories []int64 `json:"holiday_home_categories"`
	Facilities            []int64 `json:"facilities"`
	Views                 []int64 `json:"views"`
	Media                 int64   `json:"media"`
	ImageUrl              int32   `json:"image_url"`
	Image360Url           int32   `json:"image360_url"`
	VideoUrl              int32   `json:"video_url"`
	PanaromaUrl           int32   `json:"panaroma_url"`
	Ranking               []int64 `json:"ranking"`
	Community             string  `json:"community"`
	Searchwith            string  `json:"searchwith"`
}

type FilterHolidayHomeRow struct {
	HolidayHome HolidayHome `json:"holiday_home"`
}

func (q *Queries) FilterHolidayHome(ctx context.Context, arg FilterHolidayHomeParams) ([]FilterHolidayHomeRow, error) {
	rows, err := q.db.Query(ctx, filterHolidayHome,
		arg.Limit,
		arg.Offset,
		arg.CountryID,
		arg.StatesID,
		arg.SubcommunityID,
		arg.CitiesID,
		arg.HolidayHomeType,
		arg.MinPrice,
		arg.MaxPrice,
		arg.NoOfRooms,
		arg.NoOfBathrooms,
		arg.Status,
		arg.UserID,
		arg.HolidayHomeCategories,
		arg.Facilities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.Ranking,
		arg.Community,
		arg.Searchwith,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterHolidayHomeRow
	for rows.Next() {
		var i FilterHolidayHomeRow
		if err := rows.Scan(
			&i.HolidayHome.ID,
			&i.HolidayHome.RefNo,
			&i.HolidayHome.CompanyTypesID,
			&i.HolidayHome.IsBranch,
			&i.HolidayHome.CompaniesID,
			&i.HolidayHome.Title,
			&i.HolidayHome.TitleAr,
			&i.HolidayHome.HolidayHomeCategories,
			&i.HolidayHome.CountriesID,
			&i.HolidayHome.StatesID,
			&i.HolidayHome.CitiesID,
			&i.HolidayHome.CommunitiesID,
			&i.HolidayHome.SubcommunityID,
			&i.HolidayHome.Lat,
			&i.HolidayHome.Lng,
			&i.HolidayHome.Ranking,
			&i.HolidayHome.NoOfHours,
			&i.HolidayHome.NoOfRooms,
			&i.HolidayHome.NoOfBathrooms,
			&i.HolidayHome.Views,
			&i.HolidayHome.Facilities,
			&i.HolidayHome.HolidayPackageInclusions,
			&i.HolidayHome.Description,
			&i.HolidayHome.DescriptionAr,
			&i.HolidayHome.PostedBy,
			&i.HolidayHome.CreatedAt,
			&i.HolidayHome.UpdatedAt,
			&i.HolidayHome.Status,
			&i.HolidayHome.HolidayHomeType,
			&i.HolidayHome.NoOfGuest,
			&i.HolidayHome.PricePerNight,
			&i.HolidayHome.PricePerAdults,
			&i.HolidayHome.PricePerChildren,
			&i.HolidayHome.Amenities,
			&i.HolidayHome.LocationUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCountDeletedHolidayHome = `-- name: GetAllCountDeletedHolidayHome :one
SELECT count(*) FROM holiday_home where status = 6
`

func (q *Queries) GetAllCountDeletedHolidayHome(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountDeletedHolidayHome)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllDeletedHolidayHome = `-- name: GetAllDeletedHolidayHome :many
WITH HolidayHomeCategories AS (
	SELECT id as holiday_home_id, UNNEST(holiday_home_categories) as catg_id
	from holiday_home 
	WHERE status =6 
),
catgsStruct as(
	SELECT hm.id as holiday_home_id,
	json_agg(
		json_build_object(
                'id', hmc.catg_id,
                'title', catgs_table.title,
                'title_ar', catgs_table.title_ar,
                'holiday_home_type' , catgs_table.holiday_home_type,
                'status', catgs_table.status
            )
	) as categories
	from holiday_home hm 
	join HolidayHomeCategories hmc on hmc.holiday_home_id= hm.id
	join holiday_home_categories catgs_table on hmc.catg_id= catgs_table.id
	WHERE hm.status =6  
	group by hm.id
)
SELECT hm.id,
    hm.ref_no, 
    hm.company_types_id, 
    hm.is_branch, 
    hm.companies_id, 
    hm.location_url,
    hm.ranking,
    hm.holiday_home_type,
    countries.country, 
	cities.city, 
	states."state",
	communities.community, 
	sub_communities.sub_community,
	hm.title, hm.title_ar FROM holiday_home hm 
INNER JOIN 
		countries ON countries.id = hm.countries_id
INNER JOIN 
	states ON states.id = hm.states_id 
INNER JOIN 
	cities ON cities.id = hm.cities_id 
INNER JOIN 
	communities ON communities.id = hm.communities_id
INNER JOIN 
	sub_communities ON sub_communities.id = hm.subcommunity_id
where hm.status = 6 Order by hm.updated_at DESC
`

type GetAllDeletedHolidayHomeRow struct {
	ID              int64       `json:"id"`
	RefNo           string      `json:"ref_no"`
	CompanyTypesID  pgtype.Int8 `json:"company_types_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	CompaniesID     pgtype.Int8 `json:"companies_id"`
	LocationUrl     string      `json:"location_url"`
	Ranking         int64       `json:"ranking"`
	HolidayHomeType int64       `json:"holiday_home_type"`
	Country         string      `json:"country"`
	City            string      `json:"city"`
	State           string      `json:"state"`
	Community       string      `json:"community"`
	SubCommunity    string      `json:"sub_community"`
	Title           string      `json:"title"`
	TitleAr         pgtype.Text `json:"title_ar"`
}

func (q *Queries) GetAllDeletedHolidayHome(ctx context.Context) ([]GetAllDeletedHolidayHomeRow, error) {
	rows, err := q.db.Query(ctx, getAllDeletedHolidayHome)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDeletedHolidayHomeRow
	for rows.Next() {
		var i GetAllDeletedHolidayHomeRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.LocationUrl,
			&i.Ranking,
			&i.HolidayHomeType,
			&i.Country,
			&i.City,
			&i.State,
			&i.Community,
			&i.SubCommunity,
			&i.Title,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeletedHolidayHomeWithPagination = `-- name: GetAllDeletedHolidayHomeWithPagination :many
WITH HolidayHomeCategories AS (
	SELECT id as holiday_home_id, UNNEST(holiday_home_categories) as catg_id
	from holiday_home 
	WHERE status =6 
),
catgsStruct as(
	SELECT hm.id as holiday_home_id,
	json_agg(
		json_build_object(
                'id', hmc.catg_id,
                'title', catgs_table.title,
                'title_ar', catgs_table.title_ar,
                'holiday_home_type' , catgs_table.holiday_home_type,
                'status', catgs_table.status
            )
	) as categories
	from holiday_home hm 
	join HolidayHomeCategories hmc on hmc.holiday_home_id= hm.id
	join holiday_home_categories catgs_table on hmc.catg_id= catgs_table.id
	WHERE hm.status =6  
	group by hm.id
)
SELECT hm.id,
    hm.ref_no, 
    hm.company_types_id, 
    hm.is_branch, 
    hm.companies_id, 
    hm.location_url,
    hm.ranking,
    hm.holiday_home_type,
    countries.country, 
	cities.city, 
	states."state",
	communities.community, 
	sub_communities.sub_community,
	hm.title, hm.title_ar FROM holiday_home hm 
INNER JOIN 
		countries ON countries.id = hm.countries_id
INNER JOIN 
	states ON states.id = hm.states_id 
INNER JOIN 
	cities ON cities.id = hm.cities_id 
INNER JOIN 
	communities ON communities.id = hm.communities_id
INNER JOIN 
	sub_communities ON sub_communities.id = hm.subcommunity_id
where hm.status = 6 Order by hm.updated_at DESC
LIMIT $1 OFFSET $2
`

type GetAllDeletedHolidayHomeWithPaginationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllDeletedHolidayHomeWithPaginationRow struct {
	ID              int64       `json:"id"`
	RefNo           string      `json:"ref_no"`
	CompanyTypesID  pgtype.Int8 `json:"company_types_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	CompaniesID     pgtype.Int8 `json:"companies_id"`
	LocationUrl     string      `json:"location_url"`
	Ranking         int64       `json:"ranking"`
	HolidayHomeType int64       `json:"holiday_home_type"`
	Country         string      `json:"country"`
	City            string      `json:"city"`
	State           string      `json:"state"`
	Community       string      `json:"community"`
	SubCommunity    string      `json:"sub_community"`
	Title           string      `json:"title"`
	TitleAr         pgtype.Text `json:"title_ar"`
}

func (q *Queries) GetAllDeletedHolidayHomeWithPagination(ctx context.Context, arg GetAllDeletedHolidayHomeWithPaginationParams) ([]GetAllDeletedHolidayHomeWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllDeletedHolidayHomeWithPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDeletedHolidayHomeWithPaginationRow
	for rows.Next() {
		var i GetAllDeletedHolidayHomeWithPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.LocationUrl,
			&i.Ranking,
			&i.HolidayHomeType,
			&i.Country,
			&i.City,
			&i.State,
			&i.Community,
			&i.SubCommunity,
			&i.Title,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHome = `-- name: GetAllHolidayHome :many
SELECT id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url FROM holiday_home where status != 6 ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllHolidayHomeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHome(ctx context.Context, arg GetAllHolidayHomeParams) ([]HolidayHome, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHome, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHome
	for rows.Next() {
		var i HolidayHome
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.Title,
			&i.TitleAr,
			&i.HolidayHomeCategories,
			&i.CountriesID,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubcommunityID,
			&i.Lat,
			&i.Lng,
			&i.Ranking,
			&i.NoOfHours,
			&i.NoOfRooms,
			&i.NoOfBathrooms,
			&i.Views,
			&i.Facilities,
			&i.HolidayPackageInclusions,
			&i.Description,
			&i.DescriptionAr,
			&i.PostedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomeType,
			&i.NoOfGuest,
			&i.PricePerNight,
			&i.PricePerAdults,
			&i.PricePerChildren,
			&i.Amenities,
			&i.LocationUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeCategoryByTitle = `-- name: GetAllHolidayHomeCategoryByTitle :one
select id, holiday_home_type, title, title_ar, status from holiday_home_categories Where title ILIKE $1 AND status != 6
`

func (q *Queries) GetAllHolidayHomeCategoryByTitle(ctx context.Context, title string) (HolidayHomeCategory, error) {
	row := q.db.QueryRow(ctx, getAllHolidayHomeCategoryByTitle, title)
	var i HolidayHomeCategory
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeType,
		&i.Title,
		&i.TitleAr,
		&i.Status,
	)
	return i, err
}

const getAllInternationalHolidayHomeCount = `-- name: GetAllInternationalHolidayHomeCount :one
SELECT COUNT(*) FROM holiday_home WHERE countries_id != $1 and status != 6 and holiday_home_type = $2
`

type GetAllInternationalHolidayHomeCountParams struct {
	CountriesID     int64 `json:"countries_id"`
	HolidayHomeType int64 `json:"holiday_home_type"`
}

func (q *Queries) GetAllInternationalHolidayHomeCount(ctx context.Context, arg GetAllInternationalHolidayHomeCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllInternationalHolidayHomeCount, arg.CountriesID, arg.HolidayHomeType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllLocalHolidayHome = `-- name: GetAllLocalHolidayHome :many
 

SELECT id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url FROM holiday_home where countries_id = $3 and status != 6 and holiday_home_type = $4 ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllLocalHolidayHomeParams struct {
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
	CountriesID     int64 `json:"countries_id"`
	HolidayHomeType int64 `json:"holiday_home_type"`
}

// -- name: CreateHolidayHome :one
// INSERT INTO holiday_home (
//
//		ref_no,
//		company_types_id,
//		is_branch,
//		companies_id,
//		title,
//		title_ar,
//		holiday_home_categories,
//		countries_id,
//		states_id,
//		cities_id,
//		communities_id,
//		subcommunity_id,
//		lat,
//		lng,
//		ranking,
//		price,
//		no_of_hours,
//		no_of_rooms,
//		no_of_bathrooms,
//		views,
//		facilities,
//		holiday_package_inclusions,
//		description,
//		description_ar,
//		posted_by,
//	    status,
//		holiday_home_type,
//		created_at,
//		updated_at
//
// )
// VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29) RETURNING *;
// -- name: UpdateHolidayHome :one
// UPDATE holiday_home
// SET
//
//	    ref_no = $1,
//	    company_types_id = $2,
//	    is_branch = $3,
//	    companies_id = $4,
//	    title = $5,
//	    title_ar = $6,
//	    holiday_home_categories = $7,
//	    countries_id = $8,
//	    states_id = $9,
//	    cities_id = $10,
//	    communities_id = $11,
//	    subcommunity_id = $12,
//	    lat = $13,
//	    lng = $14,
//	    ranking = $15,
//	    price = $16,
//	    no_of_hours = $17,
//	    no_of_rooms = $18,
//	    no_of_bathrooms = $19,
//	    views = $20,
//	    facilities = $21,
//	    holiday_package_inclusions = $22,
//	    description = $23,
//	    description_ar = $24,
//	    posted_by = $25,
//	    updated_at = $26,
//		status = $27,
//		holiday_home_type = $28
//
// WHERE
//
//	id = $29 RETURNING *;
func (q *Queries) GetAllLocalHolidayHome(ctx context.Context, arg GetAllLocalHolidayHomeParams) ([]HolidayHome, error) {
	rows, err := q.db.Query(ctx, getAllLocalHolidayHome,
		arg.Limit,
		arg.Offset,
		arg.CountriesID,
		arg.HolidayHomeType,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHome
	for rows.Next() {
		var i HolidayHome
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.Title,
			&i.TitleAr,
			&i.HolidayHomeCategories,
			&i.CountriesID,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubcommunityID,
			&i.Lat,
			&i.Lng,
			&i.Ranking,
			&i.NoOfHours,
			&i.NoOfRooms,
			&i.NoOfBathrooms,
			&i.Views,
			&i.Facilities,
			&i.HolidayPackageInclusions,
			&i.Description,
			&i.DescriptionAr,
			&i.PostedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomeType,
			&i.NoOfGuest,
			&i.PricePerNight,
			&i.PricePerAdults,
			&i.PricePerChildren,
			&i.Amenities,
			&i.LocationUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLocalHolidayHomeCount = `-- name: GetAllLocalHolidayHomeCount :one


 
SELECT COUNT(*) FROM holiday_home WHERE countries_id = $1 and status != 6  and holiday_home_type = $2
`

type GetAllLocalHolidayHomeCountParams struct {
	CountriesID     int64 `json:"countries_id"`
	HolidayHomeType int64 `json:"holiday_home_type"`
}

// -- name: GetAllInternationalHolidayHome :many
// WITH HolidayHomeCategories AS (
//
//	SELECT id as holiday_home_id, UNNEST(holiday_home_categories) as catg_id
//	from holiday_home
//	WHERE status !=6 AND countries_id !=1  AND holiday_home_type = $1
//
// ),
// catgsStruct as(
//
//		SELECT hm.id as holiday_home_id,
//		json_agg(
//			json_build_object(
//	                'id', hmc.catg_id,
//	                'title', catgs_table.title,
//	                'title_ar', catgs_table.title_ar,
//	                'status', catgs_table.status
//	            )
//		) as categories
//		from holiday_home hm
//		join HolidayHomeCategories hmc on hmc.holiday_home_id= hm.id
//		join holiday_home_categories catgs_table on hmc.catg_id= catgs_table.id
//		WHERE hm.status !=6 AND hm.countries_id !=1 AND hm.holiday_home_type = $1
//		group by hm.id
//
// ),
// PackageInclusion AS (
//
//	SELECT id as holiday_home_id, UNNEST(holiday_package_inclusions) as pkg_id
//	from holiday_home
//	WHERE status !=6 AND countries_id !=1 AND holiday_home_type = $1
//
// ),
// PackgStrcut as(
//
//		SELECT hm.id as holiday_home_id,
//		json_agg(
//			json_build_object(
//	                'id', pkgInc.pkg_id,
//	                'title', pkg_table.title,
//	                'title_ar', pkg_table.title_ar,
//	                'status', pkg_table.status
//	            )
//		) as packages
//		from holiday_home hm
//		join PackageInclusion pkgInc on pkgInc.holiday_home_id= hm.id
//		join holiday_package_inclusions pkg_table on pkgInc.pkg_id= pkg_table.id
//		WHERE hm.status !=6 AND hm.countries_id !=1 AND hm.holiday_home_type = $1
//		group by hm.id
//
// ),
// ViewsIds AS (
//
//	SELECT id as holiday_home_id, UNNEST(views) as view_id
//	from holiday_home
//	WHERE status !=6 AND countries_id !=1  AND holiday_home_type = $1
//
// ),
// ViewsStruct as(
//
//		SELECT hm.id as holiday_home_id,
//		json_agg(
//			json_build_object(
//	                'id', vss.id,
//	                'title', vss.title
//	            )
//		) as jsonViews
//		from holiday_home hm
//		join ViewsIds vs on vs.holiday_home_id= hm.id
//		join views vss on vss.id=vs.view_id
//		WHERE hm.status !=6 AND hm.countries_id !=1  AND hm.holiday_home_type = $1
//		group by hm.id
//
// ),
// FacilitiesCTE AS (
//
//	select hm.id as holiday_home_id ,UNNEST(facilities) as fac
//	from holiday_home hm
//	WHERE status !=6 AND countries_id !=1  AND holiday_home_type = $1
//
// ),
// FacilitiesStruct AS (
//
//	select hm.id as holiday_home_id,
//	json_agg(
//		json_build_object(
//		'id',facilities.id,
//		'icon_url',facilities.icon_url,
//		'title',facilities.title
//		)
//	) as jsonViews
//	from holiday_home hm
//	join FacilitiesCTE ON hm.id = FacilitiesCTE.holiday_home_id
//	join facilities ON FacilitiesCTE.fac = facilities.id
//	WHERE hm.status !=6 AND hm.countries_id !=1  AND hm.holiday_home_type = $1
//	group by hm.id
//
// ),
// AmenitiesCTE AS (
//
//	select hm.id as holiday_home_id , UNNEST(amenities) as am
//	from holiday_home hm
//	WHERE status !=6 AND countries_id !=1 AND holiday_home_type = $1
//
// ),
// AmenitiesStruct AS (
//
//	select hm.id as holiday_home_id,
//	json_agg(
//		json_build_object(
//		'id',amenities.id,
//		'icon_url',amenities.icon_url,
//		'title',amenities.title
//		)
//
// ) as jsonAmenities
//
//	from holiday_home hm
//	join AmenitiesCTE on hm.id = AmenitiesCTE.holiday_home_id
//	join amenities on amenities.id = AmenitiesCTE.am
//	WHERE hm.status !=6 AND countries_id !=1 AND holiday_home_type = $1
//	group by hm.id
//
// )
// select
//
//	sqlc.embed(hm),
//	COALESCE(na.categories, '[]'::json) AS categories,
//	COALESCE(pk.packages, '[]'::json) AS packages,
//	COALESCE(va.jsonViews, '[]'::json) AS views,
//	COALESCE(fs.jsonViews, '[]'::json) AS facilities,
//	COALESCE(am.jsonAmenities, '[]'::json) AS amenities,
//	countries.country,
//	cities.city,
//	states."state",
//	communities.community,
//	sub_communities.sub_community
//
// from holiday_home hm
// LEFT JOIN
//
//	catgsStruct na ON hm.id = na.holiday_home_id
//
// LEFT JOIN
//
//	PackgStrcut pk ON hm.id = pk.holiday_home_id
//
// LEFT JOIN
//
//	ViewsStruct va ON hm.id = va.holiday_home_id
//
// LEFT JOIN
//
//	FacilitiesStruct fs ON hm.id = fs.holiday_home_id
//
// INNER JOIN
//
//	countries ON countries.id = hm.countries_id
//
// INNER JOIN
//
//	states ON states.id = hm.states_id
//
// INNER JOIN
//
//	cities ON cities.id = hm.cities_id
//
// INNER JOIN
//
//	communities ON communities.id = hm.communities_id
//
// INNER JOIN
//
//	sub_communities ON sub_communities.id = hm.subcommunity_id
//
// LEFT JOIN
//
//	AmenitiesStruct am ON hm.id = am.holiday_home_id
//
// WHERE hm.status !=6 AND hm.countries_id !=1 AND hm.holiday_home_type = $1
// ORDER BY hm.updated_at DESC
// LIMIT $2
// OFFSET $3;
func (q *Queries) GetAllLocalHolidayHomeCount(ctx context.Context, arg GetAllLocalHolidayHomeCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAllLocalHolidayHomeCount, arg.CountriesID, arg.HolidayHomeType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeletedHolidayHomeById = `-- name: GetDeletedHolidayHomeById :one
SELECT id,ref_no FROM holiday_home where id = $1 and status =6
`

type GetDeletedHolidayHomeByIdRow struct {
	ID    int64  `json:"id"`
	RefNo string `json:"ref_no"`
}

func (q *Queries) GetDeletedHolidayHomeById(ctx context.Context, id int64) (GetDeletedHolidayHomeByIdRow, error) {
	row := q.db.QueryRow(ctx, getDeletedHolidayHomeById, id)
	var i GetDeletedHolidayHomeByIdRow
	err := row.Scan(&i.ID, &i.RefNo)
	return i, err
}

const getHolidayHomeByCategory = `-- name: GetHolidayHomeByCategory :many
SELECT id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url 
FROM holiday_home 
WHERE holiday_home_type = $1 
AND holiday_home_categories = ARRAY[$2::bigint]
`

type GetHolidayHomeByCategoryParams struct {
	HolidayHomeType int64 `json:"holiday_home_type"`
	Column2         int64 `json:"column_2"`
}

func (q *Queries) GetHolidayHomeByCategory(ctx context.Context, arg GetHolidayHomeByCategoryParams) ([]HolidayHome, error) {
	rows, err := q.db.Query(ctx, getHolidayHomeByCategory, arg.HolidayHomeType, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHome
	for rows.Next() {
		var i HolidayHome
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.Title,
			&i.TitleAr,
			&i.HolidayHomeCategories,
			&i.CountriesID,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunitiesID,
			&i.SubcommunityID,
			&i.Lat,
			&i.Lng,
			&i.Ranking,
			&i.NoOfHours,
			&i.NoOfRooms,
			&i.NoOfBathrooms,
			&i.Views,
			&i.Facilities,
			&i.HolidayPackageInclusions,
			&i.Description,
			&i.DescriptionAr,
			&i.PostedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.HolidayHomeType,
			&i.NoOfGuest,
			&i.PricePerNight,
			&i.PricePerAdults,
			&i.PricePerChildren,
			&i.Amenities,
			&i.LocationUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomeById = `-- name: GetHolidayHomeById :one
SELECT id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url FROM holiday_home where id = $1
`

func (q *Queries) GetHolidayHomeById(ctx context.Context, id int64) (HolidayHome, error) {
	row := q.db.QueryRow(ctx, getHolidayHomeById, id)
	var i HolidayHome
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.TitleAr,
		&i.HolidayHomeCategories,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfHours,
		&i.NoOfRooms,
		&i.NoOfBathrooms,
		&i.Views,
		&i.Facilities,
		&i.HolidayPackageInclusions,
		&i.Description,
		&i.DescriptionAr,
		&i.PostedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomeType,
		&i.NoOfGuest,
		&i.PricePerNight,
		&i.PricePerAdults,
		&i.PricePerChildren,
		&i.Amenities,
		&i.LocationUrl,
	)
	return i, err
}

const updateHolidayHomeStatus = `-- name: UpdateHolidayHomeStatus :one
UPDATE holiday_home
SET
    status= $2,
    updated_at = $3
WHERE
    id = $1
RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url
`

type UpdateHolidayHomeStatusParams struct {
	ID        int64              `json:"id"`
	Status    int64              `json:"status"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateHolidayHomeStatus(ctx context.Context, arg UpdateHolidayHomeStatusParams) (HolidayHome, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomeStatus, arg.ID, arg.Status, arg.UpdatedAt)
	var i HolidayHome
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.TitleAr,
		&i.HolidayHomeCategories,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfHours,
		&i.NoOfRooms,
		&i.NoOfBathrooms,
		&i.Views,
		&i.Facilities,
		&i.HolidayPackageInclusions,
		&i.Description,
		&i.DescriptionAr,
		&i.PostedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomeType,
		&i.NoOfGuest,
		&i.PricePerNight,
		&i.PricePerAdults,
		&i.PricePerChildren,
		&i.Amenities,
		&i.LocationUrl,
	)
	return i, err
}

const updateNewHolidayHome = `-- name: UpdateNewHolidayHome :one
UPDATE holiday_home
SET
    company_types_id = $2,
    is_branch = $3,
    companies_id = $4,
    title = $5,
    title_ar = $6,
    holiday_home_categories = $7,
    countries_id = $8,
    states_id = $9,
    cities_id = $10,
    communities_id = $11,
    subcommunity_id = $12,
    lat = $13,
    lng = $14,
    ranking = $15,
    price_per_night = $16,
    no_of_hours = $17,
    no_of_rooms = $18,
    no_of_bathrooms = $19,
    views = $20,
    facilities = $21,
    holiday_package_inclusions = $22,
    description = $23,
    description_ar = $24,
    price_per_adults=$25,
    updated_at = $26,
    status = $27,
    holiday_home_type = $28,
    price_per_children=$29,
    no_of_guest=$30,
    amenities=$31,
   location_url=$32
WHERE
    id=$1
RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url
`

type UpdateNewHolidayHomeParams struct {
	ID                       int64              `json:"id"`
	CompanyTypesID           pgtype.Int8        `json:"company_types_id"`
	IsBranch                 pgtype.Bool        `json:"is_branch"`
	CompaniesID              pgtype.Int8        `json:"companies_id"`
	Title                    string             `json:"title"`
	TitleAr                  pgtype.Text        `json:"title_ar"`
	HolidayHomeCategories    []int64            `json:"holiday_home_categories"`
	CountriesID              int64              `json:"countries_id"`
	StatesID                 int64              `json:"states_id"`
	CitiesID                 int64              `json:"cities_id"`
	CommunitiesID            int64              `json:"communities_id"`
	SubcommunityID           pgtype.Int8        `json:"subcommunity_id"`
	Lat                      float64            `json:"lat"`
	Lng                      float64            `json:"lng"`
	Ranking                  int64              `json:"ranking"`
	PricePerNight            pgtype.Float8      `json:"price_per_night"`
	NoOfHours                pgtype.Int8        `json:"no_of_hours"`
	NoOfRooms                pgtype.Int8        `json:"no_of_rooms"`
	NoOfBathrooms            pgtype.Int8        `json:"no_of_bathrooms"`
	Views                    []int64            `json:"views"`
	Facilities               []int64            `json:"facilities"`
	HolidayPackageInclusions []int64            `json:"holiday_package_inclusions"`
	Description              string             `json:"description"`
	DescriptionAr            pgtype.Text        `json:"description_ar"`
	PricePerAdults           pgtype.Float8      `json:"price_per_adults"`
	UpdatedAt                pgtype.Timestamptz `json:"updated_at"`
	Status                   int64              `json:"status"`
	HolidayHomeType          int64              `json:"holiday_home_type"`
	PricePerChildren         pgtype.Float8      `json:"price_per_children"`
	NoOfGuest                pgtype.Int8        `json:"no_of_guest"`
	Amenities                []int64            `json:"amenities"`
	LocationUrl              string             `json:"location_url"`
}

func (q *Queries) UpdateNewHolidayHome(ctx context.Context, arg UpdateNewHolidayHomeParams) (HolidayHome, error) {
	row := q.db.QueryRow(ctx, updateNewHolidayHome,
		arg.ID,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompaniesID,
		arg.Title,
		arg.TitleAr,
		arg.HolidayHomeCategories,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunitiesID,
		arg.SubcommunityID,
		arg.Lat,
		arg.Lng,
		arg.Ranking,
		arg.PricePerNight,
		arg.NoOfHours,
		arg.NoOfRooms,
		arg.NoOfBathrooms,
		arg.Views,
		arg.Facilities,
		arg.HolidayPackageInclusions,
		arg.Description,
		arg.DescriptionAr,
		arg.PricePerAdults,
		arg.UpdatedAt,
		arg.Status,
		arg.HolidayHomeType,
		arg.PricePerChildren,
		arg.NoOfGuest,
		arg.Amenities,
		arg.LocationUrl,
	)
	var i HolidayHome
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.TitleAr,
		&i.HolidayHomeCategories,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfHours,
		&i.NoOfRooms,
		&i.NoOfBathrooms,
		&i.Views,
		&i.Facilities,
		&i.HolidayPackageInclusions,
		&i.Description,
		&i.DescriptionAr,
		&i.PostedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomeType,
		&i.NoOfGuest,
		&i.PricePerNight,
		&i.PricePerAdults,
		&i.PricePerChildren,
		&i.Amenities,
		&i.LocationUrl,
	)
	return i, err
}
