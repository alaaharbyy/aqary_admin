// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_package_inclusions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayPackInclusion = `-- name: CreateHolidayPackInclusion :one
INSERT INTO holiday_package_inclusions (
    title,
    title_ar,
    icon_url,
    status,
    holiday_home_type
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, title_ar, icon_url, status, holiday_home_type
`

type CreateHolidayPackInclusionParams struct {
	Title           string      `json:"title"`
	TitleAr         pgtype.Text `json:"title_ar"`
	IconUrl         string      `json:"icon_url"`
	Status          int64       `json:"status"`
	HolidayHomeType int64       `json:"holiday_home_type"`
}

func (q *Queries) CreateHolidayPackInclusion(ctx context.Context, arg CreateHolidayPackInclusionParams) (HolidayPackageInclusion, error) {
	row := q.db.QueryRow(ctx, createHolidayPackInclusion,
		arg.Title,
		arg.TitleAr,
		arg.IconUrl,
		arg.Status,
		arg.HolidayHomeType,
	)
	var i HolidayPackageInclusion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.Status,
		&i.HolidayHomeType,
	)
	return i, err
}

const deletePackInclusion = `-- name: DeletePackInclusion :exec
DELETE FROM holiday_package_inclusions where id = $1
`

func (q *Queries) DeletePackInclusion(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePackInclusion, id)
	return err
}

const getAllPackInclusion = `-- name: GetAllPackInclusion :many
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions order by id DESC
`

func (q *Queries) GetAllPackInclusion(ctx context.Context) ([]HolidayPackageInclusion, error) {
	rows, err := q.db.Query(ctx, getAllPackInclusion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayPackageInclusion
	for rows.Next() {
		var i HolidayPackageInclusion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Status,
			&i.HolidayHomeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPackInclusionByType = `-- name: GetAllPackInclusionByType :many
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions WHERE holiday_home_type = $1 order by id DESC
`

func (q *Queries) GetAllPackInclusionByType(ctx context.Context, holidayHomeType int64) ([]HolidayPackageInclusion, error) {
	rows, err := q.db.Query(ctx, getAllPackInclusionByType, holidayHomeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayPackageInclusion
	for rows.Next() {
		var i HolidayPackageInclusion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Status,
			&i.HolidayHomeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPackInclusionWithpag = `-- name: GetAllPackInclusionWithpag :many
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions  ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllPackInclusionWithpagParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPackInclusionWithpag(ctx context.Context, arg GetAllPackInclusionWithpagParams) ([]HolidayPackageInclusion, error) {
	rows, err := q.db.Query(ctx, getAllPackInclusionWithpag, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayPackageInclusion
	for rows.Next() {
		var i HolidayPackageInclusion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Status,
			&i.HolidayHomeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPackInclusionWithpagByType = `-- name: GetAllPackInclusionWithpagByType :many
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions WHERE holiday_home_type = $3 ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllPackInclusionWithpagByTypeParams struct {
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
	HolidayHomeType int64 `json:"holiday_home_type"`
}

func (q *Queries) GetAllPackInclusionWithpagByType(ctx context.Context, arg GetAllPackInclusionWithpagByTypeParams) ([]HolidayPackageInclusion, error) {
	rows, err := q.db.Query(ctx, getAllPackInclusionWithpagByType, arg.Limit, arg.Offset, arg.HolidayHomeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayPackageInclusion
	for rows.Next() {
		var i HolidayPackageInclusion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Status,
			&i.HolidayHomeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPackInclusionbyId = `-- name: GetAllPackInclusionbyId :one
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions where id = $1
`

func (q *Queries) GetAllPackInclusionbyId(ctx context.Context, id int64) (HolidayPackageInclusion, error) {
	row := q.db.QueryRow(ctx, getAllPackInclusionbyId, id)
	var i HolidayPackageInclusion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.Status,
		&i.HolidayHomeType,
	)
	return i, err
}

const getAllPackInclusionbyTitle = `-- name: GetAllPackInclusionbyTitle :many
SELECT id, title, title_ar, icon_url, status, holiday_home_type FROM holiday_package_inclusions where title like $1
`

func (q *Queries) GetAllPackInclusionbyTitle(ctx context.Context, title string) ([]HolidayPackageInclusion, error) {
	rows, err := q.db.Query(ctx, getAllPackInclusionbyTitle, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayPackageInclusion
	for rows.Next() {
		var i HolidayPackageInclusion
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleAr,
			&i.IconUrl,
			&i.Status,
			&i.HolidayHomeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPackInclusion = `-- name: GetCountPackInclusion :many
SELECT count(*) FROM holiday_package_inclusions
`

func (q *Queries) GetCountPackInclusion(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCountPackInclusion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPackInclusionByType = `-- name: GetCountPackInclusionByType :many
SELECT count(*) FROM holiday_package_inclusions WHERE holiday_home_type = $1
`

func (q *Queries) GetCountPackInclusionByType(ctx context.Context, holidayHomeType int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCountPackInclusionByType, holidayHomeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolidayPackInclusion = `-- name: UpdateHolidayPackInclusion :one
UPDATE holiday_package_inclusions 
SET
    title = $2,
    title_ar = $3,
    icon_url = $4,
    status = $5,
    holiday_home_type = $6
WHERE id = $1
RETURNING id, title, title_ar, icon_url, status, holiday_home_type
`

type UpdateHolidayPackInclusionParams struct {
	ID              int64       `json:"id"`
	Title           string      `json:"title"`
	TitleAr         pgtype.Text `json:"title_ar"`
	IconUrl         string      `json:"icon_url"`
	Status          int64       `json:"status"`
	HolidayHomeType int64       `json:"holiday_home_type"`
}

func (q *Queries) UpdateHolidayPackInclusion(ctx context.Context, arg UpdateHolidayPackInclusionParams) (HolidayPackageInclusion, error) {
	row := q.db.QueryRow(ctx, updateHolidayPackInclusion,
		arg.ID,
		arg.Title,
		arg.TitleAr,
		arg.IconUrl,
		arg.Status,
		arg.HolidayHomeType,
	)
	var i HolidayPackageInclusion
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleAr,
		&i.IconUrl,
		&i.Status,
		&i.HolidayHomeType,
	)
	return i, err
}
