// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_freelancer_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialFreelancerPropertyDoc = `-- name: CreateIndustrialFreelancerPropertyDoc :one
INSERT INTO industrial_freelancer_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    industrial_freelancer_properties_id,
    status
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_freelancer_properties_id, status
`

type CreateIndustrialFreelancerPropertyDocParams struct {
	DocumentsCategoryID              int64     `json:"documents_category_id"`
	DocumentsSubcategoryID           int64     `json:"documents_subcategory_id"`
	FileUrl                          []string  `json:"file_url"`
	CreatedAt                        time.Time `json:"created_at"`
	UpdatedAt                        time.Time `json:"updated_at"`
	IndustrialFreelancerPropertiesID int64     `json:"industrial_freelancer_properties_id"`
	Status                           int64     `json:"status"`
}

func (q *Queries) CreateIndustrialFreelancerPropertyDoc(ctx context.Context, arg CreateIndustrialFreelancerPropertyDocParams) (IndustrialFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createIndustrialFreelancerPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialFreelancerPropertiesID,
		arg.Status,
	)
	var i IndustrialFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const deleteIndustrialFreelancerPropertyDoc = `-- name: DeleteIndustrialFreelancerPropertyDoc :exec
DELETE FROM industrial_freelancer_properties_documents
Where id = $1
`

func (q *Queries) DeleteIndustrialFreelancerPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialFreelancerPropertyDoc, id)
	return err
}

const getAllIndustrialFreelancerPropertyDoc = `-- name: GetAllIndustrialFreelancerPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_freelancer_properties_id, status FROM industrial_freelancer_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialFreelancerPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialFreelancerPropertyDoc(ctx context.Context, arg GetAllIndustrialFreelancerPropertyDocParams) ([]IndustrialFreelancerPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialFreelancerPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialFreelancerPropertiesDocument
	for rows.Next() {
		var i IndustrialFreelancerPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialFreelancerPropertiesID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyId :many

SELECT
industrial_freelancer_properties_documents.id,
industrial_freelancer_properties_documents.documents_category_id,
industrial_freelancer_properties_documents.documents_subcategory_id,
industrial_freelancer_properties_documents.file_url,
industrial_freelancer_properties_documents.created_at,
industrial_freelancer_properties_documents.updated_at,
industrial_freelancer_properties_documents.industrial_freelancer_properties_id,
industrial_freelancer_properties_documents.status,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_freelancer_properties_documents
LEFT JOIN documents_category ON documents_category.id = industrial_freelancer_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_freelancer_properties_documents.documents_subcategory_id
WHERE
industrial_freelancer_properties_documents.industrial_freelancer_properties_id = $3
ORDER BY
industrial_freelancer_properties_documents.id
LIMIT $1 OFFSET $2
`

type GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdParams struct {
	Limit                            int32 `json:"limit"`
	Offset                           int32 `json:"offset"`
	IndustrialFreelancerPropertiesID int64 `json:"industrial_freelancer_properties_id"`
}

type GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdRow struct {
	ID                               int64       `json:"id"`
	DocumentsCategoryID              int64       `json:"documents_category_id"`
	DocumentsSubcategoryID           int64       `json:"documents_subcategory_id"`
	FileUrl                          []string    `json:"file_url"`
	CreatedAt                        time.Time   `json:"created_at"`
	UpdatedAt                        time.Time   `json:"updated_at"`
	IndustrialFreelancerPropertiesID int64       `json:"industrial_freelancer_properties_id"`
	Status                           int64       `json:"status"`
	Category                         pgtype.Text `json:"category"`
	SubCategory                      pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, arg GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdParams) ([]GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialFreelancerPropertyDocByFreelancerPropertyId, arg.Limit, arg.Offset, arg.IndustrialFreelancerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdRow
	for rows.Next() {
		var i GetAllIndustrialFreelancerPropertyDocByFreelancerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialFreelancerPropertiesID,
			&i.Status,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountIndustrialFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetCountIndustrialFreelancerPropertyDocByFreelancerPropertyId :one
SELECT count(*)FROM industrial_freelancer_properties_documents WHERE industrial_freelancer_properties_documents.industrial_freelancer_properties_id=$1
`

func (q *Queries) GetCountIndustrialFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, industrialFreelancerPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountIndustrialFreelancerPropertyDocByFreelancerPropertyId, industrialFreelancerPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIndustrialFreelancerPropertyDoc = `-- name: GetIndustrialFreelancerPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_freelancer_properties_id, status FROM industrial_freelancer_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialFreelancerPropertyDoc(ctx context.Context, limit int32) (IndustrialFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialFreelancerPropertyDoc, limit)
	var i IndustrialFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const getIndustrialFreelancerPropertyDocByFreelancerPropertyDocId = `-- name: GetIndustrialFreelancerPropertyDocByFreelancerPropertyDocId :one
SELECT
 industrial_freelancer_properties_documents.id,
 industrial_freelancer_properties_documents.documents_category_id,
 industrial_freelancer_properties_documents.documents_subcategory_id,
 industrial_freelancer_properties_documents.file_url,
 industrial_freelancer_properties_documents.created_at, 
 industrial_freelancer_properties_documents.updated_at,
 industrial_freelancer_properties_documents.industrial_freelancer_properties_id,
 industrial_freelancer_properties_documents.status,
 documents_category.category,
 documents_subcategory.sub_category
 FROM
 industrial_freelancer_properties_documents
 LEFT JOIN documents_category ON documents_category.id = industrial_freelancer_properties_documents.documents_category_id
 LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_freelancer_properties_documents.documents_subcategory_id
WHERE industrial_freelancer_properties_documents.id = $1
`

type GetIndustrialFreelancerPropertyDocByFreelancerPropertyDocIdRow struct {
	ID                               int64       `json:"id"`
	DocumentsCategoryID              int64       `json:"documents_category_id"`
	DocumentsSubcategoryID           int64       `json:"documents_subcategory_id"`
	FileUrl                          []string    `json:"file_url"`
	CreatedAt                        time.Time   `json:"created_at"`
	UpdatedAt                        time.Time   `json:"updated_at"`
	IndustrialFreelancerPropertiesID int64       `json:"industrial_freelancer_properties_id"`
	Status                           int64       `json:"status"`
	Category                         pgtype.Text `json:"category"`
	SubCategory                      pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetIndustrialFreelancerPropertyDocByFreelancerPropertyDocId(ctx context.Context, id int64) (GetIndustrialFreelancerPropertyDocByFreelancerPropertyDocIdRow, error) {
	row := q.db.QueryRow(ctx, getIndustrialFreelancerPropertyDocByFreelancerPropertyDocId, id)
	var i GetIndustrialFreelancerPropertyDocByFreelancerPropertyDocIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialFreelancerPropertiesID,
		&i.Status,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_freelancer_properties_id, status FROM industrial_freelancer_properties_documents
WHERE industrial_freelancer_properties_id=$1 AND documents_category_id=$2 AND documents_subcategory_id=$3
`

type GetIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	IndustrialFreelancerPropertiesID int64 `json:"industrial_freelancer_properties_id"`
	DocumentsCategoryID              int64 `json:"documents_category_id"`
	DocumentsSubcategoryID           int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams) (IndustrialFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId, arg.IndustrialFreelancerPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i IndustrialFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const updateIndustrialFreelancerPropertyDoc = `-- name: UpdateIndustrialFreelancerPropertyDoc :one
UPDATE industrial_freelancer_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    industrial_freelancer_properties_id = $7,
    status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_freelancer_properties_id, status
`

type UpdateIndustrialFreelancerPropertyDocParams struct {
	ID                               int64     `json:"id"`
	DocumentsCategoryID              int64     `json:"documents_category_id"`
	DocumentsSubcategoryID           int64     `json:"documents_subcategory_id"`
	FileUrl                          []string  `json:"file_url"`
	CreatedAt                        time.Time `json:"created_at"`
	UpdatedAt                        time.Time `json:"updated_at"`
	IndustrialFreelancerPropertiesID int64     `json:"industrial_freelancer_properties_id"`
	Status                           int64     `json:"status"`
}

func (q *Queries) UpdateIndustrialFreelancerPropertyDoc(ctx context.Context, arg UpdateIndustrialFreelancerPropertyDocParams) (IndustrialFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateIndustrialFreelancerPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialFreelancerPropertiesID,
		arg.Status,
	)
	var i IndustrialFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}
