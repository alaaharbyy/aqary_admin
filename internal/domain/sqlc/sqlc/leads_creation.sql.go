// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: leads_creation.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLeadCreation = `-- name: CreateLeadCreation :one
insert into leads_creation (
    leads_id,
    lead_details,
    reference_details,
    notification,
    documents,
    internal_notes,
    properties
) values ( $1, $2, $3, $4, $5, $6, $7) RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type CreateLeadCreationParams struct {
	LeadsID          int64       `json:"leads_id"`
	LeadDetails      pgtype.Bool `json:"lead_details"`
	ReferenceDetails pgtype.Bool `json:"reference_details"`
	Notification     pgtype.Bool `json:"notification"`
	Documents        pgtype.Bool `json:"documents"`
	InternalNotes    pgtype.Bool `json:"internal_notes"`
	Properties       pgtype.Bool `json:"properties"`
}

func (q *Queries) CreateLeadCreation(ctx context.Context, arg CreateLeadCreationParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, createLeadCreation,
		arg.LeadsID,
		arg.LeadDetails,
		arg.ReferenceDetails,
		arg.Notification,
		arg.Documents,
		arg.InternalNotes,
		arg.Properties,
	)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const getSingleLeadCreation = `-- name: GetSingleLeadCreation :one
SELECT id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties FROM leads_creation where leads_id = $1 LIMIT 1
`

func (q *Queries) GetSingleLeadCreation(ctx context.Context, leadsID int64) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, getSingleLeadCreation, leadsID)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const updateLeadCreation = `-- name: UpdateLeadCreation :one
UPDATE leads_creation SET
    lead_details = $2,
    reference_details = $3,
    notification = $4,
    documents = $5,
    internal_notes = $6,
    properties = $7 WHERE leads_id = $1 RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type UpdateLeadCreationParams struct {
	LeadsID          int64       `json:"leads_id"`
	LeadDetails      pgtype.Bool `json:"lead_details"`
	ReferenceDetails pgtype.Bool `json:"reference_details"`
	Notification     pgtype.Bool `json:"notification"`
	Documents        pgtype.Bool `json:"documents"`
	InternalNotes    pgtype.Bool `json:"internal_notes"`
	Properties       pgtype.Bool `json:"properties"`
}

func (q *Queries) UpdateLeadCreation(ctx context.Context, arg UpdateLeadCreationParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, updateLeadCreation,
		arg.LeadsID,
		arg.LeadDetails,
		arg.ReferenceDetails,
		arg.Notification,
		arg.Documents,
		arg.InternalNotes,
		arg.Properties,
	)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const updateLeadCreationDocument = `-- name: UpdateLeadCreationDocument :one
UPDATE leads_creation SET documents = $2 WHERE leads_id = $1 RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type UpdateLeadCreationDocumentParams struct {
	LeadsID   int64       `json:"leads_id"`
	Documents pgtype.Bool `json:"documents"`
}

func (q *Queries) UpdateLeadCreationDocument(ctx context.Context, arg UpdateLeadCreationDocumentParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, updateLeadCreationDocument, arg.LeadsID, arg.Documents)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const updateLeadCreationInternalNotes = `-- name: UpdateLeadCreationInternalNotes :one
UPDATE leads_creation SET internal_notes = $2 WHERE leads_id = $1 RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type UpdateLeadCreationInternalNotesParams struct {
	LeadsID       int64       `json:"leads_id"`
	InternalNotes pgtype.Bool `json:"internal_notes"`
}

func (q *Queries) UpdateLeadCreationInternalNotes(ctx context.Context, arg UpdateLeadCreationInternalNotesParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, updateLeadCreationInternalNotes, arg.LeadsID, arg.InternalNotes)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const updateLeadCreationNotification = `-- name: UpdateLeadCreationNotification :one
UPDATE leads_creation SET notification = $2 WHERE leads_id = $1 RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type UpdateLeadCreationNotificationParams struct {
	LeadsID      int64       `json:"leads_id"`
	Notification pgtype.Bool `json:"notification"`
}

func (q *Queries) UpdateLeadCreationNotification(ctx context.Context, arg UpdateLeadCreationNotificationParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, updateLeadCreationNotification, arg.LeadsID, arg.Notification)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}

const updateLeadCreationProperties = `-- name: UpdateLeadCreationProperties :one
UPDATE leads_creation SET properties = $2 WHERE leads_id = $1 RETURNING id, leads_id, lead_details, reference_details, notification, documents, internal_notes, properties
`

type UpdateLeadCreationPropertiesParams struct {
	LeadsID    int64       `json:"leads_id"`
	Properties pgtype.Bool `json:"properties"`
}

func (q *Queries) UpdateLeadCreationProperties(ctx context.Context, arg UpdateLeadCreationPropertiesParams) (LeadsCreation, error) {
	row := q.db.QueryRow(ctx, updateLeadCreationProperties, arg.LeadsID, arg.Properties)
	var i LeadsCreation
	err := row.Scan(
		&i.ID,
		&i.LeadsID,
		&i.LeadDetails,
		&i.ReferenceDetails,
		&i.Notification,
		&i.Documents,
		&i.InternalNotes,
		&i.Properties,
	)
	return i, err
}
