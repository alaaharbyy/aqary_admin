// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_properties_plans_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createIndustrailPropertyPlanBranch = `-- name: CreateIndustrailPropertyPlanBranch :one
INSERT INTO industrial_properties_plans_branch (
    img_url,
    title,
    properties_id,
    property,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type CreateIndustrailPropertyPlanBranchParams struct {
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateIndustrailPropertyPlanBranch(ctx context.Context, arg CreateIndustrailPropertyPlanBranchParams) (IndustrialPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, createIndustrailPropertyPlanBranch,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IndustrialPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIndustrailPropertyPlanBranch = `-- name: DeleteIndustrailPropertyPlanBranch :exec
DELETE FROM industrial_properties_plans_branch
Where id = $1
`

func (q *Queries) DeleteIndustrailPropertyPlanBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrailPropertyPlanBranch, id)
	return err
}

const getAllIndustrailPropertyPlanBranch = `-- name: GetAllIndustrailPropertyPlanBranch :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrailPropertyPlanBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrailPropertyPlanBranch(ctx context.Context, arg GetAllIndustrailPropertyPlanBranchParams) ([]IndustrialPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrailPropertyPlanBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlansBranch
	for rows.Next() {
		var i IndustrialPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrailPropertyPlanBranchWithoutPagination = `-- name: GetAllIndustrailPropertyPlanBranchWithoutPagination :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans_branch
ORDER BY id
`

func (q *Queries) GetAllIndustrailPropertyPlanBranchWithoutPagination(ctx context.Context) ([]IndustrialPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrailPropertyPlanBranchWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlansBranch
	for rows.Next() {
		var i IndustrialPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialPropertyBranchPlanById = `-- name: GetAllIndustrialPropertyBranchPlanById :many
 SELECT id, img_url, title, properties_id, property, created_at, updated_at 
 FROM industrial_properties_plans_branch 
WHERE properties_id = $1 AND property = $2
`

type GetAllIndustrialPropertyBranchPlanByIdParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

func (q *Queries) GetAllIndustrialPropertyBranchPlanById(ctx context.Context, arg GetAllIndustrialPropertyBranchPlanByIdParams) ([]IndustrialPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertyBranchPlanById, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialPropertiesPlansBranch
	for rows.Next() {
		var i IndustrialPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrailPropertyPlanBranch = `-- name: GetIndustrailPropertyPlanBranch :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans_branch 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIndustrailPropertyPlanBranch(ctx context.Context, id int64) (IndustrialPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getIndustrailPropertyPlanBranch, id)
	var i IndustrialPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIndustrialPropertyPlanBranchByTitle = `-- name: GetIndustrialPropertyPlanBranchByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM industrial_properties_plans_branch 
WHERE title ILIKE $1 AND properties_id = $2 AND property = $3
`

type GetIndustrialPropertyPlanBranchByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetIndustrialPropertyPlanBranchByTitle(ctx context.Context, arg GetIndustrialPropertyPlanBranchByTitleParams) (IndustrialPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getIndustrialPropertyPlanBranchByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i IndustrialPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIndustrailPropertyPlanBranch = `-- name: UpdateIndustrailPropertyPlanBranch :one
UPDATE industrial_properties_plans_branch
SET img_url = $2,
    title = $3,
    properties_id = $4,
    property = $5,
    created_at = $6,
    updated_at = $7
Where id = $1
RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type UpdateIndustrailPropertyPlanBranchParams struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateIndustrailPropertyPlanBranch(ctx context.Context, arg UpdateIndustrailPropertyPlanBranchParams) (IndustrialPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, updateIndustrailPropertyPlanBranch,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i IndustrialPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
