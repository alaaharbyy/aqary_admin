// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_companies.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeveloperCompany = `-- name: CreateDeveloperCompany :one
INSERT INTO developer_companies (
    company_name,
    tag_line,
    commercial_license_no,
    commercial_license_file_url,
    commercial_license_expiry,
    vat_no,
    vat_status,
    vat_file_url, 
    facebook_profile_url,
    instagram_profile_url,
    linkedin_profile_url,
    twitter_profile_url,
    users_id,
    no_of_employees,
    logo_url,
    cover_image_url,
    description,
    is_verified, 
    website_url,
    phone_number,
    email,
    whatsapp_number,
    addresses_id,
    company_rank,
    status,
    country_id,
    company_type,
    is_branch,
    created_at,
    updated_at,
    ref_no,
     commercial_license_registration_date,
    commercial_license_issue_date,
    extra_license_files,
    extra_license_nos,
    extra_license_names,
    extra_license_issue_date,
    extra_license_expiry_date,
    license_dcci_no,
    register_no,
    other_social_media,
    youtube_profile_url,
    bank_account_details_id,
    created_by
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
    $21,$22,$23,$24,$25,$26,$27,$28, $29,$30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44
) RETURNING id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by
`

type CreateDeveloperCompanyParams struct {
	CompanyName                       string             `json:"company_name"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	UsersID                           int64              `json:"users_id"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	LogoUrl                           string             `json:"logo_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	Description                       pgtype.Text        `json:"description"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	Email                             pgtype.Text        `json:"email"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	AddressesID                       int64              `json:"addresses_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CreatedBy                         int64              `json:"created_by"`
}

func (q *Queries) CreateDeveloperCompany(ctx context.Context, arg CreateDeveloperCompanyParams) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, createDeveloperCompany,
		arg.CompanyName,
		arg.TagLine,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.LinkedinProfileUrl,
		arg.TwitterProfileUrl,
		arg.UsersID,
		arg.NoOfEmployees,
		arg.LogoUrl,
		arg.CoverImageUrl,
		arg.Description,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.PhoneNumber,
		arg.Email,
		arg.WhatsappNumber,
		arg.AddressesID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.BankAccountDetailsID,
		arg.CreatedBy,
	)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const deleteDeveloperCompany = `-- name: DeleteDeveloperCompany :exec
DELETE FROM developer_companies
Where id = $1
`

func (q *Queries) DeleteDeveloperCompany(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperCompany, id)
	return err
}

const getAllDeveloperCompany = `-- name: GetAllDeveloperCompany :many
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperCompanyParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperCompany(ctx context.Context, arg GetAllDeveloperCompanyParams) ([]DeveloperCompany, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompany, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompany
	for rows.Next() {
		var i DeveloperCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.TagLine,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.UsersID,
			&i.BankAccountDetailsID,
			&i.NoOfEmployees,
			&i.LogoUrl,
			&i.CoverImageUrl,
			&i.Description,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.PhoneNumber,
			&i.Email,
			&i.WhatsappNumber,
			&i.AddressesID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyByCountry = `-- name: GetAllDeveloperCompanyByCountry :many

SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE country_id = $3    LIMIT $1 OFFSET $2
`

type GetAllDeveloperCompanyByCountryParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

// -- name: GetDevelopersCompanyByMainServiceId :many
// SELECT * FROM developer_companies
// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetAllDeveloperCompanyByCountry(ctx context.Context, arg GetAllDeveloperCompanyByCountryParams) ([]DeveloperCompany, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyByCountry, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompany
	for rows.Next() {
		var i DeveloperCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.TagLine,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.UsersID,
			&i.BankAccountDetailsID,
			&i.NoOfEmployees,
			&i.LogoUrl,
			&i.CoverImageUrl,
			&i.Description,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.PhoneNumber,
			&i.Email,
			&i.WhatsappNumber,
			&i.AddressesID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperCompanyByCountryNotEqual = `-- name: GetAllDeveloperCompanyByCountryNotEqual :many
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE country_id != $3     LIMIT $1 OFFSET $2
`

type GetAllDeveloperCompanyByCountryNotEqualParams struct {
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
	CountryID int64 `json:"country_id"`
}

func (q *Queries) GetAllDeveloperCompanyByCountryNotEqual(ctx context.Context, arg GetAllDeveloperCompanyByCountryNotEqualParams) ([]DeveloperCompany, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperCompanyByCountryNotEqual, arg.Limit, arg.Offset, arg.CountryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompany
	for rows.Next() {
		var i DeveloperCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.TagLine,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.UsersID,
			&i.BankAccountDetailsID,
			&i.NoOfEmployees,
			&i.LogoUrl,
			&i.CoverImageUrl,
			&i.Description,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.PhoneNumber,
			&i.Email,
			&i.WhatsappNumber,
			&i.AddressesID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountActiveListingByDeveloperCompanyId = `-- name: GetCountActiveListingByDeveloperCompanyId :one
SELECT count(projects.id) FROM projects 
WHERE projects.developer_companies_id = $1 AND projects.status != 5 AND projects.status != 6
`

func (q *Queries) GetCountActiveListingByDeveloperCompanyId(ctx context.Context, developerCompaniesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountActiveListingByDeveloperCompanyId, developerCompaniesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountDeveloperCompany = `-- name: GetCountDeveloperCompany :one
SELECT COUNT(*) FROM developer_companies LIMIT 1
`

func (q *Queries) GetCountDeveloperCompany(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountDeveloperCompany)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountDeveloperCompanyByCountryId = `-- name: GetCountDeveloperCompanyByCountryId :one

SELECT COUNT(*) FROM developer_companies
WHERE country_id = $1
LIMIT 1
`

// -- name: GetCountDeveloperCompanyByMainServiceId :one
// SELECT COUNT(*) FROM developer_companies
// WHERE main_services_id = $1
// LIMIT 1;
func (q *Queries) GetCountDeveloperCompanyByCountryId(ctx context.Context, countryID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountDeveloperCompanyByCountryId, countryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getDeveloperBranchCompany = `-- name: GetDeveloperBranchCompany :one
SELECT id, developer_companies_id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM developer_company_branches 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDeveloperBranchCompany(ctx context.Context, id int64) (DeveloperCompanyBranch, error) {
	row := q.db.QueryRow(ctx, getDeveloperBranchCompany, id)
	var i DeveloperCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.DeveloperCompaniesID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getDeveloperCompany = `-- name: GetDeveloperCompany :one
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDeveloperCompany(ctx context.Context, id int64) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompany, id)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const getDeveloperCompanyByCommercialLicNo = `-- name: GetDeveloperCompanyByCommercialLicNo :one
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE commercial_license_no ILIKE $1 LIMIT 1
`

func (q *Queries) GetDeveloperCompanyByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyByCommercialLicNo, commercialLicenseNo)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const getDeveloperCompanyByIdAndIsBranch = `-- name: GetDeveloperCompanyByIdAndIsBranch :many
with x as ( 
 SELECT id, company_name, tag_line, 
   commercial_license_no, 
    commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url,
     facebook_profile_url, instagram_profile_url, linkedin_profile_url, 
     twitter_profile_url, users_id, 
     0 AS main_services_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, 
     phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type,
      is_branch, created_at, updated_at,0 AS subcompany_type, ref_no FROM developer_companies
       WHERE developer_companies.id = $1 AND developer_companies.is_branch = $2 
       UNION all
 SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, 
 instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, main_services_id, no_of_employees, logo_url, cover_image_url,
  description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank,
   status, country_id, company_type, is_branch, created_at, updated_at, subcompany_type, ref_no 
   FROM developer_company_branches WHERE developer_company_branches.id = $1 AND developer_company_branches.is_branch = $2 ) 
   select id, is_branch from x
`

type GetDeveloperCompanyByIdAndIsBranchParams struct {
	ID       int64       `json:"id"`
	IsBranch pgtype.Bool `json:"is_branch"`
}

type GetDeveloperCompanyByIdAndIsBranchRow struct {
	ID       int64       `json:"id"`
	IsBranch pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetDeveloperCompanyByIdAndIsBranch(ctx context.Context, arg GetDeveloperCompanyByIdAndIsBranchParams) ([]GetDeveloperCompanyByIdAndIsBranchRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperCompanyByIdAndIsBranch, arg.ID, arg.IsBranch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperCompanyByIdAndIsBranchRow
	for rows.Next() {
		var i GetDeveloperCompanyByIdAndIsBranchRow
		if err := rows.Scan(&i.ID, &i.IsBranch); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeveloperCompanyByName = `-- name: GetDeveloperCompanyByName :one
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE company_name ILIKE $1 LIMIT 1
`

func (q *Queries) GetDeveloperCompanyByName(ctx context.Context, companyName string) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyByName, companyName)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const getDeveloperCompanyDocs = `-- name: GetDeveloperCompanyDocs :one


 


SELECT logo_url, commercial_license_file_url,
  cover_image_url, 
  vat_file_url 
FROM developer_companies Where id = $1 LIMIT 1
`

type GetDeveloperCompanyDocsRow struct {
	LogoUrl                  string      `json:"logo_url"`
	CommercialLicenseFileUrl string      `json:"commercial_license_file_url"`
	CoverImageUrl            pgtype.Text `json:"cover_image_url"`
	VatFileUrl               pgtype.Text `json:"vat_file_url"`
}

// -- name: GetDeveloperCompanySubscriptionById :one
// SELECT developer_subscription_id FROM developer_companies
// WHERE id = $1;
func (q *Queries) GetDeveloperCompanyDocs(ctx context.Context, id int64) (GetDeveloperCompanyDocsRow, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyDocs, id)
	var i GetDeveloperCompanyDocsRow
	err := row.Scan(
		&i.LogoUrl,
		&i.CommercialLicenseFileUrl,
		&i.CoverImageUrl,
		&i.VatFileUrl,
	)
	return i, err
}

const getDeveloperCompanyForGraph = `-- name: GetDeveloperCompanyForGraph :one
SELECT id,
	company_name, 
	description, 
	logo_url, 
	cover_image_url, 
	is_verified, 
	commercial_license_no
FROM 
	developer_companies 
WHERE 
	id=$1 
LIMIT 1
`

type GetDeveloperCompanyForGraphRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	Description         pgtype.Text `json:"description"`
	LogoUrl             string      `json:"logo_url"`
	CoverImageUrl       pgtype.Text `json:"cover_image_url"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
}

func (q *Queries) GetDeveloperCompanyForGraph(ctx context.Context, id int64) (GetDeveloperCompanyForGraphRow, error) {
	row := q.db.QueryRow(ctx, getDeveloperCompanyForGraph, id)
	var i GetDeveloperCompanyForGraphRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.IsVerified,
		&i.CommercialLicenseNo,
	)
	return i, err
}

const getDeveloperCompanyNames = `-- name: GetDeveloperCompanyNames :many
SELECT id, company_name FROM developer_companies  
LIMIT $1  OFFSET $2
`

type GetDeveloperCompanyNamesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDeveloperCompanyNamesRow struct {
	ID          int64  `json:"id"`
	CompanyName string `json:"company_name"`
}

func (q *Queries) GetDeveloperCompanyNames(ctx context.Context, arg GetDeveloperCompanyNamesParams) ([]GetDeveloperCompanyNamesRow, error) {
	rows, err := q.db.Query(ctx, getDeveloperCompanyNames, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeveloperCompanyNamesRow
	for rows.Next() {
		var i GetDeveloperCompanyNamesRow
		if err := rows.Scan(&i.ID, &i.CompanyName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevelopersCompanyByRank = `-- name: GetDevelopersCompanyByRank :many
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE company_rank = $3  LIMIT $1 OFFSET $2
`

type GetDevelopersCompanyByRankParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CompanyRank int64 `json:"company_rank"`
}

func (q *Queries) GetDevelopersCompanyByRank(ctx context.Context, arg GetDevelopersCompanyByRankParams) ([]DeveloperCompany, error) {
	rows, err := q.db.Query(ctx, getDevelopersCompanyByRank, arg.Limit, arg.Offset, arg.CompanyRank)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompany
	for rows.Next() {
		var i DeveloperCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.TagLine,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.UsersID,
			&i.BankAccountDetailsID,
			&i.NoOfEmployees,
			&i.LogoUrl,
			&i.CoverImageUrl,
			&i.Description,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.PhoneNumber,
			&i.Email,
			&i.WhatsappNumber,
			&i.AddressesID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevelopersCompanyByStatus = `-- name: GetDevelopersCompanyByStatus :many
SELECT id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by FROM developer_companies 
WHERE status = $3 LIMIT $1 OFFSET $2
`

type GetDevelopersCompanyByStatusParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	Status int64 `json:"status"`
}

func (q *Queries) GetDevelopersCompanyByStatus(ctx context.Context, arg GetDevelopersCompanyByStatusParams) ([]DeveloperCompany, error) {
	rows, err := q.db.Query(ctx, getDevelopersCompanyByStatus, arg.Limit, arg.Offset, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperCompany
	for rows.Next() {
		var i DeveloperCompany
		if err := rows.Scan(
			&i.ID,
			&i.CompanyName,
			&i.TagLine,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.LinkedinProfileUrl,
			&i.TwitterProfileUrl,
			&i.UsersID,
			&i.BankAccountDetailsID,
			&i.NoOfEmployees,
			&i.LogoUrl,
			&i.CoverImageUrl,
			&i.Description,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.PhoneNumber,
			&i.Email,
			&i.WhatsappNumber,
			&i.AddressesID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeveloperCompany = `-- name: UpdateDeveloperCompany :one
UPDATE developer_companies
SET  company_name = $2,
    tag_line =$3,
    commercial_license_no =$4,
    commercial_license_file_url =$5,
    commercial_license_expiry =$6,
    vat_no =$7,
    vat_status =$8,
    vat_file_url =$9,
    facebook_profile_url =$10,
    instagram_profile_url =$11,
    linkedin_profile_url =$12,
    twitter_profile_url =$13,
    users_id =$14,
    no_of_employees =$15,
    logo_url =$16,
    cover_image_url =$17,
    description =$18,
    is_verified =$19,
    website_url =$20,
    phone_number =$21,
    email =$22,
    whatsapp_number =$23,
    addresses_id =$24,
    company_rank = $25,
    status = $26,
    country_id = $27,
    company_type = $28,
    is_branch = $29,
    created_at = $30,
    updated_at = $31,
    ref_no = $32,
     commercial_license_registration_date = $33,
    commercial_license_issue_date = $34,
    extra_license_files = $35,
    extra_license_names = $36,
    extra_license_issue_date = $37,
    extra_license_expiry_date = $38,
    license_dcci_no = $39,
    register_no = $40,
    other_social_media = $41,
    youtube_profile_url = $42,
    extra_license_nos = $43,
    bank_account_details_id = $44,
    created_by = $45
Where id = $1
RETURNING id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by
`

type UpdateDeveloperCompanyParams struct {
	ID                                int64              `json:"id"`
	CompanyName                       string             `json:"company_name"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	UsersID                           int64              `json:"users_id"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	LogoUrl                           string             `json:"logo_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	Description                       pgtype.Text        `json:"description"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	Email                             pgtype.Text        `json:"email"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	AddressesID                       int64              `json:"addresses_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CreatedBy                         int64              `json:"created_by"`
}

func (q *Queries) UpdateDeveloperCompany(ctx context.Context, arg UpdateDeveloperCompanyParams) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, updateDeveloperCompany,
		arg.ID,
		arg.CompanyName,
		arg.TagLine,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.LinkedinProfileUrl,
		arg.TwitterProfileUrl,
		arg.UsersID,
		arg.NoOfEmployees,
		arg.LogoUrl,
		arg.CoverImageUrl,
		arg.Description,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.PhoneNumber,
		arg.Email,
		arg.WhatsappNumber,
		arg.AddressesID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.ExtraLicenseNos,
		arg.BankAccountDetailsID,
		arg.CreatedBy,
	)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const updateDeveloperCompanyRank = `-- name: UpdateDeveloperCompanyRank :one





UPDATE developer_companies 
SET company_rank=$2 
Where id =$1 
RETURNING id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by
`

type UpdateDeveloperCompanyRankParams struct {
	ID          int64 `json:"id"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetDeveloperCompanyBySubscriptionId :one
// SELECT * FROM developer_companies
// WHERE developer_subscription_id = $1 LIMIT 1;
// -- name: UpdateDeveloperCompanyMainService :one
// UPDATE developer_companies
// SET main_services_id = $2
// Where id $1
// RETURNING *;
func (q *Queries) UpdateDeveloperCompanyRank(ctx context.Context, arg UpdateDeveloperCompanyRankParams) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, updateDeveloperCompanyRank, arg.ID, arg.CompanyRank)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}

const updateDeveloperCompanyStatus = `-- name: UpdateDeveloperCompanyStatus :one
UPDATE developer_companies 
SET status=$2 
Where id =$1 
RETURNING id, company_name, tag_line, commercial_license_no, commercial_license_file_url, commercial_license_expiry, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, linkedin_profile_url, twitter_profile_url, users_id, bank_account_details_id, no_of_employees, logo_url, cover_image_url, description, is_verified, website_url, phone_number, email, whatsapp_number, addresses_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_nos, extra_license_files, extra_license_names, extra_license_issue_date, extra_license_expiry_date, license_dcci_no, register_no, other_social_media, youtube_profile_url, created_by
`

type UpdateDeveloperCompanyStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateDeveloperCompanyStatus(ctx context.Context, arg UpdateDeveloperCompanyStatusParams) (DeveloperCompany, error) {
	row := q.db.QueryRow(ctx, updateDeveloperCompanyStatus, arg.ID, arg.Status)
	var i DeveloperCompany
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.TagLine,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.LinkedinProfileUrl,
		&i.TwitterProfileUrl,
		&i.UsersID,
		&i.BankAccountDetailsID,
		&i.NoOfEmployees,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.Description,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.PhoneNumber,
		&i.Email,
		&i.WhatsappNumber,
		&i.AddressesID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
	)
	return i, err
}
