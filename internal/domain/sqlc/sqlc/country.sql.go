// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: country.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
    country,
    flag,
    alpha2_code,
    alpha3_code,
    country_code
)VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, country, flag, created_at, updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, status, deleted_at, updated_by, country_ar
`

type CreateCountryParams struct {
	Country     string      `json:"country"`
	Flag        string      `json:"flag"`
	Alpha2Code  pgtype.Text `json:"alpha2_code"`
	Alpha3Code  pgtype.Text `json:"alpha3_code"`
	CountryCode pgtype.Int8 `json:"country_code"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, createCountry,
		arg.Country,
		arg.Flag,
		arg.Alpha2Code,
		arg.Alpha3Code,
		arg.CountryCode,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Flag,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
	)
	return i, err
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE FROM countries
Where id = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCountry, id)
	return err
}

const getCountries = `-- name: GetCountries :many
SELECT id, country, flag, created_at, updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, status, deleted_at, updated_by, country_ar FROM countries
WHERE status= $1::BIGINT
ORDER BY id
`

func (q *Queries) GetCountries(ctx context.Context, activeStatus int64) ([]Country, error) {
	rows, err := q.db.Query(ctx, getCountries, activeStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.Flag,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Alpha2Code,
			&i.Alpha3Code,
			&i.CountryCode,
			&i.Lat,
			&i.Lng,
			&i.Name,
			&i.Numcode,
			&i.DefaultSettings,
			&i.Status,
			&i.DeletedAt,
			&i.UpdatedBy,
			&i.CountryAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountry = `-- name: GetCountry :one
SELECT id, country, flag, created_at, updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, status, deleted_at, updated_by, country_ar FROM countries 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetCountry(ctx context.Context, limit int32) (Country, error) {
	row := q.db.QueryRow(ctx, getCountry, limit)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Flag,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
	)
	return i, err
}

const getCountryByName = `-- name: GetCountryByName :one
SELECT id, country, flag, created_at, updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, status, deleted_at, updated_by, country_ar FROM countries 
WHERE country ILIKE $1 LIMIT 1
`

func (q *Queries) GetCountryByName(ctx context.Context, country string) (Country, error) {
	row := q.db.QueryRow(ctx, getCountryByName, country)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Flag,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
	)
	return i, err
}

const getDefaultSettingsByCountryID = `-- name: GetDefaultSettingsByCountryID :one
SELECT 
  countries.id,
  countries.country,
  countries.flag,
  countries.default_settings,
  coalesce(base_currency.flag::varchar,'')::varchar as base_currency_icon,
  coalesce(base_currency.code::varchar,'')::varchar as base_currency_code,
  coalesce(default_currency.flag::varchar,'')::varchar as default_currency_icon,
  coalesce(default_currency.code::varchar,'')::varchar as default_currency_code
FROM countries
LEFT JOIN currency AS base_currency on base_currency.id= (countries.default_settings->>'base_currency')::bigint
LEFT JOIN currency AS default_currency on default_currency.id= (countries.default_settings->>'default_currency')::bigint
WHERE countries.id= $1 limit 1
`

type GetDefaultSettingsByCountryIDRow struct {
	ID                  int64  `json:"id"`
	Country             string `json:"country"`
	Flag                string `json:"flag"`
	DefaultSettings     []byte `json:"default_settings"`
	BaseCurrencyIcon    string `json:"base_currency_icon"`
	BaseCurrencyCode    string `json:"base_currency_code"`
	DefaultCurrencyIcon string `json:"default_currency_icon"`
	DefaultCurrencyCode string `json:"default_currency_code"`
}

func (q *Queries) GetDefaultSettingsByCountryID(ctx context.Context, id int64) (GetDefaultSettingsByCountryIDRow, error) {
	row := q.db.QueryRow(ctx, getDefaultSettingsByCountryID, id)
	var i GetDefaultSettingsByCountryIDRow
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Flag,
		&i.DefaultSettings,
		&i.BaseCurrencyIcon,
		&i.BaseCurrencyCode,
		&i.DefaultCurrencyIcon,
		&i.DefaultCurrencyCode,
	)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :one
UPDATE countries
SET country = $2,
  flag = $3,
  alpha2_code = $4,
  alpha3_code = $5,
  country_code = $6
Where id = $1
RETURNING id, country, flag, created_at, updated_at, alpha2_code, alpha3_code, country_code, lat, lng, name, numcode, default_settings, status, deleted_at, updated_by, country_ar
`

type UpdateCountryParams struct {
	ID          int64       `json:"id"`
	Country     string      `json:"country"`
	Flag        string      `json:"flag"`
	Alpha2Code  pgtype.Text `json:"alpha2_code"`
	Alpha3Code  pgtype.Text `json:"alpha3_code"`
	CountryCode pgtype.Int8 `json:"country_code"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) (Country, error) {
	row := q.db.QueryRow(ctx, updateCountry,
		arg.ID,
		arg.Country,
		arg.Flag,
		arg.Alpha2Code,
		arg.Alpha3Code,
		arg.CountryCode,
	)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Flag,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Alpha2Code,
		&i.Alpha3Code,
		&i.CountryCode,
		&i.Lat,
		&i.Lng,
		&i.Name,
		&i.Numcode,
		&i.DefaultSettings,
		&i.Status,
		&i.DeletedAt,
		&i.UpdatedBy,
		&i.CountryAr,
	)
	return i, err
}
