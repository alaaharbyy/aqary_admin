// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: rent_property_media_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createRentPropertyMediaBranch = `-- name: CreateRentPropertyMediaBranch :one
INSERT INTO rent_property_media_branch (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    rent_property_units_branch_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3,$4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type CreateRentPropertyMediaBranchParams struct {
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	RentPropertyUnitsBranchID int64     `json:"rent_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) CreateRentPropertyMediaBranch(ctx context.Context, arg CreateRentPropertyMediaBranchParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, createRentPropertyMediaBranch,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.RentPropertyUnitsBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneRentPropertyMediaBranchImages360ByIdAndFile = `-- name: DeleteOneRentPropertyMediaBranchImages360ByIdAndFile :one
UPDATE rent_property_media_branch
SET image360_url = array_remove(image360_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneRentPropertyMediaBranchImages360ByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneRentPropertyMediaBranchImages360ByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchImages360ByIdAndFileParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneRentPropertyMediaBranchImages360ByIdAndFile, arg.ID, arg.ArrayRemove)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneRentPropertyMediaBranchImagesByIdAndFile = `-- name: DeleteOneRentPropertyMediaBranchImagesByIdAndFile :one
UPDATE rent_property_media_branch
SET image_url = array_remove(image_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneRentPropertyMediaBranchImagesByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneRentPropertyMediaBranchImagesByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchImagesByIdAndFileParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneRentPropertyMediaBranchImagesByIdAndFile, arg.ID, arg.ArrayRemove)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneRentPropertyMediaBranchPanaromaByIdAndFile = `-- name: DeleteOneRentPropertyMediaBranchPanaromaByIdAndFile :one
UPDATE rent_property_media_branch
SET panaroma_url = array_remove(panaroma_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneRentPropertyMediaBranchPanaromaByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneRentPropertyMediaBranchPanaromaByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchPanaromaByIdAndFileParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneRentPropertyMediaBranchPanaromaByIdAndFile, arg.ID, arg.ArrayRemove)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneRentPropertyMediaBranchVideoByIdAndFile = `-- name: DeleteOneRentPropertyMediaBranchVideoByIdAndFile :one
UPDATE rent_property_media_branch
SET video_url = array_remove(video_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneRentPropertyMediaBranchVideoByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneRentPropertyMediaBranchVideoByIdAndFile(ctx context.Context, arg DeleteOneRentPropertyMediaBranchVideoByIdAndFileParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneRentPropertyMediaBranchVideoByIdAndFile, arg.ID, arg.ArrayRemove)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteRentPropertyMediaBranch = `-- name: DeleteRentPropertyMediaBranch :exec
DELETE FROM rent_property_media_branch
Where id = $1
`

func (q *Queries) DeleteRentPropertyMediaBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRentPropertyMediaBranch, id)
	return err
}

const getAllRentPropertyMediaBranch = `-- name: GetAllRentPropertyMediaBranch :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch FROM rent_property_media_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllRentPropertyMediaBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllRentPropertyMediaBranch(ctx context.Context, arg GetAllRentPropertyMediaBranchParams) ([]RentPropertyMediaBranch, error) {
	rows, err := q.db.Query(ctx, getAllRentPropertyMediaBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RentPropertyMediaBranch
	for rows.Next() {
		var i RentPropertyMediaBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.RentPropertyUnitsBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllRentUnitMediaBranchByUnitId = `-- name: GetAllRentUnitMediaBranchByUnitId :many
SELECT id, image_url, 
image360_url, video_url, panaroma_url, 
main_media_section, rent_property_units_branch_id,
created_at, updated_at 
FROM rent_property_media_branch 
WHERE rent_property_units_branch_id = $1
`

type GetAllRentUnitMediaBranchByUnitIdRow struct {
	ID                        int64     `json:"id"`
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	RentPropertyUnitsBranchID int64     `json:"rent_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) GetAllRentUnitMediaBranchByUnitId(ctx context.Context, rentPropertyUnitsBranchID int64) ([]GetAllRentUnitMediaBranchByUnitIdRow, error) {
	rows, err := q.db.Query(ctx, getAllRentUnitMediaBranchByUnitId, rentPropertyUnitsBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRentUnitMediaBranchByUnitIdRow
	for rows.Next() {
		var i GetAllRentUnitMediaBranchByUnitIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.RentPropertyUnitsBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRentPropertyMediaBranch = `-- name: GetRentPropertyMediaBranch :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch FROM rent_property_media_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetRentPropertyMediaBranch(ctx context.Context, limit int32) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getRentPropertyMediaBranch, limit)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getRentPropertyMediaBranchByRentId = `-- name: GetRentPropertyMediaBranchByRentId :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch FROM rent_property_media_branch
WHERE rent_property_units_branch_id = $1 LIMIT 1
`

func (q *Queries) GetRentPropertyMediaBranchByRentId(ctx context.Context, rentPropertyUnitsBranchID int64) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getRentPropertyMediaBranchByRentId, rentPropertyUnitsBranchID)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getRentPropertyMediaBranchByUnitIdAndMediaSection = `-- name: GetRentPropertyMediaBranchByUnitIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch FROM rent_property_media_branch
WHERE rent_property_units_branch_id = $1 AND main_media_section = $2
`

type GetRentPropertyMediaBranchByUnitIdAndMediaSectionParams struct {
	RentPropertyUnitsBranchID int64  `json:"rent_property_units_branch_id"`
	MainMediaSection          string `json:"main_media_section"`
}

func (q *Queries) GetRentPropertyMediaBranchByUnitIdAndMediaSection(ctx context.Context, arg GetRentPropertyMediaBranchByUnitIdAndMediaSectionParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getRentPropertyMediaBranchByUnitIdAndMediaSection, arg.RentPropertyUnitsBranchID, arg.MainMediaSection)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateRentPropertyMediaBranch = `-- name: UpdateRentPropertyMediaBranch :one
UPDATE rent_property_media_branch
SET  image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    rent_property_units_branch_id = $7,
    created_at = $8,
    updated_at = $9
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, rent_property_units_branch_id, created_at, updated_at, is_branch
`

type UpdateRentPropertyMediaBranchParams struct {
	ID                        int64     `json:"id"`
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	RentPropertyUnitsBranchID int64     `json:"rent_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) UpdateRentPropertyMediaBranch(ctx context.Context, arg UpdateRentPropertyMediaBranchParams) (RentPropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, updateRentPropertyMediaBranch,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.RentPropertyUnitsBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i RentPropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.RentPropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
