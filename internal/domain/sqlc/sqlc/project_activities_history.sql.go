// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_activities_history.sql

package sqlc

import (
	"context"
	"time"
)

const createProjectActivitiesHistory = `-- name: CreateProjectActivitiesHistory :one
INSERT INTO project_activities_history (
    title,
    module_name,
    field_value,
    created_by,
    activity_date
)VALUES (
    $1, $2, $3, $4, $5
)RETURNING id, title, module_name, field_value, created_by, activity_date
`

type CreateProjectActivitiesHistoryParams struct {
	Title        string    `json:"title"`
	ModuleName   string    `json:"module_name"`
	FieldValue   []byte    `json:"field_value"`
	CreatedBy    int64     `json:"created_by"`
	ActivityDate time.Time `json:"activity_date"`
}

func (q *Queries) CreateProjectActivitiesHistory(ctx context.Context, arg CreateProjectActivitiesHistoryParams) (ProjectActivitiesHistory, error) {
	row := q.db.QueryRow(ctx, createProjectActivitiesHistory,
		arg.Title,
		arg.ModuleName,
		arg.FieldValue,
		arg.CreatedBy,
		arg.ActivityDate,
	)
	var i ProjectActivitiesHistory
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ModuleName,
		&i.FieldValue,
		&i.CreatedBy,
		&i.ActivityDate,
	)
	return i, err
}

const getAllProjectActivitiesHistory = `-- name: GetAllProjectActivitiesHistory :many
SELECT COUNT(project_activities_history.id) OVER() AS total_count,
project_activities_history.id,
title,
activity_date,
module_name,
(profiles.first_name ||' '|| profiles.last_name)::VARCHAR AS user, 
field_value
FROM project_activities_history
INNER JOIN users ON users.id = project_activities_history.created_by
INNER JOIN profiles ON profiles.users_id = users.id
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type GetAllProjectActivitiesHistoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllProjectActivitiesHistoryRow struct {
	TotalCount   int64     `json:"total_count"`
	ID           int64     `json:"id"`
	Title        string    `json:"title"`
	ActivityDate time.Time `json:"activity_date"`
	ModuleName   string    `json:"module_name"`
	User         string    `json:"user"`
	FieldValue   []byte    `json:"field_value"`
}

func (q *Queries) GetAllProjectActivitiesHistory(ctx context.Context, arg GetAllProjectActivitiesHistoryParams) ([]GetAllProjectActivitiesHistoryRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectActivitiesHistory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectActivitiesHistoryRow
	for rows.Next() {
		var i GetAllProjectActivitiesHistoryRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.Title,
			&i.ActivityDate,
			&i.ModuleName,
			&i.User,
			&i.FieldValue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
