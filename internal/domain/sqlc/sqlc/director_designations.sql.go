// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: director_designations.sql

package sqlc

import (
	"context"
	"time"
)

const createDesignation = `-- name: CreateDesignation :one
INSERT INTO designations (
    designation,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3
) RETURNING id, designation, created_at, updated_at
`

type CreateDesignationParams struct {
	Designation string    `json:"designation"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateDesignation(ctx context.Context, arg CreateDesignationParams) (Designation, error) {
	row := q.db.QueryRow(ctx, createDesignation, arg.Designation, arg.CreatedAt, arg.UpdatedAt)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Designation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDesignation = `-- name: DeleteDesignation :exec
DELETE FROM designations
Where id = $1
`

func (q *Queries) DeleteDesignation(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDesignation, id)
	return err
}

const getAllDesignation = `-- name: GetAllDesignation :many
SELECT id, designation, created_at, updated_at FROM designations
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDesignationParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDesignation(ctx context.Context, arg GetAllDesignationParams) ([]Designation, error) {
	rows, err := q.db.Query(ctx, getAllDesignation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Designation
	for rows.Next() {
		var i Designation
		if err := rows.Scan(
			&i.ID,
			&i.Designation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDesignation = `-- name: GetDesignation :one
SELECT id, designation, created_at, updated_at FROM designations 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDesignation(ctx context.Context, limit int32) (Designation, error) {
	row := q.db.QueryRow(ctx, getDesignation, limit)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Designation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDesignationByName = `-- name: GetDesignationByName :one
SELECT id, designation, created_at, updated_at FROM designations 
WHERE designation = $2 LIMIT $1
`

type GetDesignationByNameParams struct {
	Limit       int32  `json:"limit"`
	Designation string `json:"designation"`
}

func (q *Queries) GetDesignationByName(ctx context.Context, arg GetDesignationByNameParams) (Designation, error) {
	row := q.db.QueryRow(ctx, getDesignationByName, arg.Limit, arg.Designation)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Designation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDesignation = `-- name: UpdateDesignation :one
UPDATE designations
SET  designation = $2,
    created_at = $3,
    updated_at = $4
Where id = $1
RETURNING id, designation, created_at, updated_at
`

type UpdateDesignationParams struct {
	ID          int64     `json:"id"`
	Designation string    `json:"designation"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateDesignation(ctx context.Context, arg UpdateDesignationParams) (Designation, error) {
	row := q.db.QueryRow(ctx, updateDesignation,
		arg.ID,
		arg.Designation,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Designation
	err := row.Scan(
		&i.ID,
		&i.Designation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
