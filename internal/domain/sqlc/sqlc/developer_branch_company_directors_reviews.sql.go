// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_branch_company_directors_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeveloperBranchCompanyDirectorsReview = `-- name: CreateDeveloperBranchCompanyDirectorsReview :one
INSERT INTO developer_branch_company_directors_reviews (
    rating,
    review,
    profiles_id,
    status,
    developer_branch_company_directors_id,
    created_at,
    updated_at,
    users_id
)VALUES (
    $1 ,$2, $3, $4, $5, $6 ,$7, $8
) RETURNING id, rating, review, profiles_id, status, developer_branch_company_directors_id, created_at, updated_at, users_id
`

type CreateDeveloperBranchCompanyDirectorsReviewParams struct {
	Rating                            string    `json:"rating"`
	Review                            string    `json:"review"`
	ProfilesID                        int64     `json:"profiles_id"`
	Status                            int64     `json:"status"`
	DeveloperBranchCompanyDirectorsID int64     `json:"developer_branch_company_directors_id"`
	CreatedAt                         time.Time `json:"created_at"`
	UpdatedAt                         time.Time `json:"updated_at"`
	UsersID                           int64     `json:"users_id"`
}

func (q *Queries) CreateDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg CreateDeveloperBranchCompanyDirectorsReviewParams) (DeveloperBranchCompanyDirectorsReview, error) {
	row := q.db.QueryRow(ctx, createDeveloperBranchCompanyDirectorsReview,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperBranchCompanyDirectorsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperBranchCompanyDirectorsReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperBranchCompanyDirectorsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteDeveloperBranchCompanyDirectorsReview = `-- name: DeleteDeveloperBranchCompanyDirectorsReview :exec
DELETE FROM developer_branch_company_directors_reviews
Where id = $1
`

func (q *Queries) DeleteDeveloperBranchCompanyDirectorsReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperBranchCompanyDirectorsReview, id)
	return err
}

const getAllDeveloperBranchCompanyDirectorsReview = `-- name: GetAllDeveloperBranchCompanyDirectorsReview :many
SELECT id, rating, review, profiles_id, status, developer_branch_company_directors_id, created_at, updated_at, users_id FROM developer_branch_company_directors_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperBranchCompanyDirectorsReviewParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorsReviewParams) ([]DeveloperBranchCompanyDirectorsReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperBranchCompanyDirectorsReview, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyDirectorsReview
	for rows.Next() {
		var i DeveloperBranchCompanyDirectorsReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperBranchCompanyDirectorsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsId = `-- name: GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsId :many
SELECT id, rating, review, profiles_id, status, developer_branch_company_directors_id, created_at, updated_at, users_id FROM developer_branch_company_directors_reviews
Where developer_branch_company_directors_id = $1
LIMIT $2
OFFSET $3
`

type GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsIdParams struct {
	DeveloperBranchCompanyDirectorsID int64 `json:"developer_branch_company_directors_id"`
	Limit                             int32 `json:"limit"`
	Offset                            int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsId(ctx context.Context, arg GetAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsIdParams) ([]DeveloperBranchCompanyDirectorsReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperBranchCompanyDirectorsReviewByDeveloperCompanyDirectorsId, arg.DeveloperBranchCompanyDirectorsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyDirectorsReview
	for rows.Next() {
		var i DeveloperBranchCompanyDirectorsReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperBranchCompanyDirectorsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgDeveloperBranchCompanyDirectorsReviews = `-- name: GetAvgDeveloperBranchCompanyDirectorsReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1)  FROM developer_branch_company_directors_reviews WHERE  developer_branch_company_directors_id =  $1
`

func (q *Queries) GetAvgDeveloperBranchCompanyDirectorsReviews(ctx context.Context, developerBranchCompanyDirectorsID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgDeveloperBranchCompanyDirectorsReviews, developerBranchCompanyDirectorsID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getDeveloperBranchCompanyDirectorsReview = `-- name: GetDeveloperBranchCompanyDirectorsReview :one
SELECT id, rating, review, profiles_id, status, developer_branch_company_directors_id, created_at, updated_at, users_id FROM developer_branch_company_directors_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDeveloperBranchCompanyDirectorsReview(ctx context.Context, limit int32) (DeveloperBranchCompanyDirectorsReview, error) {
	row := q.db.QueryRow(ctx, getDeveloperBranchCompanyDirectorsReview, limit)
	var i DeveloperBranchCompanyDirectorsReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperBranchCompanyDirectorsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const updateDeveloperBranchCompanyDirectorsReview = `-- name: UpdateDeveloperBranchCompanyDirectorsReview :one
UPDATE developer_branch_company_directors_reviews
SET rating = $2,
    review = $3,
    profiles_id = $4,
    status = $5,
    developer_branch_company_directors_id = $6,
    created_at = $7,
    updated_at = $8,
    users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, developer_branch_company_directors_id, created_at, updated_at, users_id
`

type UpdateDeveloperBranchCompanyDirectorsReviewParams struct {
	ID                                int64     `json:"id"`
	Rating                            string    `json:"rating"`
	Review                            string    `json:"review"`
	ProfilesID                        int64     `json:"profiles_id"`
	Status                            int64     `json:"status"`
	DeveloperBranchCompanyDirectorsID int64     `json:"developer_branch_company_directors_id"`
	CreatedAt                         time.Time `json:"created_at"`
	UpdatedAt                         time.Time `json:"updated_at"`
	UsersID                           int64     `json:"users_id"`
}

func (q *Queries) UpdateDeveloperBranchCompanyDirectorsReview(ctx context.Context, arg UpdateDeveloperBranchCompanyDirectorsReviewParams) (DeveloperBranchCompanyDirectorsReview, error) {
	row := q.db.QueryRow(ctx, updateDeveloperBranchCompanyDirectorsReview,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperBranchCompanyDirectorsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperBranchCompanyDirectorsReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperBranchCompanyDirectorsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
