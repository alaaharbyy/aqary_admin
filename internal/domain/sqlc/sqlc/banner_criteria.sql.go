// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: banner_criteria.sql

package sqlc

import (
	"context"
)

const createBannerCriteria = `-- name: CreateBannerCriteria :one
INSERT INTO "banner_criteria" (
    "banner_type_id",
    "banner_name_id",
    "banners_id"
) VALUES (
    $1, $2, $3
)
RETURNING id, banner_type_id, banner_name_id, banners_id
`

type CreateBannerCriteriaParams struct {
	BannerTypeID int64 `json:"banner_type_id"`
	BannerNameID int64 `json:"banner_name_id"`
	BannersID    int64 `json:"banners_id"`
}

func (q *Queries) CreateBannerCriteria(ctx context.Context, arg CreateBannerCriteriaParams) (BannerCriterium, error) {
	row := q.db.QueryRow(ctx, createBannerCriteria, arg.BannerTypeID, arg.BannerNameID, arg.BannersID)
	var i BannerCriterium
	err := row.Scan(
		&i.ID,
		&i.BannerTypeID,
		&i.BannerNameID,
		&i.BannersID,
	)
	return i, err
}

const deleteBannerCriteria = `-- name: DeleteBannerCriteria :exec
DELETE FROM "banner_criteria"
WHERE "id" = $1
`

func (q *Queries) DeleteBannerCriteria(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBannerCriteria, id)
	return err
}

const getBannerCriteria = `-- name: GetBannerCriteria :one
SELECT id, banner_type_id, banner_name_id, banners_id FROM "banner_criteria"
WHERE "id" = $1
`

func (q *Queries) GetBannerCriteria(ctx context.Context, id int64) (BannerCriterium, error) {
	row := q.db.QueryRow(ctx, getBannerCriteria, id)
	var i BannerCriterium
	err := row.Scan(
		&i.ID,
		&i.BannerTypeID,
		&i.BannerNameID,
		&i.BannersID,
	)
	return i, err
}

const listBannerCriteria = `-- name: ListBannerCriteria :many
SELECT id, banner_type_id, banner_name_id, banners_id FROM "banner_criteria"
ORDER BY "id" DESC
LIMIT $1 OFFSET $2
`

type ListBannerCriteriaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBannerCriteria(ctx context.Context, arg ListBannerCriteriaParams) ([]BannerCriterium, error) {
	rows, err := q.db.Query(ctx, listBannerCriteria, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BannerCriterium
	for rows.Next() {
		var i BannerCriterium
		if err := rows.Scan(
			&i.ID,
			&i.BannerTypeID,
			&i.BannerNameID,
			&i.BannersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBannerCriteria = `-- name: UpdateBannerCriteria :exec
UPDATE "banner_criteria"
SET
    "banner_type_id" = $2,
    "banner_name_id" = $3,
    "banners_id" = $4
WHERE "id" = $1
`

type UpdateBannerCriteriaParams struct {
	ID           int64 `json:"id"`
	BannerTypeID int64 `json:"banner_type_id"`
	BannerNameID int64 `json:"banner_name_id"`
	BannersID    int64 `json:"banners_id"`
}

func (q *Queries) UpdateBannerCriteria(ctx context.Context, arg UpdateBannerCriteriaParams) error {
	_, err := q.db.Exec(ctx, updateBannerCriteria,
		arg.ID,
		arg.BannerTypeID,
		arg.BannerNameID,
		arg.BannersID,
	)
	return err
}
