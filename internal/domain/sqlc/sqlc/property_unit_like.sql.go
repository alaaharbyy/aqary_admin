// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_unit_like.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyUnitLike = `-- name: CreatePropertyUnitLike :one
INSERT INTO property_unit_likes (
    property_unit_id,
    which_property_unit,
    which_propertyhub_key,
    is_branch,
    is_liked,
    like_reaction_id,
    users_id,
    created_at,
    updated_at
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at
`

type CreatePropertyUnitLikeParams struct {
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	IsBranch            bool        `json:"is_branch"`
	IsLiked             bool        `json:"is_liked"`
	LikeReactionID      int64       `json:"like_reaction_id"`
	UsersID             int64       `json:"users_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

func (q *Queries) CreatePropertyUnitLike(ctx context.Context, arg CreatePropertyUnitLikeParams) (PropertyUnitLike, error) {
	row := q.db.QueryRow(ctx, createPropertyUnitLike,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.WhichPropertyhubKey,
		arg.IsBranch,
		arg.IsLiked,
		arg.LikeReactionID,
		arg.UsersID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PropertyUnitLike
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsLiked,
		&i.LikeReactionID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePropertyUnitLike = `-- name: DeletePropertyUnitLike :exec
DELETE FROM property_unit_likes
Where id = $1
`

func (q *Queries) DeletePropertyUnitLike(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyUnitLike, id)
	return err
}

const getAllPropertyUnitLike = `-- name: GetAllPropertyUnitLike :many
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at FROM property_unit_likes
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllPropertyUnitLikeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPropertyUnitLike(ctx context.Context, arg GetAllPropertyUnitLikeParams) ([]PropertyUnitLike, error) {
	rows, err := q.db.Query(ctx, getAllPropertyUnitLike, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyUnitLike
	for rows.Next() {
		var i PropertyUnitLike
		if err := rows.Scan(
			&i.ID,
			&i.PropertyUnitID,
			&i.WhichPropertyUnit,
			&i.WhichPropertyhubKey,
			&i.IsBranch,
			&i.IsLiked,
			&i.LikeReactionID,
			&i.UsersID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyUnitLike = `-- name: GetPropertyUnitLike :one
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at FROM property_unit_likes 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPropertyUnitLike(ctx context.Context, id int64) (PropertyUnitLike, error) {
	row := q.db.QueryRow(ctx, getPropertyUnitLike, id)
	var i PropertyUnitLike
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsLiked,
		&i.LikeReactionID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropertyUnitLikeByPropertyIdAndIdAndWhichProperty = `-- name: GetPropertyUnitLikeByPropertyIdAndIdAndWhichProperty :one
SELECT id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at FROM property_unit_likes 
WHERE  property_unit_id = $1 And which_property_unit = $2 AND is_branch = $3 AND users_id = $4  LIMIT 1
`

type GetPropertyUnitLikeByPropertyIdAndIdAndWhichPropertyParams struct {
	PropertyUnitID    int64 `json:"property_unit_id"`
	WhichPropertyUnit int64 `json:"which_property_unit"`
	IsBranch          bool  `json:"is_branch"`
	UsersID           int64 `json:"users_id"`
}

func (q *Queries) GetPropertyUnitLikeByPropertyIdAndIdAndWhichProperty(ctx context.Context, arg GetPropertyUnitLikeByPropertyIdAndIdAndWhichPropertyParams) (PropertyUnitLike, error) {
	row := q.db.QueryRow(ctx, getPropertyUnitLikeByPropertyIdAndIdAndWhichProperty,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.IsBranch,
		arg.UsersID,
	)
	var i PropertyUnitLike
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsLiked,
		&i.LikeReactionID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePropertyUnitLike = `-- name: UpdatePropertyUnitLike :one
UPDATE property_unit_likes
SET  
    property_unit_id = $2,
    which_property_unit = $3,
    which_propertyhub_key =  $4,
    is_branch = $5,
    is_liked=$6,
    like_reaction_id = $7,
    users_id = $8,
    updated_at = $9
Where id = $1
RETURNING id, property_unit_id, which_property_unit, which_propertyhub_key, is_branch, is_liked, like_reaction_id, users_id, created_at, updated_at
`

type UpdatePropertyUnitLikeParams struct {
	ID                  int64       `json:"id"`
	PropertyUnitID      int64       `json:"property_unit_id"`
	WhichPropertyUnit   int64       `json:"which_property_unit"`
	WhichPropertyhubKey pgtype.Int8 `json:"which_propertyhub_key"`
	IsBranch            bool        `json:"is_branch"`
	IsLiked             bool        `json:"is_liked"`
	LikeReactionID      int64       `json:"like_reaction_id"`
	UsersID             int64       `json:"users_id"`
	UpdatedAt           time.Time   `json:"updated_at"`
}

func (q *Queries) UpdatePropertyUnitLike(ctx context.Context, arg UpdatePropertyUnitLikeParams) (PropertyUnitLike, error) {
	row := q.db.QueryRow(ctx, updatePropertyUnitLike,
		arg.ID,
		arg.PropertyUnitID,
		arg.WhichPropertyUnit,
		arg.WhichPropertyhubKey,
		arg.IsBranch,
		arg.IsLiked,
		arg.LikeReactionID,
		arg.UsersID,
		arg.UpdatedAt,
	)
	var i PropertyUnitLike
	err := row.Scan(
		&i.ID,
		&i.PropertyUnitID,
		&i.WhichPropertyUnit,
		&i.WhichPropertyhubKey,
		&i.IsBranch,
		&i.IsLiked,
		&i.LikeReactionID,
		&i.UsersID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
