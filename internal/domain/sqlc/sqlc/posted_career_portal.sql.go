// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posted_career_portal.sql

package sqlc

import (
	"context"
	"time"
)

const addPostedCareerPortal = `-- name: AddPostedCareerPortal :one
INSERT INTO posted_career_portal
(ref_no,
careers_id,
job_portals_id,
career_url,
expiry_date,
created_at,
status
)VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING id, ref_no, careers_id, job_portals_id, career_url, expiry_date, created_at, updated_at, status
`

type AddPostedCareerPortalParams struct {
	RefNo        string    `json:"ref_no"`
	CareersID    int64     `json:"careers_id"`
	JobPortalsID int64     `json:"job_portals_id"`
	CareerUrl    string    `json:"career_url"`
	ExpiryDate   time.Time `json:"expiry_date"`
	CreatedAt    time.Time `json:"created_at"`
	Status       int64     `json:"status"`
}

func (q *Queries) AddPostedCareerPortal(ctx context.Context, arg AddPostedCareerPortalParams) (PostedCareerPortal, error) {
	row := q.db.QueryRow(ctx, addPostedCareerPortal,
		arg.RefNo,
		arg.CareersID,
		arg.JobPortalsID,
		arg.CareerUrl,
		arg.ExpiryDate,
		arg.CreatedAt,
		arg.Status,
	)
	var i PostedCareerPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CareersID,
		&i.JobPortalsID,
		&i.CareerUrl,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getAllPostedCareerPortals = `-- name: GetAllPostedCareerPortals :many
SELECT pcp.id, pcp.ref_no, pcp.careers_id, pcp.job_portals_id, pcp.career_url, pcp.expiry_date, pcp.created_at, pcp.status,
jp.id as job_portal_id,
jp.portal_url,
jp.portal_logo,
jp.portal_name,
c.id as careers_id,
c.job_title,
c.career_status,
jp.status as job_portals_status
FROM posted_career_portal as pcp
JOIN job_portals as jp on pcp.job_portals_id= jp.id
JOIN careers as c on pcp.careers_id = c.id
WHERE c.career_status!=6 and c.career_status!=5 and pcp.status!=6 and pcp.status!=5 and jp.status!=6 and jp.status!=5
ORDER BY pcp.created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllPostedCareerPortalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllPostedCareerPortalsRow struct {
	ID               int64     `json:"id"`
	RefNo            string    `json:"ref_no"`
	CareersID        int64     `json:"careers_id"`
	JobPortalsID     int64     `json:"job_portals_id"`
	CareerUrl        string    `json:"career_url"`
	ExpiryDate       time.Time `json:"expiry_date"`
	CreatedAt        time.Time `json:"created_at"`
	Status           int64     `json:"status"`
	JobPortalID      int64     `json:"job_portal_id"`
	PortalUrl        string    `json:"portal_url"`
	PortalLogo       string    `json:"portal_logo"`
	PortalName       string    `json:"portal_name"`
	CareersID_2      int64     `json:"careers_id_2"`
	JobTitle         string    `json:"job_title"`
	CareerStatus     int64     `json:"career_status"`
	JobPortalsStatus int64     `json:"job_portals_status"`
}

func (q *Queries) GetAllPostedCareerPortals(ctx context.Context, arg GetAllPostedCareerPortalsParams) ([]GetAllPostedCareerPortalsRow, error) {
	rows, err := q.db.Query(ctx, getAllPostedCareerPortals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPostedCareerPortalsRow
	for rows.Next() {
		var i GetAllPostedCareerPortalsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CareersID,
			&i.JobPortalsID,
			&i.CareerUrl,
			&i.ExpiryDate,
			&i.CreatedAt,
			&i.Status,
			&i.JobPortalID,
			&i.PortalUrl,
			&i.PortalLogo,
			&i.PortalName,
			&i.CareersID_2,
			&i.JobTitle,
			&i.CareerStatus,
			&i.JobPortalsStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPostedCareerPortal = `-- name: GetCountPostedCareerPortal :one
SELECT COUNT(*) FROM posted_career_portal pcp
JOIN job_portals as jp on pcp.job_portals_id= jp.id
JOIN careers as c on pcp.careers_id = c.id
WHERE c.career_status!=6 and c.career_status!=5 and pcp.status!=6 and pcp.status!=5 and jp.status!=6 and jp.status!=5
`

func (q *Queries) GetCountPostedCareerPortal(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountPostedCareerPortal)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSinglePostedCareerPortal = `-- name: GetSinglePostedCareerPortal :one
SELECT id, ref_no, careers_id, job_portals_id, career_url, expiry_date, created_at, updated_at, status FROM posted_career_portal WHERE id=$1
`

func (q *Queries) GetSinglePostedCareerPortal(ctx context.Context, id int64) (PostedCareerPortal, error) {
	row := q.db.QueryRow(ctx, getSinglePostedCareerPortal, id)
	var i PostedCareerPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CareersID,
		&i.JobPortalsID,
		&i.CareerUrl,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updatePostedCareerPortalStatus = `-- name: UpdatePostedCareerPortalStatus :one
UPDATE posted_career_portal
SET
  status=$2
WHERE 
  id=$1
RETURNING id, ref_no, careers_id, job_portals_id, career_url, expiry_date, created_at, updated_at, status
`

type UpdatePostedCareerPortalStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdatePostedCareerPortalStatus(ctx context.Context, arg UpdatePostedCareerPortalStatusParams) (PostedCareerPortal, error) {
	row := q.db.QueryRow(ctx, updatePostedCareerPortalStatus, arg.ID, arg.Status)
	var i PostedCareerPortal
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CareersID,
		&i.JobPortalsID,
		&i.CareerUrl,
		&i.ExpiryDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
