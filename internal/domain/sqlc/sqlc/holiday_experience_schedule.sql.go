// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_experience_schedule.sql

package sqlc

import (
	"context"
	"time"
)

const createHolidaySchedule = `-- name: CreateHolidaySchedule :one
INSERT INTO holiday_experience_schedule (
holiday_home_id, 
day_of_week, 
start_time, 
end_time,
pick_up_time
)VALUES ($1, $2, $3, $4, $5) RETURNING id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time
`

type CreateHolidayScheduleParams struct {
	HolidayHomeID int64       `json:"holiday_home_id"`
	DayOfWeek     string      `json:"day_of_week"`
	StartTime     time.Time   `json:"start_time"`
	EndTime       time.Time   `json:"end_time"`
	PickUpTime    []time.Time `json:"pick_up_time"`
}

func (q *Queries) CreateHolidaySchedule(ctx context.Context, arg CreateHolidayScheduleParams) (HolidayExperienceSchedule, error) {
	row := q.db.QueryRow(ctx, createHolidaySchedule,
		arg.HolidayHomeID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
		arg.PickUpTime,
	)
	var i HolidayExperienceSchedule
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.PickUpTime,
	)
	return i, err
}

const deleteHolidayScheduleByHolidayId = `-- name: DeleteHolidayScheduleByHolidayId :one
DELETE From holiday_experience_schedule WHERE holiday_home_id= $1 RETURNING id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time
`

func (q *Queries) DeleteHolidayScheduleByHolidayId(ctx context.Context, holidayHomeID int64) (HolidayExperienceSchedule, error) {
	row := q.db.QueryRow(ctx, deleteHolidayScheduleByHolidayId, holidayHomeID)
	var i HolidayExperienceSchedule
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.PickUpTime,
	)
	return i, err
}

const deleteHolidayScheduleById = `-- name: DeleteHolidayScheduleById :exec
DELETE From holiday_experience_schedule WHERE id = $1
`

func (q *Queries) DeleteHolidayScheduleById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayScheduleById, id)
	return err
}

const getAllHolidaySchedule = `-- name: GetAllHolidaySchedule :many
SELECT id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time From holiday_experience_schedule LIMIT $1 OFFSET $2
`

type GetAllHolidayScheduleParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidaySchedule(ctx context.Context, arg GetAllHolidayScheduleParams) ([]HolidayExperienceSchedule, error) {
	rows, err := q.db.Query(ctx, getAllHolidaySchedule, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayExperienceSchedule
	for rows.Next() {
		var i HolidayExperienceSchedule
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.PickUpTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayScheduleById = `-- name: GetAllHolidayScheduleById :many
SELECT id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time From holiday_experience_schedule WHERE id = $3 LIMIT $1 OFFSET $2
`

type GetAllHolidayScheduleByIdParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetAllHolidayScheduleById(ctx context.Context, arg GetAllHolidayScheduleByIdParams) ([]HolidayExperienceSchedule, error) {
	rows, err := q.db.Query(ctx, getAllHolidayScheduleById, arg.Limit, arg.Offset, arg.ID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayExperienceSchedule
	for rows.Next() {
		var i HolidayExperienceSchedule
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.PickUpTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidaySchedulebyHolidayId = `-- name: GetAllHolidaySchedulebyHolidayId :many
SELECT id,
holiday_home_id,
day_of_week,
start_time,
end_time,
pick_up_time
From
    holiday_experience_schedule
WHERE
holiday_home_id= $1
ORDER BY holiday_experience_schedule.id DESC
LIMIT $2
OFFSET $3
`

type GetAllHolidaySchedulebyHolidayIdParams struct {
	HolidayHomeID int64 `json:"holiday_home_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetAllHolidaySchedulebyHolidayId(ctx context.Context, arg GetAllHolidaySchedulebyHolidayIdParams) ([]HolidayExperienceSchedule, error) {
	rows, err := q.db.Query(ctx, getAllHolidaySchedulebyHolidayId, arg.HolidayHomeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayExperienceSchedule
	for rows.Next() {
		var i HolidayExperienceSchedule
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.PickUpTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayScheduleByDay = `-- name: GetHolidayScheduleByDay :one
SELECT id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time From holiday_experience_schedule WHERE day_of_week = $1
`

func (q *Queries) GetHolidayScheduleByDay(ctx context.Context, dayOfWeek string) (HolidayExperienceSchedule, error) {
	row := q.db.QueryRow(ctx, getHolidayScheduleByDay, dayOfWeek)
	var i HolidayExperienceSchedule
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.PickUpTime,
	)
	return i, err
}

const getHolidayScheduleById = `-- name: GetHolidayScheduleById :one
SELECT id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time From holiday_experience_schedule WHERE id = $1
`

func (q *Queries) GetHolidayScheduleById(ctx context.Context, id int64) (HolidayExperienceSchedule, error) {
	row := q.db.QueryRow(ctx, getHolidayScheduleById, id)
	var i HolidayExperienceSchedule
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.PickUpTime,
	)
	return i, err
}

const getHolidaySchedulebyHolidayId = `-- name: GetHolidaySchedulebyHolidayId :many
SELECT id,
holiday_home_id,
day_of_week,
start_time,
end_time
From
    holiday_experience_schedule
WHERE
holiday_home_id= $1
`

type GetHolidaySchedulebyHolidayIdRow struct {
	ID            int64     `json:"id"`
	HolidayHomeID int64     `json:"holiday_home_id"`
	DayOfWeek     string    `json:"day_of_week"`
	StartTime     time.Time `json:"start_time"`
	EndTime       time.Time `json:"end_time"`
}

func (q *Queries) GetHolidaySchedulebyHolidayId(ctx context.Context, holidayHomeID int64) ([]GetHolidaySchedulebyHolidayIdRow, error) {
	rows, err := q.db.Query(ctx, getHolidaySchedulebyHolidayId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetHolidaySchedulebyHolidayIdRow
	for rows.Next() {
		var i GetHolidaySchedulebyHolidayIdRow
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolidaySchedule = `-- name: UpdateHolidaySchedule :one
UPDATE holiday_experience_schedule 
SET
holiday_home_id = $1, 
day_of_week = $2, 
start_time = $3, 
end_time = $4,
pick_up_time = $5
WHERE id = $6 RETURNING id, holiday_home_id, day_of_week, start_time, end_time, pick_up_time
`

type UpdateHolidayScheduleParams struct {
	HolidayHomeID int64       `json:"holiday_home_id"`
	DayOfWeek     string      `json:"day_of_week"`
	StartTime     time.Time   `json:"start_time"`
	EndTime       time.Time   `json:"end_time"`
	PickUpTime    []time.Time `json:"pick_up_time"`
	ID            int64       `json:"id"`
}

func (q *Queries) UpdateHolidaySchedule(ctx context.Context, arg UpdateHolidayScheduleParams) (HolidayExperienceSchedule, error) {
	row := q.db.QueryRow(ctx, updateHolidaySchedule,
		arg.HolidayHomeID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
		arg.PickUpTime,
		arg.ID,
	)
	var i HolidayExperienceSchedule
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.PickUpTime,
	)
	return i, err
}
