// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exhibition_service.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExhibitionService = `-- name: CreateExhibitionService :one
INSERT INTO exhibition_services (
    ref_no,
    service_name,
    image_url,
    created_at,
    updated_at, 
    exhibitions_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5, 
    $6
)RETURNING id, ref_no, service_name, image_url, created_at, updated_at, exhibitions_id
`

type CreateExhibitionServiceParams struct {
	RefNo         string      `json:"ref_no"`
	ServiceName   string      `json:"service_name"`
	ImageUrl      pgtype.Text `json:"image_url"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	ExhibitionsID int64       `json:"exhibitions_id"`
}

func (q *Queries) CreateExhibitionService(ctx context.Context, arg CreateExhibitionServiceParams) (ExhibitionService, error) {
	row := q.db.QueryRow(ctx, createExhibitionService,
		arg.RefNo,
		arg.ServiceName,
		arg.ImageUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExhibitionsID,
	)
	var i ExhibitionService
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.ServiceName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExhibitionsID,
	)
	return i, err
}

const deleteExhibitionServiceByID = `-- name: DeleteExhibitionServiceByID :exec
DELETE FROM exhibition_services
WHERE id = $1
`

func (q *Queries) DeleteExhibitionServiceByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteExhibitionServiceByID, id)
	return err
}

const getAllExhibitionServices = `-- name: GetAllExhibitionServices :many
SELECT exhibition_services.id, exhibition_services.ref_no, exhibition_services.service_name, exhibition_services.image_url, exhibition_services.created_at, exhibition_services.updated_at, exhibition_services.exhibitions_id,exhibitions.title AS "exhibition name"
FROM exhibition_services
INNER JOIN exhibitions 
ON exhibition_services.exhibitions_id = exhibitions.id AND exhibitions.event_status !=5
ORDER BY exhibition_services.updated_at DESC,exhibition_services.id DESC 
LIMIT $1 
OFFSET $2
`

type GetAllExhibitionServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllExhibitionServicesRow struct {
	ID             int64       `json:"id"`
	RefNo          string      `json:"ref_no"`
	ServiceName    string      `json:"service_name"`
	ImageUrl       pgtype.Text `json:"image_url"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	ExhibitionsID  int64       `json:"exhibitions_id"`
	ExhibitionName string      `json:"exhibition name"`
}

func (q *Queries) GetAllExhibitionServices(ctx context.Context, arg GetAllExhibitionServicesParams) ([]GetAllExhibitionServicesRow, error) {
	rows, err := q.db.Query(ctx, getAllExhibitionServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExhibitionServicesRow
	for rows.Next() {
		var i GetAllExhibitionServicesRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.ServiceName,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExhibitionsID,
			&i.ExhibitionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExhibitionServiceByID = `-- name: GetExhibitionServiceByID :one
SELECT es.id, es.ref_no, es.service_name, es.image_url, es.created_at, es.updated_at, es.exhibitions_id
FROM exhibition_services es
INNER JOIN exhibitions 
ON exhibitions.id = es.exhibitions_id AND exhibitions.event_status !=5 
WHERE es.id = $1
`

func (q *Queries) GetExhibitionServiceByID(ctx context.Context, id int64) (ExhibitionService, error) {
	row := q.db.QueryRow(ctx, getExhibitionServiceByID, id)
	var i ExhibitionService
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.ServiceName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExhibitionsID,
	)
	return i, err
}

const getNumberOfAllExhibitionsServices = `-- name: GetNumberOfAllExhibitionsServices :many
SELECT COUNT(es.id)::bigint
FROM exhibition_services es
INNER JOIN exhibitions 
ON exhibitions.id = es.exhibitions_id AND exhibitions.event_status !=5
`

func (q *Queries) GetNumberOfAllExhibitionsServices(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getNumberOfAllExhibitionsServices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var column_1 int64
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExhibitionServiceByID = `-- name: UpdateExhibitionServiceByID :one
UPDATE exhibition_services
SET 
    ref_no = $2,
    service_name = $3,
    image_url = $4,
    updated_at = $5, 
    exhibitions_id=$6
WHERE
    id = $1
RETURNING id, ref_no, service_name, image_url, created_at, updated_at, exhibitions_id
`

type UpdateExhibitionServiceByIDParams struct {
	ID            int64       `json:"id"`
	RefNo         string      `json:"ref_no"`
	ServiceName   string      `json:"service_name"`
	ImageUrl      pgtype.Text `json:"image_url"`
	UpdatedAt     time.Time   `json:"updated_at"`
	ExhibitionsID int64       `json:"exhibitions_id"`
}

func (q *Queries) UpdateExhibitionServiceByID(ctx context.Context, arg UpdateExhibitionServiceByIDParams) (ExhibitionService, error) {
	row := q.db.QueryRow(ctx, updateExhibitionServiceByID,
		arg.ID,
		arg.RefNo,
		arg.ServiceName,
		arg.ImageUrl,
		arg.UpdatedAt,
		arg.ExhibitionsID,
	)
	var i ExhibitionService
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.ServiceName,
		&i.ImageUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExhibitionsID,
	)
	return i, err
}
