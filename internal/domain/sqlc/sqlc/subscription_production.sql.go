// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_production.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeStatusSubscriptionProductions = `-- name: ChangeStatusSubscriptionProductions :one
UPDATE
    subscription_products
SET
    status = $2,
    updated_at = $3
WHERE
    subscription_products.id = $1
    AND (
        $2 != 6 OR NOT (
            EXISTS (
                SELECT 1
                FROM subscription_cost
                WHERE subscription_cost.product = $1
            )
            OR EXISTS (
                SELECT 1
                FROM subscription_package
                WHERE subscription_package.product = $1
            )
            OR EXISTS (
                SELECT 1
                FROM agent_products
                WHERE agent_products.product = $1
            )
            OR EXISTS (
                SELECT 1
                FROM subscription_consuming
                WHERE subscription_consuming.product = $1
            )
        )
    )RETURNING id, product, icon_url, created_by, created_at, updated_at, status
`

type ChangeStatusSubscriptionProductionsParams struct {
	ID        int64     `json:"id"`
	Status    int64     `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ChangeStatusSubscriptionProductions(ctx context.Context, arg ChangeStatusSubscriptionProductionsParams) (SubscriptionProduct, error) {
	row := q.db.QueryRow(ctx, changeStatusSubscriptionProductions, arg.ID, arg.Status, arg.UpdatedAt)
	var i SubscriptionProduct
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.IconUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const createSubscriptionProduction = `-- name: CreateSubscriptionProduction :exec
INSERT INTO
    subscription_products (
        product,
        icon_url,
        created_by,
        created_at,
        updated_at, 
        status
    )
VALUES(
        $1,
        $2,
        $3,
        $4,
        $5, 
        $6
    )
`

type CreateSubscriptionProductionParams struct {
	Product   string      `json:"product"`
	IconUrl   pgtype.Text `json:"icon_url"`
	CreatedBy int64       `json:"created_by"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Status    int64       `json:"status"`
}

func (q *Queries) CreateSubscriptionProduction(ctx context.Context, arg CreateSubscriptionProductionParams) error {
	_, err := q.db.Exec(ctx, createSubscriptionProduction,
		arg.Product,
		arg.IconUrl,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
	)
	return err
}

const getAllSubscriptionProductions = `-- name: GetAllSubscriptionProductions :many
SELECT
    id, product, icon_url, created_by, created_at, updated_at, status
FROM
    subscription_products
WHERE
    status = $1::BIGINT
ORDER BY updated_at DESC
LIMIT $3
OFFSET $2
`

type GetAllSubscriptionProductionsParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetAllSubscriptionProductions(ctx context.Context, arg GetAllSubscriptionProductionsParams) ([]SubscriptionProduct, error) {
	rows, err := q.db.Query(ctx, getAllSubscriptionProductions, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionProduct
	for rows.Next() {
		var i SubscriptionProduct
		if err := rows.Scan(
			&i.ID,
			&i.Product,
			&i.IconUrl,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSubscriptionProductionsCount = `-- name: GetAllSubscriptionProductionsCount :one
SELECT
    count(*)
FROM
    subscription_products
WHERE
    status = $1::BIGINT
`

func (q *Queries) GetAllSubscriptionProductionsCount(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAllSubscriptionProductionsCount, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleSubscriptionProduction = `-- name: GetSingleSubscriptionProduction :one
SELECT
    id, product, icon_url, created_by, created_at, updated_at, status
FROM
    subscription_products
WHERE
    id = $1
    AND status != 6
`

func (q *Queries) GetSingleSubscriptionProduction(ctx context.Context, id int64) (SubscriptionProduct, error) {
	row := q.db.QueryRow(ctx, getSingleSubscriptionProduction, id)
	var i SubscriptionProduct
	err := row.Scan(
		&i.ID,
		&i.Product,
		&i.IconUrl,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateSubscriptionProduction = `-- name: UpdateSubscriptionProduction :exec
UPDATE
    subscription_products
SET
    product = $1,
    icon_url = $2,
    updated_at = $3
WHERE
    id = $4
    AND status != 6
`

type UpdateSubscriptionProductionParams struct {
	Product   string      `json:"product"`
	IconUrl   pgtype.Text `json:"icon_url"`
	UpdatedAt time.Time   `json:"updated_at"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateSubscriptionProduction(ctx context.Context, arg UpdateSubscriptionProductionParams) error {
	_, err := q.db.Exec(ctx, updateSubscriptionProduction,
		arg.Product,
		arg.IconUrl,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
