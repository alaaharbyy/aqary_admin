// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: posted_hotel_bookings.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostedHotelBooking = `-- name: CreatePostedHotelBooking :one
INSERT INTO posted_hotel_bookings (
    ref_no,
    company_types_id,
    is_branch,
    company_id,
    title,
    title_ar,
    countries_id,
    states_id,
    cities_id,
    community_id,
    subcommunity_id,
    lat,
    lng,
    ranking,
    no_of_rooms,
    facilities,
    amenities,
    views,
    created_at,
    updated_at,
    properties_id,
    is_property_branch,
    unit_id,
    posted_by,
    booking_categories_id,
    description,
    description_ar,
    booking_expiration,
    free_parking,
    free_breakfast,
    buffet_dinner,
    pay_at_property,
    pets_allowed,
    self_check_in,
    status,
    is_property
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,
    $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,
    $21, $22, $23, $24, $25, $26, $27, $28, $29, $30,
    $31, $32, $33, $34, $35,$36
) RETURNING id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status
`

type CreatePostedHotelBookingParams struct {
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      pgtype.Int8        `json:"company_types_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	CompanyID           pgtype.Int8        `json:"company_id"`
	Title               string             `json:"title"`
	TitleAr             pgtype.Text        `json:"title_ar"`
	CountriesID         int64              `json:"countries_id"`
	StatesID            int64              `json:"states_id"`
	CitiesID            int64              `json:"cities_id"`
	CommunityID         int64              `json:"community_id"`
	SubcommunityID      int64              `json:"subcommunity_id"`
	Lat                 float64            `json:"lat"`
	Lng                 float64            `json:"lng"`
	Ranking             int64              `json:"ranking"`
	NoOfRooms           int64              `json:"no_of_rooms"`
	Facilities          []string           `json:"facilities"`
	Amenities           []string           `json:"amenities"`
	Views               []string           `json:"views"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	PropertiesID        pgtype.Int8        `json:"properties_id"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	UnitID              pgtype.Int8        `json:"unit_id"`
	PostedBy            int64              `json:"posted_by"`
	BookingCategoriesID int64              `json:"booking_categories_id"`
	Description         string             `json:"description"`
	DescriptionAr       pgtype.Text        `json:"description_ar"`
	BookingExpiration   pgtype.Timestamptz `json:"booking_expiration"`
	FreeParking         pgtype.Bool        `json:"free_parking"`
	FreeBreakfast       pgtype.Bool        `json:"free_breakfast"`
	BuffetDinner        pgtype.Bool        `json:"buffet_dinner"`
	PayAtProperty       pgtype.Bool        `json:"pay_at_property"`
	PetsAllowed         pgtype.Bool        `json:"pets_allowed"`
	SelfCheckIn         pgtype.Bool        `json:"self_check_in"`
	Status              int64              `json:"status"`
	IsProperty          pgtype.Bool        `json:"is_property"`
}

func (q *Queries) CreatePostedHotelBooking(ctx context.Context, arg CreatePostedHotelBookingParams) (PostedHotelBooking, error) {
	row := q.db.QueryRow(ctx, createPostedHotelBooking,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompanyID,
		arg.Title,
		arg.TitleAr,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunityID,
		arg.SubcommunityID,
		arg.Lat,
		arg.Lng,
		arg.Ranking,
		arg.NoOfRooms,
		arg.Facilities,
		arg.Amenities,
		arg.Views,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PropertiesID,
		arg.IsPropertyBranch,
		arg.UnitID,
		arg.PostedBy,
		arg.BookingCategoriesID,
		arg.Description,
		arg.DescriptionAr,
		arg.BookingExpiration,
		arg.FreeParking,
		arg.FreeBreakfast,
		arg.BuffetDinner,
		arg.PayAtProperty,
		arg.PetsAllowed,
		arg.SelfCheckIn,
		arg.Status,
		arg.IsProperty,
	)
	var i PostedHotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompanyID,
		&i.Title,
		&i.TitleAr,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfRooms,
		&i.Facilities,
		&i.Amenities,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsProperty,
		&i.PropertiesID,
		&i.IsPropertyBranch,
		&i.UnitID,
		&i.PostedBy,
		&i.BookingCategoriesID,
		&i.Description,
		&i.DescriptionAr,
		&i.BookingExpiration,
		&i.FreeParking,
		&i.FreeBreakfast,
		&i.BuffetDinner,
		&i.PayAtProperty,
		&i.PetsAllowed,
		&i.SelfCheckIn,
		&i.Status,
	)
	return i, err
}

const getAllPostedHotelBookings = `-- name: GetAllPostedHotelBookings :many
select id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status from posted_hotel_bookings 
Limit $1
Offset $2
`

type GetAllPostedHotelBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPostedHotelBookings(ctx context.Context, arg GetAllPostedHotelBookingsParams) ([]PostedHotelBooking, error) {
	rows, err := q.db.Query(ctx, getAllPostedHotelBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostedHotelBooking
	for rows.Next() {
		var i PostedHotelBooking
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompanyID,
			&i.Title,
			&i.TitleAr,
			&i.CountriesID,
			&i.StatesID,
			&i.CitiesID,
			&i.CommunityID,
			&i.SubcommunityID,
			&i.Lat,
			&i.Lng,
			&i.Ranking,
			&i.NoOfRooms,
			&i.Facilities,
			&i.Amenities,
			&i.Views,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsProperty,
			&i.PropertiesID,
			&i.IsPropertyBranch,
			&i.UnitID,
			&i.PostedBy,
			&i.BookingCategoriesID,
			&i.Description,
			&i.DescriptionAr,
			&i.BookingExpiration,
			&i.FreeParking,
			&i.FreeBreakfast,
			&i.BuffetDinner,
			&i.PayAtProperty,
			&i.PetsAllowed,
			&i.SelfCheckIn,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostedHotelBookingByID = `-- name: GetPostedHotelBookingByID :one
select id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status from posted_hotel_bookings where id = $1
`

func (q *Queries) GetPostedHotelBookingByID(ctx context.Context, id int64) (PostedHotelBooking, error) {
	row := q.db.QueryRow(ctx, getPostedHotelBookingByID, id)
	var i PostedHotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompanyID,
		&i.Title,
		&i.TitleAr,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfRooms,
		&i.Facilities,
		&i.Amenities,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsProperty,
		&i.PropertiesID,
		&i.IsPropertyBranch,
		&i.UnitID,
		&i.PostedBy,
		&i.BookingCategoriesID,
		&i.Description,
		&i.DescriptionAr,
		&i.BookingExpiration,
		&i.FreeParking,
		&i.FreeBreakfast,
		&i.BuffetDinner,
		&i.PayAtProperty,
		&i.PetsAllowed,
		&i.SelfCheckIn,
		&i.Status,
	)
	return i, err
}

const updateHolidayHomeRanking = `-- name: UpdateHolidayHomeRanking :one
UPDATE holiday_home
SET
    ranking= $2
WHERE
    id = $1
RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, title_ar, holiday_home_categories, countries_id, states_id, cities_id, communities_id, subcommunity_id, lat, lng, ranking, no_of_hours, no_of_rooms, no_of_bathrooms, views, facilities, holiday_package_inclusions, description, description_ar, posted_by, created_at, updated_at, status, holiday_home_type, no_of_guest, price_per_night, price_per_adults, price_per_children, amenities, location_url
`

type UpdateHolidayHomeRankingParams struct {
	ID      int64 `json:"id"`
	Ranking int64 `json:"ranking"`
}

func (q *Queries) UpdateHolidayHomeRanking(ctx context.Context, arg UpdateHolidayHomeRankingParams) (HolidayHome, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomeRanking, arg.ID, arg.Ranking)
	var i HolidayHome
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.TitleAr,
		&i.HolidayHomeCategories,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunitiesID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfHours,
		&i.NoOfRooms,
		&i.NoOfBathrooms,
		&i.Views,
		&i.Facilities,
		&i.HolidayPackageInclusions,
		&i.Description,
		&i.DescriptionAr,
		&i.PostedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.HolidayHomeType,
		&i.NoOfGuest,
		&i.PricePerNight,
		&i.PricePerAdults,
		&i.PricePerChildren,
		&i.Amenities,
		&i.LocationUrl,
	)
	return i, err
}

const updatePostedHotelBooking = `-- name: UpdatePostedHotelBooking :one
UPDATE posted_hotel_bookings
SET
    ref_no = $1,
    company_types_id = $2,
    is_branch = $3,
    company_id = $4,
    title = $5,
    title_ar = $6,
    countries_id = $7,
    states_id = $8,
    cities_id = $9,
    community_id = $10,
    subcommunity_id = $11,
    lat = $12,
    lng = $13,
    ranking = $14,
    no_of_rooms = $15,
    facilities = $16,
    amenities = $17,
    views = $18,
    created_at = $19,
    updated_at = $20,
    properties_id = $21,
    is_property_branch = $22,
    unit_id = $23,
    posted_by = $24,
    booking_categories_id = $25,
    description = $26,
    description_ar = $27,
    booking_expiration = $28,
    free_parking = $29,
    free_breakfast = $30,
    buffet_dinner = $31,
    pay_at_property = $32,
    pets_allowed = $33,
    self_check_in = $34,
    status = $35,
    is_property=$36
WHERE
    id = $37
RETURNING id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status
`

type UpdatePostedHotelBookingParams struct {
	RefNo               string             `json:"ref_no"`
	CompanyTypesID      pgtype.Int8        `json:"company_types_id"`
	IsBranch            pgtype.Bool        `json:"is_branch"`
	CompanyID           pgtype.Int8        `json:"company_id"`
	Title               string             `json:"title"`
	TitleAr             pgtype.Text        `json:"title_ar"`
	CountriesID         int64              `json:"countries_id"`
	StatesID            int64              `json:"states_id"`
	CitiesID            int64              `json:"cities_id"`
	CommunityID         int64              `json:"community_id"`
	SubcommunityID      int64              `json:"subcommunity_id"`
	Lat                 float64            `json:"lat"`
	Lng                 float64            `json:"lng"`
	Ranking             int64              `json:"ranking"`
	NoOfRooms           int64              `json:"no_of_rooms"`
	Facilities          []string           `json:"facilities"`
	Amenities           []string           `json:"amenities"`
	Views               []string           `json:"views"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	PropertiesID        pgtype.Int8        `json:"properties_id"`
	IsPropertyBranch    pgtype.Bool        `json:"is_property_branch"`
	UnitID              pgtype.Int8        `json:"unit_id"`
	PostedBy            int64              `json:"posted_by"`
	BookingCategoriesID int64              `json:"booking_categories_id"`
	Description         string             `json:"description"`
	DescriptionAr       pgtype.Text        `json:"description_ar"`
	BookingExpiration   pgtype.Timestamptz `json:"booking_expiration"`
	FreeParking         pgtype.Bool        `json:"free_parking"`
	FreeBreakfast       pgtype.Bool        `json:"free_breakfast"`
	BuffetDinner        pgtype.Bool        `json:"buffet_dinner"`
	PayAtProperty       pgtype.Bool        `json:"pay_at_property"`
	PetsAllowed         pgtype.Bool        `json:"pets_allowed"`
	SelfCheckIn         pgtype.Bool        `json:"self_check_in"`
	Status              int64              `json:"status"`
	IsProperty          pgtype.Bool        `json:"is_property"`
	ID                  int64              `json:"id"`
}

func (q *Queries) UpdatePostedHotelBooking(ctx context.Context, arg UpdatePostedHotelBookingParams) (PostedHotelBooking, error) {
	row := q.db.QueryRow(ctx, updatePostedHotelBooking,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.IsBranch,
		arg.CompanyID,
		arg.Title,
		arg.TitleAr,
		arg.CountriesID,
		arg.StatesID,
		arg.CitiesID,
		arg.CommunityID,
		arg.SubcommunityID,
		arg.Lat,
		arg.Lng,
		arg.Ranking,
		arg.NoOfRooms,
		arg.Facilities,
		arg.Amenities,
		arg.Views,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.PropertiesID,
		arg.IsPropertyBranch,
		arg.UnitID,
		arg.PostedBy,
		arg.BookingCategoriesID,
		arg.Description,
		arg.DescriptionAr,
		arg.BookingExpiration,
		arg.FreeParking,
		arg.FreeBreakfast,
		arg.BuffetDinner,
		arg.PayAtProperty,
		arg.PetsAllowed,
		arg.SelfCheckIn,
		arg.Status,
		arg.IsProperty,
		arg.ID,
	)
	var i PostedHotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompanyID,
		&i.Title,
		&i.TitleAr,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfRooms,
		&i.Facilities,
		&i.Amenities,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsProperty,
		&i.PropertiesID,
		&i.IsPropertyBranch,
		&i.UnitID,
		&i.PostedBy,
		&i.BookingCategoriesID,
		&i.Description,
		&i.DescriptionAr,
		&i.BookingExpiration,
		&i.FreeParking,
		&i.FreeBreakfast,
		&i.BuffetDinner,
		&i.PayAtProperty,
		&i.PetsAllowed,
		&i.SelfCheckIn,
		&i.Status,
	)
	return i, err
}

const updatePostedHotelBookingRanking = `-- name: UpdatePostedHotelBookingRanking :one
UPDATE posted_hotel_bookings
SET
ranking= $2
WHERE id = $1
RETURNING id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status
`

type UpdatePostedHotelBookingRankingParams struct {
	ID      int64 `json:"id"`
	Ranking int64 `json:"ranking"`
}

func (q *Queries) UpdatePostedHotelBookingRanking(ctx context.Context, arg UpdatePostedHotelBookingRankingParams) (PostedHotelBooking, error) {
	row := q.db.QueryRow(ctx, updatePostedHotelBookingRanking, arg.ID, arg.Ranking)
	var i PostedHotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompanyID,
		&i.Title,
		&i.TitleAr,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfRooms,
		&i.Facilities,
		&i.Amenities,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsProperty,
		&i.PropertiesID,
		&i.IsPropertyBranch,
		&i.UnitID,
		&i.PostedBy,
		&i.BookingCategoriesID,
		&i.Description,
		&i.DescriptionAr,
		&i.BookingExpiration,
		&i.FreeParking,
		&i.FreeBreakfast,
		&i.BuffetDinner,
		&i.PayAtProperty,
		&i.PetsAllowed,
		&i.SelfCheckIn,
		&i.Status,
	)
	return i, err
}

const updatePostedHotelBookingStatus = `-- name: UpdatePostedHotelBookingStatus :one
UPDATE posted_hotel_bookings
SET
    status = $2
WHERE
    id = $1
RETURNING id, ref_no, company_types_id, is_branch, company_id, title, title_ar, countries_id, states_id, cities_id, community_id, subcommunity_id, lat, lng, ranking, no_of_rooms, facilities, amenities, views, created_at, updated_at, is_property, properties_id, is_property_branch, unit_id, posted_by, booking_categories_id, description, description_ar, booking_expiration, free_parking, free_breakfast, buffet_dinner, pay_at_property, pets_allowed, self_check_in, status
`

type UpdatePostedHotelBookingStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdatePostedHotelBookingStatus(ctx context.Context, arg UpdatePostedHotelBookingStatusParams) (PostedHotelBooking, error) {
	row := q.db.QueryRow(ctx, updatePostedHotelBookingStatus, arg.ID, arg.Status)
	var i PostedHotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompanyID,
		&i.Title,
		&i.TitleAr,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubcommunityID,
		&i.Lat,
		&i.Lng,
		&i.Ranking,
		&i.NoOfRooms,
		&i.Facilities,
		&i.Amenities,
		&i.Views,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsProperty,
		&i.PropertiesID,
		&i.IsPropertyBranch,
		&i.UnitID,
		&i.PostedBy,
		&i.BookingCategoriesID,
		&i.Description,
		&i.DescriptionAr,
		&i.BookingExpiration,
		&i.FreeParking,
		&i.FreeBreakfast,
		&i.BuffetDinner,
		&i.PayAtProperty,
		&i.PetsAllowed,
		&i.SelfCheckIn,
		&i.Status,
	)
	return i, err
}
