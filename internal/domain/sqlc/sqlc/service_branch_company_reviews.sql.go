// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: service_branch_company_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceBranchCompanyReviews = `-- name: CreateServiceBranchCompanyReviews :one
INSERT INTO service_branch_company_reviews (
 rating,
 review,
 profiles_id,
 status,
 service_company_branches_id,
 created_at,
 updated_at,
 users_id
)VALUES (
    $1, $2, $3, $4, $5,$6,$7, $8
) RETURNING id, rating, review, profiles_id, status, service_company_branches_id, created_at, updated_at, users_id
`

type CreateServiceBranchCompanyReviewsParams struct {
	Rating                   string    `json:"rating"`
	Review                   string    `json:"review"`
	ProfilesID               int64     `json:"profiles_id"`
	Status                   int64     `json:"status"`
	ServiceCompanyBranchesID int64     `json:"service_company_branches_id"`
	CreatedAt                time.Time `json:"created_at"`
	UpdatedAt                time.Time `json:"updated_at"`
	UsersID                  int64     `json:"users_id"`
}

func (q *Queries) CreateServiceBranchCompanyReviews(ctx context.Context, arg CreateServiceBranchCompanyReviewsParams) (ServiceBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, createServiceBranchCompanyReviews,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.ServiceCompanyBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i ServiceBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServiceCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteServiceBranchCompanyReviews = `-- name: DeleteServiceBranchCompanyReviews :exec
DELETE FROM service_branch_company_reviews
Where id = $1
`

func (q *Queries) DeleteServiceBranchCompanyReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServiceBranchCompanyReviews, id)
	return err
}

const getAllServiceBranchCompanyReviews = `-- name: GetAllServiceBranchCompanyReviews :many
SELECT id, rating, review, profiles_id, status, service_company_branches_id, created_at, updated_at, users_id FROM service_branch_company_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllServiceBranchCompanyReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllServiceBranchCompanyReviews(ctx context.Context, arg GetAllServiceBranchCompanyReviewsParams) ([]ServiceBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllServiceBranchCompanyReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceBranchCompanyReview
	for rows.Next() {
		var i ServiceBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.ServiceCompanyBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgServiceBranchCompanyReview = `-- name: GetAvgServiceBranchCompanyReview :one
SELECT AVG(rating::bigint)::NUMERIC(2,1) FROM service_branch_company_reviews WHERE  service_company_branches_id = $1
`

func (q *Queries) GetAvgServiceBranchCompanyReview(ctx context.Context, serviceCompanyBranchesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgServiceBranchCompanyReview, serviceCompanyBranchesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getServiceBranchCompanyReviews = `-- name: GetServiceBranchCompanyReviews :one
SELECT id, rating, review, profiles_id, status, service_company_branches_id, created_at, updated_at, users_id FROM service_branch_company_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetServiceBranchCompanyReviews(ctx context.Context, limit int32) (ServiceBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, getServiceBranchCompanyReviews, limit)
	var i ServiceBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServiceCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getServiceBranchCompanyReviewsByCompanyId = `-- name: GetServiceBranchCompanyReviewsByCompanyId :many
SELECT id, rating, review, profiles_id, status, service_company_branches_id, created_at, updated_at, users_id FROM service_branch_company_reviews 
WHERE  service_company_branches_id = $3 LIMIT $1 OFFSET $2
`

type GetServiceBranchCompanyReviewsByCompanyIdParams struct {
	Limit                    int32 `json:"limit"`
	Offset                   int32 `json:"offset"`
	ServiceCompanyBranchesID int64 `json:"service_company_branches_id"`
}

func (q *Queries) GetServiceBranchCompanyReviewsByCompanyId(ctx context.Context, arg GetServiceBranchCompanyReviewsByCompanyIdParams) ([]ServiceBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getServiceBranchCompanyReviewsByCompanyId, arg.Limit, arg.Offset, arg.ServiceCompanyBranchesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceBranchCompanyReview
	for rows.Next() {
		var i ServiceBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.ServiceCompanyBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceBranchCompanyReviews = `-- name: UpdateServiceBranchCompanyReviews :one
UPDATE service_branch_company_reviews
SET   
 rating = $2,
 review = $3,
 profiles_id = $4,
 status = $5,
 service_company_branches_id = $6,
 created_at = $7,
 updated_at = $8,
 users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, service_company_branches_id, created_at, updated_at, users_id
`

type UpdateServiceBranchCompanyReviewsParams struct {
	ID                       int64     `json:"id"`
	Rating                   string    `json:"rating"`
	Review                   string    `json:"review"`
	ProfilesID               int64     `json:"profiles_id"`
	Status                   int64     `json:"status"`
	ServiceCompanyBranchesID int64     `json:"service_company_branches_id"`
	CreatedAt                time.Time `json:"created_at"`
	UpdatedAt                time.Time `json:"updated_at"`
	UsersID                  int64     `json:"users_id"`
}

func (q *Queries) UpdateServiceBranchCompanyReviews(ctx context.Context, arg UpdateServiceBranchCompanyReviewsParams) (ServiceBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, updateServiceBranchCompanyReviews,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.ServiceCompanyBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i ServiceBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.ServiceCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
