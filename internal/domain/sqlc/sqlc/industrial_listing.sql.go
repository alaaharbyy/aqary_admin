// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_listing.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const filterCountIndustrialProperties = `-- name: FilterCountIndustrialProperties :one
With x As(
 SELECT industrial_freelancer_properties.id, industrial_freelancer_properties.property_title,industrial_freelancer_properties.property_name, industrial_freelancer_properties.property_title_arabic, industrial_freelancer_properties.description, industrial_freelancer_properties.description_arabic, industrial_freelancer_properties.is_verified, industrial_freelancer_properties.property_rank, industrial_freelancer_properties.addresses_id, industrial_freelancer_properties.locations_id, industrial_freelancer_properties.property_types_id, industrial_freelancer_properties.users_id, industrial_freelancer_properties.facilities_id, industrial_freelancer_properties.amenities_id, industrial_freelancer_properties.status, industrial_freelancer_properties.created_at AS created_time, industrial_freelancer_properties.updated_at, industrial_freelancer_properties.is_show_owner_info, industrial_freelancer_properties.property, industrial_freelancer_properties.countries_id, industrial_freelancer_properties.ref_no, FALSE AS is_branch, 0 AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_freelancer_properties
 INNER JOIN addresses ON industrial_freelancer_properties.addresses_id = addresses.id 
 INNER JOIN cities ON addresses.cities_id = cities.id
 INNER JOIN communities ON addresses.communities_id = communities.id
 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 INNER JOIN property_types ON industrial_freelancer_properties.property_types_id = property_types.id
 INNER JOIN industrial_properties_facts ON industrial_freelancer_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 2
 WHERE 
         industrial_freelancer_properties.category = $8 and
         addresses.countries_id = $1 AND
         ($2::bigint[] is NULL OR industrial_freelancer_properties.property_rank = ANY($2::bigint[]))  AND
          cities.city ILIKE '%' || $3 || '%'  AND                 
          communities.community ILIKE '%' || $4 || '%'  AND       
          sub_communities.sub_community ILIKE '%' || $5 || '%'
         AND ($6::bool is NULL OR is_verified = $6::bool)
         AND (  
             industrial_freelancer_properties.property_title ILIKE '%' || $7 || '%'  OR 
             industrial_freelancer_properties.property_title_arabic ILIKE '%' || $7 || '%'  OR   
             property_types.type  ILIKE '%' || $7 || '%'  OR 
             cities.city ILIKE '%' || $7 || '%' OR
             communities.community ILIKE '%' || $7 || '%' OR
             sub_communities.sub_community ILIKE '%' || $7 || '%'
         ) AND industrial_freelancer_properties.status != 5 AND industrial_freelancer_properties.status != 6
           UNION ALL 
 SELECT industrial_owner_properties.id, industrial_owner_properties.property_title,industrial_owner_properties.property_name, industrial_owner_properties.property_title_arabic, industrial_owner_properties.description, industrial_owner_properties.description_arabic, industrial_owner_properties.is_verified, industrial_owner_properties.property_rank, industrial_owner_properties.addresses_id, industrial_owner_properties.locations_id, industrial_owner_properties.property_types_id, industrial_owner_properties.users_id, industrial_owner_properties.facilities_id, industrial_owner_properties.amenities_id, industrial_owner_properties.status, industrial_owner_properties.created_at AS created_time, industrial_owner_properties.updated_at, industrial_owner_properties.is_show_owner_info, industrial_owner_properties.property, industrial_owner_properties.countries_id, industrial_owner_properties.ref_no, FALSE AS is_branch, 0 AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_owner_properties
 INNER JOIN addresses ON industrial_owner_properties.addresses_id = addresses.id 
 INNER JOIN cities ON addresses.cities_id = cities.id
 INNER JOIN communities ON addresses.communities_id = communities.id
 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 INNER JOIN property_types ON industrial_owner_properties.property_types_id = property_types.id
 INNER JOIN industrial_properties_facts ON industrial_owner_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 4
 WHERE 
          industrial_owner_properties.category = $8 and
          addresses.countries_id = $1 AND
         ($2::bigint[] is NULL OR industrial_owner_properties.property_rank = ANY($2::bigint[]))  AND
          cities.city ILIKE '%' || $3 || '%'  AND                 
          communities.community ILIKE '%' || $4 || '%'  AND       
          sub_communities.sub_community ILIKE '%' || $5 || '%'
         AND ($6::bool is NULL OR is_verified = $6::bool)
         AND (
             industrial_owner_properties.property_title ILIKE '%' || $7 || '%'  OR 
             industrial_owner_properties.property_title_arabic ILIKE '%' || $7 || '%'  OR   
             property_types.type  ILIKE '%' || $7 || '%'  OR 
             cities.city ILIKE '%' || $7 || '%' OR
             communities.community ILIKE '%' || $7 || '%' OR
             sub_communities.sub_community ILIKE '%' || $7 || '%'
       ) AND industrial_owner_properties.status != 5 AND industrial_owner_properties.status != 6
                   UNION ALL 
 SELECT industrial_broker_agent_properties.id, industrial_broker_agent_properties.property_title,industrial_broker_agent_properties.property_name, industrial_broker_agent_properties.property_title_arabic, industrial_broker_agent_properties.description, industrial_broker_agent_properties.description_arabic, industrial_broker_agent_properties.is_verified, industrial_broker_agent_properties.property_rank, industrial_broker_agent_properties.addresses_id, industrial_broker_agent_properties.locations_id, industrial_broker_agent_properties.property_types_id, industrial_broker_agent_properties.users_id, industrial_broker_agent_properties.facilities_id, industrial_broker_agent_properties.amenities_id, industrial_broker_agent_properties.status, industrial_broker_agent_properties.created_at AS created_time, industrial_broker_agent_properties.updated_at, industrial_broker_agent_properties.is_show_owner_info, industrial_broker_agent_properties.property, industrial_broker_agent_properties.countries_id, industrial_broker_agent_properties.ref_no, industrial_broker_agent_properties.is_branch, industrial_broker_agent_properties.broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_broker_agent_properties
 INNER JOIN addresses ON industrial_broker_agent_properties.addresses_id = addresses.id 
 INNER JOIN cities ON addresses.cities_id = cities.id
 INNER JOIN communities ON addresses.communities_id = communities.id
 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 INNER JOIN property_types ON industrial_broker_agent_properties.property_types_id = property_types.id
 INNER JOIN industrial_properties_facts ON industrial_broker_agent_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 3
 WHERE 
          industrial_broker_agent_properties.category = $8 and
          addresses.countries_id = $1 AND
         ($2::bigint[] is NULL OR industrial_broker_agent_properties.property_rank = ANY($2::bigint[]))  AND
          cities.city ILIKE '%' || $3 || '%'  AND                 
          communities.community ILIKE '%' || $4 || '%'  AND       
          sub_communities.sub_community ILIKE '%' || $5 || '%'
         AND ($6::bool is NULL OR is_verified = $6::bool)
         AND (
             industrial_broker_agent_properties.property_title ILIKE '%' || $7 || '%'  OR 
             industrial_broker_agent_properties.property_title_arabic ILIKE '%' || $7 || '%'  OR   
             property_types.type  ILIKE '%' || $7 || '%'  OR 
             cities.city ILIKE '%' || $7 || '%' OR
             communities.community ILIKE '%' || $7 || '%' OR
             sub_communities.sub_community ILIKE '%' || $7 || '%'
       ) AND industrial_broker_agent_properties.status != 5 AND industrial_broker_agent_properties.status != 6
        UNION ALL
 SELECT industrial_broker_agent_properties_branch.id, industrial_broker_agent_properties_branch.property_title,industrial_broker_agent_properties_branch.property_name, industrial_broker_agent_properties_branch.property_title_arabic, industrial_broker_agent_properties_branch.description, industrial_broker_agent_properties_branch.description_arabic, industrial_broker_agent_properties_branch.is_verified, industrial_broker_agent_properties_branch.property_rank, industrial_broker_agent_properties_branch.addresses_id, industrial_broker_agent_properties_branch.locations_id, industrial_broker_agent_properties_branch.property_types_id, industrial_broker_agent_properties_branch.users_id, industrial_broker_agent_properties_branch.facilities_id, industrial_broker_agent_properties_branch.amenities_id, industrial_broker_agent_properties_branch.status, industrial_broker_agent_properties_branch.created_at AS created_time, industrial_broker_agent_properties_branch.updated_at, industrial_broker_agent_properties_branch.is_show_owner_info, industrial_broker_agent_properties_branch.property, industrial_broker_agent_properties_branch.countries_id, industrial_broker_agent_properties_branch.ref_no, industrial_broker_agent_properties_branch.is_branch, industrial_broker_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_broker_agent_properties_branch 
 INNER JOIN addresses ON industrial_broker_agent_properties_branch.addresses_id = addresses.id 
 INNER JOIN cities ON addresses.cities_id = cities.id
 INNER JOIN communities ON addresses.communities_id = communities.id
 INNER JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 INNER JOIN property_types ON industrial_broker_agent_properties_branch.property_types_id = property_types.id
 INNER JOIN industrial_properties_facts ON industrial_broker_agent_properties_branch.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 3
 WHERE 
          industrial_broker_agent_properties_branch.category = $8 and
           addresses.countries_id = $1 AND
         ($2::bigint[] is NULL OR industrial_broker_agent_properties_branch.property_rank = ANY($2::bigint[]))  AND
          cities.city ILIKE '%' || $3 || '%'  AND                 
          communities.community ILIKE '%' || $4 || '%'  AND       
          sub_communities.sub_community ILIKE '%' || $5 || '%'
         AND ($6::bool is NULL OR is_verified = $6::bool)
         AND (
             industrial_broker_agent_properties_branch.property_title ILIKE '%' || $7 || '%'  OR 
             industrial_broker_agent_properties_branch.property_title_arabic ILIKE '%' || $7 || '%'  OR   
             property_types.type  ILIKE '%' || $7 || '%'  OR 
             cities.city ILIKE '%' || $7 || '%' OR
             communities.community ILIKE '%' || $7 || '%' OR
             sub_communities.sub_community ILIKE '%' || $7 || '%'
       ) AND industrial_broker_agent_properties_branch.status != 5 AND industrial_broker_agent_properties_branch.status != 6
) SELECT COUNT(*) FROM x
`

type FilterCountIndustrialPropertiesParams struct {
	CountriesID pgtype.Int8 `json:"countries_id"`
	Column2     []int64     `json:"column_2"`
	Column3     pgtype.Text `json:"column_3"`
	Column4     pgtype.Text `json:"column_4"`
	Column5     pgtype.Text `json:"column_5"`
	Column6     pgtype.Bool `json:"column_6"`
	Column7     pgtype.Text `json:"column_7"`
	Category    string      `json:"category"`
}

func (q *Queries) FilterCountIndustrialProperties(ctx context.Context, arg FilterCountIndustrialPropertiesParams) (int64, error) {
	row := q.db.QueryRow(ctx, filterCountIndustrialProperties,
		arg.CountriesID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
		arg.Column7,
		arg.Category,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const filterIndustrialProperties = `-- name: FilterIndustrialProperties :many
With x As(
 SELECT industrial_freelancer_properties.id, industrial_freelancer_properties.property_title,industrial_freelancer_properties.property_name, industrial_freelancer_properties.property_title_arabic, industrial_freelancer_properties.description, industrial_freelancer_properties.description_arabic, industrial_freelancer_properties.is_verified, industrial_freelancer_properties.property_rank, industrial_freelancer_properties.addresses_id, industrial_freelancer_properties.locations_id, industrial_freelancer_properties.property_types_id, industrial_freelancer_properties.users_id, industrial_freelancer_properties.facilities_id, industrial_freelancer_properties.amenities_id, industrial_freelancer_properties.status, industrial_freelancer_properties.created_at AS created_time, industrial_freelancer_properties.updated_at, industrial_freelancer_properties.is_show_owner_info, industrial_freelancer_properties.property, industrial_freelancer_properties.countries_id, industrial_freelancer_properties.ref_no, FALSE AS is_branch, 0 AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_freelancer_properties
 LEFT JOIN addresses ON industrial_freelancer_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON industrial_freelancer_properties.property_types_id = property_types.id
 LEFT JOIN industrial_properties_facts ON industrial_freelancer_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 2
 LEFT JOIN industrial_freelancer_properties_media ON industrial_freelancer_properties.id = industrial_freelancer_properties_media.industrial_freelancer_properties_id
 WHERE 
    addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	
	AND LOWER(industrial_freelancer_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%' OR  industrial_freelancer_properties.ref_no ILIKE $8::varchar)
	--         -- price
	AND(industrial_properties_facts.price BETWEEN $9::bigint AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [], 1) IS NULL OR industrial_properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [], 1) IS NULL
		OR industrial_properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR industrial_properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			industrial_properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(industrial_freelancer_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(industrial_freelancer_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(industrial_freelancer_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(industrial_freelancer_properties_media.panaroma_url,
				$29) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR industrial_freelancer_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR industrial_freelancer_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			industrial_freelancer_properties.property_title ILIKE $34::varchar
			OR industrial_freelancer_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND industrial_freelancer_properties.status != 5
	AND industrial_freelancer_properties.status != 6
           UNION ALL 
 SELECT industrial_owner_properties.id, industrial_owner_properties.property_title,industrial_owner_properties.property_name, industrial_owner_properties.property_title_arabic, industrial_owner_properties.description, industrial_owner_properties.description_arabic, industrial_owner_properties.is_verified, industrial_owner_properties.property_rank, industrial_owner_properties.addresses_id, industrial_owner_properties.locations_id, industrial_owner_properties.property_types_id, industrial_owner_properties.users_id, industrial_owner_properties.facilities_id, industrial_owner_properties.amenities_id, industrial_owner_properties.status, industrial_owner_properties.created_at AS created_time, industrial_owner_properties.updated_at, industrial_owner_properties.is_show_owner_info, industrial_owner_properties.property, industrial_owner_properties.countries_id, industrial_owner_properties.ref_no, FALSE AS is_branch, 0 AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_owner_properties
 LEFT JOIN addresses ON industrial_owner_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON industrial_owner_properties.property_types_id = property_types.id
 LEFT JOIN industrial_properties_facts ON industrial_owner_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 4
 LEFT JOIN industrial_owner_properties_media ON industrial_owner_properties.id = industrial_owner_properties_media.industrial_owner_properties_id
 WHERE 
    addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	
	AND LOWER(industrial_owner_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  industrial_owner_properties.ref_no ILIKE $8::varchar)

	--         -- price
	AND(industrial_properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR industrial_properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR industrial_properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR industrial_properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			industrial_properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(industrial_owner_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(industrial_owner_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(industrial_owner_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(industrial_owner_properties_media.panaroma_url,
				$29) IS NOT NULL))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR industrial_owner_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR industrial_owner_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			industrial_owner_properties.property_title ILIKE $34::varchar
			OR industrial_owner_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND industrial_owner_properties.status != 5
	AND industrial_owner_properties.status != 6
 UNION ALL 
 SELECT industrial_broker_agent_properties.id, industrial_broker_agent_properties.property_title,industrial_broker_agent_properties.property_name, industrial_broker_agent_properties.property_title_arabic, industrial_broker_agent_properties.description, industrial_broker_agent_properties.description_arabic, industrial_broker_agent_properties.is_verified, industrial_broker_agent_properties.property_rank, industrial_broker_agent_properties.addresses_id, industrial_broker_agent_properties.locations_id, industrial_broker_agent_properties.property_types_id, industrial_broker_agent_properties.users_id, industrial_broker_agent_properties.facilities_id, industrial_broker_agent_properties.amenities_id, industrial_broker_agent_properties.status, industrial_broker_agent_properties.created_at AS created_time, industrial_broker_agent_properties.updated_at, industrial_broker_agent_properties.is_show_owner_info, industrial_broker_agent_properties.property, industrial_broker_agent_properties.countries_id, industrial_broker_agent_properties.ref_no, industrial_broker_agent_properties.is_branch, industrial_broker_agent_properties.broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_broker_agent_properties
 LEFT JOIN addresses ON industrial_broker_agent_properties.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON industrial_broker_agent_properties.property_types_id = property_types.id 
 LEFT JOIN industrial_properties_facts ON industrial_broker_agent_properties.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 3
 LEFT JOIN industrial_broker_agent_properties_media ON industrial_broker_agent_properties.id = industrial_broker_agent_properties_media.industrial_broker_agent_properties_id
 LEFT JOIN broker_company_agents ON industrial_broker_agent_properties.broker_company_agents = broker_company_agents.id
 LEFT JOIN users ON broker_company_agents.users_id = users.id
 LEFT JOIN broker_companies ON broker_company_agents.broker_companies_id = broker_companies.id
 LEFT JOIN broker_company_agent_properties_media ON industrial_broker_agent_properties.id = broker_company_agent_properties_media.id
 WHERE 
     addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	--         -- section
	AND LOWER(industrial_broker_agent_properties.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  industrial_broker_agent_properties.ref_no ILIKE $8::varchar)

	--         -- price
	AND(industrial_properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR industrial_properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR industrial_properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR industrial_properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			industrial_properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(industrial_broker_agent_properties_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_media.panaroma_url,
				$29) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($35::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($35::varchar))
	OR($35::varchar = '%%'
		OR LOWER(broker_companies.company_name)
		ILIKE LOWER($35::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR industrial_broker_agent_properties.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR industrial_broker_agent_properties.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			industrial_broker_agent_properties.property_title ILIKE $34::varchar
			OR industrial_broker_agent_properties.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND industrial_broker_agent_properties.status != 5
	AND industrial_broker_agent_properties.status != 6
        UNION ALL
 SELECT industrial_broker_agent_properties_branch.id, industrial_broker_agent_properties_branch.property_title,industrial_broker_agent_properties_branch.property_name, industrial_broker_agent_properties_branch.property_title_arabic, industrial_broker_agent_properties_branch.description, industrial_broker_agent_properties_branch.description_arabic, industrial_broker_agent_properties_branch.is_verified, industrial_broker_agent_properties_branch.property_rank, industrial_broker_agent_properties_branch.addresses_id, industrial_broker_agent_properties_branch.locations_id, industrial_broker_agent_properties_branch.property_types_id, industrial_broker_agent_properties_branch.users_id, industrial_broker_agent_properties_branch.facilities_id, industrial_broker_agent_properties_branch.amenities_id, industrial_broker_agent_properties_branch.status, industrial_broker_agent_properties_branch.created_at AS created_time, industrial_broker_agent_properties_branch.updated_at, industrial_broker_agent_properties_branch.is_show_owner_info, industrial_broker_agent_properties_branch.property, industrial_broker_agent_properties_branch.countries_id, industrial_broker_agent_properties_branch.ref_no, industrial_broker_agent_properties_branch.is_branch, industrial_broker_agent_properties_branch.broker_companies_branches_id AS broker_companies_id,
 industrial_properties_facts.price AS unit_price,
 industrial_properties_facts.bedroom AS unit_bedroom 
 from industrial_broker_agent_properties_branch 
 LEFT JOIN addresses ON industrial_broker_agent_properties_branch.addresses_id = addresses.id 
 LEFT JOIN cities ON addresses.cities_id = cities.id
 LEFT JOIN communities ON addresses.communities_id = communities.id
 LEFT JOIN sub_communities ON addresses.sub_communities_id = sub_communities.id
 LEFT JOIN property_types ON industrial_broker_agent_properties_branch.property_types_id = property_types.id
 LEFT JOIN industrial_properties_facts ON industrial_broker_agent_properties_branch.id = industrial_properties_facts.properties_id and industrial_properties_facts.property = 3
 LEFT JOIN industrial_broker_agent_properties_branch_media ON industrial_broker_agent_properties_branch.id = industrial_broker_agent_properties_branch_media.industrial_broker_agent_properties_branch_id
 LEFT JOIN broker_company_branches_agents ON industrial_broker_agent_properties_branch.broker_company_branches_agents = broker_company_branches_agents.id
 LEFT JOIN users ON broker_company_branches_agents.users_id = users.id
 LEFT JOIN broker_companies_branches ON broker_company_branches_agents.broker_companies_branches_id = broker_companies_branches.id
 LEFT JOIN broker_company_agent_properties_media_branch ON industrial_broker_agent_properties_branch.id = broker_company_agent_properties_media_branch.id
 WHERE 
     addresses.countries_id = $4::bigint
	--         -- city
	AND cities.city ILIKE $5::varchar
	--         -- section
	AND LOWER(industrial_broker_agent_properties_branch.category)
	ILIKE $6::varchar
	--         -- category or type
	AND property_types.type ILIKE $7::varchar
		--  reference number
    AND ($8::varchar = '%%'
		OR  industrial_broker_agent_properties_branch.ref_no ILIKE $8::varchar)

	--         -- price
	AND(industrial_properties_facts.price BETWEEN $9::bigint
		AND $10::bigint)
	--         -- bedroom
	AND(ARRAY_LENGTH($11::varchar [],
			1) IS NULL
		OR industrial_properties_facts.bedroom = ANY ($11::varchar []))
	--       	-- bathroom
	AND(ARRAY_LENGTH($12::bigint [],
			1) IS NULL
		OR industrial_properties_facts.bathroom = ANY ($12::bigint []))
	--      	-- completion status
	AND CASE WHEN $13::bigint IS NULL THEN
		TRUE
	WHEN $13::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.completion_status = $13::bigint
	END
	--  ownership
	AND CASE WHEN $14::bigint IS NULL THEN
		TRUE
	WHEN $14::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.ownership = $14::bigint
	END
	--     	--  plot area
	AND(
		CASE WHEN $15::float IS NULL THEN
			TRUE
		WHEN $15::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area >= $15::float
		END
		-- max plot area
		AND CASE WHEN $16::float IS NULL THEN
			TRUE
		WHEN $16::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.plot_area <= $16::float
		END)
	--         --   build-up area
	AND(
		CASE WHEN $17::float IS NULL THEN
			TRUE
		WHEN $17::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area >= $17::float
		END
		-- max builup area
		AND CASE WHEN $18::float IS NULL THEN
			TRUE
		WHEN $18::float = 0.0 THEN
			TRUE
		ELSE
			industrial_properties_facts.built_up_area <= $18::float
		END)
	--  	     --  furnishing
	AND CASE WHEN $19::bigint IS NULL THEN
		TRUE
	WHEN $19::bigint = 0 THEN
		TRUE
	ELSE
		industrial_properties_facts.furnished = $19::bigint
	END
	--  	     --  Parking
	AND(ARRAY_LENGTH($20::bigint [],
			1) IS NULL
		OR industrial_properties_facts.parking = ANY ($20::bigint []))
	--  	     --  service charges
	AND(
		CASE WHEN $21::bigint IS NULL THEN
			TRUE
		WHEN $21::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge >= $21::bigint
		END
		-- max service charges
		AND CASE WHEN $22::bigint IS NULL THEN
			TRUE
		WHEN $22::bigint = 0 THEN
			TRUE
		ELSE
			industrial_properties_facts.service_charge <= $22::bigint
		END)
	--  amenities
	AND(
		CASE WHEN ARRAY_LENGTH($23::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			amenities_id && $23::bigint []
		END)
	--  unit views
	AND(
		CASE WHEN ARRAY_LENGTH($24::bigint [],
			1) IS NULL THEN
			TRUE
		ELSE
			industrial_properties_facts. "view" && $24::bigint []
		END)
	-- media
	AND($25::bigint = 0
		OR(array_length(industrial_broker_agent_properties_branch_media.image_url,
				$26) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_branch_media.image360_url,
				$27) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_branch_media.video_url,
				$28) IS NOT NULL)
		OR(array_length(industrial_broker_agent_properties_branch_media.panaroma_url,
				$29) IS NOT NULL))
	--  tags or keywords
	--  todo ...
	--  agent or agency
	AND(($35::varchar = '%%'
		OR LOWER(users.username)
		ILIKE LOWER($35::varchar))
	OR($35::varchar = '%%'
		OR LOWER(broker_companies_branches.company_name)
		ILIKE LOWER($35::varchar)))
	---------------------- from here normal sale section --------------------------
	AND(ARRAY_LENGTH($30::bigint [],
			1) IS NULL
		OR industrial_broker_agent_properties_branch.property_rank = ANY ($30::bigint []))
	AND(communities.community ILIKE $31::varchar
		OR communities.community IS NULL)
	AND(sub_communities.sub_community ILIKE $32::varchar
		OR sub_communities.sub_community IS NULL)
	AND($33::bool IS NULL
		OR industrial_broker_agent_properties_branch.is_verified = $33::bool)
	--  search purpose
	AND(
		CASE WHEN $34::varchar IS NULL THEN
			TRUE
		ELSE
			industrial_broker_agent_properties_branch.property_title ILIKE $34::varchar
			OR industrial_broker_agent_properties_branch.property_title_arabic ILIKE $34::varchar
			OR property_types.type ILIKE $34::varchar
			OR cities.city ILIKE $34::varchar
			OR communities.community ILIKE $34::varchar
			OR sub_communities.sub_community ILIKE $34::varchar
		END)
	--  removing the blocked and deleted units only
	AND industrial_broker_agent_properties_branch.status != 5
	AND industrial_broker_agent_properties_branch.status != 6
) SELECT id,property_title,property_name,property_title_arabic,description,description_arabic,is_verified,property_rank,addresses_id,locations_id,property_types_id,users_id,facilities_id,amenities_id,status,created_time,updated_at,is_show_owner_info,property, countries_id,ref_no,is_branch, broker_companies_id FROM x ORDER BY
 CASE WHEN $3::bigint = 5 THEN
		unit_bedroom
	END DESC NULLS LAST,
	CASE WHEN $3::bigint = 4 THEN
		unit_bedroom
	END,
	CASE WHEN $3::bigint = 3 THEN
		unit_price
	END DESC,
	CASE WHEN $3::bigint = 2 THEN
		unit_price
	END,
	CASE WHEN $3::bigint = 1 THEN
		created_time
	END DESC,
    property_rank desc,
    is_verified desc,
    RANDOM()
LIMIT $1 OFFSET $2
`

type FilterIndustrialPropertiesParams struct {
	Limit             int32       `json:"limit"`
	Offset            int32       `json:"offset"`
	Rank              int64       `json:"rank"`
	CountryID         int64       `json:"country_id"`
	City              string      `json:"city"`
	CategorySection   string      `json:"category_section"`
	PropertyType      string      `json:"property_type"`
	Ref               string      `json:"ref"`
	MinPrice          int64       `json:"min_price"`
	MaxPrice          int64       `json:"max_price"`
	Bedrooms          []string    `json:"bedrooms"`
	Bathrooms         []int64     `json:"bathrooms"`
	CompletionStatus  int64       `json:"completion_status"`
	Ownership         int64       `json:"ownership"`
	MinPlotArea       float64     `json:"min_plot_area"`
	MaxPlotArea       float64     `json:"max_plot_area"`
	MinBuildupArea    float64     `json:"min_buildup_area"`
	MaxBuildupArea    float64     `json:"max_buildup_area"`
	Furnished         int64       `json:"furnished"`
	Parkings          []int64     `json:"parkings"`
	MinServiceCharges int64       `json:"min_service_charges"`
	MaxServiceCharges int64       `json:"max_service_charges"`
	Amenities         []int64     `json:"amenities"`
	Views             []int64     `json:"views"`
	Media             int64       `json:"media"`
	ImageUrl          int32       `json:"image_url"`
	Image360Url       int32       `json:"image360_url"`
	VideoUrl          int32       `json:"video_url"`
	PanaromaUrl       int32       `json:"panaroma_url"`
	UnitRank          []int64     `json:"unit_rank"`
	Community         string      `json:"community"`
	SubCommunity      string      `json:"sub_community"`
	IsVerified        pgtype.Bool `json:"is_verified"`
	Search            string      `json:"search"`
	AgentAgency       string      `json:"agent_agency"`
}

type FilterIndustrialPropertiesRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyName        string      `json:"property_name"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	UsersID             int64       `json:"users_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedTime         time.Time   `json:"created_time"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	BrokerCompaniesID   pgtype.Int8 `json:"broker_companies_id"`
}

func (q *Queries) FilterIndustrialProperties(ctx context.Context, arg FilterIndustrialPropertiesParams) ([]FilterIndustrialPropertiesRow, error) {
	rows, err := q.db.Query(ctx, filterIndustrialProperties,
		arg.Limit,
		arg.Offset,
		arg.Rank,
		arg.CountryID,
		arg.City,
		arg.CategorySection,
		arg.PropertyType,
		arg.Ref,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Bedrooms,
		arg.Bathrooms,
		arg.CompletionStatus,
		arg.Ownership,
		arg.MinPlotArea,
		arg.MaxPlotArea,
		arg.MinBuildupArea,
		arg.MaxBuildupArea,
		arg.Furnished,
		arg.Parkings,
		arg.MinServiceCharges,
		arg.MaxServiceCharges,
		arg.Amenities,
		arg.Views,
		arg.Media,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.UnitRank,
		arg.Community,
		arg.SubCommunity,
		arg.IsVerified,
		arg.Search,
		arg.AgentAgency,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FilterIndustrialPropertiesRow
	for rows.Next() {
		var i FilterIndustrialPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyName,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.UsersID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedTime,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.BrokerCompaniesID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialProperties = `-- name: GetAllIndustrialProperties :many
WITH x AS(
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml 
from industrial_broker_agent_properties where status != 5 and status !=6
union all
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id as broker_companies_id, broker_company_branches_agents as broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml 
from industrial_broker_agent_properties_branch where status != 5 and status !=6
union all
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, 0 as broker_companies_id, 0 as broker_company_agents, is_show_owner_info, property, countries_id, ref_no,'' as developer_company_name,'' as sub_developer_company_name, false as is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name,false as from_xml 
from industrial_owner_properties where status != 5 and status != 6
union all
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id,0 as broker_companies_id,0 as broker_company_agents, is_show_owner_info, property, countries_id, ref_no,'' as developer_company_name,'' as sub_developer_company_name,false as is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name,false as from_xml 
from industrial_freelancer_properties where status != 5 and status != 6
) select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml 
FROM x ORDER BY property_rank DESC, is_verified DESC,
    CASE property_rank
        WHEN 4 THEN 1
        WHEN 3 THEN 2
        WHEN 2 THEN 3
        WHEN 1 THEN 4
        ELSE 5
    END
 LIMIT $1 OFFSET $2
`

type GetAllIndustrialPropertiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllIndustrialPropertiesRow struct {
	ID                      int64              `json:"id"`
	PropertyTitle           string             `json:"property_title"`
	PropertyTitleArabic     string             `json:"property_title_arabic"`
	Description             string             `json:"description"`
	DescriptionArabic       string             `json:"description_arabic"`
	IsVerified              pgtype.Bool        `json:"is_verified"`
	PropertyRank            int64              `json:"property_rank"`
	AddressesID             int64              `json:"addresses_id"`
	LocationsID             int64              `json:"locations_id"`
	PropertyTypesID         int64              `json:"property_types_id"`
	Status                  int64              `json:"status"`
	CreatedAt               time.Time          `json:"created_at"`
	UpdatedAt               time.Time          `json:"updated_at"`
	FacilitiesID            []int64            `json:"facilities_id"`
	AmenitiesID             []int64            `json:"amenities_id"`
	BrokerCompaniesID       int64              `json:"broker_companies_id"`
	BrokerCompanyAgents     int64              `json:"broker_company_agents"`
	IsShowOwnerInfo         pgtype.Bool        `json:"is_show_owner_info"`
	Property                int64              `json:"property"`
	CountriesID             int64              `json:"countries_id"`
	RefNo                   string             `json:"ref_no"`
	DeveloperCompanyName    pgtype.Text        `json:"developer_company_name"`
	SubDeveloperCompanyName pgtype.Text        `json:"sub_developer_company_name"`
	IsBranch                pgtype.Bool        `json:"is_branch"`
	Category                string             `json:"category"`
	Investment              pgtype.Bool        `json:"investment"`
	ContractStartDatetime   pgtype.Timestamptz `json:"contract_start_datetime"`
	ContractEndDatetime     pgtype.Timestamptz `json:"contract_end_datetime"`
	Amount                  int64              `json:"amount"`
	UnitTypes               []int64            `json:"unit_types"`
	UsersID                 int64              `json:"users_id"`
	PropertyName            string             `json:"property_name"`
	FromXml                 pgtype.Bool        `json:"from_xml"`
}

func (q *Queries) GetAllIndustrialProperties(ctx context.Context, arg GetAllIndustrialPropertiesParams) ([]GetAllIndustrialPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialProperties, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialPropertiesRow
	for rows.Next() {
		var i GetAllIndustrialPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.BrokerCompaniesID,
			&i.BrokerCompanyAgents,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.DeveloperCompanyName,
			&i.SubDeveloperCompanyName,
			&i.IsBranch,
			&i.Category,
			&i.Investment,
			&i.ContractStartDatetime,
			&i.ContractEndDatetime,
			&i.Amount,
			&i.UnitTypes,
			&i.UsersID,
			&i.PropertyName,
			&i.FromXml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllIndustrialProperties = `-- name: GetCountAllIndustrialProperties :one
WITH x AS(
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_id, broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml 
from industrial_broker_agent_properties where status != 5 and status !=6
union all
select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, broker_companies_branches_id as broker_companies_id, broker_company_branches_agents as broker_company_agents, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, from_xml 

from industrial_broker_agent_properties_branch where status != 5 and status !=6

union all

select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, 0 as broker_companies_id, 0 as broker_company_agents, is_show_owner_info, property, countries_id, ref_no,'' as developer_company_name,'' as sub_developer_company_name, false as is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name,false as from_xml 

from industrial_owner_properties where status != 5 and status != 6

union all

select id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id,0 as broker_companies_id,0 as broker_company_agents, is_show_owner_info, property, countries_id, ref_no,'' as developer_company_name,'' as sub_developer_company_name,false as is_branch, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name,false as from_xml 

from industrial_freelancer_properties where status != 5 and status != 6

) SELECT COUNT(*) AS total_count from x
`

func (q *Queries) GetCountAllIndustrialProperties(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllIndustrialProperties)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}
