// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: developer_branch_company_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDeveloperBranchCompanyReview = `-- name: CreateDeveloperBranchCompanyReview :one
INSERT INTO developer_branch_company_reviews (
    rating,
    review,
    profiles_id,
    status,
    developer_company_branches_id,
    created_at,
    updated_at,
    users_id
)VALUES (
   $1 ,$2, $3, $4, $5, $6, $7, $8
) RETURNING id, rating, review, profiles_id, status, developer_company_branches_id, created_at, updated_at, users_id
`

type CreateDeveloperBranchCompanyReviewParams struct {
	Rating                     string    `json:"rating"`
	Review                     string    `json:"review"`
	ProfilesID                 int64     `json:"profiles_id"`
	Status                     int64     `json:"status"`
	DeveloperCompanyBranchesID int64     `json:"developer_company_branches_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	UsersID                    int64     `json:"users_id"`
}

func (q *Queries) CreateDeveloperBranchCompanyReview(ctx context.Context, arg CreateDeveloperBranchCompanyReviewParams) (DeveloperBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, createDeveloperBranchCompanyReview,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperCompanyBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteDeveloperBranchCompanyReview = `-- name: DeleteDeveloperBranchCompanyReview :exec
DELETE FROM developer_branch_company_reviews
Where id = $1
`

func (q *Queries) DeleteDeveloperBranchCompanyReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteDeveloperBranchCompanyReview, id)
	return err
}

const getAllDeveloperBranchCompanyReview = `-- name: GetAllDeveloperBranchCompanyReview :many
SELECT id, rating, review, profiles_id, status, developer_company_branches_id, created_at, updated_at, users_id FROM developer_branch_company_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllDeveloperBranchCompanyReviewParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperBranchCompanyReview(ctx context.Context, arg GetAllDeveloperBranchCompanyReviewParams) ([]DeveloperBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperBranchCompanyReview, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyReview
	for rows.Next() {
		var i DeveloperBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperCompanyBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDeveloperBranchCompanyReviewByBranchCompanyId = `-- name: GetAllDeveloperBranchCompanyReviewByBranchCompanyId :many
SELECT id, rating, review, profiles_id, status, developer_company_branches_id, created_at, updated_at, users_id FROM developer_branch_company_reviews
Where developer_company_branches_id = $1
LIMIT $2
OFFSET $3
`

type GetAllDeveloperBranchCompanyReviewByBranchCompanyIdParams struct {
	DeveloperCompanyBranchesID int64 `json:"developer_company_branches_id"`
	Limit                      int32 `json:"limit"`
	Offset                     int32 `json:"offset"`
}

func (q *Queries) GetAllDeveloperBranchCompanyReviewByBranchCompanyId(ctx context.Context, arg GetAllDeveloperBranchCompanyReviewByBranchCompanyIdParams) ([]DeveloperBranchCompanyReview, error) {
	rows, err := q.db.Query(ctx, getAllDeveloperBranchCompanyReviewByBranchCompanyId, arg.DeveloperCompanyBranchesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeveloperBranchCompanyReview
	for rows.Next() {
		var i DeveloperBranchCompanyReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.Status,
			&i.DeveloperCompanyBranchesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgDeveloperBranchReviews = `-- name: GetAvgDeveloperBranchReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1)  FROM developer_branch_company_reviews WHERE developer_company_branches_id =  $1
`

func (q *Queries) GetAvgDeveloperBranchReviews(ctx context.Context, developerCompanyBranchesID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgDeveloperBranchReviews, developerCompanyBranchesID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getDeveloperBranchCompanyReview = `-- name: GetDeveloperBranchCompanyReview :one
SELECT id, rating, review, profiles_id, status, developer_company_branches_id, created_at, updated_at, users_id FROM developer_branch_company_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetDeveloperBranchCompanyReview(ctx context.Context, limit int32) (DeveloperBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, getDeveloperBranchCompanyReview, limit)
	var i DeveloperBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const updateDeveloperBranchCompanyReview = `-- name: UpdateDeveloperBranchCompanyReview :one
UPDATE developer_branch_company_reviews
SET  rating = $2,
    review = $3,
    profiles_id = $4,
    status = $5,
    developer_company_branches_id = $6,
    created_at = $7,
    updated_at = $8,
    users_id = $9
Where id = $1
RETURNING id, rating, review, profiles_id, status, developer_company_branches_id, created_at, updated_at, users_id
`

type UpdateDeveloperBranchCompanyReviewParams struct {
	ID                         int64     `json:"id"`
	Rating                     string    `json:"rating"`
	Review                     string    `json:"review"`
	ProfilesID                 int64     `json:"profiles_id"`
	Status                     int64     `json:"status"`
	DeveloperCompanyBranchesID int64     `json:"developer_company_branches_id"`
	CreatedAt                  time.Time `json:"created_at"`
	UpdatedAt                  time.Time `json:"updated_at"`
	UsersID                    int64     `json:"users_id"`
}

func (q *Queries) UpdateDeveloperBranchCompanyReview(ctx context.Context, arg UpdateDeveloperBranchCompanyReviewParams) (DeveloperBranchCompanyReview, error) {
	row := q.db.QueryRow(ctx, updateDeveloperBranchCompanyReview,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.Status,
		arg.DeveloperCompanyBranchesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i DeveloperBranchCompanyReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.Status,
		&i.DeveloperCompanyBranchesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
