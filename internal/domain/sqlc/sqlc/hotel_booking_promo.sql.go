// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_booking_promo.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHotelBookingPromo = `-- name: CreateHotelBookingPromo :one
INSERT INTO hotel_booking_promo(company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at,status)
VALUES($1, $2, $3, $4, $5, $6, $7, $8,$9,$10) RETURNING id, company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at, status
`

type CreateHotelBookingPromoParams struct {
	CompanyTypesID pgtype.Int8        `json:"company_types_id"`
	CompaniesID    pgtype.Int8        `json:"companies_id"`
	IsBranch       pgtype.Bool        `json:"is_branch"`
	RefNo          string             `json:"ref_no"`
	PromoCode      string             `json:"promo_code"`
	PromoStart     time.Time          `json:"promo_start"`
	PromoEnd       time.Time          `json:"promo_end"`
	CreatedAt      time.Time          `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	Status         int64              `json:"status"`
}

func (q *Queries) CreateHotelBookingPromo(ctx context.Context, arg CreateHotelBookingPromoParams) (HotelBookingPromo, error) {
	row := q.db.QueryRow(ctx, createHotelBookingPromo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.RefNo,
		arg.PromoCode,
		arg.PromoStart,
		arg.PromoEnd,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
	)
	var i HotelBookingPromo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.RefNo,
		&i.PromoCode,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getAllHotelBookingPromos = `-- name: GetAllHotelBookingPromos :many
SELECT id, company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at, status FROM hotel_booking_promo
`

func (q *Queries) GetAllHotelBookingPromos(ctx context.Context) ([]HotelBookingPromo, error) {
	rows, err := q.db.Query(ctx, getAllHotelBookingPromos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HotelBookingPromo
	for rows.Next() {
		var i HotelBookingPromo
		if err := rows.Scan(
			&i.ID,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.RefNo,
			&i.PromoCode,
			&i.PromoStart,
			&i.PromoEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingPromoByID = `-- name: GetHotelBookingPromoByID :one
SELECT id, company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at, status FROM hotel_booking_promo WHERE id=$1
`

func (q *Queries) GetHotelBookingPromoByID(ctx context.Context, id int64) (HotelBookingPromo, error) {
	row := q.db.QueryRow(ctx, getHotelBookingPromoByID, id)
	var i HotelBookingPromo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.RefNo,
		&i.PromoCode,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHotelBookingPromo = `-- name: UpdateHotelBookingPromo :one
UPDATE hotel_booking_promo
SET company_types_id = $2,
    companies_id = $3,
    is_branch = $4,
    ref_no = $5,
    promo_code = $6,
    promo_start = $7,
    promo_end = $8,
    updated_at = $9,
    status=$10
WHERE id = $1 RETURNING id, company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at, status
`

type UpdateHotelBookingPromoParams struct {
	ID             int64              `json:"id"`
	CompanyTypesID pgtype.Int8        `json:"company_types_id"`
	CompaniesID    pgtype.Int8        `json:"companies_id"`
	IsBranch       pgtype.Bool        `json:"is_branch"`
	RefNo          string             `json:"ref_no"`
	PromoCode      string             `json:"promo_code"`
	PromoStart     time.Time          `json:"promo_start"`
	PromoEnd       time.Time          `json:"promo_end"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	Status         int64              `json:"status"`
}

func (q *Queries) UpdateHotelBookingPromo(ctx context.Context, arg UpdateHotelBookingPromoParams) (HotelBookingPromo, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingPromo,
		arg.ID,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.RefNo,
		arg.PromoCode,
		arg.PromoStart,
		arg.PromoEnd,
		arg.UpdatedAt,
		arg.Status,
	)
	var i HotelBookingPromo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.RefNo,
		&i.PromoCode,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const updateHotelBookingPromoStatus = `-- name: UpdateHotelBookingPromoStatus :one
UPDATE hotel_booking_promo
SET  
   status=$2
WHERE id = $1 RETURNING id, company_types_id, companies_id, is_branch, ref_no, promo_code, promo_start, promo_end, created_at, updated_at, status
`

type UpdateHotelBookingPromoStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateHotelBookingPromoStatus(ctx context.Context, arg UpdateHotelBookingPromoStatusParams) (HotelBookingPromo, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingPromoStatus, arg.ID, arg.Status)
	var i HotelBookingPromo
	err := row.Scan(
		&i.ID,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.RefNo,
		&i.PromoCode,
		&i.PromoStart,
		&i.PromoEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}
