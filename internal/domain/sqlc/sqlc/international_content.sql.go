// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: international_content.sql

package sqlc

import (
	"context"
)

const createInternationalContent = `-- name: CreateInternationalContent :one
INSERT INTO international_content (
    ref_no,
    section_name,
    content,
    created_by
)VALUES (
    $1, $2, $3, $4
) RETURNING id, ref_no, section_name, content, created_at, created_by
`

type CreateInternationalContentParams struct {
	RefNo       string `json:"ref_no"`
	SectionName string `json:"section_name"`
	Content     string `json:"content"`
	CreatedBy   int64  `json:"created_by"`
}

func (q *Queries) CreateInternationalContent(ctx context.Context, arg CreateInternationalContentParams) (InternationalContent, error) {
	row := q.db.QueryRow(ctx, createInternationalContent,
		arg.RefNo,
		arg.SectionName,
		arg.Content,
		arg.CreatedBy,
	)
	var i InternationalContent
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.SectionName,
		&i.Content,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const deleteInternationalContent = `-- name: DeleteInternationalContent :exec
DELETE FROM international_content
WHERE id = $1
`

func (q *Queries) DeleteInternationalContent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteInternationalContent, id)
	return err
}

const getAllInternationalContent = `-- name: GetAllInternationalContent :many
SELECT id, ref_no, section_name, content, created_at, created_by FROM international_content
`

func (q *Queries) GetAllInternationalContent(ctx context.Context) ([]InternationalContent, error) {
	rows, err := q.db.Query(ctx, getAllInternationalContent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []InternationalContent
	for rows.Next() {
		var i InternationalContent
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.SectionName,
			&i.Content,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInternationalContentById = `-- name: GetInternationalContentById :one
SELECT id, ref_no, section_name, content, created_at, created_by FROM international_content
WHERE id = $1
`

func (q *Queries) GetInternationalContentById(ctx context.Context, id int64) (InternationalContent, error) {
	row := q.db.QueryRow(ctx, getInternationalContentById, id)
	var i InternationalContent
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.SectionName,
		&i.Content,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const updateInternationalContent = `-- name: UpdateInternationalContent :one
UPDATE international_content
SET  ref_no = $2,
    section_name = $3,
    content = $4
WHERE id = $1 RETURNING id, ref_no, section_name, content, created_at, created_by
`

type UpdateInternationalContentParams struct {
	ID          int64  `json:"id"`
	RefNo       string `json:"ref_no"`
	SectionName string `json:"section_name"`
	Content     string `json:"content"`
}

func (q *Queries) UpdateInternationalContent(ctx context.Context, arg UpdateInternationalContentParams) (InternationalContent, error) {
	row := q.db.QueryRow(ctx, updateInternationalContent,
		arg.ID,
		arg.RefNo,
		arg.SectionName,
		arg.Content,
	)
	var i InternationalContent
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.SectionName,
		&i.Content,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
