// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_project_posts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProjectPost = `-- name: AddProjectPost :one
INSERT INTO aqary_project_posts (ref_no, company_types_id, companies_id, is_branch, title, project_id, description, tags, posted_by,is_project_branch,post_schema, is_public, is_verified) VALUES
($1, $2, $3, $4, $5, $6, $7, $8, $9, $10,$11, $12, $13) RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, is_verified
`

type AddProjectPostParams struct {
	RefNo           string      `json:"ref_no"`
	CompanyTypesID  int64       `json:"company_types_id"`
	CompaniesID     int64       `json:"companies_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	Title           string      `json:"title"`
	ProjectID       int64       `json:"project_id"`
	Description     string      `json:"description"`
	Tags            []int64     `json:"tags"`
	PostedBy        int64       `json:"posted_by"`
	IsProjectBranch pgtype.Bool `json:"is_project_branch"`
	PostSchema      string      `json:"post_schema"`
	IsPublic        pgtype.Bool `json:"is_public"`
	IsVerified      pgtype.Bool `json:"is_verified"`
}

func (q *Queries) AddProjectPost(ctx context.Context, arg AddProjectPostParams) (AqaryProjectPost, error) {
	row := q.db.QueryRow(ctx, addProjectPost,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.ProjectID,
		arg.Description,
		arg.Tags,
		arg.PostedBy,
		arg.IsProjectBranch,
		arg.PostSchema,
		arg.IsPublic,
		arg.IsVerified,
	)
	var i AqaryProjectPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.ProjectID,
		&i.IsProjectBranch,
		&i.Description,
		&i.PostSchema,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPublic,
		&i.IsVerified,
	)
	return i, err
}

const deleteProjectPost = `-- name: DeleteProjectPost :exec
DELETE FROM aqary_project_posts WHERE id = $1
`

func (q *Queries) DeleteProjectPost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectPost, id)
	return err
}

const getAllProjectPosts = `-- name: GetAllProjectPosts :many
SELECT app.id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, app.is_verified, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_posts app JOIN users u ON app.posted_by = u.id LIMIT $1 OFFSET $2
`

type GetAllProjectPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllProjectPostsRow struct {
	ID              int64              `json:"id"`
	RefNo           string             `json:"ref_no"`
	CompanyTypesID  int64              `json:"company_types_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	CompaniesID     int64              `json:"companies_id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	Description     string             `json:"description"`
	PostSchema      string             `json:"post_schema"`
	Tags            []int64            `json:"tags"`
	PostedBy        int64              `json:"posted_by"`
	DatePosted      time.Time          `json:"date_posted"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetAllProjectPosts(ctx context.Context, arg GetAllProjectPostsParams) ([]GetAllProjectPostsRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPostsRow
	for rows.Next() {
		var i GetAllProjectPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.Title,
			&i.ProjectID,
			&i.IsProjectBranch,
			&i.Description,
			&i.PostSchema,
			&i.Tags,
			&i.PostedBy,
			&i.DatePosted,
			&i.IsPublic,
			&i.IsVerified,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectPostsByPostedBy = `-- name: GetAllProjectPostsByPostedBy :many
SELECT app.id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, app.is_verified, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_posts app JOIN users u ON app.posted_by = u.id WHERE app.posted_by = $3 LIMIT $1 OFFSET $2
`

type GetAllProjectPostsByPostedByParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	PostedBy int64 `json:"posted_by"`
}

type GetAllProjectPostsByPostedByRow struct {
	ID              int64              `json:"id"`
	RefNo           string             `json:"ref_no"`
	CompanyTypesID  int64              `json:"company_types_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	CompaniesID     int64              `json:"companies_id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	Description     string             `json:"description"`
	PostSchema      string             `json:"post_schema"`
	Tags            []int64            `json:"tags"`
	PostedBy        int64              `json:"posted_by"`
	DatePosted      time.Time          `json:"date_posted"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetAllProjectPostsByPostedBy(ctx context.Context, arg GetAllProjectPostsByPostedByParams) ([]GetAllProjectPostsByPostedByRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPostsByPostedBy, arg.Limit, arg.Offset, arg.PostedBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPostsByPostedByRow
	for rows.Next() {
		var i GetAllProjectPostsByPostedByRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypesID,
			&i.IsBranch,
			&i.CompaniesID,
			&i.Title,
			&i.ProjectID,
			&i.IsProjectBranch,
			&i.Description,
			&i.PostSchema,
			&i.Tags,
			&i.PostedBy,
			&i.DatePosted,
			&i.IsPublic,
			&i.IsVerified,
			&i.ID_2,
			&i.Email,
			&i.Username,
			&i.Password,
			&i.Status,
			&i.RolesID,
			&i.UserTypesID,
			&i.SocialLogin,
			&i.ShowHideDetails,
			&i.ExperienceSince,
			&i.IsVerified_2,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PhoneNumber,
			&i.IsPhoneVerified,
			&i.IsEmailVerified,
			&i.ActiveCompany,
			&i.CountryCode,
			&i.ProfileViews,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllProjectPosts = `-- name: GetCountAllProjectPosts :one
SELECT count(*) FROM aqary_project_posts
`

func (q *Queries) GetCountAllProjectPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllProjectPostsByPostedBy = `-- name: GetCountAllProjectPostsByPostedBy :one
SELECT count(*) FROM aqary_project_posts WHERE posted_by = $1
`

func (q *Queries) GetCountAllProjectPostsByPostedBy(ctx context.Context, postedBy int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectPostsByPostedBy, postedBy)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getProjectPostByID = `-- name: GetProjectPostByID :one
SELECT app.id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, app.is_verified, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, u.is_verified, created_at, updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM aqary_project_posts app JOIN users u ON app.posted_by = u.id WHERE app.id = $1 LIMIT 1
`

type GetProjectPostByIDRow struct {
	ID              int64              `json:"id"`
	RefNo           string             `json:"ref_no"`
	CompanyTypesID  int64              `json:"company_types_id"`
	IsBranch        pgtype.Bool        `json:"is_branch"`
	CompaniesID     int64              `json:"companies_id"`
	Title           string             `json:"title"`
	ProjectID       int64              `json:"project_id"`
	IsProjectBranch pgtype.Bool        `json:"is_project_branch"`
	Description     string             `json:"description"`
	PostSchema      string             `json:"post_schema"`
	Tags            []int64            `json:"tags"`
	PostedBy        int64              `json:"posted_by"`
	DatePosted      time.Time          `json:"date_posted"`
	IsPublic        pgtype.Bool        `json:"is_public"`
	IsVerified      pgtype.Bool        `json:"is_verified"`
	ID_2            int64              `json:"id_2"`
	Email           string             `json:"email"`
	Username        string             `json:"username"`
	Password        string             `json:"password"`
	Status          int64              `json:"status"`
	RolesID         pgtype.Int8        `json:"roles_id"`
	UserTypesID     int64              `json:"user_types_id"`
	SocialLogin     pgtype.Text        `json:"social_login"`
	ShowHideDetails pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince pgtype.Timestamptz `json:"experience_since"`
	IsVerified_2    pgtype.Bool        `json:"is_verified_2"`
	CreatedAt       time.Time          `json:"created_at"`
	UpdatedAt       time.Time          `json:"updated_at"`
	PhoneNumber     pgtype.Text        `json:"phone_number"`
	IsPhoneVerified pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany   pgtype.Int8        `json:"active_company"`
	CountryCode     pgtype.Int8        `json:"country_code"`
	ProfileViews    int64              `json:"profile_views"`
}

func (q *Queries) GetProjectPostByID(ctx context.Context, id int64) (GetProjectPostByIDRow, error) {
	row := q.db.QueryRow(ctx, getProjectPostByID, id)
	var i GetProjectPostByIDRow
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.ProjectID,
		&i.IsProjectBranch,
		&i.Description,
		&i.PostSchema,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPublic,
		&i.IsVerified,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified_2,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const updateProjectPost = `-- name: UpdateProjectPost :one
UPDATE aqary_project_posts SET ref_no = $2 ,company_types_id=$3,companies_id=$4,is_branch=$5,title=$6,project_id=$7,description=$8,tags=$9,posted_by=$10,is_project_branch=$11,post_schema=$12 WHERE id = $1 RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, is_verified
`

type UpdateProjectPostParams struct {
	ID              int64       `json:"id"`
	RefNo           string      `json:"ref_no"`
	CompanyTypesID  int64       `json:"company_types_id"`
	CompaniesID     int64       `json:"companies_id"`
	IsBranch        pgtype.Bool `json:"is_branch"`
	Title           string      `json:"title"`
	ProjectID       int64       `json:"project_id"`
	Description     string      `json:"description"`
	Tags            []int64     `json:"tags"`
	PostedBy        int64       `json:"posted_by"`
	IsProjectBranch pgtype.Bool `json:"is_project_branch"`
	PostSchema      string      `json:"post_schema"`
}

func (q *Queries) UpdateProjectPost(ctx context.Context, arg UpdateProjectPostParams) (AqaryProjectPost, error) {
	row := q.db.QueryRow(ctx, updateProjectPost,
		arg.ID,
		arg.RefNo,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.Title,
		arg.ProjectID,
		arg.Description,
		arg.Tags,
		arg.PostedBy,
		arg.IsProjectBranch,
		arg.PostSchema,
	)
	var i AqaryProjectPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.ProjectID,
		&i.IsProjectBranch,
		&i.Description,
		&i.PostSchema,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPublic,
		&i.IsVerified,
	)
	return i, err
}

const updateProjectPostIsVerified = `-- name: UpdateProjectPostIsVerified :one
UPDATE aqary_project_posts SET is_verified = $2 WHERE id = $1 RETURNING id, ref_no, company_types_id, is_branch, companies_id, title, project_id, is_project_branch, description, post_schema, tags, posted_by, date_posted, is_public, is_verified
`

type UpdateProjectPostIsVerifiedParams struct {
	ID         int64       `json:"id"`
	IsVerified pgtype.Bool `json:"is_verified"`
}

func (q *Queries) UpdateProjectPostIsVerified(ctx context.Context, arg UpdateProjectPostIsVerifiedParams) (AqaryProjectPost, error) {
	row := q.db.QueryRow(ctx, updateProjectPostIsVerified, arg.ID, arg.IsVerified)
	var i AqaryProjectPost
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypesID,
		&i.IsBranch,
		&i.CompaniesID,
		&i.Title,
		&i.ProjectID,
		&i.IsProjectBranch,
		&i.Description,
		&i.PostSchema,
		&i.Tags,
		&i.PostedBy,
		&i.DatePosted,
		&i.IsPublic,
		&i.IsVerified,
	)
	return i, err
}
