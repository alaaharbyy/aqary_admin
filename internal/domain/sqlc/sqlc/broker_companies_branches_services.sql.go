// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_companies_branches_services.sql

package sqlc

import (
	"context"
	"time"
)

const createBrokerCompaniesBranchesServices = `-- name: CreateBrokerCompaniesBranchesServices :one
INSERT INTO broker_companies_branches_services (
    broker_companies_branches_id,
    services_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4
) RETURNING id, broker_companies_branches_id, services_id, created_at, updated_at
`

type CreateBrokerCompaniesBranchesServicesParams struct {
	BrokerCompaniesBranchesID int64     `json:"broker_companies_branches_id"`
	ServicesID                int64     `json:"services_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) CreateBrokerCompaniesBranchesServices(ctx context.Context, arg CreateBrokerCompaniesBranchesServicesParams) (BrokerCompaniesBranchesService, error) {
	row := q.db.QueryRow(ctx, createBrokerCompaniesBranchesServices,
		arg.BrokerCompaniesBranchesID,
		arg.ServicesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BrokerCompaniesBranchesService
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllBrokerCompaniesBranchesServicesByCompanyId = `-- name: DeleteAllBrokerCompaniesBranchesServicesByCompanyId :exec

DELETE FROM broker_companies_branches_services 
WHERE broker_companies_branches_id = $1
`

// -- name: GetAllMainServicesAndServicesByBrokerCompanyBranchId :many
// SELECT
//
//	main_services.id AS main_services_id,
//	main_services.title AS main_services,
//	services.id AS services_id,
//	services.title AS services
//
// FROM main_services
// INNER JOIN services ON services.main_services_id = main_services.id AND (services.status != 5 AND services.status != 6)
// INNER JOIN broker_companies_branches_services ON broker_companies_branches_services.services_id = services.id AND broker_companies_branches_services.broker_companies_branches_id = $1
// WHERE main_services.status != 5 AND main_services.status != 6
// ORDER BY main_services_id DESC, services_id DESC;
func (q *Queries) DeleteAllBrokerCompaniesBranchesServicesByCompanyId(ctx context.Context, brokerCompaniesBranchesID int64) error {
	_, err := q.db.Exec(ctx, deleteAllBrokerCompaniesBranchesServicesByCompanyId, brokerCompaniesBranchesID)
	return err
}

const deleteBrokerCompaniesBranchesServices = `-- name: DeleteBrokerCompaniesBranchesServices :exec
DELETE FROM broker_companies_branches_services
Where id = $1
`

func (q *Queries) DeleteBrokerCompaniesBranchesServices(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompaniesBranchesServices, id)
	return err
}

const getAllBrokerCompaniesBranchesServices = `-- name: GetAllBrokerCompaniesBranchesServices :many
SELECT id, broker_companies_branches_id, services_id, created_at, updated_at FROM broker_companies_branches_services
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompaniesBranchesServicesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompaniesBranchesServices(ctx context.Context, arg GetAllBrokerCompaniesBranchesServicesParams) ([]BrokerCompaniesBranchesService, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompaniesBranchesServices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompaniesBranchesService
	for rows.Next() {
		var i BrokerCompaniesBranchesService
		if err := rows.Scan(
			&i.ID,
			&i.BrokerCompaniesBranchesID,
			&i.ServicesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompaniesBranchesServices = `-- name: GetBrokerCompaniesBranchesServices :one
SELECT id, broker_companies_branches_id, services_id, created_at, updated_at FROM broker_companies_branches_services 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompaniesBranchesServices(ctx context.Context, limit int32) (BrokerCompaniesBranchesService, error) {
	row := q.db.QueryRow(ctx, getBrokerCompaniesBranchesServices, limit)
	var i BrokerCompaniesBranchesService
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBrokerCompaniesBranchesServicesByBrokerCompanyBranchId = `-- name: GetBrokerCompaniesBranchesServicesByBrokerCompanyBranchId :one
SELECT id, broker_companies_branches_id, services_id, created_at, updated_at FROM broker_companies_branches_services
WHERE broker_companies_branches_id = $1
`

func (q *Queries) GetBrokerCompaniesBranchesServicesByBrokerCompanyBranchId(ctx context.Context, brokerCompaniesBranchesID int64) (BrokerCompaniesBranchesService, error) {
	row := q.db.QueryRow(ctx, getBrokerCompaniesBranchesServicesByBrokerCompanyBranchId, brokerCompaniesBranchesID)
	var i BrokerCompaniesBranchesService
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBrokerCompaniesBranchesServicesByServiceId = `-- name: GetBrokerCompaniesBranchesServicesByServiceId :many
SELECT id, broker_companies_branches_id, services_id, created_at, updated_at FROM broker_companies_branches_services 
WHERE $3::bigint = ANY(services_id) LIMIT $1 OFFSET $2
`

type GetBrokerCompaniesBranchesServicesByServiceIdParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	Column3 int64 `json:"column_3"`
}

func (q *Queries) GetBrokerCompaniesBranchesServicesByServiceId(ctx context.Context, arg GetBrokerCompaniesBranchesServicesByServiceIdParams) ([]BrokerCompaniesBranchesService, error) {
	rows, err := q.db.Query(ctx, getBrokerCompaniesBranchesServicesByServiceId, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompaniesBranchesService
	for rows.Next() {
		var i BrokerCompaniesBranchesService
		if err := rows.Scan(
			&i.ID,
			&i.BrokerCompaniesBranchesID,
			&i.ServicesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountBrokerCompaniesBranchesServicesByServiceId = `-- name: GetCountBrokerCompaniesBranchesServicesByServiceId :one
SELECT Count(*) FROM broker_companies_branches_services 
WHERE $1::bigint = ANY(services_id)
`

func (q *Queries) GetCountBrokerCompaniesBranchesServicesByServiceId(ctx context.Context, dollar_1 int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerCompaniesBranchesServicesByServiceId, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBrokerCompaniesBranchesServices = `-- name: UpdateBrokerCompaniesBranchesServices :one
UPDATE broker_companies_branches_services
SET  broker_companies_branches_id = $2,
    services_id = $3
Where id = $1
RETURNING id, broker_companies_branches_id, services_id, created_at, updated_at
`

type UpdateBrokerCompaniesBranchesServicesParams struct {
	ID                        int64 `json:"id"`
	BrokerCompaniesBranchesID int64 `json:"broker_companies_branches_id"`
	ServicesID                int64 `json:"services_id"`
}

func (q *Queries) UpdateBrokerCompaniesBranchesServices(ctx context.Context, arg UpdateBrokerCompaniesBranchesServicesParams) (BrokerCompaniesBranchesService, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompaniesBranchesServices, arg.ID, arg.BrokerCompaniesBranchesID, arg.ServicesID)
	var i BrokerCompaniesBranchesService
	err := row.Scan(
		&i.ID,
		&i.BrokerCompaniesBranchesID,
		&i.ServicesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
