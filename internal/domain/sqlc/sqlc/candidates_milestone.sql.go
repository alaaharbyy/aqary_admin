// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: candidates_milestone.sql

package sqlc

import (
	"context"
	"time"
)

const createCandidateMilstone = `-- name: CreateCandidateMilstone :one
INSERT INTO candidates_milestone (
    candidates_id,
    application_status,
    status_date
    ) VALUES ($1,$2,$3) 
    returning id, candidates_id, application_status, status_date
`

type CreateCandidateMilstoneParams struct {
	CandidatesID      int64     `json:"candidates_id"`
	ApplicationStatus int64     `json:"application_status"`
	StatusDate        time.Time `json:"status_date"`
}

func (q *Queries) CreateCandidateMilstone(ctx context.Context, arg CreateCandidateMilstoneParams) (CandidatesMilestone, error) {
	row := q.db.QueryRow(ctx, createCandidateMilstone, arg.CandidatesID, arg.ApplicationStatus, arg.StatusDate)
	var i CandidatesMilestone
	err := row.Scan(
		&i.ID,
		&i.CandidatesID,
		&i.ApplicationStatus,
		&i.StatusDate,
	)
	return i, err
}

const getAllCandidateMilstonesByCandId = `-- name: GetAllCandidateMilstonesByCandId :many
select id, candidates_id, application_status, status_date from candidates_milestone where candidates_id=$1
`

func (q *Queries) GetAllCandidateMilstonesByCandId(ctx context.Context, candidatesID int64) ([]CandidatesMilestone, error) {
	rows, err := q.db.Query(ctx, getAllCandidateMilstonesByCandId, candidatesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatesMilestone
	for rows.Next() {
		var i CandidatesMilestone
		if err := rows.Scan(
			&i.ID,
			&i.CandidatesID,
			&i.ApplicationStatus,
			&i.StatusDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCandidateMilstoneById = `-- name: GetCandidateMilstoneById :one
select id, candidates_id, application_status, status_date from candidates_milestone where id=$1
`

func (q *Queries) GetCandidateMilstoneById(ctx context.Context, id int64) (CandidatesMilestone, error) {
	row := q.db.QueryRow(ctx, getCandidateMilstoneById, id)
	var i CandidatesMilestone
	err := row.Scan(
		&i.ID,
		&i.CandidatesID,
		&i.ApplicationStatus,
		&i.StatusDate,
	)
	return i, err
}
