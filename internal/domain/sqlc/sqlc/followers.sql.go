// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: followers.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFollower = `-- name: CreateFollower :one
INSERT INTO followers (user_id, followers_id, follow_date) VALUES ($1, $2, $3) RETURNING id, user_id, followers_id, follow_date, follower_company_type, follower_is_branch
`

type CreateFollowerParams struct {
	UserID      int64     `json:"user_id"`
	FollowersID int64     `json:"followers_id"`
	FollowDate  time.Time `json:"follow_date"`
}

func (q *Queries) CreateFollower(ctx context.Context, arg CreateFollowerParams) (Follower, error) {
	row := q.db.QueryRow(ctx, createFollower, arg.UserID, arg.FollowersID, arg.FollowDate)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FollowersID,
		&i.FollowDate,
		&i.FollowerCompanyType,
		&i.FollowerIsBranch,
	)
	return i, err
}

const deleteFollowerByID = `-- name: DeleteFollowerByID :exec
DELETE FROM followers
WHERE id = $1
`

func (q *Queries) DeleteFollowerByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFollowerByID, id)
	return err
}

const deleteFollowerByUserAndFollowersID = `-- name: DeleteFollowerByUserAndFollowersID :exec
DELETE FROM followers
WHERE user_id = $1
AND followers_id = $2
`

type DeleteFollowerByUserAndFollowersIDParams struct {
	UserID      int64 `json:"user_id"`
	FollowersID int64 `json:"followers_id"`
}

func (q *Queries) DeleteFollowerByUserAndFollowersID(ctx context.Context, arg DeleteFollowerByUserAndFollowersIDParams) error {
	_, err := q.db.Exec(ctx, deleteFollowerByUserAndFollowersID, arg.UserID, arg.FollowersID)
	return err
}

const deleteFollowersByUserId = `-- name: DeleteFollowersByUserId :exec
DELETE FROM followers
WHERE user_id = $1
`

func (q *Queries) DeleteFollowersByUserId(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteFollowersByUserId, userID)
	return err
}

const deleteFollowingByFollowersId = `-- name: DeleteFollowingByFollowersId :exec
DELETE FROM followers
WHERE followers_id = $1
`

func (q *Queries) DeleteFollowingByFollowersId(ctx context.Context, followersID int64) error {
	_, err := q.db.Exec(ctx, deleteFollowingByFollowersId, followersID)
	return err
}

const getAllFollowers = `-- name: GetAllFollowers :many
SELECT u.id,
        p.first_name,
       cu.company_id,
    --    cu.company_type,
    --    cu.is_branch,
       ct.title AS company_type_title,
    ct.title_ar AS company_type_title_ar,
       (
           SELECT COUNT(*)
           FROM social_connections sc
           WHERE sc.user_id = u.id
       ) AS total_social_connections
FROM followers f
JOIN users u ON f.followers_id = u.id
JOIN profiles p ON u.profiles_id = p.id
LEFT JOIN company_users cu ON u.id = cu.users_id
LEFT JOIN company_types ct ON cu.company_type = ct.id
WHERE f.user_id = $1 LIMIT $2 OFFSET $3
`

type GetAllFollowersParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllFollowersRow struct {
	ID                     int64       `json:"id"`
	FirstName              string      `json:"first_name"`
	CompanyID              pgtype.Int8 `json:"company_id"`
	CompanyTypeTitle       pgtype.Text `json:"company_type_title"`
	CompanyTypeTitleAr     pgtype.Text `json:"company_type_title_ar"`
	TotalSocialConnections int64       `json:"total_social_connections"`
}

func (q *Queries) GetAllFollowers(ctx context.Context, arg GetAllFollowersParams) ([]GetAllFollowersRow, error) {
	rows, err := q.db.Query(ctx, getAllFollowers, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFollowersRow
	for rows.Next() {
		var i GetAllFollowersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.CompanyID,
			&i.CompanyTypeTitle,
			&i.CompanyTypeTitleAr,
			&i.TotalSocialConnections,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFollowing = `-- name: GetAllFollowing :many
SELECT u.id,
        p.first_name,
       cu.company_id,
    --    cu.company_type,
    --    cu.is_branch,
       ct.title AS company_type_title,
    ct.title_ar AS company_type_title_ar,
       (
           SELECT COUNT(*)
           FROM social_connections sc
           WHERE sc.user_id = u.id
       ) AS total_social_connections
FROM followers f
JOIN users u ON f.user_id = u.id
JOIN profiles p ON u.profiles_id = p.id
LEFT JOIN company_users cu ON u.id = cu.users_id
LEFT JOIN company_types ct ON cu.company_type = ct.id
WHERE f.followers_id = $1 LIMIT $2 OFFSET $3
`

type GetAllFollowingParams struct {
	FollowersID int64 `json:"followers_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type GetAllFollowingRow struct {
	ID                     int64       `json:"id"`
	FirstName              string      `json:"first_name"`
	CompanyID              pgtype.Int8 `json:"company_id"`
	CompanyTypeTitle       pgtype.Text `json:"company_type_title"`
	CompanyTypeTitleAr     pgtype.Text `json:"company_type_title_ar"`
	TotalSocialConnections int64       `json:"total_social_connections"`
}

func (q *Queries) GetAllFollowing(ctx context.Context, arg GetAllFollowingParams) ([]GetAllFollowingRow, error) {
	rows, err := q.db.Query(ctx, getAllFollowing, arg.FollowersID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFollowingRow
	for rows.Next() {
		var i GetAllFollowingRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.CompanyID,
			&i.CompanyTypeTitle,
			&i.CompanyTypeTitleAr,
			&i.TotalSocialConnections,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllFollowers = `-- name: GetCountAllFollowers :one
SELECT COUNT(*) AS follower_count
FROM followers
WHERE followers.followers_id = $1 LIMIT 1
`

func (q *Queries) GetCountAllFollowers(ctx context.Context, followersID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllFollowers, followersID)
	var follower_count int64
	err := row.Scan(&follower_count)
	return follower_count, err
}

const getCountAllFollowing = `-- name: GetCountAllFollowing :one
SELECT COUNT(*) AS following_count
FROM followers
WHERE followers.user_id = $1 LIMIT 1
`

func (q *Queries) GetCountAllFollowing(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllFollowing, userID)
	var following_count int64
	err := row.Scan(&following_count)
	return following_count, err
}

const getSingleFollower = `-- name: GetSingleFollower :one
select id, user_id, followers_id, follow_date, follower_company_type, follower_is_branch from followers where user_id = $1 AND followers_id = $2 LIMIT 1
`

type GetSingleFollowerParams struct {
	UserID      int64 `json:"user_id"`
	FollowersID int64 `json:"followers_id"`
}

func (q *Queries) GetSingleFollower(ctx context.Context, arg GetSingleFollowerParams) (Follower, error) {
	row := q.db.QueryRow(ctx, getSingleFollower, arg.UserID, arg.FollowersID)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FollowersID,
		&i.FollowDate,
		&i.FollowerCompanyType,
		&i.FollowerIsBranch,
	)
	return i, err
}
