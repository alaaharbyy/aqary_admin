// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_owner_properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialOwnerPropertyMedia = `-- name: CreateIndustrialOwnerPropertyMedia :one
INSERT INTO industrial_owner_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    industrial_owner_properties_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch
`

type CreateIndustrialOwnerPropertyMediaParams struct {
	ImageUrl                    []string    `json:"image_url"`
	Image360Url                 []string    `json:"image360_url"`
	VideoUrl                    []string    `json:"video_url"`
	PanaromaUrl                 []string    `json:"panaroma_url"`
	MainMediaSection            string      `json:"main_media_section"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrialOwnerPropertyMedia(ctx context.Context, arg CreateIndustrialOwnerPropertyMediaParams) (IndustrialOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createIndustrialOwnerPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialOwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrialOwnerPropertyMedia = `-- name: DeleteIndustrialOwnerPropertyMedia :exec
DELETE FROM industrial_owner_properties_media
Where id = $1
`

func (q *Queries) DeleteIndustrialOwnerPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialOwnerPropertyMedia, id)
	return err
}

const getAllIndustrialOwnerPropertyMedia = `-- name: GetAllIndustrialOwnerPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch FROM industrial_owner_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialOwnerPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialOwnerPropertyMedia(ctx context.Context, arg GetAllIndustrialOwnerPropertyMediaParams) ([]IndustrialOwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialOwnerPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialOwnerPropertiesMedium
	for rows.Next() {
		var i IndustrialOwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialOwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialOwnerPropertyMediaByPropertyId = `-- name: GetAllIndustrialOwnerPropertyMediaByPropertyId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch FROM industrial_owner_properties_media
WHERE industrial_owner_properties_id = $1 ORDER BY id
`

func (q *Queries) GetAllIndustrialOwnerPropertyMediaByPropertyId(ctx context.Context, industrialOwnerPropertiesID int64) ([]IndustrialOwnerPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialOwnerPropertyMediaByPropertyId, industrialOwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialOwnerPropertiesMedium
	for rows.Next() {
		var i IndustrialOwnerPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialOwnerPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrialOwnerPropertyMedia = `-- name: GetIndustrialOwnerPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch FROM industrial_owner_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialOwnerPropertyMedia(ctx context.Context, limit int32) (IndustrialOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrialOwnerPropertyMedia, limit)
	var i IndustrialOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialOwnerPropertyMediaByPropertyIdAndMediaSection = `-- name: GetIndustrialOwnerPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch FROM industrial_owner_properties_media
WHERE industrial_owner_properties_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetIndustrialOwnerPropertyMediaByPropertyIdAndMediaSectionParams struct {
	IndustrialOwnerPropertiesID int64  `json:"industrial_owner_properties_id"`
	Lower                       string `json:"lower"`
}

func (q *Queries) GetIndustrialOwnerPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetIndustrialOwnerPropertyMediaByPropertyIdAndMediaSectionParams) (IndustrialOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrialOwnerPropertyMediaByPropertyIdAndMediaSection, arg.IndustrialOwnerPropertiesID, arg.Lower)
	var i IndustrialOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateIndustrialOwnerPropertyMedia = `-- name: UpdateIndustrialOwnerPropertyMedia :one
UPDATE industrial_owner_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    industrial_owner_properties_id = $7,
    created_at = $8,
    updated_at = $9,
     is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_owner_properties_id, created_at, updated_at, is_branch
`

type UpdateIndustrialOwnerPropertyMediaParams struct {
	ID                          int64       `json:"id"`
	ImageUrl                    []string    `json:"image_url"`
	Image360Url                 []string    `json:"image360_url"`
	VideoUrl                    []string    `json:"video_url"`
	PanaromaUrl                 []string    `json:"panaroma_url"`
	MainMediaSection            string      `json:"main_media_section"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrialOwnerPropertyMedia(ctx context.Context, arg UpdateIndustrialOwnerPropertyMediaParams) (IndustrialOwnerPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateIndustrialOwnerPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialOwnerPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialOwnerPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialOwnerPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
