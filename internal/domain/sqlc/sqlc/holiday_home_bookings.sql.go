// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_home_bookings.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayHomeBooking = `-- name: CreateHolidayHomeBooking :one
INSERT INTO holiday_home_bookings (
    booking_ref_no,
    book_date,
    holiday_home_id,  
    check_in,
    check_out,
    status,
    customer_name,
    portal_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id
`

type CreateHolidayHomeBookingParams struct {
	BookingRefNo  string             `json:"booking_ref_no"`
	BookDate      time.Time          `json:"book_date"`
	HolidayHomeID int64              `json:"holiday_home_id"`
	CheckIn       pgtype.Timestamptz `json:"check_in"`
	CheckOut      pgtype.Timestamptz `json:"check_out"`
	Status        int64              `json:"status"`
	CustomerName  string             `json:"customer_name"`
	PortalID      pgtype.Int8        `json:"portal_id"`
}

func (q *Queries) CreateHolidayHomeBooking(ctx context.Context, arg CreateHolidayHomeBookingParams) (HolidayHomeBooking, error) {
	row := q.db.QueryRow(ctx, createHolidayHomeBooking,
		arg.BookingRefNo,
		arg.BookDate,
		arg.HolidayHomeID,
		arg.CheckIn,
		arg.CheckOut,
		arg.Status,
		arg.CustomerName,
		arg.PortalID,
	)
	var i HolidayHomeBooking
	err := row.Scan(
		&i.ID,
		&i.BookingRefNo,
		&i.BookDate,
		&i.HolidayHomeID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Status,
		&i.CustomerName,
		&i.PortalID,
	)
	return i, err
}

const deleteHolidayHomeBookings = `-- name: DeleteHolidayHomeBookings :exec


DELETE FROM holiday_home_bookings
Where id = $1
`

// -- name: UpdateHolidayHomeBookings :one
// UPDATE holiday_home_bookings
// SET  booking_ref_no = $2,
//
//	book_date = $3,
//	holiday_room_id = $4,
//	check_in = $5,
//	check_out = $6,
//	holiday_portals_id = $7,
//	status = $8
//
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteHolidayHomeBookings(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayHomeBookings, id)
	return err
}

const getAllCountHolidayHomeBooking = `-- name: GetAllCountHolidayHomeBooking :one
SELECT COUNT(*) FROM holiday_home_bookings
`

func (q *Queries) GetAllCountHolidayHomeBooking(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomeBooking)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllCountHolidayHomeBookingByHolidayId = `-- name: GetAllCountHolidayHomeBookingByHolidayId :one
SELECT COUNT(*) FROM holiday_home_bookings
where holiday_home_id = $1
`

func (q *Queries) GetAllCountHolidayHomeBookingByHolidayId(ctx context.Context, holidayHomeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAllCountHolidayHomeBookingByHolidayId, holidayHomeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllHolidayHomeBooking = `-- name: GetAllHolidayHomeBooking :many
SELECT id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id FROM holiday_home_bookings  ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllHolidayHomeBookingParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayHomeBooking(ctx context.Context, arg GetAllHolidayHomeBookingParams) ([]HolidayHomeBooking, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeBooking, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeBooking
	for rows.Next() {
		var i HolidayHomeBooking
		if err := rows.Scan(
			&i.ID,
			&i.BookingRefNo,
			&i.BookDate,
			&i.HolidayHomeID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.CustomerName,
			&i.PortalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeBookingByHolidayId = `-- name: GetAllHolidayHomeBookingByHolidayId :many
SELECT id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id FROM holiday_home_bookings 
where holiday_home_id = $3
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

type GetAllHolidayHomeBookingByHolidayIdParams struct {
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
	HolidayHomeID int64 `json:"holiday_home_id"`
}

func (q *Queries) GetAllHolidayHomeBookingByHolidayId(ctx context.Context, arg GetAllHolidayHomeBookingByHolidayIdParams) ([]HolidayHomeBooking, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeBookingByHolidayId, arg.Limit, arg.Offset, arg.HolidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeBooking
	for rows.Next() {
		var i HolidayHomeBooking
		if err := rows.Scan(
			&i.ID,
			&i.BookingRefNo,
			&i.BookDate,
			&i.HolidayHomeID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.CustomerName,
			&i.PortalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeBookingWithoutPg = `-- name: GetAllHolidayHomeBookingWithoutPg :many
SELECT id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id FROM holiday_home_bookings  ORDER BY id desc
`

func (q *Queries) GetAllHolidayHomeBookingWithoutPg(ctx context.Context) ([]HolidayHomeBooking, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeBookingWithoutPg)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeBooking
	for rows.Next() {
		var i HolidayHomeBooking
		if err := rows.Scan(
			&i.ID,
			&i.BookingRefNo,
			&i.BookDate,
			&i.HolidayHomeID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.CustomerName,
			&i.PortalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeBookingWithoutPgByHolidayId = `-- name: GetAllHolidayHomeBookingWithoutPgByHolidayId :many
SELECT id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id FROM holiday_home_bookings 
where holiday_home_id = $1 ORDER BY id DESC
`

func (q *Queries) GetAllHolidayHomeBookingWithoutPgByHolidayId(ctx context.Context, holidayHomeID int64) ([]HolidayHomeBooking, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeBookingWithoutPgByHolidayId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayHomeBooking
	for rows.Next() {
		var i HolidayHomeBooking
		if err := rows.Scan(
			&i.ID,
			&i.BookingRefNo,
			&i.BookDate,
			&i.HolidayHomeID,
			&i.CheckIn,
			&i.CheckOut,
			&i.Status,
			&i.CustomerName,
			&i.PortalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHolidayHomeBookings = `-- name: GetHolidayHomeBookings :one
SELECT id, booking_ref_no, book_date, holiday_home_id, check_in, check_out, status, customer_name, portal_id FROM holiday_home_bookings
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetHolidayHomeBookings(ctx context.Context, id int64) (HolidayHomeBooking, error) {
	row := q.db.QueryRow(ctx, getHolidayHomeBookings, id)
	var i HolidayHomeBooking
	err := row.Scan(
		&i.ID,
		&i.BookingRefNo,
		&i.BookDate,
		&i.HolidayHomeID,
		&i.CheckIn,
		&i.CheckOut,
		&i.Status,
		&i.CustomerName,
		&i.PortalID,
	)
	return i, err
}
