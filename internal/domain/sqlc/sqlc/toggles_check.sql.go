// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: toggles_check.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToggleCheck = `-- name: CreateToggleCheck :one
INSERT INTO "toggles_check" (
    "entity_type",
    "entity_id",
    "status_type",
    "start_date",
    "end_date",
    "company_id",
    "doc",
    "created_at",
    "updated_at"
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, DEFAULT, DEFAULT
) RETURNING id, entity_type, entity_id, status_type, start_date, end_date, company_id, doc, created_at, updated_at
`

type CreateToggleCheckParams struct {
	EntityType int64              `json:"entity_type"`
	EntityID   int64              `json:"entity_id"`
	StatusType int32              `json:"status_type"`
	StartDate  time.Time          `json:"start_date"`
	EndDate    pgtype.Timestamptz `json:"end_date"`
	CompanyID  pgtype.Int8        `json:"company_id"`
	Doc        []string           `json:"doc"`
}

func (q *Queries) CreateToggleCheck(ctx context.Context, arg CreateToggleCheckParams) (TogglesCheck, error) {
	row := q.db.QueryRow(ctx, createToggleCheck,
		arg.EntityType,
		arg.EntityID,
		arg.StatusType,
		arg.StartDate,
		arg.EndDate,
		arg.CompanyID,
		arg.Doc,
	)
	var i TogglesCheck
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.StatusType,
		&i.StartDate,
		&i.EndDate,
		&i.CompanyID,
		&i.Doc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getToggleCheckByEntityIDAndEntityTypeID = `-- name: GetToggleCheckByEntityIDAndEntityTypeID :one
SELECT id, entity_type, entity_id, status_type, start_date, end_date, company_id, doc, created_at, updated_at from toggles_check
WHERE entity_id = $1 AND entity_type = $2
`

type GetToggleCheckByEntityIDAndEntityTypeIDParams struct {
	EntityID   int64 `json:"entity_id"`
	EntityType int64 `json:"entity_type"`
}

func (q *Queries) GetToggleCheckByEntityIDAndEntityTypeID(ctx context.Context, arg GetToggleCheckByEntityIDAndEntityTypeIDParams) (TogglesCheck, error) {
	row := q.db.QueryRow(ctx, getToggleCheckByEntityIDAndEntityTypeID, arg.EntityID, arg.EntityType)
	var i TogglesCheck
	err := row.Scan(
		&i.ID,
		&i.EntityType,
		&i.EntityID,
		&i.StatusType,
		&i.StartDate,
		&i.EndDate,
		&i.CompanyID,
		&i.Doc,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
