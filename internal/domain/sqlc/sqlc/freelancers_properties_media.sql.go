// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: freelancers_properties_media.sql

package sqlc

import (
	"context"
	"time"
)

const createFreelancerPropertyMedia = `-- name: CreateFreelancerPropertyMedia :one
INSERT INTO freelancers_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    freelancers_properties_id,
    created_at, 
    updated_at
)VALUES (
    $1, $2, $3,$4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type CreateFreelancerPropertyMediaParams struct {
	ImageUrl                []string  `json:"image_url"`
	Image360Url             []string  `json:"image360_url"`
	VideoUrl                []string  `json:"video_url"`
	PanaromaUrl             []string  `json:"panaroma_url"`
	MainMediaSection        string    `json:"main_media_section"`
	FreelancersPropertiesID int64     `json:"freelancers_properties_id"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
}

func (q *Queries) CreateFreelancerPropertyMedia(ctx context.Context, arg CreateFreelancerPropertyMediaParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createFreelancerPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.FreelancersPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteFreelancerPropertyMedia = `-- name: DeleteFreelancerPropertyMedia :exec
DELETE FROM freelancers_properties_media
Where id = $1
`

func (q *Queries) DeleteFreelancerPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFreelancerPropertyMedia, id)
	return err
}

const deleteOneFreelancerPropertyMediaImage360ByIdAndFile = `-- name: DeleteOneFreelancerPropertyMediaImage360ByIdAndFile :one
UPDATE freelancers_properties_media
SET image360_url = array_remove(image360_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type DeleteOneFreelancerPropertyMediaImage360ByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneFreelancerPropertyMediaImage360ByIdAndFile(ctx context.Context, arg DeleteOneFreelancerPropertyMediaImage360ByIdAndFileParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneFreelancerPropertyMediaImage360ByIdAndFile, arg.ID, arg.ArrayRemove)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneFreelancerPropertyMediaImagesByIdAndFile = `-- name: DeleteOneFreelancerPropertyMediaImagesByIdAndFile :one
UPDATE freelancers_properties_media
SET image_url = array_remove(image_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type DeleteOneFreelancerPropertyMediaImagesByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneFreelancerPropertyMediaImagesByIdAndFile(ctx context.Context, arg DeleteOneFreelancerPropertyMediaImagesByIdAndFileParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneFreelancerPropertyMediaImagesByIdAndFile, arg.ID, arg.ArrayRemove)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneFreelancerPropertyMediaParanomaByIdAndFile = `-- name: DeleteOneFreelancerPropertyMediaParanomaByIdAndFile :one
UPDATE freelancers_properties_media
SET panaroma_url = array_remove(panaroma_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type DeleteOneFreelancerPropertyMediaParanomaByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneFreelancerPropertyMediaParanomaByIdAndFile(ctx context.Context, arg DeleteOneFreelancerPropertyMediaParanomaByIdAndFileParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneFreelancerPropertyMediaParanomaByIdAndFile, arg.ID, arg.ArrayRemove)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneFreelancerPropertyMediaVideoByIdAndFile = `-- name: DeleteOneFreelancerPropertyMediaVideoByIdAndFile :one
UPDATE freelancers_properties_media
SET video_url = array_remove(video_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type DeleteOneFreelancerPropertyMediaVideoByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneFreelancerPropertyMediaVideoByIdAndFile(ctx context.Context, arg DeleteOneFreelancerPropertyMediaVideoByIdAndFileParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneFreelancerPropertyMediaVideoByIdAndFile, arg.ID, arg.ArrayRemove)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllFreelanceMediaByUnitId = `-- name: GetAllFreelanceMediaByUnitId :many
SELECT id, image_url, 
image360_url, video_url,
 panaroma_url, main_media_section,
  freelancers_properties_id, 
   created_at, updated_at 
   FROM freelancers_properties_media 
WHERE freelancers_properties_id  = $1
`

func (q *Queries) GetAllFreelanceMediaByUnitId(ctx context.Context, freelancersPropertiesID int64) ([]FreelancersPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllFreelanceMediaByUnitId, freelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesMedium
	for rows.Next() {
		var i FreelancersPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.FreelancersPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFreelancerPropertyMedia = `-- name: GetAllFreelancerPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media 
ORDER By id
LIMIT $1
OFFSET $2
`

type GetAllFreelancerPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllFreelancerPropertyMedia(ctx context.Context, arg GetAllFreelancerPropertyMediaParams) ([]FreelancersPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesMedium
	for rows.Next() {
		var i FreelancersPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.FreelancersPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFreelancerPropertyMediaByid = `-- name: GetAllFreelancerPropertyMediaByid :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media WHERE freelancers_properties_id=$1
`

func (q *Queries) GetAllFreelancerPropertyMediaByid(ctx context.Context, freelancersPropertiesID int64) ([]FreelancersPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllFreelancerPropertyMediaByid, freelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesMedium
	for rows.Next() {
		var i FreelancersPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.FreelancersPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFreelancersPropertiesByMainMediaSectionAndId = `-- name: GetAllFreelancersPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media
 WHERE main_media_section = $2 AND freelancers_properties_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at From x
`

type GetAllFreelancersPropertiesByMainMediaSectionAndIdParams struct {
	FreelancersPropertiesID int64  `json:"freelancers_properties_id"`
	MainMediaSection        string `json:"main_media_section"`
}

type GetAllFreelancersPropertiesByMainMediaSectionAndIdRow struct {
	ID                      int64     `json:"id"`
	ImageUrl                []string  `json:"image_url"`
	Image360Url             []string  `json:"image360_url"`
	VideoUrl                []string  `json:"video_url"`
	PanaromaUrl             []string  `json:"panaroma_url"`
	MainMediaSection        string    `json:"main_media_section"`
	FreelancersPropertiesID int64     `json:"freelancers_properties_id"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
}

func (q *Queries) GetAllFreelancersPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllFreelancersPropertiesByMainMediaSectionAndIdParams) (GetAllFreelancersPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllFreelancersPropertiesByMainMediaSectionAndId, arg.FreelancersPropertiesID, arg.MainMediaSection)
	var i GetAllFreelancersPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllFreelancersPropertiesMainMediaSectionById = `-- name: GetAllFreelancersPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM freelancers_properties_media
 WHERE freelancers_properties_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllFreelancersPropertiesMainMediaSectionById(ctx context.Context, freelancersPropertiesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllFreelancersPropertiesMainMediaSectionById, freelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancerPropertyMedia = `-- name: GetFreelancerPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetFreelancerPropertyMedia(ctx context.Context, limit int32) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyMedia, limit)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFreelancerPropertyMediaByFreelancerPropertyId = `-- name: GetFreelancerPropertyMediaByFreelancerPropertyId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media 
WHERE freelancers_properties_id = $2 LIMIT $1
`

type GetFreelancerPropertyMediaByFreelancerPropertyIdParams struct {
	Limit                   int32 `json:"limit"`
	FreelancersPropertiesID int64 `json:"freelancers_properties_id"`
}

func (q *Queries) GetFreelancerPropertyMediaByFreelancerPropertyId(ctx context.Context, arg GetFreelancerPropertyMediaByFreelancerPropertyIdParams) ([]FreelancersPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getFreelancerPropertyMediaByFreelancerPropertyId, arg.Limit, arg.FreelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesMedium
	for rows.Next() {
		var i FreelancersPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.FreelancersPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancerPropertyMediaByProjectId = `-- name: GetFreelancerPropertyMediaByProjectId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media 
WHERE freelancers_properties_id = $2 LIMIT $1
`

type GetFreelancerPropertyMediaByProjectIdParams struct {
	Limit                   int32 `json:"limit"`
	FreelancersPropertiesID int64 `json:"freelancers_properties_id"`
}

func (q *Queries) GetFreelancerPropertyMediaByProjectId(ctx context.Context, arg GetFreelancerPropertyMediaByProjectIdParams) ([]FreelancersPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getFreelancerPropertyMediaByProjectId, arg.Limit, arg.FreelancersPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FreelancersPropertiesMedium
	for rows.Next() {
		var i FreelancersPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.FreelancersPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFreelancerPropertyMediaByPropertyIdAndMainMediaSection = `-- name: GetFreelancerPropertyMediaByPropertyIdAndMainMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media WHERE freelancers_properties_id=$1 AND main_media_section=$2
`

type GetFreelancerPropertyMediaByPropertyIdAndMainMediaSectionParams struct {
	FreelancersPropertiesID int64  `json:"freelancers_properties_id"`
	MainMediaSection        string `json:"main_media_section"`
}

func (q *Queries) GetFreelancerPropertyMediaByPropertyIdAndMainMediaSection(ctx context.Context, arg GetFreelancerPropertyMediaByPropertyIdAndMainMediaSectionParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyMediaByPropertyIdAndMainMediaSection, arg.FreelancersPropertiesID, arg.MainMediaSection)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFreelancerPropertyMediaByUnitIdAndMediaSection = `-- name: GetFreelancerPropertyMediaByUnitIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at FROM freelancers_properties_media
WHERE freelancers_properties_id = $1 AND main_media_section = $2
`

type GetFreelancerPropertyMediaByUnitIdAndMediaSectionParams struct {
	FreelancersPropertiesID int64  `json:"freelancers_properties_id"`
	MainMediaSection        string `json:"main_media_section"`
}

func (q *Queries) GetFreelancerPropertyMediaByUnitIdAndMediaSection(ctx context.Context, arg GetFreelancerPropertyMediaByUnitIdAndMediaSectionParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getFreelancerPropertyMediaByUnitIdAndMediaSection, arg.FreelancersPropertiesID, arg.MainMediaSection)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFreelancerPropertyMedia = `-- name: UpdateFreelancerPropertyMedia :one
UPDATE freelancers_properties_media
SET    image_url = $2,
     image360_url = $3,
     video_url = $4,
     panaroma_url = $5,
    main_media_section = $6,
    freelancers_properties_id = $7,
    created_at = $8, 
    updated_at = $9
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, freelancers_properties_id, created_at, updated_at
`

type UpdateFreelancerPropertyMediaParams struct {
	ID                      int64     `json:"id"`
	ImageUrl                []string  `json:"image_url"`
	Image360Url             []string  `json:"image360_url"`
	VideoUrl                []string  `json:"video_url"`
	PanaromaUrl             []string  `json:"panaroma_url"`
	MainMediaSection        string    `json:"main_media_section"`
	FreelancersPropertiesID int64     `json:"freelancers_properties_id"`
	CreatedAt               time.Time `json:"created_at"`
	UpdatedAt               time.Time `json:"updated_at"`
}

func (q *Queries) UpdateFreelancerPropertyMedia(ctx context.Context, arg UpdateFreelancerPropertyMediaParams) (FreelancersPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateFreelancerPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.FreelancersPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i FreelancersPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.FreelancersPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
