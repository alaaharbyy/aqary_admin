// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tags.sql

package sqlc

import (
	"context"
)

const createTags = `-- name: CreateTags :one
INSERT INTO tags (tag_name) VALUES ($1) RETURNING id, tag_name, created_at, type_name_ar
`

func (q *Queries) CreateTags(ctx context.Context, tagName string) (Tag, error) {
	row := q.db.QueryRow(ctx, createTags, tagName)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.TagName,
		&i.CreatedAt,
		&i.TypeNameAr,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :one
DELETE FROM tags WHERE id = $1 RETURNING id, tag_name, created_at, type_name_ar
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRow(ctx, deleteTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.TagName,
		&i.CreatedAt,
		&i.TypeNameAr,
	)
	return i, err
}

const getAllTags = `-- name: GetAllTags :many
SELECT id, tag_name, created_at, type_name_ar FROM tags LIMIT $1 OFFSET $2
`

type GetAllTagsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTags(ctx context.Context, arg GetAllTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, getAllTags, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.TagName,
			&i.CreatedAt,
			&i.TypeNameAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTagsCount = `-- name: GetAllTagsCount :many
SELECT COUNT(*) FROM tags
`

func (q *Queries) GetAllTagsCount(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getAllTagsCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSearchedTagsCount = `-- name: GetSearchedTagsCount :many
SELECT COUNT(*) FROM tags WHERE tag_name ILIKE $1
`

func (q *Queries) GetSearchedTagsCount(ctx context.Context, tagName string) ([]int64, error) {
	rows, err := q.db.Query(ctx, getSearchedTagsCount, tagName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagsByID = `-- name: GetTagsByID :one
SELECT id, tag_name, created_at, type_name_ar FROM tags WHERE id=$1
`

func (q *Queries) GetTagsByID(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRow(ctx, getTagsByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.TagName,
		&i.CreatedAt,
		&i.TypeNameAr,
	)
	return i, err
}

const searchForTags = `-- name: SearchForTags :many
SELECT id, tag_name, created_at, type_name_ar FROM tags WHERE tag_name ILIKE $1 LIMIT $2 OFFSET $3
`

type SearchForTagsParams struct {
	TagName string `json:"tag_name"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) SearchForTags(ctx context.Context, arg SearchForTagsParams) ([]Tag, error) {
	rows, err := q.db.Query(ctx, searchForTags, arg.TagName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.TagName,
			&i.CreatedAt,
			&i.TypeNameAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTags = `-- name: UpdateTags :one
UPDATE tags SET tag_name = $2 WHERE id = $1 RETURNING id, tag_name, created_at, type_name_ar
`

type UpdateTagsParams struct {
	ID      int64  `json:"id"`
	TagName string `json:"tag_name"`
}

func (q *Queries) UpdateTags(ctx context.Context, arg UpdateTagsParams) (Tag, error) {
	row := q.db.QueryRow(ctx, updateTags, arg.ID, arg.TagName)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.TagName,
		&i.CreatedAt,
		&i.TypeNameAr,
	)
	return i, err
}
