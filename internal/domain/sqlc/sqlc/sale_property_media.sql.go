// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sale_property_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSalePropertyMedia = `-- name: CreateSalePropertyMedia :one
INSERT INTO sale_property_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    sale_property_units_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3,$4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type CreateSalePropertyMediaParams struct {
	ImageUrl            []string  `json:"image_url"`
	Image360Url         []string  `json:"image360_url"`
	VideoUrl            []string  `json:"video_url"`
	PanaromaUrl         []string  `json:"panaroma_url"`
	MainMediaSection    string    `json:"main_media_section"`
	SalePropertyUnitsID int64     `json:"sale_property_units_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
}

func (q *Queries) CreateSalePropertyMedia(ctx context.Context, arg CreateSalePropertyMediaParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, createSalePropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.SalePropertyUnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaImages360ByIdAndFile = `-- name: DeleteOneSalePropertyMediaImages360ByIdAndFile :one
UPDATE sale_property_media
SET image360_url = 
  CASE 
    WHEN array_remove(image360_url, $2::VARCHAR) = '{}' THEN NULL
    ELSE array_remove(image360_url, $2::VARCHAR)
  END
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaImages360ByIdAndFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteOneSalePropertyMediaImages360ByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaImages360ByIdAndFileParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaImages360ByIdAndFile, arg.ID, arg.Fileurl)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaImagesByIdAndFile = `-- name: DeleteOneSalePropertyMediaImagesByIdAndFile :one
UPDATE sale_property_media
SET image_url = 
  CASE 
    WHEN array_remove(image_url, $2::VARCHAR) = '{}' THEN NULL
    ELSE array_remove(image_url, $2::VARCHAR)
  END
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaImagesByIdAndFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteOneSalePropertyMediaImagesByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaImagesByIdAndFileParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaImagesByIdAndFile, arg.ID, arg.Fileurl)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaPanaromaByIdAndFile = `-- name: DeleteOneSalePropertyMediaPanaromaByIdAndFile :one
UPDATE sale_property_media
SET panaroma_url = 
  CASE 
    WHEN array_remove(panaroma_url, $2::VARCHAR) = '{}' THEN NULL
    ELSE array_remove(panaroma_url, $2::VARCHAR)
  END
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaPanaromaByIdAndFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteOneSalePropertyMediaPanaromaByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaPanaromaByIdAndFileParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaPanaromaByIdAndFile, arg.ID, arg.Fileurl)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaVideoByIdAndFile = `-- name: DeleteOneSalePropertyMediaVideoByIdAndFile :one
UPDATE sale_property_media
SET video_url = 
  CASE 
    WHEN array_remove(video_url, $2::VARCHAR) = '{}' THEN NULL
    ELSE array_remove(video_url, $2::VARCHAR)
  END
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaVideoByIdAndFileParams struct {
	ID      int64  `json:"id"`
	Fileurl string `json:"fileurl"`
}

func (q *Queries) DeleteOneSalePropertyMediaVideoByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaVideoByIdAndFileParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaVideoByIdAndFile, arg.ID, arg.Fileurl)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteSalePropertyMedia = `-- name: DeleteSalePropertyMedia :exec
DELETE FROM sale_property_media
Where id = $1
`

func (q *Queries) DeleteSalePropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSalePropertyMedia, id)
	return err
}

const getAllSaleByMainMediaSectionAndId = `-- name: GetAllSaleByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch FROM sale_property_media
 WHERE main_media_section = $2 AND sale_property_units_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch From x
`

type GetAllSaleByMainMediaSectionAndIdParams struct {
	SalePropertyUnitsID int64  `json:"sale_property_units_id"`
	MainMediaSection    string `json:"main_media_section"`
}

type GetAllSaleByMainMediaSectionAndIdRow struct {
	ID                  int64       `json:"id"`
	ImageUrl            []string    `json:"image_url"`
	Image360Url         []string    `json:"image360_url"`
	VideoUrl            []string    `json:"video_url"`
	PanaromaUrl         []string    `json:"panaroma_url"`
	MainMediaSection    string      `json:"main_media_section"`
	SalePropertyUnitsID int64       `json:"sale_property_units_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsBranch            pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllSaleByMainMediaSectionAndId(ctx context.Context, arg GetAllSaleByMainMediaSectionAndIdParams) (GetAllSaleByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllSaleByMainMediaSectionAndId, arg.SalePropertyUnitsID, arg.MainMediaSection)
	var i GetAllSaleByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllSaleMainMediaSectionById = `-- name: GetAllSaleMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM sale_property_media
 WHERE sale_property_units_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllSaleMainMediaSectionById(ctx context.Context, salePropertyUnitsID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllSaleMainMediaSectionById, salePropertyUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSaleMediaByMainMediaSection = `-- name: GetAllSaleMediaByMainMediaSection :many
SELECT 
    sub.main_media_section, 
    array_to_json(array_agg(COALESCE(sub.image_url, ''))) as image_urls,
    array_to_json(array_agg(COALESCE(sub.video_url, ''))) as video_urls,
    array_to_json(array_agg(COALESCE(sub.panaroma_url, ''))) as panaroma_urls,
    array_to_json(array_agg(COALESCE(sub.image360_url, ''))) as image360_urls
FROM (
    SELECT 
        unnest(image_url) as image_url, 
        unnest(video_url) as video_url, 
        unnest(panaroma_url) as panaroma_url,
        unnest(image360_url) as image360_url,
        main_media_section
    FROM sale_property_media
    WHERE sale_property_units_id = $1
) as sub
GROUP BY sub.main_media_section
`

type GetAllSaleMediaByMainMediaSectionRow struct {
	MainMediaSection string `json:"main_media_section"`
	ImageUrls        []byte `json:"image_urls"`
	VideoUrls        []byte `json:"video_urls"`
	PanaromaUrls     []byte `json:"panaroma_urls"`
	Image360Urls     []byte `json:"image360_urls"`
}

func (q *Queries) GetAllSaleMediaByMainMediaSection(ctx context.Context, salePropertyUnitsID int64) ([]GetAllSaleMediaByMainMediaSectionRow, error) {
	rows, err := q.db.Query(ctx, getAllSaleMediaByMainMediaSection, salePropertyUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSaleMediaByMainMediaSectionRow
	for rows.Next() {
		var i GetAllSaleMediaByMainMediaSectionRow
		if err := rows.Scan(
			&i.MainMediaSection,
			&i.ImageUrls,
			&i.VideoUrls,
			&i.PanaromaUrls,
			&i.Image360Urls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSalePropertyMedia = `-- name: GetAllSalePropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch FROM sale_property_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllSalePropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSalePropertyMedia(ctx context.Context, arg GetAllSalePropertyMediaParams) ([]SalePropertyMedium, error) {
	rows, err := q.db.Query(ctx, getAllSalePropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalePropertyMedium
	for rows.Next() {
		var i SalePropertyMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.SalePropertyUnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSalePropertyMediaByUnitId = `-- name: GetAllSalePropertyMediaByUnitId :many


WITH x AS(
SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $3 AND image_url IS NOT NULL
UNION ALL
SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $3 AND image360_url IS NOT NULL
UNION ALL
SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $3 AND video_url IS NOT NULL
UNION ALL
SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $3 AND panaroma_url IS NOT NULL
) SELECT id, url, media_type, main_media_section, sale_property_units_id FROM x LIMIT $1 OFFSET $2
`

type GetAllSalePropertyMediaByUnitIdParams struct {
	Limit               int32 `json:"limit"`
	Offset              int32 `json:"offset"`
	SalePropertyUnitsID int64 `json:"sale_property_units_id"`
}

type GetAllSalePropertyMediaByUnitIdRow struct {
	ID                  int64    `json:"id"`
	Url                 []string `json:"url"`
	MediaType           int64    `json:"media_type"`
	MainMediaSection    string   `json:"main_media_section"`
	SalePropertyUnitsID int64    `json:"sale_property_units_id"`
}

// SELECT
//
//	json_build_object(
//	    'imageUrl', json_agg(json_build_object('imageUrl', image_url, 'counts', cardinality(image_url))),
//	    'image360Url', json_agg(json_build_object('image360Url', image360_url, 'counts', cardinality(image360_url))),
//	    'videoUrl', json_agg(json_build_object('videoUrl', video_url, 'counts', cardinality(video_url))),
//	    'panaromaUrl', json_agg(json_build_object('panaromaUrl', panaroma_url, 'counts', cardinality(panaroma_url)))
//	) as media
//
// FROM
//
//	sale_property_media
//
// WHERE
//
//	sale_property_units_id = $1
//
// GROUP BY
//
//	sale_property_units_id;
func (q *Queries) GetAllSalePropertyMediaByUnitId(ctx context.Context, arg GetAllSalePropertyMediaByUnitIdParams) ([]GetAllSalePropertyMediaByUnitIdRow, error) {
	rows, err := q.db.Query(ctx, getAllSalePropertyMediaByUnitId, arg.Limit, arg.Offset, arg.SalePropertyUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSalePropertyMediaByUnitIdRow
	for rows.Next() {
		var i GetAllSalePropertyMediaByUnitIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.MediaType,
			&i.MainMediaSection,
			&i.SalePropertyUnitsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSaleUnitMediaByUnitId = `-- name: GetAllSaleUnitMediaByUnitId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, 
main_media_section, sale_property_units_id, 
 created_at, updated_at 
 FROM sale_property_media 
WHERE sale_property_units_id = $1
`

type GetAllSaleUnitMediaByUnitIdRow struct {
	ID                  int64     `json:"id"`
	ImageUrl            []string  `json:"image_url"`
	Image360Url         []string  `json:"image360_url"`
	VideoUrl            []string  `json:"video_url"`
	PanaromaUrl         []string  `json:"panaroma_url"`
	MainMediaSection    string    `json:"main_media_section"`
	SalePropertyUnitsID int64     `json:"sale_property_units_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
}

func (q *Queries) GetAllSaleUnitMediaByUnitId(ctx context.Context, salePropertyUnitsID int64) ([]GetAllSaleUnitMediaByUnitIdRow, error) {
	rows, err := q.db.Query(ctx, getAllSaleUnitMediaByUnitId, salePropertyUnitsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSaleUnitMediaByUnitIdRow
	for rows.Next() {
		var i GetAllSaleUnitMediaByUnitIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.SalePropertyUnitsID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllSalePropertyMediaByUnitId = `-- name: GetCountAllSalePropertyMediaByUnitId :one
WITH x AS(
SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $1 AND image_url IS NOT NULL
UNION ALL
SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $1 AND image360_url IS NOT NULL
UNION ALL
SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $1 AND video_url IS NOT NULL
UNION ALL
SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,sale_property_units_id FROM  sale_property_media WHERE sale_property_media.sale_property_units_id = $1 AND panaroma_url IS NOT NULL
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllSalePropertyMediaByUnitId(ctx context.Context, salePropertyUnitsID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllSalePropertyMediaByUnitId, salePropertyUnitsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSalePropertyMedia = `-- name: GetSalePropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch FROM sale_property_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetSalePropertyMedia(ctx context.Context, limit int32) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMedia, limit)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getSalePropertyMediaBySaleId = `-- name: GetSalePropertyMediaBySaleId :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch FROM sale_property_media 
WHERE sale_property_units_id = $1
`

func (q *Queries) GetSalePropertyMediaBySaleId(ctx context.Context, salePropertyUnitsID int64) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMediaBySaleId, salePropertyUnitsID)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getSalePropertyMediaByUnitIdAndMediaSection = `-- name: GetSalePropertyMediaByUnitIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch FROM sale_property_media
WHERE sale_property_units_id = $1 AND main_media_section = $2
`

type GetSalePropertyMediaByUnitIdAndMediaSectionParams struct {
	SalePropertyUnitsID int64  `json:"sale_property_units_id"`
	MainMediaSection    string `json:"main_media_section"`
}

func (q *Queries) GetSalePropertyMediaByUnitIdAndMediaSection(ctx context.Context, arg GetSalePropertyMediaByUnitIdAndMediaSectionParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMediaByUnitIdAndMediaSection, arg.SalePropertyUnitsID, arg.MainMediaSection)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getSumOfSaleMedia = `-- name: GetSumOfSaleMedia :one
SELECT
	COALESCE(
	SUM(
	    COALESCE(array_length(image_url, 1), 0) + 
	    COALESCE(array_length(image360_url, 1), 0) + 
	    COALESCE(array_length(video_url, 1), 0) + 
	    COALESCE(array_length(panaroma_url, 1), 0)
    ), 0)::INTEGER AS media_sum
FROM
    sale_property_media
WHERE
    sale_property_units_id = $1
`

func (q *Queries) GetSumOfSaleMedia(ctx context.Context, salePropertyUnitsID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfSaleMedia, salePropertyUnitsID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const updateSalePropertyMedia = `-- name: UpdateSalePropertyMedia :one
UPDATE sale_property_media
SET  image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    sale_property_units_id = $7,
    created_at = $8,
    updated_at = $9

Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_id, created_at, updated_at, is_branch
`

type UpdateSalePropertyMediaParams struct {
	ID                  int64     `json:"id"`
	ImageUrl            []string  `json:"image_url"`
	Image360Url         []string  `json:"image360_url"`
	VideoUrl            []string  `json:"video_url"`
	PanaromaUrl         []string  `json:"panaroma_url"`
	MainMediaSection    string    `json:"main_media_section"`
	SalePropertyUnitsID int64     `json:"sale_property_units_id"`
	CreatedAt           time.Time `json:"created_at"`
	UpdatedAt           time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSalePropertyMedia(ctx context.Context, arg UpdateSalePropertyMediaParams) (SalePropertyMedium, error) {
	row := q.db.QueryRow(ctx, updateSalePropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.SalePropertyUnitsID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SalePropertyMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
