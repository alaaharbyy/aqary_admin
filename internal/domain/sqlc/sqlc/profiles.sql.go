// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: profiles.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfile = `-- name: CreateProfile :one
INSERT INTO profiles (
    first_name,
    last_name,
    addresses_id,
    profile_image_url,
    secondary_number,
    whatsapp_number,
    show_whatsapp_number,
    botim_number,
    show_botim_number,
    tawasal_number,
    show_tawasal_number, 
    gender,
    created_at,
    updated_at,
    ref_no,
    cover_image_url,
    passport_no,
    passport_image_url,
    passport_expiry_date,
    about,
    about_arabic,
    users_id
)VALUES (
    $1, $2, $3, $4, $5, $6,$7, $8, $9, $10,  $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22
) RETURNING id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number
`

type CreateProfileParams struct {
	FirstName          string             `json:"first_name"`
	LastName           string             `json:"last_name"`
	AddressesID        int64              `json:"addresses_id"`
	ProfileImageUrl    pgtype.Text        `json:"profile_image_url"`
	SecondaryNumber    pgtype.Text        `json:"secondary_number"`
	WhatsappNumber     pgtype.Text        `json:"whatsapp_number"`
	ShowWhatsappNumber pgtype.Bool        `json:"show_whatsapp_number"`
	BotimNumber        pgtype.Text        `json:"botim_number"`
	ShowBotimNumber    pgtype.Bool        `json:"show_botim_number"`
	TawasalNumber      pgtype.Text        `json:"tawasal_number"`
	ShowTawasalNumber  pgtype.Bool        `json:"show_tawasal_number"`
	Gender             pgtype.Int8        `json:"gender"`
	CreatedAt          time.Time          `json:"created_at"`
	UpdatedAt          time.Time          `json:"updated_at"`
	RefNo              string             `json:"ref_no"`
	CoverImageUrl      pgtype.Text        `json:"cover_image_url"`
	PassportNo         pgtype.Text        `json:"passport_no"`
	PassportImageUrl   pgtype.Text        `json:"passport_image_url"`
	PassportExpiryDate pgtype.Timestamptz `json:"passport_expiry_date"`
	About              pgtype.Text        `json:"about"`
	AboutArabic        pgtype.Text        `json:"about_arabic"`
	UsersID            int64              `json:"users_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.FirstName,
		arg.LastName,
		arg.AddressesID,
		arg.ProfileImageUrl,
		arg.SecondaryNumber,
		arg.WhatsappNumber,
		arg.ShowWhatsappNumber,
		arg.BotimNumber,
		arg.ShowBotimNumber,
		arg.TawasalNumber,
		arg.ShowTawasalNumber,
		arg.Gender,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CoverImageUrl,
		arg.PassportNo,
		arg.PassportImageUrl,
		arg.PassportExpiryDate,
		arg.About,
		arg.AboutArabic,
		arg.UsersID,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
	)
	return i, err
}

const deleteProfile = `-- name: DeleteProfile :exec
DELETE FROM profiles
Where id = $1
`

func (q *Queries) DeleteProfile(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProfile, id)
	return err
}

const getAllProfile = `-- name: GetAllProfile :many
SELECT id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number FROM profiles
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllProfileParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProfile(ctx context.Context, arg GetAllProfileParams) ([]Profile, error) {
	rows, err := q.db.Query(ctx, getAllProfile, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profile
	for rows.Next() {
		var i Profile
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.AddressesID,
			&i.ProfileImageUrl,
			&i.SecondaryNumber,
			&i.WhatsappNumber,
			&i.ShowWhatsappNumber,
			&i.BotimNumber,
			&i.ShowBotimNumber,
			&i.TawasalNumber,
			&i.ShowTawasalNumber,
			&i.Gender,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CoverImageUrl,
			&i.PassportNo,
			&i.PassportImageUrl,
			&i.PassportExpiryDate,
			&i.About,
			&i.AboutArabic,
			&i.UsersID,
			&i.TelegramNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProfilesNames = `-- name: GetAllProfilesNames :many
SELECT first_name FROM profiles
ORDER BY id
`

func (q *Queries) GetAllProfilesNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllProfilesNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var first_name string
		if err := rows.Scan(&first_name); err != nil {
			return nil, err
		}
		items = append(items, first_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAqaryAdminPermissions = `-- name: GetAqaryAdminPermissions :one
SELECT permissions_id::bigint[] AS permissions, sub_sections_id::bigint[] AS sub_permissions
FROM user_company_permissions
WHERE user_id = $1::bigint
`

type GetAqaryAdminPermissionsRow struct {
	Permissions    []int64 `json:"permissions"`
	SubPermissions []int64 `json:"sub_permissions"`
}

func (q *Queries) GetAqaryAdminPermissions(ctx context.Context, userID int64) (GetAqaryAdminPermissionsRow, error) {
	row := q.db.QueryRow(ctx, getAqaryAdminPermissions, userID)
	var i GetAqaryAdminPermissionsRow
	err := row.Scan(&i.Permissions, &i.SubPermissions)
	return i, err
}

const getAqaryUserPermissions = `-- name: GetAqaryUserPermissions :one

SELECT 
    array_agg(DISTINCT permission)::bigint[] AS unique_permissions_id
FROM (
    -- Unnest and combine the permissions_id from both tables
    SELECT unnest(permissions_id) AS permission
    FROM user_company_permissions WHERE user_id = $1::bigint
    UNION
    SELECT unnest(permissions_id) AS permission
    FROM roles_permissions WHERE roles_id = $2::bigint
) AS combined_permissions
`

type GetAqaryUserPermissionsParams struct {
	UserID  int64 `json:"user_id"`
	RolesID int64 `json:"roles_id"`
}

// ------------------ permission related queries --------------------
func (q *Queries) GetAqaryUserPermissions(ctx context.Context, arg GetAqaryUserPermissionsParams) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAqaryUserPermissions, arg.UserID, arg.RolesID)
	var unique_permissions_id []int64
	err := row.Scan(&unique_permissions_id)
	return unique_permissions_id, err
}

const getAqaryUserSubSectionPermissions = `-- name: GetAqaryUserSubSectionPermissions :one
SELECT 
    array_agg(DISTINCT sub_section)::bigint[] AS unique_sub_section_ids
FROM (
    -- Unnest and combine the sub_section_ids from both tables
    SELECT unnest(sub_sections_id) AS sub_section
    FROM user_company_permissions WHERE user_id = $1::bigint
    UNION
    SELECT unnest(sub_section_permission) AS sub_section
    FROM roles_permissions WHERE roles_id = $2::bigint
) AS combined_sub_sections
`

type GetAqaryUserSubSectionPermissionsParams struct {
	UserID  int64 `json:"user_id"`
	RolesID int64 `json:"roles_id"`
}

func (q *Queries) GetAqaryUserSubSectionPermissions(ctx context.Context, arg GetAqaryUserSubSectionPermissionsParams) ([]int64, error) {
	row := q.db.QueryRow(ctx, getAqaryUserSubSectionPermissions, arg.UserID, arg.RolesID)
	var unique_sub_section_ids []int64
	err := row.Scan(&unique_sub_section_ids)
	return unique_sub_section_ids, err
}

const getAssociatedCompanies = `-- name: GetAssociatedCompanies :one
SELECT 
JSON_AGG(
        JSON_BUILD_OBJECT(
            'id', c.id,
            'name', c.company_name,
            'verified', c.is_verified,
            'logo', c.logo_url
        )
    ) AS associated_companies
FROM companies c 
WHERE c.users_id = $1 AND c.id != $2
`

type GetAssociatedCompaniesParams struct {
	UsersID int64 `json:"users_id"`
	ID      int64 `json:"id"`
}

func (q *Queries) GetAssociatedCompanies(ctx context.Context, arg GetAssociatedCompaniesParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getAssociatedCompanies, arg.UsersID, arg.ID)
	var associated_companies []byte
	err := row.Scan(&associated_companies)
	return associated_companies, err
}

const getCompanyAdminPermissions = `-- name: GetCompanyAdminPermissions :one
SELECT permissions_id::bigint[] AS permissions, sub_sections_id::bigint[] AS sub_permissions
FROM user_company_permissions
WHERE user_id = $1::bigint AND company_id = $2::bigint
`

type GetCompanyAdminPermissionsParams struct {
	UserID    int64 `json:"user_id"`
	CompanyID int64 `json:"company_id"`
}

type GetCompanyAdminPermissionsRow struct {
	Permissions    []int64 `json:"permissions"`
	SubPermissions []int64 `json:"sub_permissions"`
}

func (q *Queries) GetCompanyAdminPermissions(ctx context.Context, arg GetCompanyAdminPermissionsParams) (GetCompanyAdminPermissionsRow, error) {
	row := q.db.QueryRow(ctx, getCompanyAdminPermissions, arg.UserID, arg.CompanyID)
	var i GetCompanyAdminPermissionsRow
	err := row.Scan(&i.Permissions, &i.SubPermissions)
	return i, err
}

const getProfile = `-- name: GetProfile :one
SELECT id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number FROM profiles 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, id int64) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
	)
	return i, err
}

const getProfileByUserId = `-- name: GetProfileByUserId :one
SELECT id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number FROM profiles 
WHERE users_id = $1 LIMIT 1
`

func (q *Queries) GetProfileByUserId(ctx context.Context, usersID int64) (Profile, error) {
	row := q.db.QueryRow(ctx, getProfileByUserId, usersID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
	)
	return i, err
}

const getProfileuserbyUserId = `-- name: GetProfileuserbyUserId :one
SELECT p.id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, p.created_at, p.updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number, u.id, email, username, password, status, roles_id, user_types_id, social_login, show_hide_details, experience_since, is_verified, u.created_at, u.updated_at, phone_number, is_phone_verified, is_email_verified, active_company, country_code, profile_views FROM profiles as p INNER JOIN users as u ON u.profiles_id = p.id where u.id = $1
`

type GetProfileuserbyUserIdRow struct {
	ID                 int64              `json:"id"`
	FirstName          string             `json:"first_name"`
	LastName           string             `json:"last_name"`
	AddressesID        int64              `json:"addresses_id"`
	ProfileImageUrl    pgtype.Text        `json:"profile_image_url"`
	SecondaryNumber    pgtype.Text        `json:"secondary_number"`
	WhatsappNumber     pgtype.Text        `json:"whatsapp_number"`
	ShowWhatsappNumber pgtype.Bool        `json:"show_whatsapp_number"`
	BotimNumber        pgtype.Text        `json:"botim_number"`
	ShowBotimNumber    pgtype.Bool        `json:"show_botim_number"`
	TawasalNumber      pgtype.Text        `json:"tawasal_number"`
	ShowTawasalNumber  pgtype.Bool        `json:"show_tawasal_number"`
	Gender             pgtype.Int8        `json:"gender"`
	CreatedAt          time.Time          `json:"created_at"`
	UpdatedAt          time.Time          `json:"updated_at"`
	RefNo              string             `json:"ref_no"`
	CoverImageUrl      pgtype.Text        `json:"cover_image_url"`
	PassportNo         pgtype.Text        `json:"passport_no"`
	PassportImageUrl   pgtype.Text        `json:"passport_image_url"`
	PassportExpiryDate pgtype.Timestamptz `json:"passport_expiry_date"`
	About              pgtype.Text        `json:"about"`
	AboutArabic        pgtype.Text        `json:"about_arabic"`
	UsersID            int64              `json:"users_id"`
	TelegramNumber     pgtype.Text        `json:"telegram_number"`
	ID_2               int64              `json:"id_2"`
	Email              string             `json:"email"`
	Username           string             `json:"username"`
	Password           string             `json:"password"`
	Status             int64              `json:"status"`
	RolesID            pgtype.Int8        `json:"roles_id"`
	UserTypesID        int64              `json:"user_types_id"`
	SocialLogin        pgtype.Text        `json:"social_login"`
	ShowHideDetails    pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince    pgtype.Timestamptz `json:"experience_since"`
	IsVerified         pgtype.Bool        `json:"is_verified"`
	CreatedAt_2        time.Time          `json:"created_at_2"`
	UpdatedAt_2        time.Time          `json:"updated_at_2"`
	PhoneNumber        pgtype.Text        `json:"phone_number"`
	IsPhoneVerified    pgtype.Bool        `json:"is_phone_verified"`
	IsEmailVerified    pgtype.Bool        `json:"is_email_verified"`
	ActiveCompany      pgtype.Int8        `json:"active_company"`
	CountryCode        pgtype.Int8        `json:"country_code"`
	ProfileViews       int64              `json:"profile_views"`
}

func (q *Queries) GetProfileuserbyUserId(ctx context.Context, id int64) (GetProfileuserbyUserIdRow, error) {
	row := q.db.QueryRow(ctx, getProfileuserbyUserId, id)
	var i GetProfileuserbyUserIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
		&i.ID_2,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.Status,
		&i.RolesID,
		&i.UserTypesID,
		&i.SocialLogin,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.IsVerified,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.PhoneNumber,
		&i.IsPhoneVerified,
		&i.IsEmailVerified,
		&i.ActiveCompany,
		&i.CountryCode,
		&i.ProfileViews,
	)
	return i, err
}

const getRolePermissions = `-- name: GetRolePermissions :one
SELECT permissions_id::bigint[] AS permissions, sub_section_permission::bigint[] AS sub_permissions
FROM roles_permissions
WHERE roles_id = $1::bigint
`

type GetRolePermissionsRow struct {
	Permissions    []int64 `json:"permissions"`
	SubPermissions []int64 `json:"sub_permissions"`
}

func (q *Queries) GetRolePermissions(ctx context.Context, roleID int64) (GetRolePermissionsRow, error) {
	row := q.db.QueryRow(ctx, getRolePermissions, roleID)
	var i GetRolePermissionsRow
	err := row.Scan(&i.Permissions, &i.SubPermissions)
	return i, err
}

const getUserDetailsByUserName = `-- name: GetUserDetailsByUserName :one
SELECT 
    u.id AS user_id,
    u.active_company AS act_company,
    u.email,
    u.username,
    u.status, 
    u.user_types_id,
    u.is_verified,
    u.show_hide_details,
    u.experience_since,
    u.phone_number,
    u.country_code,
    u.is_email_verified,
    u.is_phone_verified,
    u.roles_id,
    u.experience_since,
    ro.role,
    p.first_name,
    p.last_name,
    concat(p.first_name, ' ', p.last_name)::text AS full_name,
    p.whatsapp_number,
    p.profile_image_url,
    p.secondary_number,
    p.cover_image_url,
    p.about,
    p.gender,
    p.ref_no, 
    ad.full_address,
    countries.default_settings,
    ad.countries_id,
    countries.flag,
    countries.country,
    nationality.id as nationality_id,
    nationality.country as nationality, 
    nationality.country_ar as nationality_ar,
    all_languages.id as language_id,
    all_languages.language,
    coalesce(base_currency.flag::varchar,'')::varchar as base_currency_icon,
    coalesce(base_currency.code::varchar,'')::varchar as base_currency_code,
    coalesce(default_currency.flag::varchar,'')::varchar as default_currency_icon,
    coalesce(default_currency.code::varchar,'')::varchar as default_currency_code,
    JSON_BUILD_OBJECT(
        'id', u.user_types_id,
        'label', ut.user_type,
        'label_ar', ut.user_type_ar
    ) AS user_type,
    JSON_BUILD_OBJECT(
        'id', u.active_company,
        'name', c.company_name,
        'logo', c.logo_url,
        'verified', c.is_verified,
        'cover_image', c.cover_image_url,
        'website_url',c.website_url
    ) AS active_company
    FROM users u
LEFT JOIN profiles p ON p.users_id = u.id
LEFT JOIN profile_nationalities ON profile_nationalities.profiles_id = p.id
LEFT JOIN profile_languages ON profile_languages.profiles_id = p.id
LEFT JOIN countries as nationality ON nationality.id = profile_nationalities.country_id
LEFT JOIN all_languages ON all_languages.id = profile_languages.all_languages_id
LEFT JOIN addresses ad ON p.addresses_id = ad.id
left join countries ON countries.id=ad.countries_id
left join currency as base_currency on base_currency.id= (countries.default_settings->>'base_currency')::bigint
left join currency as default_currency on default_currency.id= (countries.default_settings->>'default_currency')::bigint
LEFT JOIN companies c ON u.active_company = c.id
LEFT JOIN user_types ut ON u.user_types_id = ut.id
LEFT JOIN roles ro ON ro.id = u.roles_id
WHERE u.username = $1::text
GROUP BY u.id,language_id, u.experience_since,all_languages.id,nationality_id, p.whatsapp_number,nationality,all_languages.language, nationality_ar,p.id, ad.full_address, ut.user_type,ut.user_type_ar, c.company_name, c.cover_image_url, c.logo_url,c.is_verified,c.website_url, ro.role,countries.id,base_currency.flag,base_currency.code,default_currency.flag,default_currency.code, countries.default_settings,ad.countries_id,countries.flag,countries.country
`

type GetUserDetailsByUserNameRow struct {
	UserID              int64              `json:"user_id"`
	ActCompany          pgtype.Int8        `json:"act_company"`
	Email               string             `json:"email"`
	Username            string             `json:"username"`
	Status              int64              `json:"status"`
	UserTypesID         int64              `json:"user_types_id"`
	IsVerified          pgtype.Bool        `json:"is_verified"`
	ShowHideDetails     pgtype.Bool        `json:"show_hide_details"`
	ExperienceSince     pgtype.Timestamptz `json:"experience_since"`
	PhoneNumber         pgtype.Text        `json:"phone_number"`
	CountryCode         pgtype.Int8        `json:"country_code"`
	IsEmailVerified     pgtype.Bool        `json:"is_email_verified"`
	IsPhoneVerified     pgtype.Bool        `json:"is_phone_verified"`
	RolesID             pgtype.Int8        `json:"roles_id"`
	ExperienceSince_2   pgtype.Timestamptz `json:"experience_since_2"`
	Role                pgtype.Text        `json:"role"`
	FirstName           pgtype.Text        `json:"first_name"`
	LastName            pgtype.Text        `json:"last_name"`
	FullName            string             `json:"full_name"`
	WhatsappNumber      pgtype.Text        `json:"whatsapp_number"`
	ProfileImageUrl     pgtype.Text        `json:"profile_image_url"`
	SecondaryNumber     pgtype.Text        `json:"secondary_number"`
	CoverImageUrl       pgtype.Text        `json:"cover_image_url"`
	About               pgtype.Text        `json:"about"`
	Gender              pgtype.Int8        `json:"gender"`
	RefNo               pgtype.Text        `json:"ref_no"`
	FullAddress         pgtype.Text        `json:"full_address"`
	DefaultSettings     []byte             `json:"default_settings"`
	CountriesID         pgtype.Int8        `json:"countries_id"`
	Flag                pgtype.Text        `json:"flag"`
	Country             pgtype.Text        `json:"country"`
	NationalityID       pgtype.Int8        `json:"nationality_id"`
	Nationality         pgtype.Text        `json:"nationality"`
	NationalityAr       pgtype.Text        `json:"nationality_ar"`
	LanguageID          pgtype.Int8        `json:"language_id"`
	Language            pgtype.Text        `json:"language"`
	BaseCurrencyIcon    string             `json:"base_currency_icon"`
	BaseCurrencyCode    string             `json:"base_currency_code"`
	DefaultCurrencyIcon string             `json:"default_currency_icon"`
	DefaultCurrencyCode string             `json:"default_currency_code"`
	UserType            []byte             `json:"user_type"`
	ActiveCompany       []byte             `json:"active_company"`
}

func (q *Queries) GetUserDetailsByUserName(ctx context.Context, userName string) (GetUserDetailsByUserNameRow, error) {
	row := q.db.QueryRow(ctx, getUserDetailsByUserName, userName)
	var i GetUserDetailsByUserNameRow
	err := row.Scan(
		&i.UserID,
		&i.ActCompany,
		&i.Email,
		&i.Username,
		&i.Status,
		&i.UserTypesID,
		&i.IsVerified,
		&i.ShowHideDetails,
		&i.ExperienceSince,
		&i.PhoneNumber,
		&i.CountryCode,
		&i.IsEmailVerified,
		&i.IsPhoneVerified,
		&i.RolesID,
		&i.ExperienceSince_2,
		&i.Role,
		&i.FirstName,
		&i.LastName,
		&i.FullName,
		&i.WhatsappNumber,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.CoverImageUrl,
		&i.About,
		&i.Gender,
		&i.RefNo,
		&i.FullAddress,
		&i.DefaultSettings,
		&i.CountriesID,
		&i.Flag,
		&i.Country,
		&i.NationalityID,
		&i.Nationality,
		&i.NationalityAr,
		&i.LanguageID,
		&i.Language,
		&i.BaseCurrencyIcon,
		&i.BaseCurrencyCode,
		&i.DefaultCurrencyIcon,
		&i.DefaultCurrencyCode,
		&i.UserType,
		&i.ActiveCompany,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profiles
SET  
    first_name = $2,
    last_name = $3,
    addresses_id = $4,
    profile_image_url = $5,
    secondary_number = $6,
    whatsapp_number = $7,
    show_whatsapp_number = $8,
    botim_number = $9,
    show_botim_number = $10,
    tawasal_number = $11,
    show_tawasal_number = $12, 
    gender = $13, 
    updated_at = $14,
    ref_no = $15,
    cover_image_url = $16,
    passport_no = $17,
    passport_image_url = $18,
    passport_expiry_date = $19,
    about = $20,
    about_arabic = $21
    -- users_id = $22
Where id = $1
RETURNING id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number
`

type UpdateProfileParams struct {
	ID                 int64              `json:"id"`
	FirstName          string             `json:"first_name"`
	LastName           string             `json:"last_name"`
	AddressesID        int64              `json:"addresses_id"`
	ProfileImageUrl    pgtype.Text        `json:"profile_image_url"`
	SecondaryNumber    pgtype.Text        `json:"secondary_number"`
	WhatsappNumber     pgtype.Text        `json:"whatsapp_number"`
	ShowWhatsappNumber pgtype.Bool        `json:"show_whatsapp_number"`
	BotimNumber        pgtype.Text        `json:"botim_number"`
	ShowBotimNumber    pgtype.Bool        `json:"show_botim_number"`
	TawasalNumber      pgtype.Text        `json:"tawasal_number"`
	ShowTawasalNumber  pgtype.Bool        `json:"show_tawasal_number"`
	Gender             pgtype.Int8        `json:"gender"`
	UpdatedAt          time.Time          `json:"updated_at"`
	RefNo              string             `json:"ref_no"`
	CoverImageUrl      pgtype.Text        `json:"cover_image_url"`
	PassportNo         pgtype.Text        `json:"passport_no"`
	PassportImageUrl   pgtype.Text        `json:"passport_image_url"`
	PassportExpiryDate pgtype.Timestamptz `json:"passport_expiry_date"`
	About              pgtype.Text        `json:"about"`
	AboutArabic        pgtype.Text        `json:"about_arabic"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.AddressesID,
		arg.ProfileImageUrl,
		arg.SecondaryNumber,
		arg.WhatsappNumber,
		arg.ShowWhatsappNumber,
		arg.BotimNumber,
		arg.ShowBotimNumber,
		arg.TawasalNumber,
		arg.ShowTawasalNumber,
		arg.Gender,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CoverImageUrl,
		arg.PassportNo,
		arg.PassportImageUrl,
		arg.PassportExpiryDate,
		arg.About,
		arg.AboutArabic,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
	)
	return i, err
}

const updateProfileForCompanyUser = `-- name: UpdateProfileForCompanyUser :one
UPDATE profiles
SET  
    first_name = $2,
    last_name = $3,
    addresses_id = $4,
    profile_image_url = $5,
    secondary_number = $6,
    whatsapp_number = $7,
    show_whatsapp_number = $8,
    botim_number = $9,
    show_botim_number = $10,
    tawasal_number = $11,
    show_tawasal_number = $12, 
    gender = $13, 
    updated_at = $14, 
    cover_image_url = $15,
    passport_no = $16,
    passport_image_url = $17,
    passport_expiry_date = $18,
    about = $19,
    about_arabic = $20
Where id = $1
RETURNING id, first_name, last_name, addresses_id, profile_image_url, secondary_number, whatsapp_number, show_whatsapp_number, botim_number, show_botim_number, tawasal_number, show_tawasal_number, gender, created_at, updated_at, ref_no, cover_image_url, passport_no, passport_image_url, passport_expiry_date, about, about_arabic, users_id, telegram_number
`

type UpdateProfileForCompanyUserParams struct {
	ID                 int64              `json:"id"`
	FirstName          string             `json:"first_name"`
	LastName           string             `json:"last_name"`
	AddressesID        int64              `json:"addresses_id"`
	ProfileImageUrl    pgtype.Text        `json:"profile_image_url"`
	SecondaryNumber    pgtype.Text        `json:"secondary_number"`
	WhatsappNumber     pgtype.Text        `json:"whatsapp_number"`
	ShowWhatsappNumber pgtype.Bool        `json:"show_whatsapp_number"`
	BotimNumber        pgtype.Text        `json:"botim_number"`
	ShowBotimNumber    pgtype.Bool        `json:"show_botim_number"`
	TawasalNumber      pgtype.Text        `json:"tawasal_number"`
	ShowTawasalNumber  pgtype.Bool        `json:"show_tawasal_number"`
	Gender             pgtype.Int8        `json:"gender"`
	UpdatedAt          time.Time          `json:"updated_at"`
	CoverImageUrl      pgtype.Text        `json:"cover_image_url"`
	PassportNo         pgtype.Text        `json:"passport_no"`
	PassportImageUrl   pgtype.Text        `json:"passport_image_url"`
	PassportExpiryDate pgtype.Timestamptz `json:"passport_expiry_date"`
	About              pgtype.Text        `json:"about"`
	AboutArabic        pgtype.Text        `json:"about_arabic"`
}

func (q *Queries) UpdateProfileForCompanyUser(ctx context.Context, arg UpdateProfileForCompanyUserParams) (Profile, error) {
	row := q.db.QueryRow(ctx, updateProfileForCompanyUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.AddressesID,
		arg.ProfileImageUrl,
		arg.SecondaryNumber,
		arg.WhatsappNumber,
		arg.ShowWhatsappNumber,
		arg.BotimNumber,
		arg.ShowBotimNumber,
		arg.TawasalNumber,
		arg.ShowTawasalNumber,
		arg.Gender,
		arg.UpdatedAt,
		arg.CoverImageUrl,
		arg.PassportNo,
		arg.PassportImageUrl,
		arg.PassportExpiryDate,
		arg.About,
		arg.AboutArabic,
	)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.AddressesID,
		&i.ProfileImageUrl,
		&i.SecondaryNumber,
		&i.WhatsappNumber,
		&i.ShowWhatsappNumber,
		&i.BotimNumber,
		&i.ShowBotimNumber,
		&i.TawasalNumber,
		&i.ShowTawasalNumber,
		&i.Gender,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CoverImageUrl,
		&i.PassportNo,
		&i.PassportImageUrl,
		&i.PassportExpiryDate,
		&i.About,
		&i.AboutArabic,
		&i.UsersID,
		&i.TelegramNumber,
	)
	return i, err
}

const updateUserProfileAddress = `-- name: UpdateUserProfileAddress :exec




UPDATE profiles
SET addresses_id = $1
WHERE profiles.id IN (SELECT profiles_id FROM users WHERE users.id = $2)
`

type UpdateUserProfileAddressParams struct {
	AddressesID int64 `json:"addresses_id"`
	ID          int64 `json:"id"`
}

// -- name: UpdateProfileByPhoneNumber :one
// WITH selected_profile AS (
//
//	SELECT *
//	FROM profiles
//	WHERE profiles.phone_number = $1
//	LIMIT 1
//
// )
// UPDATE profiles
// SET
//
//	phone_number = $2
//
// FROM selected_profile
// WHERE profiles.profiles.id = selected_profile.id
// RETURNING *;
// -- name: GetUserProfileByMobile :one
// SELECT
//
//	p.first_name AS name,
//	p.last_name AS family_name,
//	p.gender,
//	-- p.company_number,
//	u.email
//
// FROM
//
//	users u
//
// JOIN
//
//	profiles p ON u.profiles_id = p.id
//
// WHERE
//
//	p.phone_number = $1
//
// LIMIT $2;
func (q *Queries) UpdateUserProfileAddress(ctx context.Context, arg UpdateUserProfileAddressParams) error {
	_, err := q.db.Exec(ctx, updateUserProfileAddress, arg.AddressesID, arg.ID)
	return err
}
