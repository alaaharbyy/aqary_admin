// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agriculture_common.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_branch_id, status, is_branch
 FROM agricultural_broker_agent_properties_branch_document
WHERE agricultural_broker_agent_properties_branch_id=$1 AND documents_categories_id=$2 AND documents_subcategory_id=$3
`

type GetAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	AgriculturalBrokerAgentPropertiesBranchID int64 `json:"agricultural_broker_agent_properties_branch_id"`
	DocumentsCategoriesID                     int64 `json:"documents_categories_id"`
	DocumentsSubcategoryID                    int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (AgriculturalBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBranchBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.AgriculturalBrokerAgentPropertiesBranchID, arg.DocumentsCategoriesID, arg.DocumentsSubcategoryID)
	var i AgriculturalBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalBrokerAgentPropertyBranchDocById = `-- name: GetAgriculturalBrokerAgentPropertyBranchDocById :one
SELECT
agricultural_broker_agent_properties_branch_document.id,
agricultural_broker_agent_properties_branch_document.documents_categories_id,
agricultural_broker_agent_properties_branch_document.documents_subcategory_id,
agricultural_broker_agent_properties_branch_document.file_url,
agricultural_broker_agent_properties_branch_document.created_at,
agricultural_broker_agent_properties_branch_document.updated_at,
agricultural_broker_agent_properties_branch_document.agricultural_broker_agent_properties_branch_id,
agricultural_broker_agent_properties_branch_document.status,
agricultural_broker_agent_properties_branch_document.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_broker_agent_properties_branch_document
LEFT JOIN documents_category ON documents_category.id = agricultural_broker_agent_properties_branch_document.documents_categories_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_broker_agent_properties_branch_document.documents_subcategory_id
WHERE
agricultural_broker_agent_properties_branch_document.id = $1
`

type GetAgriculturalBrokerAgentPropertyBranchDocByIdRow struct {
	ID                                        int64       `json:"id"`
	DocumentsCategoriesID                     int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                    int64       `json:"documents_subcategory_id"`
	FileUrl                                   []string    `json:"file_url"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	Status                                    int64       `json:"status"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
	Category                                  pgtype.Text `json:"category"`
	SubCategory                               pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAgriculturalBrokerAgentPropertyBranchDocById(ctx context.Context, id int64) (GetAgriculturalBrokerAgentPropertyBranchDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyBranchDocById, id)
	var i GetAgriculturalBrokerAgentPropertyBranchDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT  id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_id, status, is_branch FROM agricultural_broker_agent_properties_documents
WHERE agricultural_broker_agent_properties_id = $1
AND
 documents_category_id = $2
AND
documents_subcategory_id = $3
`

type GetAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	AgriculturalBrokerAgentPropertiesID int64 `json:"agricultural_broker_agent_properties_id"`
	DocumentsCategoryID                 int64 `json:"documents_category_id"`
	DocumentsSubcategoryID              int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (AgriculturalBrokerAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyDocByBrokerAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.AgriculturalBrokerAgentPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i AgriculturalBrokerAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalBrokerAgentPropertyDocById = `-- name: GetAgriculturalBrokerAgentPropertyDocById :one
SELECT
agricultural_broker_agent_properties_documents.id, agricultural_broker_agent_properties_documents.documents_category_id, agricultural_broker_agent_properties_documents.documents_subcategory_id, agricultural_broker_agent_properties_documents.file_url, agricultural_broker_agent_properties_documents.created_at, agricultural_broker_agent_properties_documents.updated_at, agricultural_broker_agent_properties_documents.agricultural_broker_agent_properties_id, agricultural_broker_agent_properties_documents.status, agricultural_broker_agent_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_broker_agent_properties_documents
LEFT JOIN documents_category ON documents_category.id = agricultural_broker_agent_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_broker_agent_properties_documents.documents_subcategory_id
WHERE
agricultural_broker_agent_properties_documents.id = $1
`

type GetAgriculturalBrokerAgentPropertyDocByIdRow struct {
	ID                                  int64       `json:"id"`
	DocumentsCategoryID                 int64       `json:"documents_category_id"`
	DocumentsSubcategoryID              int64       `json:"documents_subcategory_id"`
	FileUrl                             []string    `json:"file_url"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	Status                              int64       `json:"status"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
	Category                            pgtype.Text `json:"category"`
	SubCategory                         pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAgriculturalBrokerAgentPropertyDocById(ctx context.Context, id int64) (GetAgriculturalBrokerAgentPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyDocById, id)
	var i GetAgriculturalBrokerAgentPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getAgriculturalFreelancerPropertyDocByFreelancerPropertyDocId = `-- name: GetAgriculturalFreelancerPropertyDocByFreelancerPropertyDocId :one
SELECT
 agricultural_freelancer_properties_documents.id,
 agricultural_freelancer_properties_documents.documents_category_id,
 agricultural_freelancer_properties_documents.documents_subcategory_id,
 agricultural_freelancer_properties_documents.file_url,
 agricultural_freelancer_properties_documents.created_at,
 agricultural_freelancer_properties_documents.updated_at,
 agricultural_freelancer_properties_documents.agricultural_freelancer_properties_id,
 agricultural_freelancer_properties_documents.status,
 documents_category.category,
 documents_subcategory.sub_category
 FROM
 agricultural_freelancer_properties_documents
 LEFT JOIN documents_category ON documents_category.id = agricultural_freelancer_properties_documents.documents_category_id
 LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_freelancer_properties_documents.documents_subcategory_id
WHERE agricultural_freelancer_properties_documents.id = $1
`

type GetAgriculturalFreelancerPropertyDocByFreelancerPropertyDocIdRow struct {
	ID                                 int64       `json:"id"`
	DocumentsCategoryID                int64       `json:"documents_category_id"`
	DocumentsSubcategoryID             int64       `json:"documents_subcategory_id"`
	FileUrl                            []string    `json:"file_url"`
	CreatedAt                          time.Time   `json:"created_at"`
	UpdatedAt                          time.Time   `json:"updated_at"`
	AgriculturalFreelancerPropertiesID int64       `json:"agricultural_freelancer_properties_id"`
	Status                             int64       `json:"status"`
	Category                           pgtype.Text `json:"category"`
	SubCategory                        pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAgriculturalFreelancerPropertyDocByFreelancerPropertyDocId(ctx context.Context, id int64) (GetAgriculturalFreelancerPropertyDocByFreelancerPropertyDocIdRow, error) {
	row := q.db.QueryRow(ctx, getAgriculturalFreelancerPropertyDocByFreelancerPropertyDocId, id)
	var i GetAgriculturalFreelancerPropertyDocByFreelancerPropertyDocIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalFreelancerPropertiesID,
		&i.Status,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_freelancer_properties_id, status FROM agricultural_freelancer_properties_documents
WHERE agricultural_freelancer_properties_id=$1 AND documents_category_id=$2 AND documents_subcategory_id=$3
`

type GetAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	AgriculturalFreelancerPropertiesID int64 `json:"agricultural_freelancer_properties_id"`
	DocumentsCategoryID                int64 `json:"documents_category_id"`
	DocumentsSubcategoryID             int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatIdParams) (AgriculturalFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalFreelancerPropertyDocByFreelancerPropertyIdAndDocCatIdAndSubDocCatId, arg.AgriculturalFreelancerPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i AgriculturalFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const getAgriculturalOwnerPropertyDocById = `-- name: GetAgriculturalOwnerPropertyDocById :one
SELECT
 agricultural_owner_properties_documents.id, agricultural_owner_properties_documents.documents_category_id, agricultural_owner_properties_documents.documents_subcategory_id, agricultural_owner_properties_documents.file_url, agricultural_owner_properties_documents.created_at, agricultural_owner_properties_documents.updated_at, agricultural_owner_properties_documents.agricultural_owner_properties_id, agricultural_owner_properties_documents.status, agricultural_owner_properties_documents.is_branch,
 documents_category.category,
 documents_subcategory.sub_category
 FROM
 agricultural_owner_properties_documents
 LEFT JOIN documents_category ON documents_category.id = agricultural_owner_properties_documents.documents_category_id
 LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_owner_properties_documents.documents_subcategory_id
WHERE agricultural_owner_properties_documents.id = $1
`

type GetAgriculturalOwnerPropertyDocByIdRow struct {
	ID                            int64       `json:"id"`
	DocumentsCategoryID           int64       `json:"documents_category_id"`
	DocumentsSubcategoryID        int64       `json:"documents_subcategory_id"`
	FileUrl                       []string    `json:"file_url"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	Status                        int64       `json:"status"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
	Category                      pgtype.Text `json:"category"`
	SubCategory                   pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAgriculturalOwnerPropertyDocById(ctx context.Context, id int64) (GetAgriculturalOwnerPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getAgriculturalOwnerPropertyDocById, id)
	var i GetAgriculturalOwnerPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_owner_properties_id, status, is_branch FROM agricultural_owner_properties_documents
WHERE  agricultural_owner_properties_id = $1
 AND
  documents_category_id = $2
  AND
  documents_subcategory_id = $3
`

type GetAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	AgriculturalOwnerPropertiesID int64 `json:"agricultural_owner_properties_id"`
	DocumentsCategoryID           int64 `json:"documents_category_id"`
	DocumentsSubcategoryID        int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams) (AgriculturalOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId, arg.AgriculturalOwnerPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i AgriculturalOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAgriculturalPropertyFactsByProperties = `-- name: GetAgriculturalPropertyFactsByProperties :one
SELECT id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, property, is_branch, created_at, updated_at, available_units, commercial_tax, municipality_tax, no_of_tree, no_of_water_well, no_of_workers_house FROM agricultural_properties_facts
WHERE agricultural_properties_facts.properties_id = $1
AND agricultural_properties_facts.property = $2
AND agricultural_properties_facts.is_branch = $3
`

type GetAgriculturalPropertyFactsByPropertiesParams struct {
	PropertiesID int64       `json:"properties_id"`
	Property     int64       `json:"property"`
	IsBranch     pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAgriculturalPropertyFactsByProperties(ctx context.Context, arg GetAgriculturalPropertyFactsByPropertiesParams) (AgriculturalPropertiesFact, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyFactsByProperties, arg.PropertiesID, arg.Property, arg.IsBranch)
	var i AgriculturalPropertiesFact
	err := row.Scan(
		&i.ID,
		&i.Bedroom,
		&i.Bathroom,
		&i.PlotArea,
		&i.BuiltUpArea,
		&i.View,
		&i.Furnished,
		&i.Ownership,
		&i.CompletionStatus,
		&i.StartDate,
		&i.CompletionDate,
		&i.HandoverDate,
		&i.NoOfFloor,
		&i.NoOfUnits,
		&i.MinArea,
		&i.MaxArea,
		&i.ServiceCharge,
		&i.Parking,
		&i.AskPrice,
		&i.Price,
		&i.RentType,
		&i.NoOfPayment,
		&i.NoOfRetail,
		&i.NoOfPool,
		&i.Elevator,
		&i.StartingPrice,
		&i.LifeStyle,
		&i.PropertiesID,
		&i.Property,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvailableUnits,
		&i.CommercialTax,
		&i.MunicipalityTax,
		&i.NoOfTree,
		&i.NoOfWaterWell,
		&i.NoOfWorkersHouse,
	)
	return i, err
}

const getAgriculturalPropertyPlanBranchByTitle = `-- name: GetAgriculturalPropertyPlanBranchByTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch
WHERE title ILIKE $1 AND properties_id = $2 AND property = $3
`

type GetAgriculturalPropertyPlanBranchByTitleParams struct {
	Title        string `json:"title"`
	PropertiesID int64  `json:"properties_id"`
	Property     int64  `json:"property"`
}

func (q *Queries) GetAgriculturalPropertyPlanBranchByTitle(ctx context.Context, arg GetAgriculturalPropertyPlanBranchByTitleParams) (AgriculturalPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlanBranchByTitle, arg.Title, arg.PropertiesID, arg.Property)
	var i AgriculturalPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAgriculturalBrokerAgentPropertyBranchDocByPropertyId = `-- name: GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyId :many
SELECT
agricultural_broker_agent_properties_branch_document.id,
agricultural_broker_agent_properties_branch_document.documents_categories_id,
agricultural_broker_agent_properties_branch_document.documents_subcategory_id,
agricultural_broker_agent_properties_branch_document.file_url,
agricultural_broker_agent_properties_branch_document.created_at,
agricultural_broker_agent_properties_branch_document.updated_at,
agricultural_broker_agent_properties_branch_document.agricultural_broker_agent_properties_branch_id,
agricultural_broker_agent_properties_branch_document.status,
agricultural_broker_agent_properties_branch_document.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_broker_agent_properties_branch_document
LEFT JOIN documents_category ON documents_category.id = agricultural_broker_agent_properties_branch_document.documents_categories_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_broker_agent_properties_branch_document.documents_subcategory_id
WHERE
agricultural_broker_agent_properties_branch_id = $3
ORDER BY
agricultural_broker_agent_properties_branch_document.id
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdParams struct {
	Limit                                     int32 `json:"limit"`
	Offset                                    int32 `json:"offset"`
	AgriculturalBrokerAgentPropertiesBranchID int64 `json:"agricultural_broker_agent_properties_branch_id"`
}

type GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdRow struct {
	ID                                        int64       `json:"id"`
	DocumentsCategoriesID                     int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                    int64       `json:"documents_subcategory_id"`
	FileUrl                                   []string    `json:"file_url"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	Status                                    int64       `json:"status"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
	Category                                  pgtype.Text `json:"category"`
	SubCategory                               pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyId(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdParams) ([]GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyBranchDocByPropertyId, arg.Limit, arg.Offset, arg.AgriculturalBrokerAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdRow
	for rows.Next() {
		var i GetAllAgriculturalBrokerAgentPropertyBranchDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoriesID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalBrokerAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalBrokerAgentPropertyDocByPropertyId = `-- name: GetAllAgriculturalBrokerAgentPropertyDocByPropertyId :many
SELECT
agricultural_broker_agent_properties_documents.id, agricultural_broker_agent_properties_documents.documents_category_id, agricultural_broker_agent_properties_documents.documents_subcategory_id, agricultural_broker_agent_properties_documents.file_url, agricultural_broker_agent_properties_documents.created_at, agricultural_broker_agent_properties_documents.updated_at, agricultural_broker_agent_properties_documents.agricultural_broker_agent_properties_id, agricultural_broker_agent_properties_documents.status, agricultural_broker_agent_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_broker_agent_properties_documents
LEFT JOIN documents_category ON documents_category.id = agricultural_broker_agent_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_broker_agent_properties_documents.documents_subcategory_id
WHERE
agricultural_broker_agent_properties_id = $3
ORDER BY
agricultural_broker_agent_properties_documents.id OFFSET $2
LIMIT $1
`

type GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdParams struct {
	Limit                               int32 `json:"limit"`
	Offset                              int32 `json:"offset"`
	AgriculturalBrokerAgentPropertiesID int64 `json:"agricultural_broker_agent_properties_id"`
}

type GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdRow struct {
	ID                                  int64       `json:"id"`
	DocumentsCategoryID                 int64       `json:"documents_category_id"`
	DocumentsSubcategoryID              int64       `json:"documents_subcategory_id"`
	FileUrl                             []string    `json:"file_url"`
	CreatedAt                           time.Time   `json:"created_at"`
	UpdatedAt                           time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesID int64       `json:"agricultural_broker_agent_properties_id"`
	Status                              int64       `json:"status"`
	IsBranch                            pgtype.Bool `json:"is_branch"`
	Category                            pgtype.Text `json:"category"`
	SubCategory                         pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyDocByPropertyId, arg.Limit, arg.Offset, arg.AgriculturalBrokerAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdRow
	for rows.Next() {
		var i GetAllAgriculturalBrokerAgentPropertyDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalBrokerAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyId :many
SELECT
agricultural_freelancer_properties_documents.id,
agricultural_freelancer_properties_documents.documents_category_id,
agricultural_freelancer_properties_documents.documents_subcategory_id,
agricultural_freelancer_properties_documents.file_url,
agricultural_freelancer_properties_documents.created_at,
agricultural_freelancer_properties_documents.updated_at,
agricultural_freelancer_properties_documents.agricultural_freelancer_properties_id,
agricultural_freelancer_properties_documents.status,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_freelancer_properties_documents
LEFT JOIN documents_category ON documents_category.id = agricultural_freelancer_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_freelancer_properties_documents.documents_subcategory_id
WHERE
agricultural_freelancer_properties_documents.agricultural_freelancer_properties_id = $3
ORDER BY
agricultural_freelancer_properties_documents.id
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdParams struct {
	Limit                              int32 `json:"limit"`
	Offset                             int32 `json:"offset"`
	AgriculturalFreelancerPropertiesID int64 `json:"agricultural_freelancer_properties_id"`
}

type GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdRow struct {
	ID                                 int64       `json:"id"`
	DocumentsCategoryID                int64       `json:"documents_category_id"`
	DocumentsSubcategoryID             int64       `json:"documents_subcategory_id"`
	FileUrl                            []string    `json:"file_url"`
	CreatedAt                          time.Time   `json:"created_at"`
	UpdatedAt                          time.Time   `json:"updated_at"`
	AgriculturalFreelancerPropertiesID int64       `json:"agricultural_freelancer_properties_id"`
	Status                             int64       `json:"status"`
	Category                           pgtype.Text `json:"category"`
	SubCategory                        pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, arg GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdParams) ([]GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalFreelancerPropertyDocByFreelancerPropertyId, arg.Limit, arg.Offset, arg.AgriculturalFreelancerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdRow
	for rows.Next() {
		var i GetAllAgriculturalFreelancerPropertyDocByFreelancerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalFreelancerPropertiesID,
			&i.Status,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalOwnerPropertyDocsByOwnerPropertyId = `-- name: GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyId :many
SELECT
agricultural_owner_properties_documents.id, agricultural_owner_properties_documents.documents_category_id, agricultural_owner_properties_documents.documents_subcategory_id, agricultural_owner_properties_documents.file_url, agricultural_owner_properties_documents.created_at, agricultural_owner_properties_documents.updated_at, agricultural_owner_properties_documents.agricultural_owner_properties_id, agricultural_owner_properties_documents.status, agricultural_owner_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
agricultural_owner_properties_documents
LEFT JOIN documents_category ON documents_category.id = agricultural_owner_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = agricultural_owner_properties_documents.documents_subcategory_id
WHERE
agricultural_owner_properties_documents.agricultural_owner_properties_id = $3
ORDER BY
agricultural_owner_properties_documents.id OFFSET $2
LIMIT $1
`

type GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdParams struct {
	Limit                         int32 `json:"limit"`
	Offset                        int32 `json:"offset"`
	AgriculturalOwnerPropertiesID int64 `json:"agricultural_owner_properties_id"`
}

type GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdRow struct {
	ID                            int64       `json:"id"`
	DocumentsCategoryID           int64       `json:"documents_category_id"`
	DocumentsSubcategoryID        int64       `json:"documents_subcategory_id"`
	FileUrl                       []string    `json:"file_url"`
	CreatedAt                     time.Time   `json:"created_at"`
	UpdatedAt                     time.Time   `json:"updated_at"`
	AgriculturalOwnerPropertiesID int64       `json:"agricultural_owner_properties_id"`
	Status                        int64       `json:"status"`
	IsBranch                      pgtype.Bool `json:"is_branch"`
	Category                      pgtype.Text `json:"category"`
	SubCategory                   pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyId(ctx context.Context, arg GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdParams) ([]GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalOwnerPropertyDocsByOwnerPropertyId, arg.Limit, arg.Offset, arg.AgriculturalOwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdRow
	for rows.Next() {
		var i GetAllAgriculturalOwnerPropertyDocsByOwnerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalOwnerPropertiesID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalProperties = `-- name: GetAllAgriculturalProperties :many
WITH x AS (
    SELECT
        id,
        property_title,
        property_title_arabic,
        description,
        description_arabic,
        is_verified,
        property_rank,
        addresses_id,
        locations_id,
        property_types_id,
        facilities_id,
        amenities_id,
        status,
        created_at,
        updated_at,
        is_show_owner_info,
        property,
        countries_id,
        ref_no,
        FALSE AS is_branch,
        category
    FROM
        agricultural_freelancer_properties afp
    WHERE
       (CASE
            WHEN $3::bigint = 0 THEN true
            WHEN $3::bigint = 1 THEN afp.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
            WHEN $3::bigint = 2 THEN afp.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]))
            WHEN $3::bigint = 3 THEN afp.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
            WHEN $3::bigint = 4 THEN afp.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
        END)

        AND (CASE
            WHEN $4::bigint = 0 THEN true
            WHEN $4::bigint = 1 THEN afp.category = LOWER($10)
        END)

        AND (CASE
            WHEN $5::bigint = 0 THEN (status != 5 AND status != 6)
            WHEN $5::bigint = 1 THEN (status != 5 AND status = 6)
            WHEN $5::bigint = 2 THEN (status = 5 AND status != 6)
        END)

    UNION ALL

    SELECT
        id,
        property_title,
        property_title_arabic,
        description,
        description_arabic,
        is_verified,
        property_rank,
        addresses_id,
        locations_id,
        property_types_id,
        facilities_id,
        amenities_id,
        status,
        created_at,
        updated_at,
        is_show_owner_info,
        property,
        countries_id,
        ref_no,
        FALSE AS is_branch,
        category
    FROM
        agricultural_owner_properties aop
    WHERE
        (CASE
            WHEN $3::bigint = 0 THEN true
            WHEN $3::bigint = 1 THEN aop.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
            WHEN $3::bigint = 2 THEN aop.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]))
            WHEN $3::bigint = 3 THEN aop.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
            WHEN $3::bigint = 4 THEN aop.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
        END)

        AND (CASE
            WHEN $4::bigint = 0 THEN true
            WHEN $4::bigint = 1 THEN aop.category = LOWER($10)
        END)

        AND (CASE
            WHEN $5::bigint = 0 THEN (status != 5 AND status != 6)
            WHEN $5::bigint = 1 THEN (status != 5 AND status = 6)
            WHEN $5::bigint = 2 THEN (status = 5 AND status != 6)
        END)

    UNION ALL

    SELECT
        id,
        property_title,
        property_title_arabic,
        description,
        description_arabic,
        is_verified,
        property_rank,
        addresses_id,
        locations_id,
        property_types_id,
        facilities_id,
        amenities_id,
        status,
        created_at,
        updated_at,
        is_show_owner_info,
        property,
        countries_id,
        ref_no,
        is_branch,
        category
    FROM
        agricultural_broker_agent_properties abap
    WHERE
        (CASE
            WHEN $3::bigint = 0 THEN true
            WHEN $3::bigint = 1 THEN abap.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
            WHEN $3::bigint = 2 THEN abap.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]))
            WHEN $3::bigint = 3 THEN abap.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
            WHEN $3::bigint = 4 THEN abap.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
        END)

        AND (CASE
            WHEN $4::bigint = 0 THEN true
            WHEN $4::bigint = 1 THEN abap.category = LOWER($10)
        END)

        AND (CASE
            WHEN $5::bigint = 0 THEN (status != 5 AND status != 6)
            WHEN $5::bigint = 1 THEN (status != 5 AND status = 6)
            WHEN $5::bigint = 2 THEN (status = 5 AND status != 6)
        END)

    UNION ALL

    SELECT
        id,
        property_title,
        property_title_arabic,
        description,
        description_arabic,
        is_verified,
        property_rank,
        addresses_id,
        locations_id,
        property_types_id,
        facilities_id,
        amenities_id,
        status,
        created_at,
        updated_at,
        is_show_owner_info,
        property,
        countries_id,
        ref_no,
        is_branch,
        category
    FROM
        agricultural_broker_agent_properties_branch abapb
    WHERE
        (CASE
            WHEN $3::bigint = 0 THEN true
            WHEN $3::bigint = 1 THEN abapb.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6)
            WHEN $3::bigint = 2 THEN abapb.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]))
            WHEN $3::bigint = 3 THEN abapb.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]))
            WHEN $3::bigint = 4 THEN abapb.addresses_id IN (SELECT id FROM addresses WHERE addresses.cities_id = $6 AND communities_id = ANY($7::bigint[]) AND sub_communities_id = ANY($8::bigint[]) AND addresses.locations_id = $9)
        END)

        AND (CASE
            WHEN $4::bigint = 0 THEN true
            WHEN $4::bigint = 1 THEN abapb.category = LOWER($10)
        END)

        AND (CASE
            WHEN $5::bigint = 0 THEN (status != 5 AND status != 6)
            WHEN $5::bigint = 1 THEN (status != 5 AND status = 6)
            WHEN $5::bigint = 2 THEN (status = 5 AND status != 6)
        END)
)
SELECT
    id,
    property_title,
    property_title_arabic,
    description,
    description_arabic,
    is_verified,
    property_rank,
    addresses_id,
    locations_id,
    property_types_id,
    facilities_id,
    amenities_id,
    status,
    created_at,
    updated_at,
    is_show_owner_info,
    property,
    countries_id,
    ref_no,
    is_branch,
    category
FROM
    x
ORDER BY
    id
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalPropertiesParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	Column3     int64       `json:"column_3"`
	Column4     int64       `json:"column_4"`
	Column5     int64       `json:"column_5"`
	CitiesID    pgtype.Int8 `json:"cities_id"`
	Column7     []int64     `json:"column_7"`
	Column8     []int64     `json:"column_8"`
	LocationsID pgtype.Int8 `json:"locations_id"`
	Lower       string      `json:"lower"`
}

type GetAllAgriculturalPropertiesRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
}

func (q *Queries) GetAllAgriculturalProperties(ctx context.Context, arg GetAllAgriculturalPropertiesParams) ([]GetAllAgriculturalPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalProperties,
		arg.Limit,
		arg.Offset,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.CitiesID,
		arg.Column7,
		arg.Column8,
		arg.LocationsID,
		arg.Lower,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalPropertiesRow
	for rows.Next() {
		var i GetAllAgriculturalPropertiesRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertiesByCategory = `-- name: GetAllAgriculturalPropertiesByCategory :many
WITH x AS (
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
  ref_no,
 FALSE AS is_branch,
 category
 FROM
 agricultural_freelancer_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
  locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 FALSE AS is_branch,
 category
 FROM
 agricultural_owner_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 is_branch,
 category
 FROM
 agricultural_broker_agent_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 is_branch,
 category
 FROM
 agricultural_broker_agent_properties_branch
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 )
 SELECT
 id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category
 FROM
 x
 ORDER BY
 id
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalPropertiesByCategoryParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Lower  string `json:"lower"`
}

type GetAllAgriculturalPropertiesByCategoryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
}

func (q *Queries) GetAllAgriculturalPropertiesByCategory(ctx context.Context, arg GetAllAgriculturalPropertiesByCategoryParams) ([]GetAllAgriculturalPropertiesByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertiesByCategory, arg.Limit, arg.Offset, arg.Lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalPropertiesByCategoryRow
	for rows.Next() {
		var i GetAllAgriculturalPropertiesByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertiesByCountry = `-- name: GetAllAgriculturalPropertiesByCountry :many
WITH x AS (
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
addresses_id,
 locations_id,
 property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
unit_types,
property_name
FROM
agricultural_freelancer_properties
WHERE
agricultural_freelancer_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
unit_types,
property_name
FROM
agricultural_owner_properties
WHERE
agricultural_owner_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
unit_types,
property_name
FROM
agricultural_broker_agent_properties
WHERE
agricultural_broker_agent_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
unit_types,
property_name
FROM
agricultural_broker_agent_properties_branch
WHERE
agricultural_broker_agent_properties_branch.countries_id = $3
AND(status != 5
AND status != 6)
)
SELECT
 id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category, unit_types, property_name
 FROM
 x
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalPropertiesByCountryParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CountriesID int64 `json:"countries_id"`
}

type GetAllAgriculturalPropertiesByCountryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
	UnitTypes           []int64     `json:"unit_types"`
	PropertyName        string      `json:"property_name"`
}

func (q *Queries) GetAllAgriculturalPropertiesByCountry(ctx context.Context, arg GetAllAgriculturalPropertiesByCountryParams) ([]GetAllAgriculturalPropertiesByCountryRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertiesByCountry, arg.Limit, arg.Offset, arg.CountriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalPropertiesByCountryRow
	for rows.Next() {
		var i GetAllAgriculturalPropertiesByCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
			&i.UnitTypes,
			&i.PropertyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertiesByNotEqualCountry = `-- name: GetAllAgriculturalPropertiesByNotEqualCountry :many
WITH x AS (
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
unit_types,
property_name
FROM
agricultural_freelancer_properties
WHERE
agricultural_freelancer_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
unit_types,
property_name
FROM
agricultural_owner_properties
WHERE
agricultural_owner_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
unit_types,
property_name
FROM
agricultural_broker_agent_properties
WHERE
agricultural_broker_agent_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
unit_types,
property_name
FROM
agricultural_broker_agent_properties_branch
WHERE
agricultural_broker_agent_properties_branch.countries_id != $3
AND(status != 5
AND status != 6)
)
SELECT
id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category, unit_types, property_name
FROM
x
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllAgriculturalPropertiesByNotEqualCountryParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CountriesID int64 `json:"countries_id"`
}

type GetAllAgriculturalPropertiesByNotEqualCountryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
	UnitTypes           []int64     `json:"unit_types"`
	PropertyName        string      `json:"property_name"`
}

func (q *Queries) GetAllAgriculturalPropertiesByNotEqualCountry(ctx context.Context, arg GetAllAgriculturalPropertiesByNotEqualCountryParams) ([]GetAllAgriculturalPropertiesByNotEqualCountryRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertiesByNotEqualCountry, arg.Limit, arg.Offset, arg.CountriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalPropertiesByNotEqualCountryRow
	for rows.Next() {
		var i GetAllAgriculturalPropertiesByNotEqualCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
			&i.UnitTypes,
			&i.PropertyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertiesByStatus = `-- name: GetAllAgriculturalPropertiesByStatus :many
WITH x AS(SELECT agricultural_freelancer_properties.id,agricultural_freelancer_properties.property_title, agricultural_freelancer_properties.property_name,agricultural_freelancer_properties.addresses_id,agricultural_freelancer_properties.property_types_id,agricultural_freelancer_properties.property,agricultural_freelancer_properties.ref_no,FALSE AS is_branch
FROM agricultural_freelancer_properties WHERE agricultural_freelancer_properties.status=$3::bigint
UNION ALL SELECT agricultural_owner_properties.id,agricultural_owner_properties.property_title,agricultural_owner_properties.property_name, agricultural_owner_properties.addresses_id,agricultural_owner_properties.property_types_id,agricultural_owner_properties.property,agricultural_owner_properties.ref_no,FALSE AS is_branch
FROM agricultural_owner_properties WHERE agricultural_owner_properties.status=$3::bigint
UNION ALL SELECT agricultural_broker_agent_properties.id,agricultural_broker_agent_properties.property_title,agricultural_broker_agent_properties.property_name,agricultural_broker_agent_properties.addresses_id,agricultural_broker_agent_properties.property_types_id,agricultural_broker_agent_properties.property,agricultural_broker_agent_properties.ref_no,agricultural_broker_agent_properties.is_branch AS is_branch
FROM agricultural_broker_agent_properties WHERE agricultural_broker_agent_properties.status=$3::bigint
UNION ALL SELECT agricultural_broker_agent_properties_branch.id,agricultural_broker_agent_properties_branch.property_title,agricultural_broker_agent_properties_branch.property_name ,agricultural_broker_agent_properties_branch.addresses_id,agricultural_broker_agent_properties_branch.property_types_id,agricultural_broker_agent_properties_branch.property,agricultural_broker_agent_properties_branch.ref_no,agricultural_broker_agent_properties_branch.is_branch AS is_branch
FROM agricultural_broker_agent_properties_branch WHERE agricultural_broker_agent_properties_branch.status=$3::bigint)
SELECT id,property_title,property_name,addresses_id,property_types_id,property,ref_no,is_branch FROM x
 ORDER BY id LIMIT $1 OFFSET $2
`

type GetAllAgriculturalPropertiesByStatusParams struct {
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
	Column3 int64 `json:"column_3"`
}

type GetAllAgriculturalPropertiesByStatusRow struct {
	ID              int64       `json:"id"`
	PropertyTitle   string      `json:"property_title"`
	PropertyName    string      `json:"property_name"`
	AddressesID     int64       `json:"addresses_id"`
	PropertyTypesID int64       `json:"property_types_id"`
	Property        int64       `json:"property"`
	RefNo           string      `json:"ref_no"`
	IsBranch        pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllAgriculturalPropertiesByStatus(ctx context.Context, arg GetAllAgriculturalPropertiesByStatusParams) ([]GetAllAgriculturalPropertiesByStatusRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertiesByStatus, arg.Limit, arg.Offset, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalPropertiesByStatusRow
	for rows.Next() {
		var i GetAllAgriculturalPropertiesByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyName,
			&i.AddressesID,
			&i.PropertyTypesID,
			&i.Property,
			&i.RefNo,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalRents = `-- name: GetAllAgriculturalRents :many
SELECT agricultural_freelancer_properties.ref_no,
 agricultural_freelancer_properties.property_title,
 agricultural_freelancer_properties.category,
 agricultural_freelancer_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_freelancer_properties
 JOIN agricultural_properties_facts on agricultural_freelancer_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_freelancer_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'rent' and agricultural_properties_facts.property = 2
 UNION ALL
 SELECT agricultural_broker_agent_properties.ref_no,
 agricultural_broker_agent_properties.property_title,
 agricultural_broker_agent_properties.category,
 agricultural_broker_agent_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_broker_agent_properties
 JOIN agricultural_properties_facts on agricultural_broker_agent_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_broker_agent_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'rent' and agricultural_properties_facts.property = 3
 UNION ALL
 SELECT agricultural_owner_properties.ref_no,
 agricultural_owner_properties.property_title,
 agricultural_owner_properties.category,
 agricultural_owner_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_owner_properties
 JOIN agricultural_properties_facts on agricultural_owner_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_owner_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'rent' and agricultural_properties_facts.property = 4
 UNION ALL
 SELECT agricultural_broker_agent_properties_branch.ref_no,
 agricultural_broker_agent_properties_branch.property_title,
 agricultural_broker_agent_properties_branch.category,
 agricultural_broker_agent_properties_branch.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_broker_agent_properties_branch
 JOIN agricultural_properties_facts on agricultural_broker_agent_properties_branch.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_broker_agent_properties_branch.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'rent' and agricultural_properties_facts.property = 1
 LIMIT $1 OFFSET $2
`

type GetAllAgriculturalRentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAgriculturalRentsRow struct {
	RefNo         string      `json:"ref_no"`
	PropertyTitle string      `json:"property_title"`
	Category      string      `json:"category"`
	UnitTypes     []int64     `json:"unit_types"`
	Price         pgtype.Int8 `json:"price"`
	LifeStyle     pgtype.Int8 `json:"life_style"`
	Bedroom       pgtype.Text `json:"bedroom"`
	PlotArea      pgtype.Int8 `json:"plot_area"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Country       string      `json:"country"`
	City          string      `json:"city"`
}

func (q *Queries) GetAllAgriculturalRents(ctx context.Context, arg GetAllAgriculturalRentsParams) ([]GetAllAgriculturalRentsRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalRents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalRentsRow
	for rows.Next() {
		var i GetAllAgriculturalRentsRow
		if err := rows.Scan(
			&i.RefNo,
			&i.PropertyTitle,
			&i.Category,
			&i.UnitTypes,
			&i.Price,
			&i.LifeStyle,
			&i.Bedroom,
			&i.PlotArea,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Country,
			&i.City,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalSales = `-- name: GetAllAgriculturalSales :many
SELECT agricultural_freelancer_properties.ref_no,
 agricultural_freelancer_properties.property_title,
 agricultural_freelancer_properties.category,
 agricultural_freelancer_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_freelancer_properties
 JOIN agricultural_properties_facts on agricultural_freelancer_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_freelancer_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'sale' and agricultural_properties_facts.property = 2
 UNION ALL
 SELECT agricultural_broker_agent_properties.ref_no,
 agricultural_broker_agent_properties.property_title,
 agricultural_broker_agent_properties.category,
 agricultural_broker_agent_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_broker_agent_properties
 JOIN agricultural_properties_facts on agricultural_broker_agent_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_broker_agent_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'sale' and agricultural_properties_facts.property = 3
 UNION ALL
 SELECT agricultural_owner_properties.ref_no,
 agricultural_owner_properties.property_title,
 agricultural_owner_properties.category,
 agricultural_owner_properties.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_owner_properties
 JOIN agricultural_properties_facts on agricultural_owner_properties.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_owner_properties.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'sale' and agricultural_properties_facts.property = 4
 UNION ALL
 SELECT agricultural_broker_agent_properties_branch.ref_no,
 agricultural_broker_agent_properties_branch.property_title,
 agricultural_broker_agent_properties_branch.category,
 agricultural_broker_agent_properties_branch.unit_types ,
 agricultural_properties_facts.price,
 agricultural_properties_facts.life_style,
 agricultural_properties_facts.bedroom,
 agricultural_properties_facts.plot_area,
 agricultural_properties_facts.created_at,
 agricultural_properties_facts.updated_at,
 countries.country,
 cities.city
 FROM agricultural_broker_agent_properties_branch
 JOIN agricultural_properties_facts on agricultural_broker_agent_properties_branch.id = agricultural_properties_facts.properties_id
 JOIN addresses on  agricultural_broker_agent_properties_branch.countries_id = addresses.id
 JOIN cities on addresses.cities_id = cities.id
 JOIN countries on addresses.countries_id = countries.id
 WHERE category = 'sale' and agricultural_properties_facts.property = 1
 LIMIT $1 OFFSET $2
`

type GetAllAgriculturalSalesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAgriculturalSalesRow struct {
	RefNo         string      `json:"ref_no"`
	PropertyTitle string      `json:"property_title"`
	Category      string      `json:"category"`
	UnitTypes     []int64     `json:"unit_types"`
	Price         pgtype.Int8 `json:"price"`
	LifeStyle     pgtype.Int8 `json:"life_style"`
	Bedroom       pgtype.Text `json:"bedroom"`
	PlotArea      pgtype.Int8 `json:"plot_area"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	Country       string      `json:"country"`
	City          string      `json:"city"`
}

func (q *Queries) GetAllAgriculturalSales(ctx context.Context, arg GetAllAgriculturalSalesParams) ([]GetAllAgriculturalSalesRow, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalSales, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAgriculturalSalesRow
	for rows.Next() {
		var i GetAllAgriculturalSalesRow
		if err := rows.Scan(
			&i.RefNo,
			&i.PropertyTitle,
			&i.Category,
			&i.UnitTypes,
			&i.Price,
			&i.LifeStyle,
			&i.Bedroom,
			&i.PlotArea,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Country,
			&i.City,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAgriculturalBrokerAgentPropertyBranchDocByPropertyId = `-- name: GetCountAgriculturalBrokerAgentPropertyBranchDocByPropertyId :one
SELECT count(*) FROM agricultural_broker_agent_properties_branch_document
WHERE agricultural_broker_agent_properties_branch_id = $1
`

func (q *Queries) GetCountAgriculturalBrokerAgentPropertyBranchDocByPropertyId(ctx context.Context, agriculturalBrokerAgentPropertiesBranchID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgriculturalBrokerAgentPropertyBranchDocByPropertyId, agriculturalBrokerAgentPropertiesBranchID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAgriculturalBrokerAgentPropertyDocByPropertyId = `-- name: GetCountAgriculturalBrokerAgentPropertyDocByPropertyId :one
SELECT count(*) FROM agricultural_broker_agent_properties_documents
WHERE agricultural_broker_agent_properties_id = $1
`

func (q *Queries) GetCountAgriculturalBrokerAgentPropertyDocByPropertyId(ctx context.Context, agriculturalBrokerAgentPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgriculturalBrokerAgentPropertyDocByPropertyId, agriculturalBrokerAgentPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAgriculturalFreelancerPropertyDocByFreelancerPropertyId = `-- name: GetCountAgriculturalFreelancerPropertyDocByFreelancerPropertyId :one
SELECT count(*)FROM agricultural_freelancer_properties_documents WHERE agricultural_freelancer_properties_documents.agricultural_freelancer_properties_id=$1
`

func (q *Queries) GetCountAgriculturalFreelancerPropertyDocByFreelancerPropertyId(ctx context.Context, agriculturalFreelancerPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgriculturalFreelancerPropertyDocByFreelancerPropertyId, agriculturalFreelancerPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAgriculturalOwnerPropertyDocsByOwnerPropertyId = `-- name: GetCountAgriculturalOwnerPropertyDocsByOwnerPropertyId :one
 SELECT count(*) FROM agricultural_owner_properties_documents
  WHERE agricultural_owner_properties_id = $1
`

func (q *Queries) GetCountAgriculturalOwnerPropertyDocsByOwnerPropertyId(ctx context.Context, agriculturalOwnerPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAgriculturalOwnerPropertyDocsByOwnerPropertyId, agriculturalOwnerPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllAgriculturalPropertiesByCategory = `-- name: GetCountAllAgriculturalPropertiesByCategory :one
WITH x AS (
 SELECT
 id
 FROM
 agricultural_freelancer_properties
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_owner_properties
 WHERE
  category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties_branch
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllAgriculturalPropertiesByCategory(ctx context.Context, lower string) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllAgriculturalPropertiesByCategory, lower)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllAgriculturalPropertiesByCountry = `-- name: GetCountAllAgriculturalPropertiesByCountry :one
WITH x AS (
 SELECT
 id
 FROM
 agricultural_freelancer_properties
 WHERE
 agricultural_freelancer_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_owner_properties
 WHERE
 agricultural_owner_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties
 WHERE
 agricultural_broker_agent_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties_branch
 WHERE
 agricultural_broker_agent_properties_branch.countries_id = $1
 AND(status != 5
 AND status != 6)
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllAgriculturalPropertiesByCountry(ctx context.Context, countriesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllAgriculturalPropertiesByCountry, countriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllAgriculturalPropertiesByNotEqualCountry = `-- name: GetCountAllAgriculturalPropertiesByNotEqualCountry :one
WITH x AS (
 SELECT id
 FROM
 agricultural_freelancer_properties
 WHERE
 agricultural_freelancer_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_owner_properties
 WHERE
 agricultural_owner_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties
 WHERE
 agricultural_broker_agent_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 agricultural_broker_agent_properties_branch
 WHERE
 agricultural_broker_agent_properties_branch.countries_id != $1
 AND(status != 5
 AND status != 6)
)SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllAgriculturalPropertiesByNotEqualCountry(ctx context.Context, countriesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllAgriculturalPropertiesByNotEqualCountry, countriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountStateAgriculturalProperties = `-- name: GetCountStateAgriculturalProperties :one
With x As(
 SELECT agricultural_broker_agent_properties.id from agricultural_broker_agent_properties
 LEFT JOIN addresses ON agricultural_broker_agent_properties.addresses_id = addresses.id Where addresses.states_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_owner_properties.id FROM agricultural_owner_properties
 LEFT JOIN addresses ON agricultural_owner_properties.addresses_id = addresses.id  Where addresses.states_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_broker_agent_properties.id FROM agricultural_broker_agent_properties
 LEFT JOIN addresses ON agricultural_broker_agent_properties.addresses_id = addresses.id  Where addresses.states_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_broker_agent_properties_branch.id FROM agricultural_broker_agent_properties_branch
 LEFT JOIN addresses ON agricultural_broker_agent_properties_branch.addresses_id = addresses.id  Where addresses.states_id = $1 AND status != 5 AND status != 6
) SELECT COUNT(id) FROM x
`

func (q *Queries) GetCountStateAgriculturalProperties(ctx context.Context, statesID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountStateAgriculturalProperties, statesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountSubCommunityAgriculturalProperties = `-- name: GetCountSubCommunityAgriculturalProperties :one
With x As(
 SELECT agricultural_broker_agent_properties.id from agricultural_broker_agent_properties
 LEFT JOIN addresses ON agricultural_broker_agent_properties.addresses_id = addresses.id Where addresses.sub_communities_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_owner_properties.id FROM agricultural_owner_properties
 LEFT JOIN addresses ON agricultural_owner_properties.addresses_id = addresses.id  Where addresses.sub_communities_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_broker_agent_properties.id FROM agricultural_broker_agent_properties
 LEFT JOIN addresses ON agricultural_broker_agent_properties.addresses_id = addresses.id  Where addresses.sub_communities_id = $1 AND status != 5 AND status != 6
 UNION ALL
 SELECT agricultural_broker_agent_properties_branch.id FROM agricultural_broker_agent_properties_branch
 LEFT JOIN addresses ON agricultural_broker_agent_properties_branch.addresses_id = addresses.id  Where addresses.sub_communities_id = $1 AND status != 5 AND status != 6
) SELECT COUNT(id) FROM x
`

func (q *Queries) GetCountSubCommunityAgriculturalProperties(ctx context.Context, subCommunitiesID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountSubCommunityAgriculturalProperties, subCommunitiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
