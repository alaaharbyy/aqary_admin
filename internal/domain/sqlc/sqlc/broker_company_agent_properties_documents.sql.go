// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agent_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyAgentPropertyDocument = `-- name: CreateBrokerCompanyAgentPropertyDocument :one
INSERT INTO broker_company_agent_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    broker_company_agent_properties_id,
    status
)VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_id, status, is_branch
`

type CreateBrokerCompanyAgentPropertyDocumentParams struct {
	DocumentsCategoryID            int64     `json:"documents_category_id"`
	DocumentsSubcategoryID         int64     `json:"documents_subcategory_id"`
	FileUrl                        []string  `json:"file_url"`
	CreatedAt                      time.Time `json:"created_at"`
	UpdatedAt                      time.Time `json:"updated_at"`
	BrokerCompanyAgentPropertiesID int64     `json:"broker_company_agent_properties_id"`
	Status                         int64     `json:"status"`
}

func (q *Queries) CreateBrokerCompanyAgentPropertyDocument(ctx context.Context, arg CreateBrokerCompanyAgentPropertyDocumentParams) (BrokerCompanyAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyAgentPropertyDocument,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentPropertiesID,
		arg.Status,
	)
	var i BrokerCompanyAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteBrokerCompanyAgentPropertyDocument = `-- name: DeleteBrokerCompanyAgentPropertyDocument :exec
DELETE FROM broker_company_agent_properties_documents
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyAgentPropertyDocument(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyAgentPropertyDocument, id)
	return err
}

const getAllBrokerAgentPropertyDocByPropertyId = `-- name: GetAllBrokerAgentPropertyDocByPropertyId :many
SELECT broker_company_agent_properties_documents.id, broker_company_agent_properties_documents.documents_category_id, broker_company_agent_properties_documents.documents_subcategory_id, broker_company_agent_properties_documents.file_url, broker_company_agent_properties_documents.created_at, broker_company_agent_properties_documents.updated_at, broker_company_agent_properties_documents.broker_company_agent_properties_id, broker_company_agent_properties_documents.status, broker_company_agent_properties_documents.is_branch,documents_category.category,documents_subcategory.sub_category FROM broker_company_agent_properties_documents LEFT JOIN documents_category ON documents_category.id=broker_company_agent_properties_documents.documents_category_id LEFT JOIN documents_subcategory ON documents_subcategory.id=broker_company_agent_properties_documents.documents_subcategory_id WHERE broker_company_agent_properties_id=$3 ORDER BY broker_company_agent_properties_documents.id OFFSET $2 LIMIT $1
`

type GetAllBrokerAgentPropertyDocByPropertyIdParams struct {
	Limit                          int32 `json:"limit"`
	Offset                         int32 `json:"offset"`
	BrokerCompanyAgentPropertiesID int64 `json:"broker_company_agent_properties_id"`
}

type GetAllBrokerAgentPropertyDocByPropertyIdRow struct {
	ID                             int64       `json:"id"`
	DocumentsCategoryID            int64       `json:"documents_category_id"`
	DocumentsSubcategoryID         int64       `json:"documents_subcategory_id"`
	FileUrl                        []string    `json:"file_url"`
	CreatedAt                      time.Time   `json:"created_at"`
	UpdatedAt                      time.Time   `json:"updated_at"`
	BrokerCompanyAgentPropertiesID int64       `json:"broker_company_agent_properties_id"`
	Status                         int64       `json:"status"`
	IsBranch                       pgtype.Bool `json:"is_branch"`
	Category                       pgtype.Text `json:"category"`
	SubCategory                    pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllBrokerAgentPropertyDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllBrokerAgentPropertyDocByPropertyId, arg.Limit, arg.Offset, arg.BrokerCompanyAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBrokerAgentPropertyDocByPropertyIdRow
	for rows.Next() {
		var i GetAllBrokerAgentPropertyDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyAgentPropertyDocument = `-- name: GetAllBrokerCompanyAgentPropertyDocument :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_id, status, is_branch FROM broker_company_agent_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyAgentPropertyDocumentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyAgentPropertyDocument(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyDocumentParams) ([]BrokerCompanyAgentPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertyDocument, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentPropertiesDocument
	for rows.Next() {
		var i BrokerCompanyAgentPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyAgentPropertiesID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyAgentPropertyDocById = `-- name: GetBrokerCompanyAgentPropertyDocById :one
SELECT broker_company_agent_properties_documents.id, broker_company_agent_properties_documents.documents_category_id, broker_company_agent_properties_documents.documents_subcategory_id, broker_company_agent_properties_documents.file_url, broker_company_agent_properties_documents.created_at, broker_company_agent_properties_documents.updated_at, broker_company_agent_properties_documents.broker_company_agent_properties_id, broker_company_agent_properties_documents.status, broker_company_agent_properties_documents.is_branch,documents_category.category,documents_subcategory.sub_category 
FROM broker_company_agent_properties_documents 
LEFT JOIN documents_category ON documents_category.id = broker_company_agent_properties_documents.documents_category_id 
LEFT JOIN documents_subcategory ON documents_subcategory.id = broker_company_agent_properties_documents.documents_subcategory_id 
WHERE broker_company_agent_properties_documents.id = $1
`

type GetBrokerCompanyAgentPropertyDocByIdRow struct {
	ID                             int64       `json:"id"`
	DocumentsCategoryID            int64       `json:"documents_category_id"`
	DocumentsSubcategoryID         int64       `json:"documents_subcategory_id"`
	FileUrl                        []string    `json:"file_url"`
	CreatedAt                      time.Time   `json:"created_at"`
	UpdatedAt                      time.Time   `json:"updated_at"`
	BrokerCompanyAgentPropertiesID int64       `json:"broker_company_agent_properties_id"`
	Status                         int64       `json:"status"`
	IsBranch                       pgtype.Bool `json:"is_branch"`
	Category                       pgtype.Text `json:"category"`
	SubCategory                    pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyDocById(ctx context.Context, id int64) (GetBrokerCompanyAgentPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyDocById, id)
	var i GetBrokerCompanyAgentPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyDocument = `-- name: GetBrokerCompanyAgentPropertyDocument :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_id, status, is_branch FROM broker_company_agent_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompanyAgentPropertyDocument(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyDocument, limit)
	var i BrokerCompanyAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT  id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_id, status, is_branch FROM broker_company_agent_properties_documents 
WHERE broker_company_agent_properties_id = $1 
AND
 documents_category_id = $2
AND 
documents_subcategory_id = $3
`

type GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	BrokerCompanyAgentPropertiesID int64 `json:"broker_company_agent_properties_id"`
	DocumentsCategoryID            int64 `json:"documents_category_id"`
	DocumentsSubcategoryID         int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (BrokerCompanyAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.BrokerCompanyAgentPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i BrokerCompanyAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getCountBrokerAgentPropertyDocByPropertyId = `-- name: GetCountBrokerAgentPropertyDocByPropertyId :one
SELECT count(*) FROM broker_company_agent_properties_documents 
WHERE broker_company_agent_properties_id = $1
`

func (q *Queries) GetCountBrokerAgentPropertyDocByPropertyId(ctx context.Context, brokerCompanyAgentPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBrokerAgentPropertyDocByPropertyId, brokerCompanyAgentPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBrokerCompanyAgentPropertyDocument = `-- name: UpdateBrokerCompanyAgentPropertyDocument :one
UPDATE broker_company_agent_properties_documents
SET  documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    broker_company_agent_properties_id = $7,
    status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_id, status, is_branch
`

type UpdateBrokerCompanyAgentPropertyDocumentParams struct {
	ID                             int64     `json:"id"`
	DocumentsCategoryID            int64     `json:"documents_category_id"`
	DocumentsSubcategoryID         int64     `json:"documents_subcategory_id"`
	FileUrl                        []string  `json:"file_url"`
	CreatedAt                      time.Time `json:"created_at"`
	UpdatedAt                      time.Time `json:"updated_at"`
	BrokerCompanyAgentPropertiesID int64     `json:"broker_company_agent_properties_id"`
	Status                         int64     `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyDocument(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyDocumentParams) (BrokerCompanyAgentPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyDocument,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentPropertiesID,
		arg.Status,
	)
	var i BrokerCompanyAgentPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
