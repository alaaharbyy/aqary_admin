// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agent_subscription_quota_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createAgentSubscriptionQuotaBranch = `-- name: CreateAgentSubscriptionQuotaBranch :one
INSERT INTO agent_subscription_quota_branch (
     standard,
     featured,
     premium,
     top_deal,
    created_at,
    updated_at,
    broker_company_branches_agents_id,
    ref_no
)VALUES (
    $1, $2, $3,$4, $5, $6, $7, $8
) RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no
`

type CreateAgentSubscriptionQuotaBranchParams struct {
	Standard                      int64     `json:"standard"`
	Featured                      int64     `json:"featured"`
	Premium                       int64     `json:"premium"`
	TopDeal                       int64     `json:"top_deal"`
	CreatedAt                     time.Time `json:"created_at"`
	UpdatedAt                     time.Time `json:"updated_at"`
	BrokerCompanyBranchesAgentsID int64     `json:"broker_company_branches_agents_id"`
	RefNo                         string    `json:"ref_no"`
}

func (q *Queries) CreateAgentSubscriptionQuotaBranch(ctx context.Context, arg CreateAgentSubscriptionQuotaBranchParams) (AgentSubscriptionQuotaBranch, error) {
	row := q.db.QueryRow(ctx, createAgentSubscriptionQuotaBranch,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyBranchesAgentsID,
		arg.RefNo,
	)
	var i AgentSubscriptionQuotaBranch
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyBranchesAgentsID,
		&i.RefNo,
	)
	return i, err
}

const deleteAgentSubscriptionQuotaBranch = `-- name: DeleteAgentSubscriptionQuotaBranch :exec
DELETE FROM agent_subscription_quota_branch
Where id = $1
`

func (q *Queries) DeleteAgentSubscriptionQuotaBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgentSubscriptionQuotaBranch, id)
	return err
}

const getAgentSubscriptionQuotaBranch = `-- name: GetAgentSubscriptionQuotaBranch :one
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no FROM agent_subscription_quota_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgentSubscriptionQuotaBranch(ctx context.Context, limit int32) (AgentSubscriptionQuotaBranch, error) {
	row := q.db.QueryRow(ctx, getAgentSubscriptionQuotaBranch, limit)
	var i AgentSubscriptionQuotaBranch
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyBranchesAgentsID,
		&i.RefNo,
	)
	return i, err
}

const getAgentSubscriptionQuotaBranchByBrokerCompanyAgentID = `-- name: GetAgentSubscriptionQuotaBranchByBrokerCompanyAgentID :one
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no FROM agent_subscription_quota_branch
Where broker_company_branches_agents_id = $1
`

func (q *Queries) GetAgentSubscriptionQuotaBranchByBrokerCompanyAgentID(ctx context.Context, brokerCompanyBranchesAgentsID int64) (AgentSubscriptionQuotaBranch, error) {
	row := q.db.QueryRow(ctx, getAgentSubscriptionQuotaBranchByBrokerCompanyAgentID, brokerCompanyBranchesAgentsID)
	var i AgentSubscriptionQuotaBranch
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyBranchesAgentsID,
		&i.RefNo,
	)
	return i, err
}

const getAllAgentSubscriptionQuotaBranch = `-- name: GetAllAgentSubscriptionQuotaBranch :many
SELECT id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no FROM agent_subscription_quota_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgentSubscriptionQuotaBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgentSubscriptionQuotaBranch(ctx context.Context, arg GetAllAgentSubscriptionQuotaBranchParams) ([]AgentSubscriptionQuotaBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgentSubscriptionQuotaBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgentSubscriptionQuotaBranch
	for rows.Next() {
		var i AgentSubscriptionQuotaBranch
		if err := rows.Scan(
			&i.ID,
			&i.Standard,
			&i.Featured,
			&i.Premium,
			&i.TopDeal,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyBranchesAgentsID,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgentSubscriptionQuotaBranch = `-- name: UpdateAgentSubscriptionQuotaBranch :one
UPDATE agent_subscription_quota_branch
SET  standard = $2,
    featured = $3,
    premium = $4,
    top_deal = $5,
    created_at = $6,
    updated_at = $7,
    broker_company_branches_agents_id = $8,
    ref_no = $9
Where id = $1
RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no
`

type UpdateAgentSubscriptionQuotaBranchParams struct {
	ID                            int64     `json:"id"`
	Standard                      int64     `json:"standard"`
	Featured                      int64     `json:"featured"`
	Premium                       int64     `json:"premium"`
	TopDeal                       int64     `json:"top_deal"`
	CreatedAt                     time.Time `json:"created_at"`
	UpdatedAt                     time.Time `json:"updated_at"`
	BrokerCompanyBranchesAgentsID int64     `json:"broker_company_branches_agents_id"`
	RefNo                         string    `json:"ref_no"`
}

func (q *Queries) UpdateAgentSubscriptionQuotaBranch(ctx context.Context, arg UpdateAgentSubscriptionQuotaBranchParams) (AgentSubscriptionQuotaBranch, error) {
	row := q.db.QueryRow(ctx, updateAgentSubscriptionQuotaBranch,
		arg.ID,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyBranchesAgentsID,
		arg.RefNo,
	)
	var i AgentSubscriptionQuotaBranch
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyBranchesAgentsID,
		&i.RefNo,
	)
	return i, err
}

const updateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentID = `-- name: UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentID :one
UPDATE agent_subscription_quota_branch
SET  standard = $2,
    featured = $3,
    premium = $4,
    top_deal = $5,
    updated_at = $6
Where  broker_company_branches_agents_id = $1
RETURNING id, standard, featured, premium, top_deal, created_at, updated_at, broker_company_branches_agents_id, ref_no
`

type UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentIDParams struct {
	BrokerCompanyBranchesAgentsID int64     `json:"broker_company_branches_agents_id"`
	Standard                      int64     `json:"standard"`
	Featured                      int64     `json:"featured"`
	Premium                       int64     `json:"premium"`
	TopDeal                       int64     `json:"top_deal"`
	UpdatedAt                     time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentID(ctx context.Context, arg UpdateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentIDParams) (AgentSubscriptionQuotaBranch, error) {
	row := q.db.QueryRow(ctx, updateAgentSubscriptionQuotaBranchByBrokerCompanyBranchAgentID,
		arg.BrokerCompanyBranchesAgentsID,
		arg.Standard,
		arg.Featured,
		arg.Premium,
		arg.TopDeal,
		arg.UpdatedAt,
	)
	var i AgentSubscriptionQuotaBranch
	err := row.Scan(
		&i.ID,
		&i.Standard,
		&i.Featured,
		&i.Premium,
		&i.TopDeal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyBranchesAgentsID,
		&i.RefNo,
	)
	return i, err
}
