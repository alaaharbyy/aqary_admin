// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: luxury_brands.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLuxuryBrand = `-- name: CreateLuxuryBrand :one
INSERT INTO luxury_brands(
    brand_name,
    description,
    logo_url,
    status,
    created_at,
    updated_at
)VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, brand_name, description, logo_url, status, created_at, updated_at
`

type CreateLuxuryBrandParams struct {
	BrandName   string      `json:"brand_name"`
	Description pgtype.Text `json:"description"`
	LogoUrl     string      `json:"logo_url"`
	Status      int64       `json:"status"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) CreateLuxuryBrand(ctx context.Context, arg CreateLuxuryBrandParams) (LuxuryBrand, error) {
	row := q.db.QueryRow(ctx, createLuxuryBrand,
		arg.BrandName,
		arg.Description,
		arg.LogoUrl,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i LuxuryBrand
	err := row.Scan(
		&i.ID,
		&i.BrandName,
		&i.Description,
		&i.LogoUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLuxuryBrand = `-- name: DeleteLuxuryBrand :exec
DELETE  FROM luxury_brands 
WHERE id=$1
`

func (q *Queries) DeleteLuxuryBrand(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteLuxuryBrand, id)
	return err
}

const getLuxuryBrand = `-- name: GetLuxuryBrand :one
SELECT luxury_brands.id, luxury_brands.brand_name, luxury_brands.description, luxury_brands.logo_url, luxury_brands.status, luxury_brands.created_at, luxury_brands.updated_at 
FROM 
    luxury_brands 
WHERE id=$1
`

type GetLuxuryBrandRow struct {
	LuxuryBrand LuxuryBrand `json:"luxury_brand"`
}

func (q *Queries) GetLuxuryBrand(ctx context.Context, id int64) (GetLuxuryBrandRow, error) {
	row := q.db.QueryRow(ctx, getLuxuryBrand, id)
	var i GetLuxuryBrandRow
	err := row.Scan(
		&i.LuxuryBrand.ID,
		&i.LuxuryBrand.BrandName,
		&i.LuxuryBrand.Description,
		&i.LuxuryBrand.LogoUrl,
		&i.LuxuryBrand.Status,
		&i.LuxuryBrand.CreatedAt,
		&i.LuxuryBrand.UpdatedAt,
	)
	return i, err
}

const getLuxuryBrandByName = `-- name: GetLuxuryBrandByName :one
SELECT 
    luxury_brands.id, luxury_brands.brand_name, luxury_brands.description, luxury_brands.logo_url, luxury_brands.status, luxury_brands.created_at, luxury_brands.updated_at 
FROM 
    luxury_brands 
WHERE brand_name=$1
`

type GetLuxuryBrandByNameRow struct {
	LuxuryBrand LuxuryBrand `json:"luxury_brand"`
}

func (q *Queries) GetLuxuryBrandByName(ctx context.Context, brandName string) (GetLuxuryBrandByNameRow, error) {
	row := q.db.QueryRow(ctx, getLuxuryBrandByName, brandName)
	var i GetLuxuryBrandByNameRow
	err := row.Scan(
		&i.LuxuryBrand.ID,
		&i.LuxuryBrand.BrandName,
		&i.LuxuryBrand.Description,
		&i.LuxuryBrand.LogoUrl,
		&i.LuxuryBrand.Status,
		&i.LuxuryBrand.CreatedAt,
		&i.LuxuryBrand.UpdatedAt,
	)
	return i, err
}

const getLuxuryBrands = `-- name: GetLuxuryBrands :many
SELECT luxury_brands.id, luxury_brands.brand_name, luxury_brands.description, luxury_brands.logo_url, luxury_brands.status, luxury_brands.created_at, luxury_brands.updated_at 
FROM 
    luxury_brands 
WHERE status!=6 
ORDER BY updated_at DESC
LIMIT $2
OFFSET $1
`

type GetLuxuryBrandsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetLuxuryBrandsRow struct {
	LuxuryBrand LuxuryBrand `json:"luxury_brand"`
}

func (q *Queries) GetLuxuryBrands(ctx context.Context, arg GetLuxuryBrandsParams) ([]GetLuxuryBrandsRow, error) {
	rows, err := q.db.Query(ctx, getLuxuryBrands, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLuxuryBrandsRow
	for rows.Next() {
		var i GetLuxuryBrandsRow
		if err := rows.Scan(
			&i.LuxuryBrand.ID,
			&i.LuxuryBrand.BrandName,
			&i.LuxuryBrand.Description,
			&i.LuxuryBrand.LogoUrl,
			&i.LuxuryBrand.Status,
			&i.LuxuryBrand.CreatedAt,
			&i.LuxuryBrand.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLuxuryBrandsCount = `-- name: GetLuxuryBrandsCount :one
SELECT count(luxury_brands.id) 
FROM 
    luxury_brands 
WHERE status!=6
`

func (q *Queries) GetLuxuryBrandsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getLuxuryBrandsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateLuxuryBrand = `-- name: UpdateLuxuryBrand :one
UPDATE luxury_brands 
SET 
    brand_name=$2,
    description=$3,
    logo_url=$4,
    updated_at=$5
WHERE id=$1
RETURNING id, brand_name, description, logo_url, status, created_at, updated_at
`

type UpdateLuxuryBrandParams struct {
	ID          int64       `json:"id"`
	BrandName   string      `json:"brand_name"`
	Description pgtype.Text `json:"description"`
	LogoUrl     string      `json:"logo_url"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateLuxuryBrand(ctx context.Context, arg UpdateLuxuryBrandParams) (LuxuryBrand, error) {
	row := q.db.QueryRow(ctx, updateLuxuryBrand,
		arg.ID,
		arg.BrandName,
		arg.Description,
		arg.LogoUrl,
		arg.UpdatedAt,
	)
	var i LuxuryBrand
	err := row.Scan(
		&i.ID,
		&i.BrandName,
		&i.Description,
		&i.LogoUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateLuxuryBrandStatus = `-- name: UpdateLuxuryBrandStatus :one
UPDATE luxury_brands 
SET 
    status=$2
WHERE id=$1
RETURNING id, brand_name, description, logo_url, status, created_at, updated_at
`

type UpdateLuxuryBrandStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateLuxuryBrandStatus(ctx context.Context, arg UpdateLuxuryBrandStatusParams) (LuxuryBrand, error) {
	row := q.db.QueryRow(ctx, updateLuxuryBrandStatus, arg.ID, arg.Status)
	var i LuxuryBrand
	err := row.Scan(
		&i.ID,
		&i.BrandName,
		&i.Description,
		&i.LogoUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
