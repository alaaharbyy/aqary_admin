// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_property.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllIndustrialPropertiesByCategory = `-- name: GetAllIndustrialPropertiesByCategory :many
WITH x AS (
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
  ref_no,
 FALSE AS is_branch,
 category
 FROM
 industrial_freelancer_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
  locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 FALSE AS is_branch,
 category
 FROM
 industrial_owner_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 is_branch,
 category
 FROM
 industrial_broker_agent_properties
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id,
 property_title,
 property_title_arabic,
 description,
 description_arabic,
 is_verified,
 property_rank,
 addresses_id,
 locations_id,
 property_types_id,
 facilities_id,
 amenities_id,
 status,
 created_at,
 updated_at,
 is_show_owner_info,
 property,
 countries_id,
 ref_no,
 is_branch,
 category 
 FROM
 industrial_broker_agent_properties_branch
 WHERE
 category = LOWER($3)
 AND(status != 5
 AND status != 6)
 )
 SELECT
 id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category
 FROM
 x
 ORDER BY
 id
LIMIT $1 OFFSET $2
`

type GetAllIndustrialPropertiesByCategoryParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Lower  string `json:"lower"`
}

type GetAllIndustrialPropertiesByCategoryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
}

func (q *Queries) GetAllIndustrialPropertiesByCategory(ctx context.Context, arg GetAllIndustrialPropertiesByCategoryParams) ([]GetAllIndustrialPropertiesByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertiesByCategory, arg.Limit, arg.Offset, arg.Lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialPropertiesByCategoryRow
	for rows.Next() {
		var i GetAllIndustrialPropertiesByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialPropertiesByCountry = `-- name: GetAllIndustrialPropertiesByCountry :many
WITH x AS (
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
property_name
FROM
industrial_freelancer_properties
WHERE
industrial_freelancer_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
property_name
FROM
industrial_owner_properties
WHERE
industrial_owner_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
property_name
FROM
industrial_broker_agent_properties
WHERE
industrial_broker_agent_properties.countries_id = $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
property_name
FROM
industrial_broker_agent_properties_branch
WHERE
industrial_broker_agent_properties_branch.countries_id = $3
AND(status != 5
AND status != 6)
)
SELECT
 id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category, property_name
 FROM
 x
 ORDER BY
 id
LIMIT $1 OFFSET $2
`

type GetAllIndustrialPropertiesByCountryParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CountriesID int64 `json:"countries_id"`
}

type GetAllIndustrialPropertiesByCountryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
	PropertyName        string      `json:"property_name"`
}

func (q *Queries) GetAllIndustrialPropertiesByCountry(ctx context.Context, arg GetAllIndustrialPropertiesByCountryParams) ([]GetAllIndustrialPropertiesByCountryRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertiesByCountry, arg.Limit, arg.Offset, arg.CountriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialPropertiesByCountryRow
	for rows.Next() {
		var i GetAllIndustrialPropertiesByCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
			&i.PropertyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialPropertiesByNotEqualCountry = `-- name: GetAllIndustrialPropertiesByNotEqualCountry :many
WITH x AS (
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
property_name
FROM
industrial_freelancer_properties
WHERE
industrial_freelancer_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
FALSE AS is_branch,
category,
property_name
FROM
industrial_owner_properties
WHERE
industrial_owner_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
property_name
FROM
industrial_broker_agent_properties
WHERE
industrial_broker_agent_properties.countries_id != $3
AND(status != 5
AND status != 6)
UNION ALL
SELECT
id,
property_title,
property_title_arabic,
description,
description_arabic,
is_verified,
property_rank,
addresses_id,
locations_id,
property_types_id,
facilities_id,
amenities_id,
status,
created_at,
updated_at,
is_show_owner_info,
property,
countries_id,
ref_no,
is_branch,
category,
property_name
FROM
industrial_broker_agent_properties_branch
WHERE
industrial_broker_agent_properties_branch.countries_id != $3
AND(status != 5
AND status != 6)
)
SELECT
id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, facilities_id, amenities_id, status, created_at, updated_at, is_show_owner_info, property, countries_id, ref_no, is_branch, category, property_name
FROM
x
ORDER BY
id
LIMIT $1 OFFSET $2
`

type GetAllIndustrialPropertiesByNotEqualCountryParams struct {
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
	CountriesID int64 `json:"countries_id"`
}

type GetAllIndustrialPropertiesByNotEqualCountryRow struct {
	ID                  int64       `json:"id"`
	PropertyTitle       string      `json:"property_title"`
	PropertyTitleArabic string      `json:"property_title_arabic"`
	Description         string      `json:"description"`
	DescriptionArabic   string      `json:"description_arabic"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	PropertyRank        int64       `json:"property_rank"`
	AddressesID         int64       `json:"addresses_id"`
	LocationsID         int64       `json:"locations_id"`
	PropertyTypesID     int64       `json:"property_types_id"`
	FacilitiesID        []int64     `json:"facilities_id"`
	AmenitiesID         []int64     `json:"amenities_id"`
	Status              int64       `json:"status"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	IsShowOwnerInfo     pgtype.Bool `json:"is_show_owner_info"`
	Property            int64       `json:"property"`
	CountriesID         int64       `json:"countries_id"`
	RefNo               string      `json:"ref_no"`
	IsBranch            pgtype.Bool `json:"is_branch"`
	Category            string      `json:"category"`
	PropertyName        string      `json:"property_name"`
}

func (q *Queries) GetAllIndustrialPropertiesByNotEqualCountry(ctx context.Context, arg GetAllIndustrialPropertiesByNotEqualCountryParams) ([]GetAllIndustrialPropertiesByNotEqualCountryRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertiesByNotEqualCountry, arg.Limit, arg.Offset, arg.CountriesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialPropertiesByNotEqualCountryRow
	for rows.Next() {
		var i GetAllIndustrialPropertiesByNotEqualCountryRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyTitle,
			&i.PropertyTitleArabic,
			&i.Description,
			&i.DescriptionArabic,
			&i.IsVerified,
			&i.PropertyRank,
			&i.AddressesID,
			&i.LocationsID,
			&i.PropertyTypesID,
			&i.FacilitiesID,
			&i.AmenitiesID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsShowOwnerInfo,
			&i.Property,
			&i.CountriesID,
			&i.RefNo,
			&i.IsBranch,
			&i.Category,
			&i.PropertyName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialPropertiesDetails = `-- name: GetAllIndustrialPropertiesDetails :many
WITH x AS (
SELECT
industrial_freelancer_properties.id,
industrial_freelancer_properties.ref_no,
industrial_freelancer_properties.status,
property_name,
industrial_freelancer_properties.category,
'industrial' AS section,
FALSE AS is_branch,
industrial_freelancer_properties.property,
industrial_freelancer_properties.addresses_id,
industrial_freelancer_properties.users_id,
industrial_freelancer_properties.property_types_id,
industrial_freelancer_properties.unit_types,
property_types. "type"
, industrial_properties_facts.bedroom, industrial_properties_facts.bathroom, industrial_properties_facts.min_area, industrial_properties_facts.max_area, industrial_properties_facts.price, industrial_properties_facts.plot_area
,countries.id as "countries_id", countries.country, states.id as "states_id", states.state, cities.id as "cities_id", cities.city, communities.id as "communities_id", communities.community, sub_communities.id as "sub_communities_id", sub_communities.sub_community, locations.lat, locations.lng

FROM
industrial_freelancer_properties
JOIN property_types ON property_types_id = property_types.id
LEFT JOIN industrial_properties_facts ON  industrial_properties_facts.properties_id = industrial_freelancer_properties.id
LEFT JOIN addresses ON addresses.id = industrial_freelancer_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.country_id
LEFT JOIN states ON states.id = addresses.state_id
LEFT JOIN cities ON cities.id = addresses.city_id
LEFT JOIN communities ON communities.id = addresses.community_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_community_id
LEFT JOIN locations ON locations.id = addresses.locations_id

WHERE industrial_properties_facts.property = 2 AND industrial_properties_facts.is_branch = false AND
industrial_freelancer_properties.category = $1 and industrial_properties_facts.min_area >= $2 and industrial_properties_facts.max_area <= $3 and industrial_properties_facts.price >= $4 and industrial_properties_facts.price <= $5 and industrial_properties_facts.bedroom = $6 and industrial_properties_facts.bathroom = $7
UNION ALL
SELECT
industrial_broker_agent_properties.id,
industrial_broker_agent_properties.ref_no,
industrial_broker_agent_properties.status,
industrial_broker_agent_properties.property_name,
industrial_broker_agent_properties.category,
'industrial' AS section,
FALSE AS is_branch,
industrial_broker_agent_properties.property,
industrial_broker_agent_properties.addresses_id,
industrial_broker_agent_properties.users_id,
industrial_broker_agent_properties.property_types_id,
industrial_broker_agent_properties.unit_types,
property_types. "type"
, industrial_properties_facts.bedroom, industrial_properties_facts.bathroom, industrial_properties_facts.min_area, industrial_properties_facts.max_area, industrial_properties_facts.price, industrial_properties_facts.plot_area
,countries.id as "countries_id", countries.country, states.id as "states_id", states.state, cities.id as "cities_id", cities.city, communities.id as "communities_id", communities.community, sub_communities.id as "sub_communities_id", sub_communities.sub_community, locations.lat, locations.lng

FROM
industrial_broker_agent_properties
JOIN property_types ON property_types_id = property_types.id
LEFT JOIN industrial_properties_facts ON  industrial_properties_facts.properties_id = industrial_broker_agent_properties.id
LEFT JOIN addresses ON addresses.id = industrial_broker_agent_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.country_id
LEFT JOIN states ON states.id = addresses.state_id
LEFT JOIN cities ON cities.id = addresses.city_id
LEFT JOIN communities ON communities.id = addresses.community_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_community_id
LEFT JOIN locations ON locations.id = addresses.locations_id

WHERE industrial_properties_facts.property = 3 AND industrial_properties_facts.is_branch = false AND
industrial_broker_agent_properties.category = $1 and industrial_properties_facts.min_area >= $2 and industrial_properties_facts.max_area <= $3 and industrial_properties_facts.price >= $4 and industrial_properties_facts.price <= $5 and industrial_properties_facts.bedroom = $6 and industrial_properties_facts.bathroom = $7
UNION ALL
SELECT
industrial_broker_agent_properties_branch.id,
industrial_broker_agent_properties_branch.ref_no,
industrial_broker_agent_properties_branch.status,
industrial_broker_agent_properties_branch.property_name,
industrial_broker_agent_properties_branch.category,
'industrial' AS section,
TRUE AS is_branch,
industrial_broker_agent_properties_branch.property,
industrial_broker_agent_properties_branch.addresses_id,
industrial_broker_agent_properties_branch.users_id,
industrial_broker_agent_properties_branch.property_types_id,
industrial_broker_agent_properties_branch.unit_types,
property_types. "type"
, industrial_properties_facts.bedroom, industrial_properties_facts.bathroom, industrial_properties_facts.min_area, industrial_properties_facts.max_area, industrial_properties_facts.price, industrial_properties_facts.plot_area
,countries.id as "countries_id", countries.country, states.id as "states_id", states.state, cities.id as "cities_id", cities.city, communities.id as "communities_id", communities.community, sub_communities.id as "sub_communities_id", sub_communities.sub_community, locations.lat, locations.lng

FROM
industrial_broker_agent_properties_branch
JOIN property_types ON property_types_id = property_types.id
LEFT JOIN industrial_properties_facts ON  industrial_properties_facts.properties_id = industrial_broker_agent_properties_branch.id
LEFT JOIN addresses ON addresses.id = industrial_broker_agent_properties_branch.addresses_id
LEFT JOIN countries ON countries.id = addresses.country_id
LEFT JOIN states ON states.id = addresses.state_id
LEFT JOIN cities ON cities.id = addresses.city_id
LEFT JOIN communities ON communities.id = addresses.community_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_community_id
LEFT JOIN locations ON locations.id = addresses.locations_id

WHERE industrial_properties_facts.property = 3 AND industrial_properties_facts.is_branch = true AND
industrial_broker_agent_properties_branch.category = $1 and industrial_properties_facts.min_area >= $2 and industrial_properties_facts.max_area <= $3 and industrial_properties_facts.price >= $4 and industrial_properties_facts.price <= $5 and industrial_properties_facts.bedroom = $6 and industrial_properties_facts.bathroom = $7
UNION ALL
SELECT
industrial_owner_properties.id,
industrial_owner_properties.ref_no,
industrial_owner_properties.status,
industrial_owner_properties.property_name,
industrial_owner_properties.category,
'industrial' AS section,
FALSE AS is_branch,
industrial_owner_properties.property,
industrial_owner_properties.addresses_id,
industrial_owner_properties.users_id,
industrial_owner_properties.property_types_id,
industrial_owner_properties.unit_types,
property_types. "type"
, industrial_properties_facts.bedroom, industrial_properties_facts.bathroom, industrial_properties_facts.min_area, industrial_properties_facts.max_area, industrial_properties_facts.price, industrial_properties_facts.plot_area
,countries.id as "countries_id", countries.country, states.id as "states_id", states.state, cities.id as "cities_id", cities.city, communities.id as "communities_id", communities.community, sub_communities.id as "sub_communities_id", sub_communities.sub_community, locations.lat, locations.lng

FROM
industrial_owner_properties
JOIN property_types ON property_types_id = property_types.id
LEFT JOIN industrial_properties_facts ON  industrial_properties_facts.properties_id = industrial_owner_properties.id
LEFT JOIN addresses ON addresses.id = industrial_owner_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.country_id
LEFT JOIN states ON states.id = addresses.state_id
LEFT JOIN cities ON cities.id = addresses.city_id
LEFT JOIN communities ON communities.id = addresses.community_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_community_id
LEFT JOIN locations ON locations.id = addresses.locations_id

WHERE industrial_properties_facts.property = 4 AND industrial_properties_facts.is_branch = false AND
industrial_owner_properties.category = $1 and industrial_properties_facts.min_area >= $2 and industrial_properties_facts.max_area <= $3 and industrial_properties_facts.price >= $4 and industrial_properties_facts.price <= $5 and industrial_properties_facts.bedroom = $6 and industrial_properties_facts.bathroom = $7
)
SELECT
id, ref_no, status, property_name, category, section, is_branch, property, addresses_id, users_id, property_types_id, unit_types, type, bedroom, bathroom, min_area, max_area, price, plot_area, countries_id, country, states_id, state, cities_id, city, communities_id, community, sub_communities_id, sub_community, lat, lng
FROM
x
`

type GetAllIndustrialPropertiesDetailsParams struct {
	Category string      `json:"category"`
	MinArea  pgtype.Int8 `json:"min_area"`
	MaxArea  pgtype.Int8 `json:"max_area"`
	Price    pgtype.Int8 `json:"price"`
	Price_2  pgtype.Int8 `json:"price_2"`
	Bedroom  pgtype.Text `json:"bedroom"`
	Bathroom pgtype.Int8 `json:"bathroom"`
}

type GetAllIndustrialPropertiesDetailsRow struct {
	ID               int64       `json:"id"`
	RefNo            string      `json:"ref_no"`
	Status           int64       `json:"status"`
	PropertyName     string      `json:"property_name"`
	Category         string      `json:"category"`
	Section          string      `json:"section"`
	IsBranch         pgtype.Bool `json:"is_branch"`
	Property         int64       `json:"property"`
	AddressesID      int64       `json:"addresses_id"`
	UsersID          int64       `json:"users_id"`
	PropertyTypesID  int64       `json:"property_types_id"`
	UnitTypes        []int64     `json:"unit_types"`
	Type             string      `json:"type"`
	Bedroom          pgtype.Text `json:"bedroom"`
	Bathroom         pgtype.Int8 `json:"bathroom"`
	MinArea          pgtype.Int8 `json:"min_area"`
	MaxArea          pgtype.Int8 `json:"max_area"`
	Price            pgtype.Int8 `json:"price"`
	PlotArea         pgtype.Int8 `json:"plot_area"`
	CountriesID      pgtype.Int8 `json:"countries_id"`
	Country          pgtype.Text `json:"country"`
	StatesID         pgtype.Int8 `json:"states_id"`
	State            pgtype.Text `json:"state"`
	CitiesID         pgtype.Int8 `json:"cities_id"`
	City             pgtype.Text `json:"city"`
	CommunitiesID    pgtype.Int8 `json:"communities_id"`
	Community        pgtype.Text `json:"community"`
	SubCommunitiesID pgtype.Int8 `json:"sub_communities_id"`
	SubCommunity     pgtype.Text `json:"sub_community"`
	Lat              pgtype.Text `json:"lat"`
	Lng              pgtype.Text `json:"lng"`
}

func (q *Queries) GetAllIndustrialPropertiesDetails(ctx context.Context, arg GetAllIndustrialPropertiesDetailsParams) ([]GetAllIndustrialPropertiesDetailsRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialPropertiesDetails,
		arg.Category,
		arg.MinArea,
		arg.MaxArea,
		arg.Price,
		arg.Price_2,
		arg.Bedroom,
		arg.Bathroom,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialPropertiesDetailsRow
	for rows.Next() {
		var i GetAllIndustrialPropertiesDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.Status,
			&i.PropertyName,
			&i.Category,
			&i.Section,
			&i.IsBranch,
			&i.Property,
			&i.AddressesID,
			&i.UsersID,
			&i.PropertyTypesID,
			&i.UnitTypes,
			&i.Type,
			&i.Bedroom,
			&i.Bathroom,
			&i.MinArea,
			&i.MaxArea,
			&i.Price,
			&i.PlotArea,
			&i.CountriesID,
			&i.Country,
			&i.StatesID,
			&i.State,
			&i.CitiesID,
			&i.City,
			&i.CommunitiesID,
			&i.Community,
			&i.SubCommunitiesID,
			&i.SubCommunity,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllIndustrialPropertiesByCategory = `-- name: GetCountAllIndustrialPropertiesByCategory :one
WITH x AS (
 SELECT
 id
 FROM
 industrial_freelancer_properties
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_owner_properties
 WHERE
  category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties_branch
 WHERE
 category = LOWER($1)
 AND(status != 5
 AND status != 6)
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllIndustrialPropertiesByCategory(ctx context.Context, lower string) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllIndustrialPropertiesByCategory, lower)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllIndustrialPropertiesByCountry = `-- name: GetCountAllIndustrialPropertiesByCountry :one
WITH x AS (
 SELECT
 id
 FROM
 industrial_freelancer_properties
 WHERE
 industrial_freelancer_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_owner_properties
 WHERE
 industrial_owner_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties
 WHERE
 industrial_broker_agent_properties.countries_id = $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties_branch
 WHERE
 industrial_broker_agent_properties_branch.countries_id = $1
 AND(status != 5
 AND status != 6)
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllIndustrialPropertiesByCountry(ctx context.Context, countriesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllIndustrialPropertiesByCountry, countriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllIndustrialPropertiesByNotEqualCountry = `-- name: GetCountAllIndustrialPropertiesByNotEqualCountry :one
WITH x AS (
 SELECT id
 FROM
 industrial_freelancer_properties 
 WHERE
 industrial_freelancer_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_owner_properties
 WHERE
 industrial_owner_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties
 WHERE
 industrial_broker_agent_properties.countries_id != $1
 AND(status != 5
 AND status != 6)
 UNION ALL
 SELECT
 id
 FROM
 industrial_broker_agent_properties_branch
 WHERE
 industrial_broker_agent_properties_branch.countries_id != $1
 AND(status != 5
 AND status != 6)
)SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllIndustrialPropertiesByNotEqualCountry(ctx context.Context, countriesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllIndustrialPropertiesByNotEqualCountry, countriesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateIndustrialFreelancerPropertyRank = `-- name: UpdateIndustrialFreelancerPropertyRank :one
UPDATE industrial_freelancer_properties SET property_rank = $2 WHERE id = $1 RETURNING id, property_title, property_title_arabic, description, description_arabic, is_verified, property_rank, addresses_id, locations_id, property_types_id, status, created_at, updated_at, facilities_id, amenities_id, freelancers_id, is_show_owner_info, property, countries_id, ref_no, developer_company_name, sub_developer_company_name, category, investment, contract_start_datetime, contract_end_datetime, amount, unit_types, users_id, property_name, owner_users_id
`

type UpdateIndustrialFreelancerPropertyRankParams struct {
	ID           int64 `json:"id"`
	PropertyRank int64 `json:"property_rank"`
}

func (q *Queries) UpdateIndustrialFreelancerPropertyRank(ctx context.Context, arg UpdateIndustrialFreelancerPropertyRankParams) (IndustrialFreelancerProperty, error) {
	row := q.db.QueryRow(ctx, updateIndustrialFreelancerPropertyRank, arg.ID, arg.PropertyRank)
	var i IndustrialFreelancerProperty
	err := row.Scan(
		&i.ID,
		&i.PropertyTitle,
		&i.PropertyTitleArabic,
		&i.Description,
		&i.DescriptionArabic,
		&i.IsVerified,
		&i.PropertyRank,
		&i.AddressesID,
		&i.LocationsID,
		&i.PropertyTypesID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FacilitiesID,
		&i.AmenitiesID,
		&i.FreelancersID,
		&i.IsShowOwnerInfo,
		&i.Property,
		&i.CountriesID,
		&i.RefNo,
		&i.DeveloperCompanyName,
		&i.SubDeveloperCompanyName,
		&i.Category,
		&i.Investment,
		&i.ContractStartDatetime,
		&i.ContractEndDatetime,
		&i.Amount,
		&i.UnitTypes,
		&i.UsersID,
		&i.PropertyName,
		&i.OwnerUsersID,
	)
	return i, err
}
