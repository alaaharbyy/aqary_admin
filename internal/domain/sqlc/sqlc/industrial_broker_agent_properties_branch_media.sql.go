// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_broker_agent_properties_branch_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialBrokerAgentPropertyBranchMedia = `-- name: CreateIndustrialBrokerAgentPropertyBranchMedia :one
INSERT INTO industrial_broker_agent_properties_branch_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    industrial_broker_agent_properties_branch_id,
    created_at,
    updated_at,
    is_branch
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch
`

type CreateIndustrialBrokerAgentPropertyBranchMediaParams struct {
	ImageUrl                                []string    `json:"image_url"`
	Image360Url                             []string    `json:"image360_url"`
	VideoUrl                                []string    `json:"video_url"`
	PanaromaUrl                             []string    `json:"panaroma_url"`
	MainMediaSection                        string      `json:"main_media_section"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrialBrokerAgentPropertyBranchMedia(ctx context.Context, arg CreateIndustrialBrokerAgentPropertyBranchMediaParams) (IndustrialBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, createIndustrialBrokerAgentPropertyBranchMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialBrokerAgentPropertiesBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrialBrokerAgentPropertyBranchMedia = `-- name: DeleteIndustrialBrokerAgentPropertyBranchMedia :exec
DELETE FROM industrial_broker_agent_properties_branch_media
Where id = $1
`

func (q *Queries) DeleteIndustrialBrokerAgentPropertyBranchMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialBrokerAgentPropertyBranchMedia, id)
	return err
}

const getAllIndustrialBrokerAgentPropertyBranchMedia = `-- name: GetAllIndustrialBrokerAgentPropertyBranchMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_branch_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialBrokerAgentPropertyBranchMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialBrokerAgentPropertyBranchMedia(ctx context.Context, arg GetAllIndustrialBrokerAgentPropertyBranchMediaParams) ([]IndustrialBrokerAgentPropertiesBranchMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyBranchMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesBranchMedium
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesBranchMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialBrokerAgentPropertiesBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialBrokerAgentPropertyBranchMediaByPropertyId = `-- name: GetAllIndustrialBrokerAgentPropertyBranchMediaByPropertyId :many
Select id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch from industrial_broker_agent_properties_branch_media
WHERE industrial_broker_agent_properties_branch_id = $1 ORDER BY id
`

func (q *Queries) GetAllIndustrialBrokerAgentPropertyBranchMediaByPropertyId(ctx context.Context, industrialBrokerAgentPropertiesBranchID int64) ([]IndustrialBrokerAgentPropertiesBranchMedium, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialBrokerAgentPropertyBranchMediaByPropertyId, industrialBrokerAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialBrokerAgentPropertiesBranchMedium
	for rows.Next() {
		var i IndustrialBrokerAgentPropertiesBranchMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.IndustrialBrokerAgentPropertiesBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndustrialBrokerAgentPropertyBranchMedia = `-- name: GetIndustrialBrokerAgentPropertyBranchMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_branch_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialBrokerAgentPropertyBranchMedia(ctx context.Context, limit int32) (IndustrialBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyBranchMedia, limit)
	var i IndustrialBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection = `-- name: GetIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch FROM industrial_broker_agent_properties_branch_media
WHERE industrial_broker_agent_properties_branch_id = $1 AND LOWER(main_media_section)=LOWER($2)
`

type GetIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSectionParams struct {
	IndustrialBrokerAgentPropertiesBranchID int64  `json:"industrial_broker_agent_properties_branch_id"`
	Lower                                   string `json:"lower"`
}

func (q *Queries) GetIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSectionParams) (IndustrialBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, getIndustrialBrokerAgentPropertyBranchMediaByPropertyIdAndMediaSection, arg.IndustrialBrokerAgentPropertiesBranchID, arg.Lower)
	var i IndustrialBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateIndustrialBrokerAgentPropertyBranchMedia = `-- name: UpdateIndustrialBrokerAgentPropertyBranchMedia :one
UPDATE industrial_broker_agent_properties_branch_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    industrial_broker_agent_properties_branch_id = $7,
    created_at = $8,
    updated_at = $9,
    is_branch = $10
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, industrial_broker_agent_properties_branch_id, created_at, updated_at, is_branch
`

type UpdateIndustrialBrokerAgentPropertyBranchMediaParams struct {
	ID                                      int64       `json:"id"`
	ImageUrl                                []string    `json:"image_url"`
	Image360Url                             []string    `json:"image360_url"`
	VideoUrl                                []string    `json:"video_url"`
	PanaromaUrl                             []string    `json:"panaroma_url"`
	MainMediaSection                        string      `json:"main_media_section"`
	IndustrialBrokerAgentPropertiesBranchID int64       `json:"industrial_broker_agent_properties_branch_id"`
	CreatedAt                               time.Time   `json:"created_at"`
	UpdatedAt                               time.Time   `json:"updated_at"`
	IsBranch                                pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrialBrokerAgentPropertyBranchMedia(ctx context.Context, arg UpdateIndustrialBrokerAgentPropertyBranchMediaParams) (IndustrialBrokerAgentPropertiesBranchMedium, error) {
	row := q.db.QueryRow(ctx, updateIndustrialBrokerAgentPropertyBranchMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.IndustrialBrokerAgentPropertiesBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IsBranch,
	)
	var i IndustrialBrokerAgentPropertiesBranchMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.IndustrialBrokerAgentPropertiesBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
