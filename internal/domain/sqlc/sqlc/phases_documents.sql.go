// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: phases_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhasesDocuments = `-- name: CreatePhasesDocuments :one
INSERT INTO phases_documents(
  phases_id,
  documents_category_id ,
  documents_subcategory_id,
  file_url,
  created_at,
  updated_at ,
  created_by,
  updated_by,
  status
  )
  VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
  ) 
  RETURNING id, phases_id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, created_by, updated_by, status
`

type CreatePhasesDocumentsParams struct {
	PhasesID               int64     `json:"phases_id"`
	DocumentsCategoryID    int64     `json:"documents_category_id"`
	DocumentsSubcategoryID int64     `json:"documents_subcategory_id"`
	FileUrl                []string  `json:"file_url"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	CreatedBy              int64     `json:"created_by"`
	UpdatedBy              int64     `json:"updated_by"`
	Status                 int64     `json:"status"`
}

func (q *Queries) CreatePhasesDocuments(ctx context.Context, arg CreatePhasesDocumentsParams) (PhasesDocument, error) {
	row := q.db.QueryRow(ctx, createPhasesDocuments,
		arg.PhasesID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.Status,
	)
	var i PhasesDocument
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}

const deletePhasesDocuments = `-- name: DeletePhasesDocuments :exec
DELETE FROM phases_documents WHERE id = $1
`

func (q *Queries) DeletePhasesDocuments(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePhasesDocuments, id)
	return err
}

const getAllDocsByPhaseIDWithOutPagination = `-- name: GetAllDocsByPhaseIDWithOutPagination :many
SELECT phases_documents.id, phases_documents.phases_id, phases_documents.documents_category_id, phases_documents.documents_subcategory_id, phases_documents.file_url, phases_documents.created_at, phases_documents.updated_at, phases_documents.created_by, phases_documents.updated_by, phases_documents.status, documents_category.category,documents_category.category_ar,documents_subcategory.sub_category FROM phases_documents 
LEFT JOIN documents_category ON documents_category.id = phases_documents.documents_category_id 
LEFT JOIN documents_subcategory ON documents_subcategory.id = phases_documents.documents_subcategory_id 
WHERE phases_documents.phases_id = $1
`

type GetAllDocsByPhaseIDWithOutPaginationRow struct {
	ID                     int64       `json:"id"`
	PhasesID               int64       `json:"phases_id"`
	DocumentsCategoryID    int64       `json:"documents_category_id"`
	DocumentsSubcategoryID int64       `json:"documents_subcategory_id"`
	FileUrl                []string    `json:"file_url"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	CreatedBy              int64       `json:"created_by"`
	UpdatedBy              int64       `json:"updated_by"`
	Status                 int64       `json:"status"`
	Category               pgtype.Text `json:"category"`
	CategoryAr             pgtype.Text `json:"category_ar"`
	SubCategory            pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllDocsByPhaseIDWithOutPagination(ctx context.Context, phasesID int64) ([]GetAllDocsByPhaseIDWithOutPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllDocsByPhaseIDWithOutPagination, phasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDocsByPhaseIDWithOutPaginationRow
	for rows.Next() {
		var i GetAllDocsByPhaseIDWithOutPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Status,
			&i.Category,
			&i.CategoryAr,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhasesDocumentByPhaseId = `-- name: GetAllPhasesDocumentByPhaseId :many
SELECT phases_documents.id, phases_documents.phases_id, phases_documents.documents_category_id, phases_documents.documents_subcategory_id, phases_documents.file_url, phases_documents.created_at, phases_documents.updated_at, phases_documents.created_by, phases_documents.updated_by, phases_documents.status,documents_category.category,documents_category.category_ar,documents_subcategory.sub_category FROM phases_documents
LEFT JOIN documents_category ON documents_category.id = documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id= documents_subcategory_id
WHERE phases_id = $3
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetAllPhasesDocumentByPhaseIdParams struct {
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
	PhasesID int64 `json:"phases_id"`
}

type GetAllPhasesDocumentByPhaseIdRow struct {
	ID                     int64       `json:"id"`
	PhasesID               int64       `json:"phases_id"`
	DocumentsCategoryID    int64       `json:"documents_category_id"`
	DocumentsSubcategoryID int64       `json:"documents_subcategory_id"`
	FileUrl                []string    `json:"file_url"`
	CreatedAt              time.Time   `json:"created_at"`
	UpdatedAt              time.Time   `json:"updated_at"`
	CreatedBy              int64       `json:"created_by"`
	UpdatedBy              int64       `json:"updated_by"`
	Status                 int64       `json:"status"`
	Category               pgtype.Text `json:"category"`
	CategoryAr             pgtype.Text `json:"category_ar"`
	SubCategory            pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllPhasesDocumentByPhaseId(ctx context.Context, arg GetAllPhasesDocumentByPhaseIdParams) ([]GetAllPhasesDocumentByPhaseIdRow, error) {
	rows, err := q.db.Query(ctx, getAllPhasesDocumentByPhaseId, arg.Limit, arg.Offset, arg.PhasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPhasesDocumentByPhaseIdRow
	for rows.Next() {
		var i GetAllPhasesDocumentByPhaseIdRow
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Status,
			&i.Category,
			&i.CategoryAr,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhasesDocuments = `-- name: GetAllPhasesDocuments :many
SELECT id, phases_id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, created_by, updated_by, status FROM phases_documents
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetAllPhasesDocumentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPhasesDocuments(ctx context.Context, arg GetAllPhasesDocumentsParams) ([]PhasesDocument, error) {
	rows, err := q.db.Query(ctx, getAllPhasesDocuments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PhasesDocument
	for rows.Next() {
		var i PhasesDocument
		if err := rows.Scan(
			&i.ID,
			&i.PhasesID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllPhasesDocumentByPhaseId = `-- name: GetCountAllPhasesDocumentByPhaseId :one
SELECT COUNT(phases_documents.id) FROM phases_documents
LEFT JOIN documents_category ON documents_category.id = documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id= documents_subcategory_id
WHERE phases_id = $1
`

func (q *Queries) GetCountAllPhasesDocumentByPhaseId(ctx context.Context, phasesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllPhasesDocumentByPhaseId, phasesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPhasesDocuments = `-- name: GetPhasesDocuments :one
SELECT phases_documents.id, phases_documents.phases_id, phases_documents.documents_category_id, phases_documents.documents_subcategory_id, phases_documents.file_url, phases_documents.created_at, phases_documents.updated_at, phases_documents.created_by, phases_documents.updated_by, phases_documents.status,phases.phase_name FROM phases_documents
INNER JOIN phases ON phases.id = phases_documents.phases_id
WHERE phases_documents.id = $1
`

type GetPhasesDocumentsRow struct {
	ID                     int64     `json:"id"`
	PhasesID               int64     `json:"phases_id"`
	DocumentsCategoryID    int64     `json:"documents_category_id"`
	DocumentsSubcategoryID int64     `json:"documents_subcategory_id"`
	FileUrl                []string  `json:"file_url"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	CreatedBy              int64     `json:"created_by"`
	UpdatedBy              int64     `json:"updated_by"`
	Status                 int64     `json:"status"`
	PhaseName              string    `json:"phase_name"`
}

func (q *Queries) GetPhasesDocuments(ctx context.Context, id int64) (GetPhasesDocumentsRow, error) {
	row := q.db.QueryRow(ctx, getPhasesDocuments, id)
	var i GetPhasesDocumentsRow
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Status,
		&i.PhaseName,
	)
	return i, err
}

const getPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatId = `-- name: GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatId :one
SELECT id, phases_id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, created_by, updated_by, status FROM phases_documents
WHERE phases_id = $1
AND
documents_category_id = $2
AND
documents_subcategory_id = $3
`

type GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatIdParams struct {
	PhasesID               int64 `json:"phases_id"`
	DocumentsCategoryID    int64 `json:"documents_category_id"`
	DocumentsSubcategoryID int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatIdParams) (PhasesDocument, error) {
	row := q.db.QueryRow(ctx, getPhasesDocumentsByPhaseIdAndDocCatIdAndSubDocCatId, arg.PhasesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i PhasesDocument
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}

const updatePhasesDocuments = `-- name: UpdatePhasesDocuments :one
UPDATE phases_documents
SET
  phases_id = $2,
  documents_category_id = $3,
  documents_subcategory_id = $4,
  file_url = $5,
  created_at = $6,
  updated_at = $7,
  created_by = $8,
  updated_by = $9,
  status = $10
WHERE id = $1
RETURNING id, phases_id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, created_by, updated_by, status
`

type UpdatePhasesDocumentsParams struct {
	ID                     int64     `json:"id"`
	PhasesID               int64     `json:"phases_id"`
	DocumentsCategoryID    int64     `json:"documents_category_id"`
	DocumentsSubcategoryID int64     `json:"documents_subcategory_id"`
	FileUrl                []string  `json:"file_url"`
	CreatedAt              time.Time `json:"created_at"`
	UpdatedAt              time.Time `json:"updated_at"`
	CreatedBy              int64     `json:"created_by"`
	UpdatedBy              int64     `json:"updated_by"`
	Status                 int64     `json:"status"`
}

func (q *Queries) UpdatePhasesDocuments(ctx context.Context, arg UpdatePhasesDocumentsParams) (PhasesDocument, error) {
	row := q.db.QueryRow(ctx, updatePhasesDocuments,
		arg.ID,
		arg.PhasesID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.Status,
	)
	var i PhasesDocument
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}

const updatePhasesDocumentsFileUrls = `-- name: UpdatePhasesDocumentsFileUrls :one
UPDATE phases_documents
SET  file_url = $2,
  updated_at = $3,
  updated_by = $4
WHERE id = $1
RETURNING id, phases_id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, created_by, updated_by, status
`

type UpdatePhasesDocumentsFileUrlsParams struct {
	ID        int64     `json:"id"`
	FileUrl   []string  `json:"file_url"`
	UpdatedAt time.Time `json:"updated_at"`
	UpdatedBy int64     `json:"updated_by"`
}

func (q *Queries) UpdatePhasesDocumentsFileUrls(ctx context.Context, arg UpdatePhasesDocumentsFileUrlsParams) (PhasesDocument, error) {
	row := q.db.QueryRow(ctx, updatePhasesDocumentsFileUrls,
		arg.ID,
		arg.FileUrl,
		arg.UpdatedAt,
		arg.UpdatedBy,
	)
	var i PhasesDocument
	err := row.Scan(
		&i.ID,
		&i.PhasesID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
		&i.Status,
	)
	return i, err
}
