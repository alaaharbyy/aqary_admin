// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_stay_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayHomeStayReview = `-- name: CreateHolidayHomeStayReview :one
INSERT INTO holiday_stay_reviews (
    holiday_home_id, 
    review_date, 
    user_id, 
    comfortness, 
    communications, 
    cleanliness, 
    location, 
    title, 
    review
) VALUES (
    $1,
    $2,
    $3,
    $4,                                    
    $5,                                  
    $6,                                    
    $7,                                  
    $8,                        
    $9
) RETURNING id, holiday_home_id, review_date, user_id, comfortness, communications, cleanliness, location, title, review
`

type CreateHolidayHomeStayReviewParams struct {
	HolidayHomeID  int64     `json:"holiday_home_id"`
	ReviewDate     time.Time `json:"review_date"`
	UserID         int64     `json:"user_id"`
	Comfortness    float64   `json:"comfortness"`
	Communications float64   `json:"communications"`
	Cleanliness    float64   `json:"cleanliness"`
	Location       float64   `json:"location"`
	Title          string    `json:"title"`
	Review         string    `json:"review"`
}

func (q *Queries) CreateHolidayHomeStayReview(ctx context.Context, arg CreateHolidayHomeStayReviewParams) (HolidayStayReview, error) {
	row := q.db.QueryRow(ctx, createHolidayHomeStayReview,
		arg.HolidayHomeID,
		arg.ReviewDate,
		arg.UserID,
		arg.Comfortness,
		arg.Communications,
		arg.Cleanliness,
		arg.Location,
		arg.Title,
		arg.Review,
	)
	var i HolidayStayReview
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ReviewDate,
		&i.UserID,
		&i.Comfortness,
		&i.Communications,
		&i.Cleanliness,
		&i.Location,
		&i.Title,
		&i.Review,
	)
	return i, err
}

const getAllHolidayHomeStayReviewUser = `-- name: GetAllHolidayHomeStayReviewUser :many
select hsr.id, hsr.holiday_home_id, hsr.review_date, hsr.user_id, hsr.comfortness, hsr.communications, hsr.cleanliness, hsr.location, hsr.title, hsr.review,
ROUND(((comfortness + communications + cleanliness + location) / 4)::numeric, 1) AS user_average, 
u.username from holiday_stay_reviews hsr JOIN users u
ON hsr.user_id = u.id
where holiday_home_id = $1
`

type GetAllHolidayHomeStayReviewUserRow struct {
	ID             int64          `json:"id"`
	HolidayHomeID  int64          `json:"holiday_home_id"`
	ReviewDate     time.Time      `json:"review_date"`
	UserID         int64          `json:"user_id"`
	Comfortness    float64        `json:"comfortness"`
	Communications float64        `json:"communications"`
	Cleanliness    float64        `json:"cleanliness"`
	Location       float64        `json:"location"`
	Title          string         `json:"title"`
	Review         string         `json:"review"`
	UserAverage    pgtype.Numeric `json:"user_average"`
	Username       string         `json:"username"`
}

func (q *Queries) GetAllHolidayHomeStayReviewUser(ctx context.Context, holidayHomeID int64) ([]GetAllHolidayHomeStayReviewUserRow, error) {
	rows, err := q.db.Query(ctx, getAllHolidayHomeStayReviewUser, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllHolidayHomeStayReviewUserRow
	for rows.Next() {
		var i GetAllHolidayHomeStayReviewUserRow
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ReviewDate,
			&i.UserID,
			&i.Comfortness,
			&i.Communications,
			&i.Cleanliness,
			&i.Location,
			&i.Title,
			&i.Review,
			&i.UserAverage,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayHomeStayReviews = `-- name: GetAllHolidayHomeStayReviews :one
WITH averages AS (
            SELECT 
                AVG(comfortness) AS avg_comfortness, 
                AVG(communications) AS avg_communications, 
                AVG(cleanliness) AS avg_cleanliness, 
                AVG(location) AS avg_location
            FROM 
                holiday_stay_reviews
            WHERE 
                holiday_home_id = $1
        )
        SELECT 
            ROUND((
                (avg_comfortness + avg_communications + avg_cleanliness + avg_location) / 4
            )::numeric, 1) AS overall_average,
            avg_comfortness,
            avg_communications,
            avg_cleanliness,
            avg_location
        FROM 
            averages
`

type GetAllHolidayHomeStayReviewsRow struct {
	OverallAverage    pgtype.Numeric `json:"overall_average"`
	AvgComfortness    float64        `json:"avg_comfortness"`
	AvgCommunications float64        `json:"avg_communications"`
	AvgCleanliness    float64        `json:"avg_cleanliness"`
	AvgLocation       float64        `json:"avg_location"`
}

func (q *Queries) GetAllHolidayHomeStayReviews(ctx context.Context, holidayHomeID int64) (GetAllHolidayHomeStayReviewsRow, error) {
	row := q.db.QueryRow(ctx, getAllHolidayHomeStayReviews, holidayHomeID)
	var i GetAllHolidayHomeStayReviewsRow
	err := row.Scan(
		&i.OverallAverage,
		&i.AvgComfortness,
		&i.AvgCommunications,
		&i.AvgCleanliness,
		&i.AvgLocation,
	)
	return i, err
}

const getHolidayHomeStayReviews = `-- name: GetHolidayHomeStayReviews :many
select id, holiday_home_id, review_date, user_id, comfortness, communications, cleanliness, location, title, review from holiday_stay_reviews where holiday_home_id = $1
`

func (q *Queries) GetHolidayHomeStayReviews(ctx context.Context, holidayHomeID int64) ([]HolidayStayReview, error) {
	rows, err := q.db.Query(ctx, getHolidayHomeStayReviews, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayStayReview
	for rows.Next() {
		var i HolidayStayReview
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ReviewDate,
			&i.UserID,
			&i.Comfortness,
			&i.Communications,
			&i.Cleanliness,
			&i.Location,
			&i.Title,
			&i.Review,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolidayHomeStayReview = `-- name: UpdateHolidayHomeStayReview :one
UPDATE holiday_stay_reviews
SET
    holiday_home_id = $1,
    review_date = $2,
    user_id = $3,
    comfortness = $4,
    communications = $5,
    cleanliness = $6,
    location = $7,
    title = $8,
    review = $9
WHERE
    id = $10 RETURNING id, holiday_home_id, review_date, user_id, comfortness, communications, cleanliness, location, title, review
`

type UpdateHolidayHomeStayReviewParams struct {
	HolidayHomeID  int64     `json:"holiday_home_id"`
	ReviewDate     time.Time `json:"review_date"`
	UserID         int64     `json:"user_id"`
	Comfortness    float64   `json:"comfortness"`
	Communications float64   `json:"communications"`
	Cleanliness    float64   `json:"cleanliness"`
	Location       float64   `json:"location"`
	Title          string    `json:"title"`
	Review         string    `json:"review"`
	ID             int64     `json:"id"`
}

func (q *Queries) UpdateHolidayHomeStayReview(ctx context.Context, arg UpdateHolidayHomeStayReviewParams) (HolidayStayReview, error) {
	row := q.db.QueryRow(ctx, updateHolidayHomeStayReview,
		arg.HolidayHomeID,
		arg.ReviewDate,
		arg.UserID,
		arg.Comfortness,
		arg.Communications,
		arg.Cleanliness,
		arg.Location,
		arg.Title,
		arg.Review,
		arg.ID,
	)
	var i HolidayStayReview
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ReviewDate,
		&i.UserID,
		&i.Comfortness,
		&i.Communications,
		&i.Cleanliness,
		&i.Location,
		&i.Title,
		&i.Review,
	)
	return i, err
}
