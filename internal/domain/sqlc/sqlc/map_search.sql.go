// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: map_search.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMapSearch = `-- name: CreateMapSearch :one
INSERT INTO map_searches
(ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted
`

type CreateMapSearchParams struct {
	RefNo         string      `json:"ref_no"`
	CompanyTypes  pgtype.Int8 `json:"company_types"`
	IsBranch      pgtype.Bool `json:"is_branch"`
	CompaniesID   int64       `json:"companies_id"`
	MapSearchType int64       `json:"map_search_type"`
	VideoUrl      pgtype.Text `json:"video_url"`
	BannerTypesID pgtype.Int8 `json:"banner_types_id"`
	BannerUrl     pgtype.Text `json:"banner_url"`
	CreatedAt     time.Time   `json:"created_at"`
	CreatedBy     int64       `json:"created_by"`
	TargetUrl     pgtype.Text `json:"target_url"`
	Description   pgtype.Text `json:"description"`
	IsDeleted     pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateMapSearch(ctx context.Context, arg CreateMapSearchParams) (MapSearch, error) {
	row := q.db.QueryRow(ctx, createMapSearch,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.MapSearchType,
		arg.VideoUrl,
		arg.BannerTypesID,
		arg.BannerUrl,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.TargetUrl,
		arg.Description,
		arg.IsDeleted,
	)
	var i MapSearch
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.MapSearchType,
		&i.VideoUrl,
		&i.BannerTypesID,
		&i.BannerUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.TargetUrl,
		&i.Description,
		&i.IsDeleted,
	)
	return i, err
}

const deleteMapSearch = `-- name: DeleteMapSearch :one
UPDATE map_searches
SET
    is_deleted = TRUE
WHERE
    id = $1
RETURNING id, ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted
`

func (q *Queries) DeleteMapSearch(ctx context.Context, id int64) (MapSearch, error) {
	row := q.db.QueryRow(ctx, deleteMapSearch, id)
	var i MapSearch
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.MapSearchType,
		&i.VideoUrl,
		&i.BannerTypesID,
		&i.BannerUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.TargetUrl,
		&i.Description,
		&i.IsDeleted,
	)
	return i, err
}

const getAllMapSearches = `-- name: GetAllMapSearches :many
SELECT
 id, ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted
FROM
    map_searches
WHERE is_deleted!=TRUE
ORDER BY
    id DESC
LIMIT $1 OFFSET $2
`

type GetAllMapSearchesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllMapSearches(ctx context.Context, arg GetAllMapSearchesParams) ([]MapSearch, error) {
	rows, err := q.db.Query(ctx, getAllMapSearches, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MapSearch
	for rows.Next() {
		var i MapSearch
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.CompanyTypes,
			&i.IsBranch,
			&i.CompaniesID,
			&i.MapSearchType,
			&i.VideoUrl,
			&i.BannerTypesID,
			&i.BannerUrl,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.TargetUrl,
			&i.Description,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountMapSearch = `-- name: GetCountMapSearch :one
SELECT
COUNT(*)
FROM
    map_searches
WHERE is_deleted!=TRUE
`

func (q *Queries) GetCountMapSearch(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountMapSearch)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMapSearchById = `-- name: GetMapSearchById :one
SELECT
 id, ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted
FROM
    map_searches
WHERE
    id = $1
`

func (q *Queries) GetMapSearchById(ctx context.Context, id int64) (MapSearch, error) {
	row := q.db.QueryRow(ctx, getMapSearchById, id)
	var i MapSearch
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.MapSearchType,
		&i.VideoUrl,
		&i.BannerTypesID,
		&i.BannerUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.TargetUrl,
		&i.Description,
		&i.IsDeleted,
	)
	return i, err
}

const updateMapSearch = `-- name: UpdateMapSearch :one
UPDATE map_searches
SET
    ref_no = $2,
    company_types = $3,
    is_branch = $4,
    companies_id = $5,
    map_search_type = $6,
    video_url = $7,
    banner_types_id = $8,
    banner_url = $9,
    created_at = $10,
    created_by = $11,
    target_url = $12,
    description = $13,
    is_deleted = $14
WHERE
    id = $1
RETURNING id, ref_no, company_types, is_branch, companies_id, map_search_type, video_url, banner_types_id, banner_url, created_at, created_by, target_url, description, is_deleted
`

type UpdateMapSearchParams struct {
	ID            int64       `json:"id"`
	RefNo         string      `json:"ref_no"`
	CompanyTypes  pgtype.Int8 `json:"company_types"`
	IsBranch      pgtype.Bool `json:"is_branch"`
	CompaniesID   int64       `json:"companies_id"`
	MapSearchType int64       `json:"map_search_type"`
	VideoUrl      pgtype.Text `json:"video_url"`
	BannerTypesID pgtype.Int8 `json:"banner_types_id"`
	BannerUrl     pgtype.Text `json:"banner_url"`
	CreatedAt     time.Time   `json:"created_at"`
	CreatedBy     int64       `json:"created_by"`
	TargetUrl     pgtype.Text `json:"target_url"`
	Description   pgtype.Text `json:"description"`
	IsDeleted     pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) UpdateMapSearch(ctx context.Context, arg UpdateMapSearchParams) (MapSearch, error) {
	row := q.db.QueryRow(ctx, updateMapSearch,
		arg.ID,
		arg.RefNo,
		arg.CompanyTypes,
		arg.IsBranch,
		arg.CompaniesID,
		arg.MapSearchType,
		arg.VideoUrl,
		arg.BannerTypesID,
		arg.BannerUrl,
		arg.CreatedAt,
		arg.CreatedBy,
		arg.TargetUrl,
		arg.Description,
		arg.IsDeleted,
	)
	var i MapSearch
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.CompanyTypes,
		&i.IsBranch,
		&i.CompaniesID,
		&i.MapSearchType,
		&i.VideoUrl,
		&i.BannerTypesID,
		&i.BannerUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.TargetUrl,
		&i.Description,
		&i.IsDeleted,
	)
	return i, err
}
