// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: holiday_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHolidayMedia = `-- name: CreateHolidayMedia :one
INSERT INTO holiday_media (
    image_url, 
    image360_url, 
    video_url, 
    panaroma_url, 
    main_media_section, 
    holiday_home_id
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at
`

type CreateHolidayMediaParams struct {
	ImageUrl         []string `json:"image_url"`
	Image360Url      []string `json:"image360_url"`
	VideoUrl         []string `json:"video_url"`
	PanaromaUrl      []string `json:"panaroma_url"`
	MainMediaSection string   `json:"main_media_section"`
	HolidayHomeID    int64    `json:"holiday_home_id"`
}

func (q *Queries) CreateHolidayMedia(ctx context.Context, arg CreateHolidayMediaParams) (HolidayMedium, error) {
	row := q.db.QueryRow(ctx, createHolidayMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.HolidayHomeID,
	)
	var i HolidayMedium
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHolidayMedia = `-- name: DeleteHolidayMedia :exec
DELETE FROM holiday_media
Where id = $1
`

func (q *Queries) DeleteHolidayMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayMedia, id)
	return err
}

const deleteHolidayMediaByHolidayID = `-- name: DeleteHolidayMediaByHolidayID :exec
DELETE FROM holiday_media
WHERE holiday_home_id= $1
`

func (q *Queries) DeleteHolidayMediaByHolidayID(ctx context.Context, holidayHomeID int64) error {
	_, err := q.db.Exec(ctx, deleteHolidayMediaByHolidayID, holidayHomeID)
	return err
}

const getAllHolidayMedia = `-- name: GetAllHolidayMedia :many
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media LIMIT $1 OFFSET $2
`

type GetAllHolidayMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayMedia(ctx context.Context, arg GetAllHolidayMediaParams) ([]HolidayMedium, error) {
	rows, err := q.db.Query(ctx, getAllHolidayMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayMedium
	for rows.Next() {
		var i HolidayMedium
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayMediaByHolidayHomeId = `-- name: GetAllHolidayMediaByHolidayHomeId :many
With x As (
SELECT  main_media_section FROM holiday_media
WHERE holiday_home_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllHolidayMediaByHolidayHomeId(ctx context.Context, holidayHomeID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllHolidayMediaByHolidayHomeId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayMediaByHolidayId = `-- name: GetAllHolidayMediaByHolidayId :many
SELECT hm.id, hm.holiday_home_id, hm.image_url, hm.image360_url, hm.video_url, hm.panaroma_url, hm.main_media_section, hm.updated_at, hm.created_at
FROM	
	holiday_media AS hm 
WHERE hm.holiday_home_id=$1
GROUP BY (
	hm.main_media_section,hm.id)
	LIMIT $2 OFFSET $3
`

type GetAllHolidayMediaByHolidayIdParams struct {
	HolidayHomeID int64 `json:"holiday_home_id"`
	Limit         int32 `json:"limit"`
	Offset        int32 `json:"offset"`
}

func (q *Queries) GetAllHolidayMediaByHolidayId(ctx context.Context, arg GetAllHolidayMediaByHolidayIdParams) ([]HolidayMedium, error) {
	rows, err := q.db.Query(ctx, getAllHolidayMediaByHolidayId, arg.HolidayHomeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayMedium
	for rows.Next() {
		var i HolidayMedium
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllHolidayMediaByMainMediaSectionAndId = `-- name: GetAllHolidayMediaByMainMediaSectionAndId :one
with x As (
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media
WHERE main_media_section = $2 AND holiday_home_id = $1
) SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at From x
`

type GetAllHolidayMediaByMainMediaSectionAndIdParams struct {
	HolidayHomeID    int64  `json:"holiday_home_id"`
	MainMediaSection string `json:"main_media_section"`
}

type GetAllHolidayMediaByMainMediaSectionAndIdRow struct {
	ID               int64              `json:"id"`
	HolidayHomeID    int64              `json:"holiday_home_id"`
	ImageUrl         []string           `json:"image_url"`
	Image360Url      []string           `json:"image360_url"`
	VideoUrl         []string           `json:"video_url"`
	PanaromaUrl      []string           `json:"panaroma_url"`
	MainMediaSection string             `json:"main_media_section"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	CreatedAt        time.Time          `json:"created_at"`
}

func (q *Queries) GetAllHolidayMediaByMainMediaSectionAndId(ctx context.Context, arg GetAllHolidayMediaByMainMediaSectionAndIdParams) (GetAllHolidayMediaByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllHolidayMediaByMainMediaSectionAndId, arg.HolidayHomeID, arg.MainMediaSection)
	var i GetAllHolidayMediaByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAllHolidayMedias = `-- name: GetAllHolidayMedias :many
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media
`

func (q *Queries) GetAllHolidayMedias(ctx context.Context) ([]HolidayMedium, error) {
	rows, err := q.db.Query(ctx, getAllHolidayMedias)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayMedium
	for rows.Next() {
		var i HolidayMedium
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllHolidayMediaByHolidayId = `-- name: GetCountAllHolidayMediaByHolidayId :one
WITH x AS(
SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,holiday_home_id FROM  holiday_media WHERE holiday_media.holiday_home_id = $1 AND image_url IS NOT NULL
UNION ALL
SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,holiday_home_id FROM  holiday_media WHERE holiday_media.holiday_home_id = $1 AND image360_url IS NOT NULL
UNION ALL
SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,holiday_home_id FROM  holiday_media WHERE holiday_media.holiday_home_id = $1 AND video_url IS NOT NULL
UNION ALL
SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,holiday_home_id FROM  holiday_media WHERE holiday_media.holiday_home_id = $1 AND panaroma_url IS NOT NULL
) SELECT count(*) FROM x
`

func (q *Queries) GetCountAllHolidayMediaByHolidayId(ctx context.Context, holidayHomeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllHolidayMediaByHolidayId, holidayHomeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountHolidayMedia = `-- name: GetCountHolidayMedia :one
SELECT COUNT(*) FROM holiday_media
`

func (q *Queries) GetCountHolidayMedia(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountHolidayMedia)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getHolidayMedia = `-- name: GetHolidayMedia :one
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media WHERE id = $1
`

func (q *Queries) GetHolidayMedia(ctx context.Context, id int64) (HolidayMedium, error) {
	row := q.db.QueryRow(ctx, getHolidayMedia, id)
	var i HolidayMedium
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getHolidayMediaByHolidayId = `-- name: GetHolidayMediaByHolidayId :one
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media WHERE holiday_home_id = $1
`

func (q *Queries) GetHolidayMediaByHolidayId(ctx context.Context, holidayHomeID int64) (HolidayMedium, error) {
	row := q.db.QueryRow(ctx, getHolidayMediaByHolidayId, holidayHomeID)
	var i HolidayMedium
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getHolidayMediaByHolidayIdAndMainMediaSection = `-- name: GetHolidayMediaByHolidayIdAndMainMediaSection :one
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at
FROM 
	holiday_media 
WHERE 
	holiday_home_id=$1 AND main_media_section =$2
`

type GetHolidayMediaByHolidayIdAndMainMediaSectionParams struct {
	HolidayHomeID    int64  `json:"holiday_home_id"`
	MainMediaSection string `json:"main_media_section"`
}

func (q *Queries) GetHolidayMediaByHolidayIdAndMainMediaSection(ctx context.Context, arg GetHolidayMediaByHolidayIdAndMainMediaSectionParams) (HolidayMedium, error) {
	row := q.db.QueryRow(ctx, getHolidayMediaByHolidayIdAndMainMediaSection, arg.HolidayHomeID, arg.MainMediaSection)
	var i HolidayMedium
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getHolidayMediasByHolidayId = `-- name: GetHolidayMediasByHolidayId :many
SELECT id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at FROM holiday_media WHERE holiday_home_id = $1
`

func (q *Queries) GetHolidayMediasByHolidayId(ctx context.Context, holidayHomeID int64) ([]HolidayMedium, error) {
	rows, err := q.db.Query(ctx, getHolidayMediasByHolidayId, holidayHomeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HolidayMedium
	for rows.Next() {
		var i HolidayMedium
		if err := rows.Scan(
			&i.ID,
			&i.HolidayHomeID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHolidayMedia = `-- name: UpdateHolidayMedia :one
UPDATE holiday_media
SET 
	image_url = $2, 
	image360_url = $3, 
	video_url = $4, 
	panaroma_url = $5, 
	main_media_section = $6, 
	holiday_home_id = $7,
	updated_at = $8
	WHERE id = $1
RETURNING id, holiday_home_id, image_url, image360_url, video_url, panaroma_url, main_media_section, updated_at, created_at
`

type UpdateHolidayMediaParams struct {
	ID               int64              `json:"id"`
	ImageUrl         []string           `json:"image_url"`
	Image360Url      []string           `json:"image360_url"`
	VideoUrl         []string           `json:"video_url"`
	PanaromaUrl      []string           `json:"panaroma_url"`
	MainMediaSection string             `json:"main_media_section"`
	HolidayHomeID    int64              `json:"holiday_home_id"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdateHolidayMedia(ctx context.Context, arg UpdateHolidayMediaParams) (HolidayMedium, error) {
	row := q.db.QueryRow(ctx, updateHolidayMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.HolidayHomeID,
		arg.UpdatedAt,
	)
	var i HolidayMedium
	err := row.Scan(
		&i.ID,
		&i.HolidayHomeID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
