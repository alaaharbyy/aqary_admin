// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_guide.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const changeStatusAqaryGuide = `-- name: ChangeStatusAqaryGuide :exec
UPDATE 
    aqary_guide
SET 
    status=$2
    -- updated_at=$3
WHERE 
    id=$1
`

type ChangeStatusAqaryGuideParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) ChangeStatusAqaryGuide(ctx context.Context, arg ChangeStatusAqaryGuideParams) error {
	_, err := q.db.Exec(ctx, changeStatusAqaryGuide, arg.ID, arg.Status)
	return err
}

const createAqaryGuide = `-- name: CreateAqaryGuide :exec
INSERT INTO
    aqary_guide (
        guide_type,
        guide_content,
        guide_content_ar,
        created_by,
        created_at,
        updated_at,
        status,
        slug
    )
VALUES
    ($1, $2, $3, $4, $5, $6,$7,$8)
`

type CreateAqaryGuideParams struct {
	GuideType      string      `json:"guide_type"`
	GuideContent   string      `json:"guide_content"`
	GuideContentAr pgtype.Text `json:"guide_content_ar"`
	CreatedBy      int64       `json:"created_by"`
	CreatedAt      time.Time   `json:"created_at"`
	UpdatedAt      time.Time   `json:"updated_at"`
	Status         int64       `json:"status"`
	Slug           string      `json:"slug"`
}

func (q *Queries) CreateAqaryGuide(ctx context.Context, arg CreateAqaryGuideParams) error {
	_, err := q.db.Exec(ctx, createAqaryGuide,
		arg.GuideType,
		arg.GuideContent,
		arg.GuideContentAr,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Status,
		arg.Slug,
	)
	return err
}

const getAllAqaryGuides = `-- name: GetAllAqaryGuides :many
SELECT id, guide_type, guide_content, guide_content_ar, created_by, created_at, updated_at, status, slug FROM aqary_guide 
WHERE status= $1::BIGINT
ORDER BY updated_at DESC
LIMIT $3
OFFSET $2
`

type GetAllAqaryGuidesParams struct {
	Status int64       `json:"status"`
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

func (q *Queries) GetAllAqaryGuides(ctx context.Context, arg GetAllAqaryGuidesParams) ([]AqaryGuide, error) {
	rows, err := q.db.Query(ctx, getAllAqaryGuides, arg.Status, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AqaryGuide
	for rows.Next() {
		var i AqaryGuide
		if err := rows.Scan(
			&i.ID,
			&i.GuideType,
			&i.GuideContent,
			&i.GuideContentAr,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfAqaryGuides = `-- name: GetNumberOfAqaryGuides :one
SELECT COUNT(*) FROM aqary_guide 
WHERE status= $1::BIGINT
`

func (q *Queries) GetNumberOfAqaryGuides(ctx context.Context, status int64) (int64, error) {
	row := q.db.QueryRow(ctx, getNumberOfAqaryGuides, status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleAqaryGuide = `-- name: GetSingleAqaryGuide :one
SELECT id, guide_type, guide_content, guide_content_ar, created_by, created_at, updated_at, status, slug FROM aqary_guide WHERE id=$1 AND status!=6
`

func (q *Queries) GetSingleAqaryGuide(ctx context.Context, id int64) (AqaryGuide, error) {
	row := q.db.QueryRow(ctx, getSingleAqaryGuide, id)
	var i AqaryGuide
	err := row.Scan(
		&i.ID,
		&i.GuideType,
		&i.GuideContent,
		&i.GuideContentAr,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
		&i.Slug,
	)
	return i, err
}

const updateAqaryGuide = `-- name: UpdateAqaryGuide :exec
UPDATE aqary_guide
SET
    guide_type =  $1,
    guide_content = $2,
    guide_content_ar = $3,
    updated_at = $4,
    slug= $5
WHERE
    id = $6 AND status != 6
`

type UpdateAqaryGuideParams struct {
	GuideType      string      `json:"guide_type"`
	GuideContent   string      `json:"guide_content"`
	GuideContentAr pgtype.Text `json:"guide_content_ar"`
	UpdatedAt      time.Time   `json:"updated_at"`
	Slug           string      `json:"slug"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateAqaryGuide(ctx context.Context, arg UpdateAqaryGuideParams) error {
	_, err := q.db.Exec(ctx, updateAqaryGuide,
		arg.GuideType,
		arg.GuideContent,
		arg.GuideContentAr,
		arg.UpdatedAt,
		arg.Slug,
		arg.ID,
	)
	return err
}
