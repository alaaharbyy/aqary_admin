// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agent_properties_documents_branch.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyAgentPropertyBranchDocument = `-- name: CreateBrokerCompanyAgentPropertyBranchDocument :one
INSERT INTO broker_company_agent_properties_documents_branch (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    broker_company_agent_properties_branch_id,
    status
)VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_branch_id, status, is_branch
`

type CreateBrokerCompanyAgentPropertyBranchDocumentParams struct {
	DocumentsCategoryID                  int64     `json:"documents_category_id"`
	DocumentsSubcategoryID               int64     `json:"documents_subcategory_id"`
	FileUrl                              []string  `json:"file_url"`
	CreatedAt                            time.Time `json:"created_at"`
	UpdatedAt                            time.Time `json:"updated_at"`
	BrokerCompanyAgentPropertiesBranchID int64     `json:"broker_company_agent_properties_branch_id"`
	Status                               int64     `json:"status"`
}

func (q *Queries) CreateBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg CreateBrokerCompanyAgentPropertyBranchDocumentParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyAgentPropertyBranchDocument,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentPropertiesBranchID,
		arg.Status,
	)
	var i BrokerCompanyAgentPropertiesDocumentsBranch
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteBrokerCompanyAgentPropertyBranchDocument = `-- name: DeleteBrokerCompanyAgentPropertyBranchDocument :exec
DELETE FROM broker_company_agent_properties_documents_branch
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyAgentPropertyBranchDocument, id)
	return err
}

const getAllBranchBrokerAgentPropertyDocByPropertyId = `-- name: GetAllBranchBrokerAgentPropertyDocByPropertyId :many
SELECT broker_company_agent_properties_documents_branch.id,broker_company_agent_properties_documents_branch.documents_category_id,broker_company_agent_properties_documents_branch.documents_subcategory_id,broker_company_agent_properties_documents_branch.file_url,broker_company_agent_properties_documents_branch.created_at,broker_company_agent_properties_documents_branch.updated_at,broker_company_agent_properties_documents_branch.broker_company_agent_properties_branch_id,broker_company_agent_properties_documents_branch.status,broker_company_agent_properties_documents_branch.is_branch,documents_category.category,documents_subcategory.sub_category FROM broker_company_agent_properties_documents_branch LEFT JOIN documents_category ON documents_category.id=broker_company_agent_properties_documents_branch.documents_category_id LEFT JOIN documents_subcategory ON documents_subcategory.id=broker_company_agent_properties_documents_branch.documents_subcategory_id WHERE broker_company_agent_properties_branch_id=$3 ORDER BY broker_company_agent_properties_documents_branch.id LIMIT $1 OFFSET $2
`

type GetAllBranchBrokerAgentPropertyDocByPropertyIdParams struct {
	Limit                                int32 `json:"limit"`
	Offset                               int32 `json:"offset"`
	BrokerCompanyAgentPropertiesBranchID int64 `json:"broker_company_agent_properties_branch_id"`
}

type GetAllBranchBrokerAgentPropertyDocByPropertyIdRow struct {
	ID                                   int64       `json:"id"`
	DocumentsCategoryID                  int64       `json:"documents_category_id"`
	DocumentsSubcategoryID               int64       `json:"documents_subcategory_id"`
	FileUrl                              []string    `json:"file_url"`
	CreatedAt                            time.Time   `json:"created_at"`
	UpdatedAt                            time.Time   `json:"updated_at"`
	BrokerCompanyAgentPropertiesBranchID int64       `json:"broker_company_agent_properties_branch_id"`
	Status                               int64       `json:"status"`
	IsBranch                             pgtype.Bool `json:"is_branch"`
	Category                             pgtype.Text `json:"category"`
	SubCategory                          pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllBranchBrokerAgentPropertyDocByPropertyId(ctx context.Context, arg GetAllBranchBrokerAgentPropertyDocByPropertyIdParams) ([]GetAllBranchBrokerAgentPropertyDocByPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllBranchBrokerAgentPropertyDocByPropertyId, arg.Limit, arg.Offset, arg.BrokerCompanyAgentPropertiesBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllBranchBrokerAgentPropertyDocByPropertyIdRow
	for rows.Next() {
		var i GetAllBranchBrokerAgentPropertyDocByPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyAgentPropertyBranchDocument = `-- name: GetAllBrokerCompanyAgentPropertyBranchDocument :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_branch_id, status, is_branch FROM broker_company_agent_properties_documents_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyAgentPropertyBranchDocumentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyBranchDocumentParams) ([]BrokerCompanyAgentPropertiesDocumentsBranch, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertyBranchDocument, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentPropertiesDocumentsBranch
	for rows.Next() {
		var i BrokerCompanyAgentPropertiesDocumentsBranch
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BrokerCompanyAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBranchBrokerCompanyAgentPropertyDocById = `-- name: GetBranchBrokerCompanyAgentPropertyDocById :one









SELECT
broker_company_agent_properties_documents_branch.id,
broker_company_agent_properties_documents_branch.documents_category_id,
broker_company_agent_properties_documents_branch.documents_subcategory_id,broker_company_agent_properties_documents_branch.file_url,
broker_company_agent_properties_documents_branch.created_at,broker_company_agent_properties_documents_branch.updated_at,broker_company_agent_properties_documents_branch.broker_company_agent_properties_branch_id,broker_company_agent_properties_documents_branch.status,
broker_company_agent_properties_documents_branch.is_branch,documents_category.category,
documents_subcategory.sub_category 
FROM broker_company_agent_properties_documents_branch LEFT JOIN documents_category ON documents_category.id=broker_company_agent_properties_documents_branch.documents_category_id
 LEFT JOIN documents_subcategory ON documents_subcategory.id=broker_company_agent_properties_documents_branch.documents_subcategory_id 
WHERE broker_company_agent_properties_documents_branch.id=$1
`

type GetBranchBrokerCompanyAgentPropertyDocByIdRow struct {
	ID                                   int64       `json:"id"`
	DocumentsCategoryID                  int64       `json:"documents_category_id"`
	DocumentsSubcategoryID               int64       `json:"documents_subcategory_id"`
	FileUrl                              []string    `json:"file_url"`
	CreatedAt                            time.Time   `json:"created_at"`
	UpdatedAt                            time.Time   `json:"updated_at"`
	BrokerCompanyAgentPropertiesBranchID int64       `json:"broker_company_agent_properties_branch_id"`
	Status                               int64       `json:"status"`
	IsBranch                             pgtype.Bool `json:"is_branch"`
	Category                             pgtype.Text `json:"category"`
	SubCategory                          pgtype.Text `json:"sub_category"`
}

// /-- name: GetBrokerCompanyAgentPropertyBranchDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId :one
// SELECT  * FROM broker_company_agent_properties_documents_branch
// WHERE broker_company_agent_properties_id = $1
// AND
//
//	documents_category_id = $2
//
// AND
// documents_subcategory_id = $3;
// -- name: GetAllBrokerAgentPropertyDocByPropertyId :many
// SELECT broker_company_agent_properties_documents_branch.*, documents_category.category,documents_subcategory.sub_category
// FROM broker_company_agent_properties_documents_branch LEFT JOIN documents_category ON documents_category.id = broker_company_agent_properties_documents_branch.documents_category_id
// LEFT JOIN documents_subcategory ON documents_subcategory.id = broker_company_agent_properties_documents_branch.documents_subcategory_id
// WHERE broker_company_agent_properties_id = $3 OFFSET $2 LIMIT $1;
// -- name: GetCountBrokerAgentPropertyDocByPropertyId :one
// SELECT count(*) FROM broker_company_agent_properties_documents_branch
// WHERE broker_company_agent_properties_id = $1;
// -- name: GetBrokerCompanyAgentPropertyDocById :one
// SELECT broker_company_agent_properties_documents_branch.*,documents_category.category,documents_subcategory.sub_category
// FROM broker_company_agent_properties_documents_branch
// LEFT JOIN documents_category ON documents_category.id = broker_company_agent_properties_documents_branch.documents_category_id
// LEFT JOIN documents_subcategory ON documents_subcategory.id = broker_company_agent_properties_documents_branch.documents_subcategory_id
// WHERE broker_company_agent_properties_documents_branch.id = $1;
func (q *Queries) GetBranchBrokerCompanyAgentPropertyDocById(ctx context.Context, id int64) (GetBranchBrokerCompanyAgentPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getBranchBrokerCompanyAgentPropertyDocById, id)
	var i GetBranchBrokerCompanyAgentPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id,documents_category_id,documents_subcategory_id,file_url,created_at,updated_at,broker_company_agent_properties_branch_id,status,is_branch
 FROM broker_company_agent_properties_documents_branch 
WHERE broker_company_agent_properties_branch_id=$1 AND documents_category_id=$2 AND documents_subcategory_id=$3
`

type GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	BrokerCompanyAgentPropertiesBranchID int64 `json:"broker_company_agent_properties_branch_id"`
	DocumentsCategoryID                  int64 `json:"documents_category_id"`
	DocumentsSubcategoryID               int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatIdParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error) {
	row := q.db.QueryRow(ctx, getBranchBrokerCompanyAgentPropertyDocumentsByBrokerCompanyAgentPropertyIdAndDocCatIdAndSubDocCatId, arg.BrokerCompanyAgentPropertiesBranchID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i BrokerCompanyAgentPropertiesDocumentsBranch
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyBranchDocument = `-- name: GetBrokerCompanyAgentPropertyBranchDocument :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_branch_id, status, is_branch FROM broker_company_agent_properties_documents_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesDocumentsBranch, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyBranchDocument, limit)
	var i BrokerCompanyAgentPropertiesDocumentsBranch
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getCountBranchBrokerAgentPropertyDocByPropertyId = `-- name: GetCountBranchBrokerAgentPropertyDocByPropertyId :one
SELECT count(*)FROM broker_company_agent_properties_documents_branch 
WHERE broker_company_agent_properties_branch_id=$1
`

func (q *Queries) GetCountBranchBrokerAgentPropertyDocByPropertyId(ctx context.Context, brokerCompanyAgentPropertiesBranchID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountBranchBrokerAgentPropertyDocByPropertyId, brokerCompanyAgentPropertiesBranchID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateBrokerCompanyAgentPropertyBranchDocument = `-- name: UpdateBrokerCompanyAgentPropertyBranchDocument :one
UPDATE broker_company_agent_properties_documents_branch
SET  documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    broker_company_agent_properties_branch_id = $7,
    status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, broker_company_agent_properties_branch_id, status, is_branch
`

type UpdateBrokerCompanyAgentPropertyBranchDocumentParams struct {
	ID                                   int64     `json:"id"`
	DocumentsCategoryID                  int64     `json:"documents_category_id"`
	DocumentsSubcategoryID               int64     `json:"documents_subcategory_id"`
	FileUrl                              []string  `json:"file_url"`
	CreatedAt                            time.Time `json:"created_at"`
	UpdatedAt                            time.Time `json:"updated_at"`
	BrokerCompanyAgentPropertiesBranchID int64     `json:"broker_company_agent_properties_branch_id"`
	Status                               int64     `json:"status"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyBranchDocument(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyBranchDocumentParams) (BrokerCompanyAgentPropertiesDocumentsBranch, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyBranchDocument,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.BrokerCompanyAgentPropertiesBranchID,
		arg.Status,
	)
	var i BrokerCompanyAgentPropertiesDocumentsBranch
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BrokerCompanyAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
