// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: connections_settings.sql

package sqlc

import (
	"context"
	"time"
)

const createConnectionsSettings = `-- name: CreateConnectionsSettings :one
INSERT INTO connections_settings (
    user_id,
    connection_request,
    follow_me,
    post_and_comments,
    gallery,
    public_profile_info,
    messaging,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at
`

type CreateConnectionsSettingsParams struct {
	UserID            int64     `json:"user_id"`
	ConnectionRequest int64     `json:"connection_request"`
	FollowMe          int64     `json:"follow_me"`
	PostAndComments   int64     `json:"post_and_comments"`
	Gallery           int64     `json:"gallery"`
	PublicProfileInfo int64     `json:"public_profile_info"`
	Messaging         int64     `json:"messaging"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateConnectionsSettings(ctx context.Context, arg CreateConnectionsSettingsParams) (ConnectionsSetting, error) {
	row := q.db.QueryRow(ctx, createConnectionsSettings,
		arg.UserID,
		arg.ConnectionRequest,
		arg.FollowMe,
		arg.PostAndComments,
		arg.Gallery,
		arg.PublicProfileInfo,
		arg.Messaging,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ConnectionsSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ConnectionRequest,
		&i.FollowMe,
		&i.PostAndComments,
		&i.Gallery,
		&i.PublicProfileInfo,
		&i.Messaging,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteConnectionsSettings = `-- name: DeleteConnectionsSettings :exec
DELETE FROM connections_settings
Where id = $1
`

func (q *Queries) DeleteConnectionsSettings(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteConnectionsSettings, id)
	return err
}

const getAllConnectionsSettings = `-- name: GetAllConnectionsSettings :many
SELECT id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at FROM connections_settings
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllConnectionsSettingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllConnectionsSettings(ctx context.Context, arg GetAllConnectionsSettingsParams) ([]ConnectionsSetting, error) {
	rows, err := q.db.Query(ctx, getAllConnectionsSettings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ConnectionsSetting
	for rows.Next() {
		var i ConnectionsSetting
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ConnectionRequest,
			&i.FollowMe,
			&i.PostAndComments,
			&i.Gallery,
			&i.PublicProfileInfo,
			&i.Messaging,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConnectionsSettings = `-- name: GetConnectionsSettings :one
SELECT id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at FROM connections_settings 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetConnectionsSettings(ctx context.Context, limit int32) (ConnectionsSetting, error) {
	row := q.db.QueryRow(ctx, getConnectionsSettings, limit)
	var i ConnectionsSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ConnectionRequest,
		&i.FollowMe,
		&i.PostAndComments,
		&i.Gallery,
		&i.PublicProfileInfo,
		&i.Messaging,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConnectionsSettingsByUserId = `-- name: GetConnectionsSettingsByUserId :one
SELECT id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at FROM connections_settings 
WHERE user_id = $1 LIMIT $1
`

func (q *Queries) GetConnectionsSettingsByUserId(ctx context.Context, limit int32) (ConnectionsSetting, error) {
	row := q.db.QueryRow(ctx, getConnectionsSettingsByUserId, limit)
	var i ConnectionsSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ConnectionRequest,
		&i.FollowMe,
		&i.PostAndComments,
		&i.Gallery,
		&i.PublicProfileInfo,
		&i.Messaging,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateConnectionsSettings = `-- name: UpdateConnectionsSettings :one
UPDATE connections_settings
SET user_id = $2,
    connection_request = $3,
    follow_me = $4,
    post_and_comments = $5,
    gallery = $6,
    public_profile_info = $7,
    messaging = $8,
    created_at = $9,
    updated_at = $10
Where id = $1
RETURNING id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at
`

type UpdateConnectionsSettingsParams struct {
	ID                int64     `json:"id"`
	UserID            int64     `json:"user_id"`
	ConnectionRequest int64     `json:"connection_request"`
	FollowMe          int64     `json:"follow_me"`
	PostAndComments   int64     `json:"post_and_comments"`
	Gallery           int64     `json:"gallery"`
	PublicProfileInfo int64     `json:"public_profile_info"`
	Messaging         int64     `json:"messaging"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateConnectionsSettings(ctx context.Context, arg UpdateConnectionsSettingsParams) (ConnectionsSetting, error) {
	row := q.db.QueryRow(ctx, updateConnectionsSettings,
		arg.ID,
		arg.UserID,
		arg.ConnectionRequest,
		arg.FollowMe,
		arg.PostAndComments,
		arg.Gallery,
		arg.PublicProfileInfo,
		arg.Messaging,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ConnectionsSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ConnectionRequest,
		&i.FollowMe,
		&i.PostAndComments,
		&i.Gallery,
		&i.PublicProfileInfo,
		&i.Messaging,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateConnectionsSettingsByUserID = `-- name: UpdateConnectionsSettingsByUserID :one
UPDATE connections_settings
SET connection_request = $2,
    follow_me = $3,
    post_and_comments = $4,
    gallery = $5,
    public_profile_info = $6,
    messaging = $7,
    created_at = $8,
    updated_at = $9
Where user_id = $1
RETURNING id, user_id, connection_request, follow_me, post_and_comments, gallery, public_profile_info, messaging, created_at, updated_at
`

type UpdateConnectionsSettingsByUserIDParams struct {
	UserID            int64     `json:"user_id"`
	ConnectionRequest int64     `json:"connection_request"`
	FollowMe          int64     `json:"follow_me"`
	PostAndComments   int64     `json:"post_and_comments"`
	Gallery           int64     `json:"gallery"`
	PublicProfileInfo int64     `json:"public_profile_info"`
	Messaging         int64     `json:"messaging"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) UpdateConnectionsSettingsByUserID(ctx context.Context, arg UpdateConnectionsSettingsByUserIDParams) (ConnectionsSetting, error) {
	row := q.db.QueryRow(ctx, updateConnectionsSettingsByUserID,
		arg.UserID,
		arg.ConnectionRequest,
		arg.FollowMe,
		arg.PostAndComments,
		arg.Gallery,
		arg.PublicProfileInfo,
		arg.Messaging,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i ConnectionsSetting
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ConnectionRequest,
		&i.FollowMe,
		&i.PostAndComments,
		&i.Gallery,
		&i.PublicProfileInfo,
		&i.Messaging,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
