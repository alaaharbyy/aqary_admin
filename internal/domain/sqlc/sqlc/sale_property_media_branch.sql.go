// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sale_property_media_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createSalePropertyMediaBranch = `-- name: CreateSalePropertyMediaBranch :one
INSERT INTO sale_property_media_branch (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    sale_property_units_branch_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3,$4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type CreateSalePropertyMediaBranchParams struct {
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	SalePropertyUnitsBranchID int64     `json:"sale_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) CreateSalePropertyMediaBranch(ctx context.Context, arg CreateSalePropertyMediaBranchParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, createSalePropertyMediaBranch,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.SalePropertyUnitsBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaBranchImages360ByIdAndFile = `-- name: DeleteOneSalePropertyMediaBranchImages360ByIdAndFile :one
UPDATE sale_property_media_branch
SET image360_url = array_remove(image360_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaBranchImages360ByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneSalePropertyMediaBranchImages360ByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchImages360ByIdAndFileParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaBranchImages360ByIdAndFile, arg.ID, arg.ArrayRemove)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaBranchImagesByIdAndFile = `-- name: DeleteOneSalePropertyMediaBranchImagesByIdAndFile :one
UPDATE sale_property_media_branch
SET image_url = array_remove(image_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaBranchImagesByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneSalePropertyMediaBranchImagesByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchImagesByIdAndFileParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaBranchImagesByIdAndFile, arg.ID, arg.ArrayRemove)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaBranchPanaromaByIdAndFile = `-- name: DeleteOneSalePropertyMediaBranchPanaromaByIdAndFile :one
UPDATE sale_property_media_branch
SET panaroma_url = array_remove(panaroma_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaBranchPanaromaByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneSalePropertyMediaBranchPanaromaByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchPanaromaByIdAndFileParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaBranchPanaromaByIdAndFile, arg.ID, arg.ArrayRemove)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteOneSalePropertyMediaBranchVideoByIdAndFile = `-- name: DeleteOneSalePropertyMediaBranchVideoByIdAndFile :one
UPDATE sale_property_media_branch
SET video_url = array_remove(video_url, $2)
WHERE id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type DeleteOneSalePropertyMediaBranchVideoByIdAndFileParams struct {
	ID          int64       `json:"id"`
	ArrayRemove interface{} `json:"array_remove"`
}

func (q *Queries) DeleteOneSalePropertyMediaBranchVideoByIdAndFile(ctx context.Context, arg DeleteOneSalePropertyMediaBranchVideoByIdAndFileParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, deleteOneSalePropertyMediaBranchVideoByIdAndFile, arg.ID, arg.ArrayRemove)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteSalePropertyMediaBranch = `-- name: DeleteSalePropertyMediaBranch :exec
DELETE FROM sale_property_media_branch
Where id = $1
`

func (q *Queries) DeleteSalePropertyMediaBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSalePropertyMediaBranch, id)
	return err
}

const getAllSalePropertyMediaBranch = `-- name: GetAllSalePropertyMediaBranch :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch FROM sale_property_media_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllSalePropertyMediaBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllSalePropertyMediaBranch(ctx context.Context, arg GetAllSalePropertyMediaBranchParams) ([]SalePropertyMediaBranch, error) {
	rows, err := q.db.Query(ctx, getAllSalePropertyMediaBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalePropertyMediaBranch
	for rows.Next() {
		var i SalePropertyMediaBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.SalePropertyUnitsBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSaleUnitMediaBranchByUnitId = `-- name: GetAllSaleUnitMediaBranchByUnitId :many
SELECT id, image_url, image360_url, video_url, panaroma_url, 
main_media_section, sale_property_units_branch_id, 
 created_at, updated_at 
 FROM sale_property_media_branch 
WHERE sale_property_units_branch_id = $1
`

type GetAllSaleUnitMediaBranchByUnitIdRow struct {
	ID                        int64     `json:"id"`
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	SalePropertyUnitsBranchID int64     `json:"sale_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) GetAllSaleUnitMediaBranchByUnitId(ctx context.Context, salePropertyUnitsBranchID int64) ([]GetAllSaleUnitMediaBranchByUnitIdRow, error) {
	rows, err := q.db.Query(ctx, getAllSaleUnitMediaBranchByUnitId, salePropertyUnitsBranchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSaleUnitMediaBranchByUnitIdRow
	for rows.Next() {
		var i GetAllSaleUnitMediaBranchByUnitIdRow
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.SalePropertyUnitsBranchID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalePropertyMediaBranch = `-- name: GetSalePropertyMediaBranch :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch FROM sale_property_media_branch 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetSalePropertyMediaBranch(ctx context.Context, limit int32) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMediaBranch, limit)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getSalePropertyMediaBranchBySaleId = `-- name: GetSalePropertyMediaBranchBySaleId :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch FROM sale_property_media_branch
WHERE sale_property_units_branch_id = $1 LIMIT 1
`

func (q *Queries) GetSalePropertyMediaBranchBySaleId(ctx context.Context, salePropertyUnitsBranchID int64) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMediaBranchBySaleId, salePropertyUnitsBranchID)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getSalePropertyMediaBranchByUnitIdAndMediaSection = `-- name: GetSalePropertyMediaBranchByUnitIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch FROM sale_property_media_branch
WHERE sale_property_units_branch_id = $1 AND main_media_section = $2
`

type GetSalePropertyMediaBranchByUnitIdAndMediaSectionParams struct {
	SalePropertyUnitsBranchID int64  `json:"sale_property_units_branch_id"`
	MainMediaSection          string `json:"main_media_section"`
}

func (q *Queries) GetSalePropertyMediaBranchByUnitIdAndMediaSection(ctx context.Context, arg GetSalePropertyMediaBranchByUnitIdAndMediaSectionParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, getSalePropertyMediaBranchByUnitIdAndMediaSection, arg.SalePropertyUnitsBranchID, arg.MainMediaSection)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateSalePropertyMediaBranch = `-- name: UpdateSalePropertyMediaBranch :one
UPDATE sale_property_media_branch
SET  image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    sale_property_units_branch_id = $7,
    created_at = $8,
    updated_at = $9
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, sale_property_units_branch_id, created_at, updated_at, is_branch
`

type UpdateSalePropertyMediaBranchParams struct {
	ID                        int64     `json:"id"`
	ImageUrl                  []string  `json:"image_url"`
	Image360Url               []string  `json:"image360_url"`
	VideoUrl                  []string  `json:"video_url"`
	PanaromaUrl               []string  `json:"panaroma_url"`
	MainMediaSection          string    `json:"main_media_section"`
	SalePropertyUnitsBranchID int64     `json:"sale_property_units_branch_id"`
	CreatedAt                 time.Time `json:"created_at"`
	UpdatedAt                 time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSalePropertyMediaBranch(ctx context.Context, arg UpdateSalePropertyMediaBranchParams) (SalePropertyMediaBranch, error) {
	row := q.db.QueryRow(ctx, updateSalePropertyMediaBranch,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.SalePropertyUnitsBranchID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i SalePropertyMediaBranch
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.SalePropertyUnitsBranchID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
