// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_broker_agent_properties_branch_document.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalBrokerAgentPropertyBranchDoc = `-- name: CreateAgriculturalBrokerAgentPropertyBranchDoc :one
INSERT INTO agricultural_broker_agent_properties_branch_document (
    documents_categories_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    agricultural_broker_agent_properties_branch_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_branch_id, status, is_branch
`

type CreateAgriculturalBrokerAgentPropertyBranchDocParams struct {
	DocumentsCategoriesID                     int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                    int64       `json:"documents_subcategory_id"`
	FileUrl                                   []string    `json:"file_url"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	Status                                    int64       `json:"status"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateAgriculturalBrokerAgentPropertyBranchDoc(ctx context.Context, arg CreateAgriculturalBrokerAgentPropertyBranchDocParams) (AgriculturalBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, createAgriculturalBrokerAgentPropertyBranchDoc,
		arg.DocumentsCategoriesID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalBrokerAgentPropertiesBranchID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteAgriculturalBrokerAgentPropertyBranchDoc = `-- name: DeleteAgriculturalBrokerAgentPropertyBranchDoc :exec
DELETE FROM agricultural_broker_agent_properties_branch_document
Where id = $1
`

func (q *Queries) DeleteAgriculturalBrokerAgentPropertyBranchDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalBrokerAgentPropertyBranchDoc, id)
	return err
}

const getAgriculturalBrokerAgentPropertyBranchDoc = `-- name: GetAgriculturalBrokerAgentPropertyBranchDoc :one
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_branch_id, status, is_branch FROM agricultural_broker_agent_properties_branch_document 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalBrokerAgentPropertyBranchDoc(ctx context.Context, limit int32) (AgriculturalBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalBrokerAgentPropertyBranchDoc, limit)
	var i AgriculturalBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getAllAgriculturalBrokerAgentPropertyBranchDoc = `-- name: GetAllAgriculturalBrokerAgentPropertyBranchDoc :many
SELECT id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_branch_id, status, is_branch FROM agricultural_broker_agent_properties_branch_document
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalBrokerAgentPropertyBranchDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalBrokerAgentPropertyBranchDoc(ctx context.Context, arg GetAllAgriculturalBrokerAgentPropertyBranchDocParams) ([]AgriculturalBrokerAgentPropertiesBranchDocument, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalBrokerAgentPropertyBranchDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalBrokerAgentPropertiesBranchDocument
	for rows.Next() {
		var i AgriculturalBrokerAgentPropertiesBranchDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoriesID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalBrokerAgentPropertiesBranchID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalBrokerAgentPropertyBranchDoc = `-- name: UpdateAgriculturalBrokerAgentPropertyBranchDoc :one
UPDATE agricultural_broker_agent_properties_branch_document
SET documents_categories_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    agricultural_broker_agent_properties_branch_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_categories_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_broker_agent_properties_branch_id, status, is_branch
`

type UpdateAgriculturalBrokerAgentPropertyBranchDocParams struct {
	ID                                        int64       `json:"id"`
	DocumentsCategoriesID                     int64       `json:"documents_categories_id"`
	DocumentsSubcategoryID                    int64       `json:"documents_subcategory_id"`
	FileUrl                                   []string    `json:"file_url"`
	CreatedAt                                 time.Time   `json:"created_at"`
	UpdatedAt                                 time.Time   `json:"updated_at"`
	AgriculturalBrokerAgentPropertiesBranchID int64       `json:"agricultural_broker_agent_properties_branch_id"`
	Status                                    int64       `json:"status"`
	IsBranch                                  pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateAgriculturalBrokerAgentPropertyBranchDoc(ctx context.Context, arg UpdateAgriculturalBrokerAgentPropertyBranchDocParams) (AgriculturalBrokerAgentPropertiesBranchDocument, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalBrokerAgentPropertyBranchDoc,
		arg.ID,
		arg.DocumentsCategoriesID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalBrokerAgentPropertiesBranchID,
		arg.Status,
		arg.IsBranch,
	)
	var i AgriculturalBrokerAgentPropertiesBranchDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoriesID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalBrokerAgentPropertiesBranchID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
