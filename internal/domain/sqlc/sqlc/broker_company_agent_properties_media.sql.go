// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_company_agent_properties_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerCompanyAgentPropertyMedia = `-- name: CreateBrokerCompanyAgentPropertyMedia :one
INSERT INTO broker_company_agent_properties_media (
    image_url,
    image360_url,
    video_url,
    panaroma_url,
    main_media_section,
    broker_company_agent_properties_id,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch
`

type CreateBrokerCompanyAgentPropertyMediaParams struct {
	ImageUrl                       []string  `json:"image_url"`
	Image360Url                    []string  `json:"image360_url"`
	VideoUrl                       []string  `json:"video_url"`
	PanaromaUrl                    []string  `json:"panaroma_url"`
	MainMediaSection               string    `json:"main_media_section"`
	BrokerCompanyAgentPropertiesID int64     `json:"broker_company_agent_properties_id"`
	CreatedAt                      time.Time `json:"created_at"`
	UpdatedAt                      time.Time `json:"updated_at"`
}

func (q *Queries) CreateBrokerCompanyAgentPropertyMedia(ctx context.Context, arg CreateBrokerCompanyAgentPropertyMediaParams) (BrokerCompanyAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, createBrokerCompanyAgentPropertyMedia,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.BrokerCompanyAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BrokerCompanyAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.BrokerCompanyAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteBrokerCompanyAgentPropertyMedia = `-- name: DeleteBrokerCompanyAgentPropertyMedia :exec
DELETE FROM broker_company_agent_properties_media
Where id = $1
`

func (q *Queries) DeleteBrokerCompanyAgentPropertyMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerCompanyAgentPropertyMedia, id)
	return err
}

const getAllBrokerCompanyAgentPropertiesByMainMediaSectionAndId = `-- name: GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndId :one
with x As (
 SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch FROM broker_company_agent_properties_media
 WHERE main_media_section = $2 AND broker_company_agent_properties_id = $1
) SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch From x
`

type GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdParams struct {
	BrokerCompanyAgentPropertiesID int64  `json:"broker_company_agent_properties_id"`
	MainMediaSection               string `json:"main_media_section"`
}

type GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdRow struct {
	ID                             int64       `json:"id"`
	ImageUrl                       []string    `json:"image_url"`
	Image360Url                    []string    `json:"image360_url"`
	VideoUrl                       []string    `json:"video_url"`
	PanaromaUrl                    []string    `json:"panaroma_url"`
	MainMediaSection               string      `json:"main_media_section"`
	BrokerCompanyAgentPropertiesID int64       `json:"broker_company_agent_properties_id"`
	CreatedAt                      time.Time   `json:"created_at"`
	UpdatedAt                      time.Time   `json:"updated_at"`
	IsBranch                       pgtype.Bool `json:"is_branch"`
}

func (q *Queries) GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndId(ctx context.Context, arg GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdParams) (GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdRow, error) {
	row := q.db.QueryRow(ctx, getAllBrokerCompanyAgentPropertiesByMainMediaSectionAndId, arg.BrokerCompanyAgentPropertiesID, arg.MainMediaSection)
	var i GetAllBrokerCompanyAgentPropertiesByMainMediaSectionAndIdRow
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.BrokerCompanyAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getAllBrokerCompanyAgentPropertiesMainMediaSectionById = `-- name: GetAllBrokerCompanyAgentPropertiesMainMediaSectionById :many
With x As (
 SELECT  main_media_section FROM broker_company_agent_properties_media
 WHERE broker_company_agent_properties_id = $1
) SELECT main_media_section From x
`

func (q *Queries) GetAllBrokerCompanyAgentPropertiesMainMediaSectionById(ctx context.Context, brokerCompanyAgentPropertiesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertiesMainMediaSectionById, brokerCompanyAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var main_media_section string
		if err := rows.Scan(&main_media_section); err != nil {
			return nil, err
		}
		items = append(items, main_media_section)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyAgentPropertyMedia = `-- name: GetAllBrokerCompanyAgentPropertyMedia :many
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch FROM broker_company_agent_properties_media
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerCompanyAgentPropertyMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerCompanyAgentPropertyMedia(ctx context.Context, arg GetAllBrokerCompanyAgentPropertyMediaParams) ([]BrokerCompanyAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertyMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentPropertiesMedium
	for rows.Next() {
		var i BrokerCompanyAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.BrokerCompanyAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBrokerCompanyAgentPropertyMediaById = `-- name: GetAllBrokerCompanyAgentPropertyMediaById :many
Select id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch from broker_company_agent_properties_media 
WHERE broker_company_agent_properties_id = $1
`

func (q *Queries) GetAllBrokerCompanyAgentPropertyMediaById(ctx context.Context, brokerCompanyAgentPropertiesID int64) ([]BrokerCompanyAgentPropertiesMedium, error) {
	rows, err := q.db.Query(ctx, getAllBrokerCompanyAgentPropertyMediaById, brokerCompanyAgentPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerCompanyAgentPropertiesMedium
	for rows.Next() {
		var i BrokerCompanyAgentPropertiesMedium
		if err := rows.Scan(
			&i.ID,
			&i.ImageUrl,
			&i.Image360Url,
			&i.VideoUrl,
			&i.PanaromaUrl,
			&i.MainMediaSection,
			&i.BrokerCompanyAgentPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBrokerCompanyAgentPropertyMedia = `-- name: GetBrokerCompanyAgentPropertyMedia :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch FROM broker_company_agent_properties_media 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerCompanyAgentPropertyMedia(ctx context.Context, limit int32) (BrokerCompanyAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyMedia, limit)
	var i BrokerCompanyAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.BrokerCompanyAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection = `-- name: GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection :one
SELECT id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch FROM broker_company_agent_properties_media 
WHERE broker_company_agent_properties_id = $1 AND main_media_section = $2  LIMIT 1
`

type GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSectionParams struct {
	BrokerCompanyAgentPropertiesID int64  `json:"broker_company_agent_properties_id"`
	MainMediaSection               string `json:"main_media_section"`
}

func (q *Queries) GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection(ctx context.Context, arg GetBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSectionParams) (BrokerCompanyAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, getBrokerCompanyAgentPropertyMediaByPropertyIdAndMediaSection, arg.BrokerCompanyAgentPropertiesID, arg.MainMediaSection)
	var i BrokerCompanyAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.BrokerCompanyAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}

const updateBrokerCompanyAgentPropertyMedia = `-- name: UpdateBrokerCompanyAgentPropertyMedia :one
UPDATE broker_company_agent_properties_media
SET   image_url = $2,
    image360_url = $3,
    video_url = $4,
    panaroma_url = $5,
    main_media_section = $6,
    broker_company_agent_properties_id = $7,
    created_at = $8,
    updated_at = $9
Where id = $1
RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, broker_company_agent_properties_id, created_at, updated_at, is_branch
`

type UpdateBrokerCompanyAgentPropertyMediaParams struct {
	ID                             int64     `json:"id"`
	ImageUrl                       []string  `json:"image_url"`
	Image360Url                    []string  `json:"image360_url"`
	VideoUrl                       []string  `json:"video_url"`
	PanaromaUrl                    []string  `json:"panaroma_url"`
	MainMediaSection               string    `json:"main_media_section"`
	BrokerCompanyAgentPropertiesID int64     `json:"broker_company_agent_properties_id"`
	CreatedAt                      time.Time `json:"created_at"`
	UpdatedAt                      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateBrokerCompanyAgentPropertyMedia(ctx context.Context, arg UpdateBrokerCompanyAgentPropertyMediaParams) (BrokerCompanyAgentPropertiesMedium, error) {
	row := q.db.QueryRow(ctx, updateBrokerCompanyAgentPropertyMedia,
		arg.ID,
		arg.ImageUrl,
		arg.Image360Url,
		arg.VideoUrl,
		arg.PanaromaUrl,
		arg.MainMediaSection,
		arg.BrokerCompanyAgentPropertiesID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i BrokerCompanyAgentPropertiesMedium
	err := row.Scan(
		&i.ID,
		&i.ImageUrl,
		&i.Image360Url,
		&i.VideoUrl,
		&i.PanaromaUrl,
		&i.MainMediaSection,
		&i.BrokerCompanyAgentPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsBranch,
	)
	return i, err
}
