// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: service_company_branches.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceBranchCompany = `-- name: CreateServiceBranchCompany :one
INSERT INTO service_company_branches (
    services_companies_id,
    company_name,
    description,
    logo_url,
    addresses_id,
    email,
    phone_number,
    whatsapp_number,
    commercial_license_no,
    commercial_license_file_url,
    commercial_license_expiry,
    is_verified,
    website_url,
    cover_image_url,
    tag_line,
    vat_no,
    vat_status,
    vat_file_url,
    facebook_profile_url,
    instagram_profile_url,
    twitter_profile_url,
    no_of_employees,
    users_id,
    linkedin_profile_url,
    bank_account_details_id,
    company_rank,
    status,
    country_id,
    company_type,
    is_branch,
    created_at,
    updated_at,
    ref_no,
    -- when the commercial license registered for the first time
    commercial_license_registration_date,
    commercial_license_issue_date,
    extra_license_names,
    extra_license_files,
    extra_license_nos,
    extra_license_issue_date,
    extra_license_expiry_date,
    youtube_profile_url,
    created_by,
    -- only for dubai
    license_dcci_no,
    -- only for dubai
    register_no,
    other_social_media
)VALUES (
     $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, 
     $20,$21,$22,$23,$24,$25,$26,$27,$28, $29, $30, $31, $32, $33, $34,  $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45
) RETURNING id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

type CreateServiceBranchCompanyParams struct {
	ServicesCompaniesID               int64              `json:"services_companies_id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	CreatedBy                         int64              `json:"created_by"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
}

func (q *Queries) CreateServiceBranchCompany(ctx context.Context, arg CreateServiceBranchCompanyParams) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, createServiceBranchCompany,
		arg.ServicesCompaniesID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.BankAccountDetailsID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.YoutubeProfileUrl,
		arg.CreatedBy,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
	)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const deleteServiceCompanyBranch = `-- name: DeleteServiceCompanyBranch :exec
DELETE FROM service_company_branches
Where id = $1
`

func (q *Queries) DeleteServiceCompanyBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteServiceCompanyBranch, id)
	return err
}

const getAllServiceCompanyBranch = `-- name: GetAllServiceCompanyBranch :many
SELECT id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM service_company_branches
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllServiceCompanyBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllServiceCompanyBranch(ctx context.Context, arg GetAllServiceCompanyBranchParams) ([]ServiceCompanyBranch, error) {
	rows, err := q.db.Query(ctx, getAllServiceCompanyBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceCompanyBranch
	for rows.Next() {
		var i ServiceCompanyBranch
		if err := rows.Scan(
			&i.ID,
			&i.ServicesCompaniesID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllServiceCompanyBranchByCompanyId = `-- name: GetAllServiceCompanyBranchByCompanyId :many
SELECT id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM service_company_branches
Where services_companies_id = $1
LIMIT $2
OFFSET $3
`

type GetAllServiceCompanyBranchByCompanyIdParams struct {
	ServicesCompaniesID int64 `json:"services_companies_id"`
	Limit               int32 `json:"limit"`
	Offset              int32 `json:"offset"`
}

func (q *Queries) GetAllServiceCompanyBranchByCompanyId(ctx context.Context, arg GetAllServiceCompanyBranchByCompanyIdParams) ([]ServiceCompanyBranch, error) {
	rows, err := q.db.Query(ctx, getAllServiceCompanyBranchByCompanyId, arg.ServicesCompaniesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceCompanyBranch
	for rows.Next() {
		var i ServiceCompanyBranch
		if err := rows.Scan(
			&i.ID,
			&i.ServicesCompaniesID,
			&i.CompanyName,
			&i.Description,
			&i.LogoUrl,
			&i.AddressesID,
			&i.Email,
			&i.PhoneNumber,
			&i.WhatsappNumber,
			&i.CommercialLicenseNo,
			&i.CommercialLicenseFileUrl,
			&i.CommercialLicenseExpiry,
			&i.IsVerified,
			&i.WebsiteUrl,
			&i.CoverImageUrl,
			&i.TagLine,
			&i.VatNo,
			&i.VatStatus,
			&i.VatFileUrl,
			&i.FacebookProfileUrl,
			&i.InstagramProfileUrl,
			&i.TwitterProfileUrl,
			&i.NoOfEmployees,
			&i.UsersID,
			&i.LinkedinProfileUrl,
			&i.BankAccountDetailsID,
			&i.CompanyRank,
			&i.Status,
			&i.CountryID,
			&i.CompanyType,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RefNo,
			&i.CommercialLicenseRegistrationDate,
			&i.CommercialLicenseIssueDate,
			&i.ExtraLicenseNames,
			&i.ExtraLicenseFiles,
			&i.ExtraLicenseNos,
			&i.ExtraLicenseIssueDate,
			&i.ExtraLicenseExpiryDate,
			&i.YoutubeProfileUrl,
			&i.CreatedBy,
			&i.LicenseDcciNo,
			&i.RegisterNo,
			&i.OtherSocialMedia,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllServiceCompanyBranchByCompanyId = `-- name: GetCountAllServiceCompanyBranchByCompanyId :one
SELECT COUNT(*) FROM service_company_branches
Where services_companies_id = $1
`

func (q *Queries) GetCountAllServiceCompanyBranchByCompanyId(ctx context.Context, servicesCompaniesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllServiceCompanyBranchByCompanyId, servicesCompaniesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountServiceCompanyBranch = `-- name: GetCountServiceCompanyBranch :one
SELECT COUNT(*) FROM service_company_branches LIMIT 1
`

func (q *Queries) GetCountServiceCompanyBranch(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountServiceCompanyBranch)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getServiceCompanyBranch = `-- name: GetServiceCompanyBranch :one
SELECT id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM service_company_branches 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetServiceCompanyBranch(ctx context.Context, id int64) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyBranch, id)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getServiceCompanyBranchByCommercialLicNo = `-- name: GetServiceCompanyBranchByCommercialLicNo :one
SELECT id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM service_company_branches 
WHERE commercial_license_no ILIKE $1 LIMIT 1
`

func (q *Queries) GetServiceCompanyBranchByCommercialLicNo(ctx context.Context, commercialLicenseNo string) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyBranchByCommercialLicNo, commercialLicenseNo)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getServiceCompanyBranchByName = `-- name: GetServiceCompanyBranchByName :one


SELECT id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media FROM service_company_branches 
WHERE company_name = $1 LIMIT 1
`

// -- name: GetCountServiceCompanyBranchByMainService :one
// SELECT COUNT(*) FROM service_company_branches WHERE main_services_id = $1 LIMIT 1;
// -- name: GetAllServiceCompanyBranchBYMainServiceId :many
// SELECT * FROM service_company_branches
// WHERE main_services_id = $3 LIMIT $1 OFFSET $2;
func (q *Queries) GetServiceCompanyBranchByName(ctx context.Context, companyName string) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyBranchByName, companyName)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const getServiceCompanyBranchForGraph = `-- name: GetServiceCompanyBranchForGraph :one
SELECT id,
	company_name, 
	description, 
	logo_url, 
	cover_image_url, 
	is_verified, 
	commercial_license_no
FROM 
	service_company_branches 
WHERE 
	id=$1 
LIMIT 1
`

type GetServiceCompanyBranchForGraphRow struct {
	ID                  int64       `json:"id"`
	CompanyName         string      `json:"company_name"`
	Description         pgtype.Text `json:"description"`
	LogoUrl             string      `json:"logo_url"`
	CoverImageUrl       pgtype.Text `json:"cover_image_url"`
	IsVerified          pgtype.Bool `json:"is_verified"`
	CommercialLicenseNo string      `json:"commercial_license_no"`
}

func (q *Queries) GetServiceCompanyBranchForGraph(ctx context.Context, id int64) (GetServiceCompanyBranchForGraphRow, error) {
	row := q.db.QueryRow(ctx, getServiceCompanyBranchForGraph, id)
	var i GetServiceCompanyBranchForGraphRow
	err := row.Scan(
		&i.ID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.CoverImageUrl,
		&i.IsVerified,
		&i.CommercialLicenseNo,
	)
	return i, err
}

const updateServiceCompanyBranch = `-- name: UpdateServiceCompanyBranch :one
UPDATE service_company_branches
SET 
    company_name = $2,
    description = $3,
    logo_url = $4,
    addresses_id = $5,
    email = $6,
    phone_number = $7,
    whatsapp_number = $8,
    commercial_license_no = $9,
    commercial_license_file_url = $10,
    commercial_license_expiry = $11,
    is_verified = $12,
    website_url = $13,
    cover_image_url = $14,
    tag_line = $15,
    vat_no = $16,
    vat_status = $17,
    vat_file_url = $18,
    facebook_profile_url = $19,
    instagram_profile_url = $20,
    twitter_profile_url = $21,
    no_of_employees = $22,
    users_id = $23,
    linkedin_profile_url = $24,
    services_companies_id = $25,
    company_rank = $26,
    status = $27,
    country_id = $28,
    company_type = $29,
    is_branch = $30,
    created_at = $31,
    updated_at = $32,
    ref_no = $33,
    commercial_license_registration_date = $34,
    commercial_license_issue_date = $35,
    extra_license_nos = $36,
    extra_license_files = $37,
    extra_license_names = $38,
    extra_license_issue_date = $39,
    extra_license_expiry_date = $40,
    license_dcci_no = $41,
    register_no = $42,
    other_social_media = $43,
    youtube_profile_url = $44,
    created_by = $45,
    bank_account_details_id = $46
Where id = $1
RETURNING id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

type UpdateServiceCompanyBranchParams struct {
	ID                                int64              `json:"id"`
	CompanyName                       string             `json:"company_name"`
	Description                       pgtype.Text        `json:"description"`
	LogoUrl                           string             `json:"logo_url"`
	AddressesID                       int64              `json:"addresses_id"`
	Email                             pgtype.Text        `json:"email"`
	PhoneNumber                       pgtype.Text        `json:"phone_number"`
	WhatsappNumber                    pgtype.Text        `json:"whatsapp_number"`
	CommercialLicenseNo               string             `json:"commercial_license_no"`
	CommercialLicenseFileUrl          string             `json:"commercial_license_file_url"`
	CommercialLicenseExpiry           time.Time          `json:"commercial_license_expiry"`
	IsVerified                        pgtype.Bool        `json:"is_verified"`
	WebsiteUrl                        pgtype.Text        `json:"website_url"`
	CoverImageUrl                     pgtype.Text        `json:"cover_image_url"`
	TagLine                           pgtype.Text        `json:"tag_line"`
	VatNo                             pgtype.Text        `json:"vat_no"`
	VatStatus                         pgtype.Int8        `json:"vat_status"`
	VatFileUrl                        pgtype.Text        `json:"vat_file_url"`
	FacebookProfileUrl                pgtype.Text        `json:"facebook_profile_url"`
	InstagramProfileUrl               pgtype.Text        `json:"instagram_profile_url"`
	TwitterProfileUrl                 pgtype.Text        `json:"twitter_profile_url"`
	NoOfEmployees                     pgtype.Int8        `json:"no_of_employees"`
	UsersID                           int64              `json:"users_id"`
	LinkedinProfileUrl                pgtype.Text        `json:"linkedin_profile_url"`
	ServicesCompaniesID               int64              `json:"services_companies_id"`
	CompanyRank                       int64              `json:"company_rank"`
	Status                            int64              `json:"status"`
	CountryID                         int64              `json:"country_id"`
	CompanyType                       int64              `json:"company_type"`
	IsBranch                          pgtype.Bool        `json:"is_branch"`
	CreatedAt                         time.Time          `json:"created_at"`
	UpdatedAt                         time.Time          `json:"updated_at"`
	RefNo                             string             `json:"ref_no"`
	CommercialLicenseRegistrationDate pgtype.Timestamptz `json:"commercial_license_registration_date"`
	CommercialLicenseIssueDate        pgtype.Timestamptz `json:"commercial_license_issue_date"`
	ExtraLicenseNos                   []string           `json:"extra_license_nos"`
	ExtraLicenseFiles                 []string           `json:"extra_license_files"`
	ExtraLicenseNames                 []string           `json:"extra_license_names"`
	ExtraLicenseIssueDate             []time.Time        `json:"extra_license_issue_date"`
	ExtraLicenseExpiryDate            []time.Time        `json:"extra_license_expiry_date"`
	LicenseDcciNo                     pgtype.Text        `json:"license_dcci_no"`
	RegisterNo                        pgtype.Text        `json:"register_no"`
	OtherSocialMedia                  []string           `json:"other_social_media"`
	YoutubeProfileUrl                 pgtype.Text        `json:"youtube_profile_url"`
	CreatedBy                         int64              `json:"created_by"`
	BankAccountDetailsID              int64              `json:"bank_account_details_id"`
}

func (q *Queries) UpdateServiceCompanyBranch(ctx context.Context, arg UpdateServiceCompanyBranchParams) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, updateServiceCompanyBranch,
		arg.ID,
		arg.CompanyName,
		arg.Description,
		arg.LogoUrl,
		arg.AddressesID,
		arg.Email,
		arg.PhoneNumber,
		arg.WhatsappNumber,
		arg.CommercialLicenseNo,
		arg.CommercialLicenseFileUrl,
		arg.CommercialLicenseExpiry,
		arg.IsVerified,
		arg.WebsiteUrl,
		arg.CoverImageUrl,
		arg.TagLine,
		arg.VatNo,
		arg.VatStatus,
		arg.VatFileUrl,
		arg.FacebookProfileUrl,
		arg.InstagramProfileUrl,
		arg.TwitterProfileUrl,
		arg.NoOfEmployees,
		arg.UsersID,
		arg.LinkedinProfileUrl,
		arg.ServicesCompaniesID,
		arg.CompanyRank,
		arg.Status,
		arg.CountryID,
		arg.CompanyType,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.RefNo,
		arg.CommercialLicenseRegistrationDate,
		arg.CommercialLicenseIssueDate,
		arg.ExtraLicenseNos,
		arg.ExtraLicenseFiles,
		arg.ExtraLicenseNames,
		arg.ExtraLicenseIssueDate,
		arg.ExtraLicenseExpiryDate,
		arg.LicenseDcciNo,
		arg.RegisterNo,
		arg.OtherSocialMedia,
		arg.YoutubeProfileUrl,
		arg.CreatedBy,
		arg.BankAccountDetailsID,
	)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateServiceCompanyBranchRank = `-- name: UpdateServiceCompanyBranchRank :one






UPDATE service_company_branches 
SET company_rank=$2 
Where id =$1 
RETURNING id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

type UpdateServiceCompanyBranchRankParams struct {
	ID          int64 `json:"id"`
	CompanyRank int64 `json:"company_rank"`
}

// -- name: GetServiceBranchCompanySubscriptionById :one
// SELECT services_subscription_id FROM service_company_branches
// WHERE id = $1;
// -- name: UpdateServiceBranchCompanyMainService :one
// UPDATE service_company_branches
// SET main_services_id = $2
// Where id = $1
// RETURNING *;
func (q *Queries) UpdateServiceCompanyBranchRank(ctx context.Context, arg UpdateServiceCompanyBranchRankParams) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, updateServiceCompanyBranchRank, arg.ID, arg.CompanyRank)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}

const updateServiceCompanyBranchStatus = `-- name: UpdateServiceCompanyBranchStatus :one
UPDATE service_company_branches 
SET status=$2 
Where id =$1 
RETURNING id, services_companies_id, company_name, description, logo_url, addresses_id, email, phone_number, whatsapp_number, commercial_license_no, commercial_license_file_url, commercial_license_expiry, is_verified, website_url, cover_image_url, tag_line, vat_no, vat_status, vat_file_url, facebook_profile_url, instagram_profile_url, twitter_profile_url, no_of_employees, users_id, linkedin_profile_url, bank_account_details_id, company_rank, status, country_id, company_type, is_branch, created_at, updated_at, ref_no, commercial_license_registration_date, commercial_license_issue_date, extra_license_names, extra_license_files, extra_license_nos, extra_license_issue_date, extra_license_expiry_date, youtube_profile_url, created_by, license_dcci_no, register_no, other_social_media
`

type UpdateServiceCompanyBranchStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateServiceCompanyBranchStatus(ctx context.Context, arg UpdateServiceCompanyBranchStatusParams) (ServiceCompanyBranch, error) {
	row := q.db.QueryRow(ctx, updateServiceCompanyBranchStatus, arg.ID, arg.Status)
	var i ServiceCompanyBranch
	err := row.Scan(
		&i.ID,
		&i.ServicesCompaniesID,
		&i.CompanyName,
		&i.Description,
		&i.LogoUrl,
		&i.AddressesID,
		&i.Email,
		&i.PhoneNumber,
		&i.WhatsappNumber,
		&i.CommercialLicenseNo,
		&i.CommercialLicenseFileUrl,
		&i.CommercialLicenseExpiry,
		&i.IsVerified,
		&i.WebsiteUrl,
		&i.CoverImageUrl,
		&i.TagLine,
		&i.VatNo,
		&i.VatStatus,
		&i.VatFileUrl,
		&i.FacebookProfileUrl,
		&i.InstagramProfileUrl,
		&i.TwitterProfileUrl,
		&i.NoOfEmployees,
		&i.UsersID,
		&i.LinkedinProfileUrl,
		&i.BankAccountDetailsID,
		&i.CompanyRank,
		&i.Status,
		&i.CountryID,
		&i.CompanyType,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RefNo,
		&i.CommercialLicenseRegistrationDate,
		&i.CommercialLicenseIssueDate,
		&i.ExtraLicenseNames,
		&i.ExtraLicenseFiles,
		&i.ExtraLicenseNos,
		&i.ExtraLicenseIssueDate,
		&i.ExtraLicenseExpiryDate,
		&i.YoutubeProfileUrl,
		&i.CreatedBy,
		&i.LicenseDcciNo,
		&i.RegisterNo,
		&i.OtherSocialMedia,
	)
	return i, err
}
