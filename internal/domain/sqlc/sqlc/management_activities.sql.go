// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: management_activities.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMangementActivities = `-- name: CreateMangementActivities :one
INSERT INTO management_activities (
    activity_type,
    company_types_id,
    companies_id,
    is_branch,
    module_name,
    activity,
    activity_date,
    user_id
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8) RETURNING id, activity_type, company_types_id, companies_id, is_branch, module_name, activity, activity_date, user_id
`

type CreateMangementActivitiesParams struct {
	ActivityType   int64       `json:"activity_type"`
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	ModuleName     string      `json:"module_name"`
	Activity       string      `json:"activity"`
	ActivityDate   time.Time   `json:"activity_date"`
	UserID         int64       `json:"user_id"`
}

func (q *Queries) CreateMangementActivities(ctx context.Context, arg CreateMangementActivitiesParams) (ManagementActivity, error) {
	row := q.db.QueryRow(ctx, createMangementActivities,
		arg.ActivityType,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.ModuleName,
		arg.Activity,
		arg.ActivityDate,
		arg.UserID,
	)
	var i ManagementActivity
	err := row.Scan(
		&i.ID,
		&i.ActivityType,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const deleteMangementActivities = `-- name: DeleteMangementActivities :exec
DELETE FROM management_activities
WHERE id = $1
`

func (q *Queries) DeleteMangementActivities(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMangementActivities, id)
	return err
}

const getCountMangementActivities = `-- name: GetCountMangementActivities :many
SELECT Count(*) FROM management_activities
`

func (q *Queries) GetCountMangementActivities(ctx context.Context) ([]int64, error) {
	rows, err := q.db.Query(ctx, getCountMangementActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMangementActivities = `-- name: GetMangementActivities :many
SELECT id, activity_type, company_types_id, companies_id, is_branch, module_name, activity, activity_date, user_id FROM management_activities
`

func (q *Queries) GetMangementActivities(ctx context.Context) ([]ManagementActivity, error) {
	rows, err := q.db.Query(ctx, getMangementActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ManagementActivity
	for rows.Next() {
		var i ManagementActivity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityType,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.ModuleName,
			&i.Activity,
			&i.ActivityDate,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMangementActivitiesById = `-- name: GetMangementActivitiesById :one
SELECT id, activity_type, company_types_id, companies_id, is_branch, module_name, activity, activity_date, user_id FROM management_activities WHERE id = $1
`

func (q *Queries) GetMangementActivitiesById(ctx context.Context, id int64) (ManagementActivity, error) {
	row := q.db.QueryRow(ctx, getMangementActivitiesById, id)
	var i ManagementActivity
	err := row.Scan(
		&i.ID,
		&i.ActivityType,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const getMangementActivitiesWithPg = `-- name: GetMangementActivitiesWithPg :one
SELECT id, activity_type, company_types_id, companies_id, is_branch, module_name, activity, activity_date, user_id FROM management_activities LIMIT $1 OFFSET $2
`

type GetMangementActivitiesWithPgParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMangementActivitiesWithPg(ctx context.Context, arg GetMangementActivitiesWithPgParams) (ManagementActivity, error) {
	row := q.db.QueryRow(ctx, getMangementActivitiesWithPg, arg.Limit, arg.Offset)
	var i ManagementActivity
	err := row.Scan(
		&i.ID,
		&i.ActivityType,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}

const updateMangementActivities = `-- name: UpdateMangementActivities :one
UPDATE management_activities
SET
    activity_type = $2,
    company_types_id = $3,
    companies_id = $4,
    is_branch = $5,
    module_name = $6,
    activity = $7,
    activity_date = $8,
    user_id = $9
WHERE id = $1 RETURNING id, activity_type, company_types_id, companies_id, is_branch, module_name, activity, activity_date, user_id
`

type UpdateMangementActivitiesParams struct {
	ID             int64       `json:"id"`
	ActivityType   int64       `json:"activity_type"`
	CompanyTypesID int64       `json:"company_types_id"`
	CompaniesID    int64       `json:"companies_id"`
	IsBranch       pgtype.Bool `json:"is_branch"`
	ModuleName     string      `json:"module_name"`
	Activity       string      `json:"activity"`
	ActivityDate   time.Time   `json:"activity_date"`
	UserID         int64       `json:"user_id"`
}

func (q *Queries) UpdateMangementActivities(ctx context.Context, arg UpdateMangementActivitiesParams) (ManagementActivity, error) {
	row := q.db.QueryRow(ctx, updateMangementActivities,
		arg.ID,
		arg.ActivityType,
		arg.CompanyTypesID,
		arg.CompaniesID,
		arg.IsBranch,
		arg.ModuleName,
		arg.Activity,
		arg.ActivityDate,
		arg.UserID,
	)
	var i ManagementActivity
	err := row.Scan(
		&i.ID,
		&i.ActivityType,
		&i.CompanyTypesID,
		&i.CompaniesID,
		&i.IsBranch,
		&i.ModuleName,
		&i.Activity,
		&i.ActivityDate,
		&i.UserID,
	)
	return i, err
}
