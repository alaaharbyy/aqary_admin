// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_properties_facts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgriculturalPropertyFacts = `-- name: CreateAgriculturalPropertyFacts :one
INSERT INTO agricultural_properties_facts (
     bedroom,
     bathroom,
     plot_area,
     built_up_area,
     view,
     furnished,
     ownership,
     completion_status,
     start_date,
     completion_date,
     handover_date,
     no_of_floor,
     no_of_units,
     min_area,
     max_area,
     service_charge,
     parking,
     ask_price,
     price,
     rent_type,
     no_of_payment,
     no_of_retail,
     no_of_pool,
     elevator,
     starting_price,
     life_style,
     properties_id,
     property,
     is_branch,
     created_at,
     updated_at,
     available_units,
     commercial_tax,
     municipality_tax,
     no_of_tree,
     no_of_water_well,
     no_of_workers_house
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,$21,$22,$23,$24,$25,$26,$27,$28, $29, $30, $31, $32, $33, $34, $35, $36, $37 
) RETURNING id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, property, is_branch, created_at, updated_at, available_units, commercial_tax, municipality_tax, no_of_tree, no_of_water_well, no_of_workers_house
`

type CreateAgriculturalPropertyFactsParams struct {
	Bedroom          pgtype.Text        `json:"bedroom"`
	Bathroom         pgtype.Int8        `json:"bathroom"`
	PlotArea         pgtype.Int8        `json:"plot_area"`
	BuiltUpArea      pgtype.Int8        `json:"built_up_area"`
	View             []int64            `json:"view"`
	Furnished        pgtype.Int8        `json:"furnished"`
	Ownership        pgtype.Int8        `json:"ownership"`
	CompletionStatus pgtype.Int8        `json:"completion_status"`
	StartDate        pgtype.Timestamptz `json:"start_date"`
	CompletionDate   pgtype.Timestamptz `json:"completion_date"`
	HandoverDate     pgtype.Timestamptz `json:"handover_date"`
	NoOfFloor        pgtype.Int8        `json:"no_of_floor"`
	NoOfUnits        pgtype.Int8        `json:"no_of_units"`
	MinArea          pgtype.Int8        `json:"min_area"`
	MaxArea          pgtype.Int8        `json:"max_area"`
	ServiceCharge    pgtype.Int8        `json:"service_charge"`
	Parking          pgtype.Int8        `json:"parking"`
	AskPrice         pgtype.Bool        `json:"ask_price"`
	Price            pgtype.Int8        `json:"price"`
	RentType         pgtype.Int8        `json:"rent_type"`
	NoOfPayment      pgtype.Int8        `json:"no_of_payment"`
	NoOfRetail       pgtype.Int8        `json:"no_of_retail"`
	NoOfPool         pgtype.Int8        `json:"no_of_pool"`
	Elevator         pgtype.Int8        `json:"elevator"`
	StartingPrice    pgtype.Int8        `json:"starting_price"`
	LifeStyle        pgtype.Int8        `json:"life_style"`
	PropertiesID     int64              `json:"properties_id"`
	Property         int64              `json:"property"`
	IsBranch         pgtype.Bool        `json:"is_branch"`
	CreatedAt        time.Time          `json:"created_at"`
	UpdatedAt        time.Time          `json:"updated_at"`
	AvailableUnits   pgtype.Int8        `json:"available_units"`
	CommercialTax    pgtype.Int8        `json:"commercial_tax"`
	MunicipalityTax  pgtype.Int8        `json:"municipality_tax"`
	NoOfTree         pgtype.Int8        `json:"no_of_tree"`
	NoOfWaterWell    pgtype.Int8        `json:"no_of_water_well"`
	NoOfWorkersHouse pgtype.Int8        `json:"no_of_workers_house"`
}

func (q *Queries) CreateAgriculturalPropertyFacts(ctx context.Context, arg CreateAgriculturalPropertyFactsParams) (AgriculturalPropertiesFact, error) {
	row := q.db.QueryRow(ctx, createAgriculturalPropertyFacts,
		arg.Bedroom,
		arg.Bathroom,
		arg.PlotArea,
		arg.BuiltUpArea,
		arg.View,
		arg.Furnished,
		arg.Ownership,
		arg.CompletionStatus,
		arg.StartDate,
		arg.CompletionDate,
		arg.HandoverDate,
		arg.NoOfFloor,
		arg.NoOfUnits,
		arg.MinArea,
		arg.MaxArea,
		arg.ServiceCharge,
		arg.Parking,
		arg.AskPrice,
		arg.Price,
		arg.RentType,
		arg.NoOfPayment,
		arg.NoOfRetail,
		arg.NoOfPool,
		arg.Elevator,
		arg.StartingPrice,
		arg.LifeStyle,
		arg.PropertiesID,
		arg.Property,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AvailableUnits,
		arg.CommercialTax,
		arg.MunicipalityTax,
		arg.NoOfTree,
		arg.NoOfWaterWell,
		arg.NoOfWorkersHouse,
	)
	var i AgriculturalPropertiesFact
	err := row.Scan(
		&i.ID,
		&i.Bedroom,
		&i.Bathroom,
		&i.PlotArea,
		&i.BuiltUpArea,
		&i.View,
		&i.Furnished,
		&i.Ownership,
		&i.CompletionStatus,
		&i.StartDate,
		&i.CompletionDate,
		&i.HandoverDate,
		&i.NoOfFloor,
		&i.NoOfUnits,
		&i.MinArea,
		&i.MaxArea,
		&i.ServiceCharge,
		&i.Parking,
		&i.AskPrice,
		&i.Price,
		&i.RentType,
		&i.NoOfPayment,
		&i.NoOfRetail,
		&i.NoOfPool,
		&i.Elevator,
		&i.StartingPrice,
		&i.LifeStyle,
		&i.PropertiesID,
		&i.Property,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvailableUnits,
		&i.CommercialTax,
		&i.MunicipalityTax,
		&i.NoOfTree,
		&i.NoOfWaterWell,
		&i.NoOfWorkersHouse,
	)
	return i, err
}

const deleteAgriculturalPropertyFacts = `-- name: DeleteAgriculturalPropertyFacts :exec
DELETE FROM agricultural_properties_facts
Where id = $1
`

func (q *Queries) DeleteAgriculturalPropertyFacts(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalPropertyFacts, id)
	return err
}

const getAgriculturalPropertyFacts = `-- name: GetAgriculturalPropertyFacts :one
SELECT id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, property, is_branch, created_at, updated_at, available_units, commercial_tax, municipality_tax, no_of_tree, no_of_water_well, no_of_workers_house FROM agricultural_properties_facts 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalPropertyFacts(ctx context.Context, limit int32) (AgriculturalPropertiesFact, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyFacts, limit)
	var i AgriculturalPropertiesFact
	err := row.Scan(
		&i.ID,
		&i.Bedroom,
		&i.Bathroom,
		&i.PlotArea,
		&i.BuiltUpArea,
		&i.View,
		&i.Furnished,
		&i.Ownership,
		&i.CompletionStatus,
		&i.StartDate,
		&i.CompletionDate,
		&i.HandoverDate,
		&i.NoOfFloor,
		&i.NoOfUnits,
		&i.MinArea,
		&i.MaxArea,
		&i.ServiceCharge,
		&i.Parking,
		&i.AskPrice,
		&i.Price,
		&i.RentType,
		&i.NoOfPayment,
		&i.NoOfRetail,
		&i.NoOfPool,
		&i.Elevator,
		&i.StartingPrice,
		&i.LifeStyle,
		&i.PropertiesID,
		&i.Property,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvailableUnits,
		&i.CommercialTax,
		&i.MunicipalityTax,
		&i.NoOfTree,
		&i.NoOfWaterWell,
		&i.NoOfWorkersHouse,
	)
	return i, err
}

const getAllAgriculturalPropertyFacts = `-- name: GetAllAgriculturalPropertyFacts :many
SELECT id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, property, is_branch, created_at, updated_at, available_units, commercial_tax, municipality_tax, no_of_tree, no_of_water_well, no_of_workers_house FROM agricultural_properties_facts
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalPropertyFactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyFacts(ctx context.Context, arg GetAllAgriculturalPropertyFactsParams) ([]AgriculturalPropertiesFact, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyFacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesFact
	for rows.Next() {
		var i AgriculturalPropertiesFact
		if err := rows.Scan(
			&i.ID,
			&i.Bedroom,
			&i.Bathroom,
			&i.PlotArea,
			&i.BuiltUpArea,
			&i.View,
			&i.Furnished,
			&i.Ownership,
			&i.CompletionStatus,
			&i.StartDate,
			&i.CompletionDate,
			&i.HandoverDate,
			&i.NoOfFloor,
			&i.NoOfUnits,
			&i.MinArea,
			&i.MaxArea,
			&i.ServiceCharge,
			&i.Parking,
			&i.AskPrice,
			&i.Price,
			&i.RentType,
			&i.NoOfPayment,
			&i.NoOfRetail,
			&i.NoOfPool,
			&i.Elevator,
			&i.StartingPrice,
			&i.LifeStyle,
			&i.PropertiesID,
			&i.Property,
			&i.IsBranch,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AvailableUnits,
			&i.CommercialTax,
			&i.MunicipalityTax,
			&i.NoOfTree,
			&i.NoOfWaterWell,
			&i.NoOfWorkersHouse,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalPropertyFacts = `-- name: UpdateAgriculturalPropertyFacts :one
UPDATE agricultural_properties_facts
SET    bedroom = $2,
     bathroom = $3,
     plot_area = $4,
     built_up_area = $5,
     view = $6,
     furnished = $7,
     ownership = $8,
     completion_status = $9,
     start_date = $10,
     completion_date = $11,
     handover_date = $12,
     no_of_floor = $13,
     no_of_units = $14,
     min_area = $15,
     max_area = $16,
     service_charge = $17,
     parking = $18,
     ask_price = $19,
     price = $20,
     rent_type = $21,
     no_of_payment = $22,
     no_of_retail = $23,
     no_of_pool = $24,
     elevator = $25,
     starting_price = $26,
     life_style = $27,
     properties_id = $28,
     property = $29,
     is_branch = $30,
     created_at = $31,
     updated_at = $32,
     available_units = $33,
     commercial_tax = $34,
     municipality_tax = $35,
          no_of_tree = $36,
     no_of_water_well = $37,
     no_of_workers_house = $38
Where id = $1
RETURNING id, bedroom, bathroom, plot_area, built_up_area, view, furnished, ownership, completion_status, start_date, completion_date, handover_date, no_of_floor, no_of_units, min_area, max_area, service_charge, parking, ask_price, price, rent_type, no_of_payment, no_of_retail, no_of_pool, elevator, starting_price, life_style, properties_id, property, is_branch, created_at, updated_at, available_units, commercial_tax, municipality_tax, no_of_tree, no_of_water_well, no_of_workers_house
`

type UpdateAgriculturalPropertyFactsParams struct {
	ID               int64              `json:"id"`
	Bedroom          pgtype.Text        `json:"bedroom"`
	Bathroom         pgtype.Int8        `json:"bathroom"`
	PlotArea         pgtype.Int8        `json:"plot_area"`
	BuiltUpArea      pgtype.Int8        `json:"built_up_area"`
	View             []int64            `json:"view"`
	Furnished        pgtype.Int8        `json:"furnished"`
	Ownership        pgtype.Int8        `json:"ownership"`
	CompletionStatus pgtype.Int8        `json:"completion_status"`
	StartDate        pgtype.Timestamptz `json:"start_date"`
	CompletionDate   pgtype.Timestamptz `json:"completion_date"`
	HandoverDate     pgtype.Timestamptz `json:"handover_date"`
	NoOfFloor        pgtype.Int8        `json:"no_of_floor"`
	NoOfUnits        pgtype.Int8        `json:"no_of_units"`
	MinArea          pgtype.Int8        `json:"min_area"`
	MaxArea          pgtype.Int8        `json:"max_area"`
	ServiceCharge    pgtype.Int8        `json:"service_charge"`
	Parking          pgtype.Int8        `json:"parking"`
	AskPrice         pgtype.Bool        `json:"ask_price"`
	Price            pgtype.Int8        `json:"price"`
	RentType         pgtype.Int8        `json:"rent_type"`
	NoOfPayment      pgtype.Int8        `json:"no_of_payment"`
	NoOfRetail       pgtype.Int8        `json:"no_of_retail"`
	NoOfPool         pgtype.Int8        `json:"no_of_pool"`
	Elevator         pgtype.Int8        `json:"elevator"`
	StartingPrice    pgtype.Int8        `json:"starting_price"`
	LifeStyle        pgtype.Int8        `json:"life_style"`
	PropertiesID     int64              `json:"properties_id"`
	Property         int64              `json:"property"`
	IsBranch         pgtype.Bool        `json:"is_branch"`
	CreatedAt        time.Time          `json:"created_at"`
	UpdatedAt        time.Time          `json:"updated_at"`
	AvailableUnits   pgtype.Int8        `json:"available_units"`
	CommercialTax    pgtype.Int8        `json:"commercial_tax"`
	MunicipalityTax  pgtype.Int8        `json:"municipality_tax"`
	NoOfTree         pgtype.Int8        `json:"no_of_tree"`
	NoOfWaterWell    pgtype.Int8        `json:"no_of_water_well"`
	NoOfWorkersHouse pgtype.Int8        `json:"no_of_workers_house"`
}

func (q *Queries) UpdateAgriculturalPropertyFacts(ctx context.Context, arg UpdateAgriculturalPropertyFactsParams) (AgriculturalPropertiesFact, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalPropertyFacts,
		arg.ID,
		arg.Bedroom,
		arg.Bathroom,
		arg.PlotArea,
		arg.BuiltUpArea,
		arg.View,
		arg.Furnished,
		arg.Ownership,
		arg.CompletionStatus,
		arg.StartDate,
		arg.CompletionDate,
		arg.HandoverDate,
		arg.NoOfFloor,
		arg.NoOfUnits,
		arg.MinArea,
		arg.MaxArea,
		arg.ServiceCharge,
		arg.Parking,
		arg.AskPrice,
		arg.Price,
		arg.RentType,
		arg.NoOfPayment,
		arg.NoOfRetail,
		arg.NoOfPool,
		arg.Elevator,
		arg.StartingPrice,
		arg.LifeStyle,
		arg.PropertiesID,
		arg.Property,
		arg.IsBranch,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AvailableUnits,
		arg.CommercialTax,
		arg.MunicipalityTax,
		arg.NoOfTree,
		arg.NoOfWaterWell,
		arg.NoOfWorkersHouse,
	)
	var i AgriculturalPropertiesFact
	err := row.Scan(
		&i.ID,
		&i.Bedroom,
		&i.Bathroom,
		&i.PlotArea,
		&i.BuiltUpArea,
		&i.View,
		&i.Furnished,
		&i.Ownership,
		&i.CompletionStatus,
		&i.StartDate,
		&i.CompletionDate,
		&i.HandoverDate,
		&i.NoOfFloor,
		&i.NoOfUnits,
		&i.MinArea,
		&i.MaxArea,
		&i.ServiceCharge,
		&i.Parking,
		&i.AskPrice,
		&i.Price,
		&i.RentType,
		&i.NoOfPayment,
		&i.NoOfRetail,
		&i.NoOfPool,
		&i.Elevator,
		&i.StartingPrice,
		&i.LifeStyle,
		&i.PropertiesID,
		&i.Property,
		&i.IsBranch,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AvailableUnits,
		&i.CommercialTax,
		&i.MunicipalityTax,
		&i.NoOfTree,
		&i.NoOfWaterWell,
		&i.NoOfWorkersHouse,
	)
	return i, err
}
