// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: aqary_media_ads_common.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllAqaryMediaAds = `-- name: GetAllAqaryMediaAds :many
WITH x AS (
SELECT 
	id,
	company_types_id,
	companies_id,
	is_branch, 
	title,
	project_id AS project_or_property_unit_id,
	is_project_branch AS project_or_property_isBranch,
	ads_category,
	ads_status,
	ads_schema,
	created_by,
	created_at,
	0 as property_hub_category
	FROM aqary_project_ads
	UNION ALL
	SELECT id,
	company_types_id,
	companies_id,
	is_branch, 
	title,
	property_unit_id  AS project_or_property_unit_id,
	is_property_unit_branch AS project_or_property_isBranch,
	ads_category,
	ads_status,
	ads_schema,
	created_by,
	created_at,
	property_hub_category FROM aqary_property_ads
) SELECT id, company_types_id, companies_id, is_branch, title, project_or_property_unit_id, project_or_property_isbranch, ads_category, ads_status, ads_schema, created_by, created_at, property_hub_category FROM x LIMIT $1 OFFSET $2
`

type GetAllAqaryMediaAdsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAqaryMediaAdsRow struct {
	ID                        int64       `json:"id"`
	CompanyTypesID            int64       `json:"company_types_id"`
	CompaniesID               int64       `json:"companies_id"`
	IsBranch                  pgtype.Bool `json:"is_branch"`
	Title                     string      `json:"title"`
	ProjectOrPropertyUnitID   int64       `json:"project_or_property_unit_id"`
	ProjectOrPropertyIsbranch pgtype.Bool `json:"project_or_property_isbranch"`
	AdsCategory               string      `json:"ads_category"`
	AdsStatus                 int64       `json:"ads_status"`
	AdsSchema                 string      `json:"ads_schema"`
	CreatedBy                 int64       `json:"created_by"`
	CreatedAt                 time.Time   `json:"created_at"`
	PropertyHubCategory       pgtype.Int8 `json:"property_hub_category"`
}

func (q *Queries) GetAllAqaryMediaAds(ctx context.Context, arg GetAllAqaryMediaAdsParams) ([]GetAllAqaryMediaAdsRow, error) {
	rows, err := q.db.Query(ctx, getAllAqaryMediaAds, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAqaryMediaAdsRow
	for rows.Next() {
		var i GetAllAqaryMediaAdsRow
		if err := rows.Scan(
			&i.ID,
			&i.CompanyTypesID,
			&i.CompaniesID,
			&i.IsBranch,
			&i.Title,
			&i.ProjectOrPropertyUnitID,
			&i.ProjectOrPropertyIsbranch,
			&i.AdsCategory,
			&i.AdsStatus,
			&i.AdsSchema,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.PropertyHubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllAqaryMediaAds = `-- name: GetCountAllAqaryMediaAds :one
WITH x AS (
SELECT 
	id
	FROM aqary_project_ads
	UNION ALL
	SELECT id
	FROM aqary_property_ads
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllAqaryMediaAds(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllAqaryMediaAds)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountAllAqaryMediaPosts = `-- name: GetCountAllAqaryMediaPosts :one
WITH x AS (
 
SELECT 
	id
	FROM aqary_project_posts
 
	UNION ALL
 
	SELECT id
 
	FROM aqary_property_posts
 
) SELECT COUNT(*) FROM x
`

func (q *Queries) GetCountAllAqaryMediaPosts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllAqaryMediaPosts)
	var count int64
	err := row.Scan(&count)
	return count, err
}
