// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: property_type_facts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPropertyTypeFacts = `-- name: CreatePropertyTypeFacts :one
INSERT INTO property_type_facts (
    title,
    status,
    created_at,
    updated_at ,
    icon  
)VALUES (
    $1, $2, $3,$4, $5
) RETURNING id, title, status, created_at, updated_at, icon
`

type CreatePropertyTypeFactsParams struct {
	Title     string      `json:"title"`
	Status    int64       `json:"status"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Icon      pgtype.Text `json:"icon"`
}

func (q *Queries) CreatePropertyTypeFacts(ctx context.Context, arg CreatePropertyTypeFactsParams) (PropertyTypeFact, error) {
	row := q.db.QueryRow(ctx, createPropertyTypeFacts,
		arg.Title,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Icon,
	)
	var i PropertyTypeFact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Icon,
	)
	return i, err
}

const deletePropertyTypeFacts = `-- name: DeletePropertyTypeFacts :exec
DELETE FROM property_type_facts
Where id = $1
`

func (q *Queries) DeletePropertyTypeFacts(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePropertyTypeFacts, id)
	return err
}

const getAllPropertyTypeFacts = `-- name: GetAllPropertyTypeFacts :many
SELECT id, title, status, created_at, updated_at, icon FROM property_type_facts
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllPropertyTypeFactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPropertyTypeFacts(ctx context.Context, arg GetAllPropertyTypeFactsParams) ([]PropertyTypeFact, error) {
	rows, err := q.db.Query(ctx, getAllPropertyTypeFacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyTypeFact
	for rows.Next() {
		var i PropertyTypeFact
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPropertyTypeFactsByIds = `-- name: GetAllPropertyTypeFactsByIds :many
SELECT id,title AS label FROM property_type_facts WHERE id = ANY($1::bigint[])
`

type GetAllPropertyTypeFactsByIdsRow struct {
	ID    int64  `json:"id"`
	Label string `json:"label"`
}

func (q *Queries) GetAllPropertyTypeFactsByIds(ctx context.Context, dollar_1 []int64) ([]GetAllPropertyTypeFactsByIdsRow, error) {
	rows, err := q.db.Query(ctx, getAllPropertyTypeFactsByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPropertyTypeFactsByIdsRow
	for rows.Next() {
		var i GetAllPropertyTypeFactsByIdsRow
		if err := rows.Scan(&i.ID, &i.Label); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyTypeFactByTitle = `-- name: GetPropertyTypeFactByTitle :one
SELECT id, title, status, created_at, updated_at, icon FROM property_type_facts 
WHERE title = $1 LIMIT 1
`

func (q *Queries) GetPropertyTypeFactByTitle(ctx context.Context, title string) (PropertyTypeFact, error) {
	row := q.db.QueryRow(ctx, getPropertyTypeFactByTitle, title)
	var i PropertyTypeFact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Icon,
	)
	return i, err
}

const getPropertyTypeFacts = `-- name: GetPropertyTypeFacts :one
SELECT id, title, status, created_at, updated_at, icon FROM property_type_facts 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetPropertyTypeFacts(ctx context.Context, limit int32) (PropertyTypeFact, error) {
	row := q.db.QueryRow(ctx, getPropertyTypeFacts, limit)
	var i PropertyTypeFact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Icon,
	)
	return i, err
}

const updatePropertyTypeFacts = `-- name: UpdatePropertyTypeFacts :one
UPDATE property_type_facts
SET  title = $2,
    status = $3,
    created_at = $4,
    updated_at = $5,
    icon  = $6
Where id = $1
RETURNING id, title, status, created_at, updated_at, icon
`

type UpdatePropertyTypeFactsParams struct {
	ID        int64       `json:"id"`
	Title     string      `json:"title"`
	Status    int64       `json:"status"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Icon      pgtype.Text `json:"icon"`
}

func (q *Queries) UpdatePropertyTypeFacts(ctx context.Context, arg UpdatePropertyTypeFactsParams) (PropertyTypeFact, error) {
	row := q.db.QueryRow(ctx, updatePropertyTypeFacts,
		arg.ID,
		arg.Title,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Icon,
	)
	var i PropertyTypeFact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Icon,
	)
	return i, err
}
