// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reports.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports (
    entity_id, entity_type_id, category, message, status, created_by, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, entity_id, entity_type_id, category, message, status, created_by, created_at, updated_at
`

type CreateReportParams struct {
	EntityID     int64       `json:"entity_id"`
	EntityTypeID int64       `json:"entity_type_id"`
	Category     int64       `json:"category"`
	Message      pgtype.Text `json:"message"`
	Status       int64       `json:"status"`
	CreatedBy    int64       `json:"created_by"`
	CreatedAt    time.Time   `json:"created_at"`
	UpdatedAt    time.Time   `json:"updated_at"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (Report, error) {
	row := q.db.QueryRow(ctx, createReport,
		arg.EntityID,
		arg.EntityTypeID,
		arg.Category,
		arg.Message,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.EntityTypeID,
		&i.Category,
		&i.Message,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReport = `-- name: DeleteReport :exec

DELETE FROM reports
WHERE id = $1
`

// -- name: UpdateReport :one
// UPDATE reports
// SET
//
//	entity_id = $2,
//	entity_type_id = $3,
//	category = $4,
//	message = $5,
//	status = $6,
//	updated_at = $7
//
// WHERE id = $1
// RETURNING *;
func (q *Queries) DeleteReport(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteReport, id)
	return err
}

const getReport = `-- name: GetReport :one
SELECT id, entity_id, entity_type_id, category, message, status, created_by, created_at, updated_at FROM reports
WHERE id = $1
`

func (q *Queries) GetReport(ctx context.Context, id int64) (Report, error) {
	row := q.db.QueryRow(ctx, getReport, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.EntityID,
		&i.EntityTypeID,
		&i.Category,
		&i.Message,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listReports = `-- name: ListReports :many
SELECT id, entity_id, entity_type_id, category, message, status, created_by, created_at, updated_at FROM reports
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListReportsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListReports(ctx context.Context, arg ListReportsParams) ([]Report, error) {
	rows, err := q.db.Query(ctx, listReports, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.EntityTypeID,
			&i.Category,
			&i.Message,
			&i.Status,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
