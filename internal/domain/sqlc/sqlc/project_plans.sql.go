// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_plans.sql

package sqlc

import (
	"context"
	"time"
)

const createProjectPlan = `-- name: CreateProjectPlan :one
INSERT INTO project_plans (projects_id, title, plan_url, uploaded_by, updated_by)
VALUES ($1, $2, $3, $4, $5) RETURNING id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
`

type CreateProjectPlanParams struct {
	ProjectsID int64    `json:"projects_id"`
	Title      string   `json:"title"`
	PlanUrl    []string `json:"plan_url"`
	UploadedBy int64    `json:"uploaded_by"`
	UpdatedBy  int64    `json:"updated_by"`
}

func (q *Queries) CreateProjectPlan(ctx context.Context, arg CreateProjectPlanParams) (ProjectPlan, error) {
	row := q.db.QueryRow(ctx, createProjectPlan,
		arg.ProjectsID,
		arg.Title,
		arg.PlanUrl,
		arg.UploadedBy,
		arg.UpdatedBy,
	)
	var i ProjectPlan
	err := row.Scan(
		&i.ID,
		&i.ProjectsID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteProjPlan = `-- name: DeleteProjPlan :exec
DELETE FROM project_plans
WHERE id = $1
`

func (q *Queries) DeleteProjPlan(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjPlan, id)
	return err
}

const getPagProjectPlans = `-- name: GetPagProjectPlans :many
SELECT id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
FROM project_plans
LIMIT $1
OFFSET $2
`

type GetPagProjectPlansParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetPagProjectPlans(ctx context.Context, arg GetPagProjectPlansParams) ([]ProjectPlan, error) {
	rows, err := q.db.Query(ctx, getPagProjectPlans, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectPlan
	for rows.Next() {
		var i ProjectPlan
		if err := rows.Scan(
			&i.ID,
			&i.ProjectsID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjPlanByTitle = `-- name: GetProjPlanByTitle :one
SELECT id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
FROM project_plans
WHERE title ILIKE $1 AND projects_id = $2
`

type GetProjPlanByTitleParams struct {
	Title      string `json:"title"`
	ProjectsID int64  `json:"projects_id"`
}

func (q *Queries) GetProjPlanByTitle(ctx context.Context, arg GetProjPlanByTitleParams) (ProjectPlan, error) {
	row := q.db.QueryRow(ctx, getProjPlanByTitle, arg.Title, arg.ProjectsID)
	var i ProjectPlan
	err := row.Scan(
		&i.ID,
		&i.ProjectsID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getProjectPlanByProjID = `-- name: GetProjectPlanByProjID :many
SELECT id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM project_plans
WHERE projects_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetProjectPlanByProjIDParams struct {
	ProjectsID int64 `json:"projects_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetProjectPlanByProjID(ctx context.Context, arg GetProjectPlanByProjIDParams) ([]ProjectPlan, error) {
	rows, err := q.db.Query(ctx, getProjectPlanByProjID, arg.ProjectsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectPlan
	for rows.Next() {
		var i ProjectPlan
		if err := rows.Scan(
			&i.ID,
			&i.ProjectsID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPlanByProjIDWithoutPagination = `-- name: GetProjectPlanByProjIDWithoutPagination :many
SELECT id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by FROM project_plans
WHERE projects_id = $1
AND
CASE
    WHEN $2::Text = '' THEN true
    WHEN $2::Text != '' THEN project_plans.title = $2::Text
END
ORDER BY created_at DESC
`

type GetProjectPlanByProjIDWithoutPaginationParams struct {
	ProjectsID int64  `json:"projects_id"`
	Plantype   string `json:"plantype"`
}

func (q *Queries) GetProjectPlanByProjIDWithoutPagination(ctx context.Context, arg GetProjectPlanByProjIDWithoutPaginationParams) ([]ProjectPlan, error) {
	rows, err := q.db.Query(ctx, getProjectPlanByProjIDWithoutPagination, arg.ProjectsID, arg.Plantype)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectPlan
	for rows.Next() {
		var i ProjectPlan
		if err := rows.Scan(
			&i.ID,
			&i.ProjectsID,
			&i.Title,
			&i.PlanUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UploadedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPlansCount = `-- name: GetProjectPlansCount :one
SELECT COUNT(*) FROM project_plans WHERE projects_id=$1
`

func (q *Queries) GetProjectPlansCount(ctx context.Context, projectsID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getProjectPlansCount, projectsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleProjectPlanByID = `-- name: GetSingleProjectPlanByID :one
SELECT project_plans.id, project_plans.projects_id, project_plans.title, project_plans.plan_url, project_plans.created_at, project_plans.updated_at, project_plans.uploaded_by, project_plans.updated_by,projects.project_name 
FROM project_plans
INNER JOIN projects ON projects.id = project_plans.projects_id
WHERE project_plans.id = $1
`

type GetSingleProjectPlanByIDRow struct {
	ID          int64     `json:"id"`
	ProjectsID  int64     `json:"projects_id"`
	Title       string    `json:"title"`
	PlanUrl     []string  `json:"plan_url"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	UploadedBy  int64     `json:"uploaded_by"`
	UpdatedBy   int64     `json:"updated_by"`
	ProjectName string    `json:"project_name"`
}

func (q *Queries) GetSingleProjectPlanByID(ctx context.Context, id int64) (GetSingleProjectPlanByIDRow, error) {
	row := q.db.QueryRow(ctx, getSingleProjectPlanByID, id)
	var i GetSingleProjectPlanByIDRow
	err := row.Scan(
		&i.ID,
		&i.ProjectsID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
		&i.ProjectName,
	)
	return i, err
}

const updateProjectPlan = `-- name: UpdateProjectPlan :one
UPDATE project_plans
SET plan_url= $1 ,updated_by= $2,updated_at=$3
WHERE id = $4 RETURNING id, projects_id, title, plan_url, created_at, updated_at, uploaded_by, updated_by
`

type UpdateProjectPlanParams struct {
	PlanUrl   []string  `json:"plan_url"`
	UpdatedBy int64     `json:"updated_by"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateProjectPlan(ctx context.Context, arg UpdateProjectPlanParams) (ProjectPlan, error) {
	row := q.db.QueryRow(ctx, updateProjectPlan,
		arg.PlanUrl,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	var i ProjectPlan
	err := row.Scan(
		&i.ID,
		&i.ProjectsID,
		&i.Title,
		&i.PlanUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UploadedBy,
		&i.UpdatedBy,
	)
	return i, err
}
