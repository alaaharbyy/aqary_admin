// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: promotion_types.sql

package sqlc

import (
	"context"
	"time"
)

const createPromotionType = `-- name: CreatePromotionType :one
INSERT INTO promotion_types (
    types,
    status,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4
) RETURNING id, types, status, created_at, updated_at
`

type CreatePromotionTypeParams struct {
	Types     string    `json:"types"`
	Status    int64     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreatePromotionType(ctx context.Context, arg CreatePromotionTypeParams) (PromotionType, error) {
	row := q.db.QueryRow(ctx, createPromotionType,
		arg.Types,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PromotionType
	err := row.Scan(
		&i.ID,
		&i.Types,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePromotionType = `-- name: DeletePromotionType :exec
DELETE FROM promotion_types
Where id = $1
`

func (q *Queries) DeletePromotionType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePromotionType, id)
	return err
}

const getAllPromotionType = `-- name: GetAllPromotionType :many
SELECT id, types, status, created_at, updated_at FROM promotion_types
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type GetAllPromotionTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllPromotionType(ctx context.Context, arg GetAllPromotionTypeParams) ([]PromotionType, error) {
	rows, err := q.db.Query(ctx, getAllPromotionType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromotionType
	for rows.Next() {
		var i PromotionType
		if err := rows.Scan(
			&i.ID,
			&i.Types,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPromotionTypeByIds = `-- name: GetAllPromotionTypeByIds :many
SELECT id, types, status, created_at, updated_at FROM promotion_types
WHERE id = ANY($1::bigint[])
`

func (q *Queries) GetAllPromotionTypeByIds(ctx context.Context, dollar_1 []int64) ([]PromotionType, error) {
	rows, err := q.db.Query(ctx, getAllPromotionTypeByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromotionType
	for rows.Next() {
		var i PromotionType
		if err := rows.Scan(
			&i.ID,
			&i.Types,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPromotionTypeWithoutPagination = `-- name: GetAllPromotionTypeWithoutPagination :many
SELECT id, types, status, created_at, updated_at FROM promotion_types
ORDER BY id
`

func (q *Queries) GetAllPromotionTypeWithoutPagination(ctx context.Context) ([]PromotionType, error) {
	rows, err := q.db.Query(ctx, getAllPromotionTypeWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PromotionType
	for rows.Next() {
		var i PromotionType
		if err := rows.Scan(
			&i.ID,
			&i.Types,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountPromotionType = `-- name: GetCountPromotionType :one
SELECT COUNT(*) FROM promotion_types
`

func (q *Queries) GetCountPromotionType(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountPromotionType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPromotionType = `-- name: GetPromotionType :one
SELECT id, types, status, created_at, updated_at FROM promotion_types 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetPromotionType(ctx context.Context, limit int32) (PromotionType, error) {
	row := q.db.QueryRow(ctx, getPromotionType, limit)
	var i PromotionType
	err := row.Scan(
		&i.ID,
		&i.Types,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromotionTypeIdByType = `-- name: GetPromotionTypeIdByType :one
SELECT id FROM promotion_types WHERE types = $1 LIMIT 1
`

func (q *Queries) GetPromotionTypeIdByType(ctx context.Context, types string) (int64, error) {
	row := q.db.QueryRow(ctx, getPromotionTypeIdByType, types)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updatePromotionType = `-- name: UpdatePromotionType :one
UPDATE promotion_types
SET  types = $2,
    status = $3,
    created_at = $4,
    updated_at = $5
Where id = $1
RETURNING id, types, status, created_at, updated_at
`

type UpdatePromotionTypeParams struct {
	ID        int64     `json:"id"`
	Types     string    `json:"types"`
	Status    int64     `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdatePromotionType(ctx context.Context, arg UpdatePromotionTypeParams) (PromotionType, error) {
	row := q.db.QueryRow(ctx, updatePromotionType,
		arg.ID,
		arg.Types,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i PromotionType
	err := row.Scan(
		&i.ID,
		&i.Types,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
