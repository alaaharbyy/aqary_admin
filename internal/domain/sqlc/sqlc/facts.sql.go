// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: facts.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkIfPropertyTypeExists = `-- name: CheckIfPropertyTypeExists :one
SELECT 
    EXISTS (
        SELECT 1
        FROM global_property_type
        WHERE 
            (
             property_type_facts->'project' @> jsonb_build_array(jsonb_build_object('id', $1::bigint)) OR
             property_type_facts->'rent' @> jsonb_build_array(jsonb_build_object('id', $1::bigint)) OR
             property_type_facts->'sale' @> jsonb_build_array(jsonb_build_object('id', $1::bigint))
            )
        LIMIT 1
    ) AS is_present
`

func (q *Queries) CheckIfPropertyTypeExists(ctx context.Context, dollar_1 int64) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, checkIfPropertyTypeExists, dollar_1)
	var is_present pgtype.Bool
	err := row.Scan(&is_present)
	return is_present, err
}

const checkIfUnitTypeExists = `-- name: CheckIfUnitTypeExists :one
SELECT 
    EXISTS (
        SELECT 1
        FROM unit_type
        WHERE 
            (
             facts->'rent' @> jsonb_build_array(jsonb_build_object('id', $1::bigint)) OR
             facts->'sale' @> jsonb_build_array(jsonb_build_object('id', $1::bigint))
            )
        LIMIT 1
    ) AS is_present
`

func (q *Queries) CheckIfUnitTypeExists(ctx context.Context, dollar_1 int64) (pgtype.Bool, error) {
	row := q.db.QueryRow(ctx, checkIfUnitTypeExists, dollar_1)
	var is_present pgtype.Bool
	err := row.Scan(&is_present)
	return is_present, err
}

const createFacts = `-- name: CreateFacts :one
INSERT INTO facts (
    title,
    icon_url,
    title_ar
)VALUES (
    $1 ,$2, $3
) RETURNING id, title, icon_url, title_ar
`

type CreateFactsParams struct {
	Title   string `json:"title"`
	IconUrl string `json:"icon_url"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) CreateFacts(ctx context.Context, arg CreateFactsParams) (Fact, error) {
	row := q.db.QueryRow(ctx, createFacts, arg.Title, arg.IconUrl, arg.TitleAr)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IconUrl,
		&i.TitleAr,
	)
	return i, err
}

const deleteFactByID = `-- name: DeleteFactByID :exec
DELETE FROM facts
WHERE id = $1
`

func (q *Queries) DeleteFactByID(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFactByID, id)
	return err
}

const getAllFacts = `-- name: GetAllFacts :many
SELECT 
    facts.id, facts.title, facts.icon_url, facts.title_ar,
    COUNT(*) OVER() AS total_count 
FROM facts
ORDER BY id DESC  -- Change 'id' to your preferred column
LIMIT $2
OFFSET $1
`

type GetAllFactsParams struct {
	Offset pgtype.Int4 `json:"offset"`
	Limit  pgtype.Int4 `json:"limit"`
}

type GetAllFactsRow struct {
	ID         int64  `json:"id"`
	Title      string `json:"title"`
	IconUrl    string `json:"icon_url"`
	TitleAr    string `json:"title_ar"`
	TotalCount int64  `json:"total_count"`
}

func (q *Queries) GetAllFacts(ctx context.Context, arg GetAllFactsParams) ([]GetAllFactsRow, error) {
	rows, err := q.db.Query(ctx, getAllFacts, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllFactsRow
	for rows.Next() {
		var i GetAllFactsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IconUrl,
			&i.TitleAr,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllFactsDetails = `-- name: GetAllFactsDetails :many
SELECT id, title, icon_url, title_ar FROM facts
`

func (q *Queries) GetAllFactsDetails(ctx context.Context) ([]Fact, error) {
	rows, err := q.db.Query(ctx, getAllFactsDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fact
	for rows.Next() {
		var i Fact
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IconUrl,
			&i.TitleAr,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFacts = `-- name: GetFacts :one
SELECT id, title, icon_url, title_ar FROM facts 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFacts(ctx context.Context, id int64) (Fact, error) {
	row := q.db.QueryRow(ctx, getFacts, id)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IconUrl,
		&i.TitleAr,
	)
	return i, err
}

const updateFacts = `-- name: UpdateFacts :one
UPDATE facts
SET 
    title = $2,
    icon_url = $3,
    title_ar = $4
WHERE id = $1
RETURNING id, title, icon_url, title_ar
`

type UpdateFactsParams struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	IconUrl string `json:"icon_url"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) UpdateFacts(ctx context.Context, arg UpdateFactsParams) (Fact, error) {
	row := q.db.QueryRow(ctx, updateFacts,
		arg.ID,
		arg.Title,
		arg.IconUrl,
		arg.TitleAr,
	)
	var i Fact
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IconUrl,
		&i.TitleAr,
	)
	return i, err
}
