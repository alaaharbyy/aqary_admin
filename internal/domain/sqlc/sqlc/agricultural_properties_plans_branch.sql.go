// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_properties_plans_branch.sql

package sqlc

import (
	"context"
	"time"
)

const createAgriculturalPropertyPlanBranch = `-- name: CreateAgriculturalPropertyPlanBranch :one
INSERT INTO agricultural_properties_plans_branch (
    img_url,
    title,
    properties_id,
    property,
    created_at,
    updated_at
)VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type CreateAgriculturalPropertyPlanBranchParams struct {
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateAgriculturalPropertyPlanBranch(ctx context.Context, arg CreateAgriculturalPropertyPlanBranchParams) (AgriculturalPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, createAgriculturalPropertyPlanBranch,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AgriculturalPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgriculturalPropertyPlanBranch = `-- name: DeleteAgriculturalPropertyPlanBranch :exec
DELETE FROM agricultural_properties_plans_branch
Where id = $1
`

func (q *Queries) DeleteAgriculturalPropertyPlanBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalPropertyPlanBranch, id)
	return err
}

const getAgriculturalPropertyPlanBranch = `-- name: GetAgriculturalPropertyPlanBranch :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgriculturalPropertyPlanBranch(ctx context.Context, id int64) (AgriculturalPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlanBranch, id)
	var i AgriculturalPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgriculturalPropertyPlanBranchByPropertiesIDAndTitle = `-- name: GetAgriculturalPropertyPlanBranchByPropertiesIDAndTitle :one
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch WHERE properties_id=$1 AND LOWER(title)=LOWER($2)
`

type GetAgriculturalPropertyPlanBranchByPropertiesIDAndTitleParams struct {
	PropertiesID int64  `json:"properties_id"`
	Lower        string `json:"lower"`
}

func (q *Queries) GetAgriculturalPropertyPlanBranchByPropertiesIDAndTitle(ctx context.Context, arg GetAgriculturalPropertyPlanBranchByPropertiesIDAndTitleParams) (AgriculturalPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, getAgriculturalPropertyPlanBranchByPropertiesIDAndTitle, arg.PropertiesID, arg.Lower)
	var i AgriculturalPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAgriculturalPropertyPlanBranch = `-- name: GetAllAgriculturalPropertyPlanBranch :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalPropertyPlanBranchParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanBranch(ctx context.Context, arg GetAllAgriculturalPropertyPlanBranchParams) ([]AgriculturalPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanBranch, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlansBranch
	for rows.Next() {
		var i AgriculturalPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanBranchByPropertiesID = `-- name: GetAllAgriculturalPropertyPlanBranchByPropertiesID :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch
 where properties_id = $1
 LIMIT $2
OFFSET $3
`

type GetAllAgriculturalPropertyPlanBranchByPropertiesIDParams struct {
	PropertiesID int64 `json:"properties_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanBranchByPropertiesID(ctx context.Context, arg GetAllAgriculturalPropertyPlanBranchByPropertiesIDParams) ([]AgriculturalPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanBranchByPropertiesID, arg.PropertiesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlansBranch
	for rows.Next() {
		var i AgriculturalPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanBranchByPropertiesIDAndProperty = `-- name: GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndProperty :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch
where properties_id = $1 and property = $2
`

type GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndPropertyParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndProperty(ctx context.Context, arg GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndPropertyParams) ([]AgriculturalPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanBranchByPropertiesIDAndProperty, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlansBranch
	for rows.Next() {
		var i AgriculturalPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitle = `-- name: GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitle :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch WHERE properties_id=$1 AND LOWER(title)=LOWER($2)
`

type GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitleParams struct {
	PropertiesID int64  `json:"properties_id"`
	Lower        string `json:"lower"`
}

func (q *Queries) GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitle(ctx context.Context, arg GetAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitleParams) ([]AgriculturalPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanBranchByPropertiesIDAndTitle, arg.PropertiesID, arg.Lower)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlansBranch
	for rows.Next() {
		var i AgriculturalPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAgriculturalPropertyPlanBranchWithoutPagination = `-- name: GetAllAgriculturalPropertyPlanBranchWithoutPagination :many
SELECT id, img_url, title, properties_id, property, created_at, updated_at FROM agricultural_properties_plans_branch
ORDER BY id
`

func (q *Queries) GetAllAgriculturalPropertyPlanBranchWithoutPagination(ctx context.Context) ([]AgriculturalPropertiesPlansBranch, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalPropertyPlanBranchWithoutPagination)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalPropertiesPlansBranch
	for rows.Next() {
		var i AgriculturalPropertiesPlansBranch
		if err := rows.Scan(
			&i.ID,
			&i.ImgUrl,
			&i.Title,
			&i.PropertiesID,
			&i.Property,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalPropertyPlanBranch = `-- name: UpdateAgriculturalPropertyPlanBranch :one
UPDATE agricultural_properties_plans_branch
SET img_url = $2,
    title = $3,
    properties_id = $4,
    property = $5,
    created_at = $6,
    updated_at = $7
Where id = $1
RETURNING id, img_url, title, properties_id, property, created_at, updated_at
`

type UpdateAgriculturalPropertyPlanBranchParams struct {
	ID           int64     `json:"id"`
	ImgUrl       []string  `json:"img_url"`
	Title        string    `json:"title"`
	PropertiesID int64     `json:"properties_id"`
	Property     int64     `json:"property"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) UpdateAgriculturalPropertyPlanBranch(ctx context.Context, arg UpdateAgriculturalPropertyPlanBranchParams) (AgriculturalPropertiesPlansBranch, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalPropertyPlanBranch,
		arg.ID,
		arg.ImgUrl,
		arg.Title,
		arg.PropertiesID,
		arg.Property,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i AgriculturalPropertiesPlansBranch
	err := row.Scan(
		&i.ID,
		&i.ImgUrl,
		&i.Title,
		&i.PropertiesID,
		&i.Property,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
