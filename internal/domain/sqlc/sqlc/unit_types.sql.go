// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: unit_types.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUnitType = `-- name: CreateUnitType :one
INSERT INTO unit_type_detail (
 description,
 image_url,
 min_area,
 max_area,
 min_price,
 max_price,
 parking,
 balcony,
 properties_id,
 property,
 property_types_id,
 title,
 bedrooms,
 description_ar,
 status,
 ref_no
)VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
) RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no
`

type CreateUnitTypeParams struct {
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	RefNo           string      `json:"ref_no"`
}

func (q *Queries) CreateUnitType(ctx context.Context, arg CreateUnitTypeParams) (UnitTypeDetail, error) {
	row := q.db.QueryRow(ctx, createUnitType,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.Title,
		arg.Bedrooms,
		arg.DescriptionAr,
		arg.Status,
		arg.RefNo,
	)
	var i UnitTypeDetail
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}

const deleteUnitType = `-- name: DeleteUnitType :exec
DELETE FROM unit_type_detail
Where id = $1
`

func (q *Queries) DeleteUnitType(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUnitType, id)
	return err
}

const getAllProjectPropertyUnitTypesByStatus = `-- name: GetAllProjectPropertyUnitTypesByStatus :many
SELECT
	unit_type_detail.id,
	unit_type_detail.ref_no,
	unit_type_detail.title AS unit_type_name,
   addresses.full_address,
	property_types."type" AS type_name,
	project_properties.property_name,
	countries.country,
	states."state",
	cities.city,
	communities.community,
	sub_communities.sub_community
FROM unit_type_detail
INNER JOIN property_types ON property_types.id = unit_type_detail.property_types_id
INNER JOIN project_properties ON project_properties.id = unit_type_detail.properties_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
WHERE 

 (
      $4 = '%%'
      OR unit_type_detail.ref_no ILIKE $4
      OR unit_type_detail.title ILIKE $4
      OR property_types."type" ILIKE $4
      OR  project_properties.property_name ILIKE $4             
   )
  AND unit_type_detail.status = $3 AND unit_type_detail.property = 1
ORDER BY unit_type_detail.id 
LIMIT $1 OFFSET $2
`

type GetAllProjectPropertyUnitTypesByStatusParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Status int64       `json:"status"`
	Search interface{} `json:"search"`
}

type GetAllProjectPropertyUnitTypesByStatusRow struct {
	ID           int64       `json:"id"`
	RefNo        string      `json:"ref_no"`
	UnitTypeName string      `json:"unit_type_name"`
	FullAddress  pgtype.Text `json:"full_address"`
	TypeName     string      `json:"type_name"`
	PropertyName string      `json:"property_name"`
	Country      pgtype.Text `json:"country"`
	State        pgtype.Text `json:"state"`
	City         pgtype.Text `json:"city"`
	Community    pgtype.Text `json:"community"`
	SubCommunity pgtype.Text `json:"sub_community"`
}

func (q *Queries) GetAllProjectPropertyUnitTypesByStatus(ctx context.Context, arg GetAllProjectPropertyUnitTypesByStatusParams) ([]GetAllProjectPropertyUnitTypesByStatusRow, error) {
	rows, err := q.db.Query(ctx, getAllProjectPropertyUnitTypesByStatus,
		arg.Limit,
		arg.Offset,
		arg.Status,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProjectPropertyUnitTypesByStatusRow
	for rows.Next() {
		var i GetAllProjectPropertyUnitTypesByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.UnitTypeName,
			&i.FullAddress,
			&i.TypeName,
			&i.PropertyName,
			&i.Country,
			&i.State,
			&i.City,
			&i.Community,
			&i.SubCommunity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitType = `-- name: GetAllUnitType :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_type_detail
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllUnitTypeParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllUnitType(ctx context.Context, arg GetAllUnitTypeParams) ([]UnitTypeDetail, error) {
	rows, err := q.db.Query(ctx, getAllUnitType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypeDetail
	for rows.Next() {
		var i UnitTypeDetail
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeBranchByPropertyIdAndBedroomForAgriculture = `-- name: GetAllUnitTypeBranchByPropertyIdAndBedroomForAgriculture :many
SELECT agricultural_unit_types_branch.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, agricultural_unit_types_branch.created_at, agricultural_unit_types_branch.updated_at, title, bedrooms, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, status, unit_types, icon FROM agricultural_unit_types_branch 
INNER JOIN property_types On agricultural_unit_types_branch.property_types_id = property_types.id
WHERE property = $1 AND properties_id = $2 AND  bedrooms ILIKE  $3 AND property_types.id = $4
`

type GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

type GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status              int64       `json:"status"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllUnitTypeBranchByPropertyIdAndBedroomForAgriculture(ctx context.Context, arg GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureParams) ([]GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeBranchByPropertyIdAndBedroomForAgriculture,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureRow
	for rows.Next() {
		var i GetAllUnitTypeBranchByPropertyIdAndBedroomForAgricultureRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyId = `-- name: GetAllUnitTypeByPropertyId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_type_detail 
WHERE property = $1 AND properties_id = $2
`

type GetAllUnitTypeByPropertyIdParams struct {
	Property     int64 `json:"property"`
	PropertiesID int64 `json:"properties_id"`
}

func (q *Queries) GetAllUnitTypeByPropertyId(ctx context.Context, arg GetAllUnitTypeByPropertyIdParams) ([]UnitTypeDetail, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyId, arg.Property, arg.PropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypeDetail
	for rows.Next() {
		var i UnitTypeDetail
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyIdAndBedroom = `-- name: GetAllUnitTypeByPropertyIdAndBedroom :many
SELECT unit_type_detail.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, unit_type_detail.created_at, unit_type_detail.updated_at, title, bedrooms, description_ar, unit_type_detail.status, ref_no, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, property_types.status, unit_types, icon FROM unit_type_detail 
INNER JOIN property_types On unit_type_detail.property_types_id = property_types.id
WHERE property = $1 AND properties_id = $2 AND property_types.id = $3 AND CASE WHEN bedrooms IS NULL THEN TRUE ELSE bedrooms ILIKE $4 END
`

type GetAllUnitTypeByPropertyIdAndBedroomParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	ID           int64       `json:"id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
}

type GetAllUnitTypeByPropertyIdAndBedroomRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	DescriptionAr       pgtype.Text `json:"description_ar"`
	Status              int64       `json:"status"`
	RefNo               string      `json:"ref_no"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status_2            int64       `json:"status_2"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllUnitTypeByPropertyIdAndBedroom(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomParams) ([]GetAllUnitTypeByPropertyIdAndBedroomRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyIdAndBedroom,
		arg.Property,
		arg.PropertiesID,
		arg.ID,
		arg.Bedrooms,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypeByPropertyIdAndBedroomRow
	for rows.Next() {
		var i GetAllUnitTypeByPropertyIdAndBedroomRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status_2,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyIdAndBedroomAndUnitId = `-- name: GetAllUnitTypeByPropertyIdAndBedroomAndUnitId :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_type_detail
WHERE property = $1 AND properties_id = $2 AND  bedrooms  ILIKE  $3 AND unit_type_detail.id = $4
`

type GetAllUnitTypeByPropertyIdAndBedroomAndUnitIdParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

func (q *Queries) GetAllUnitTypeByPropertyIdAndBedroomAndUnitId(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomAndUnitIdParams) ([]UnitTypeDetail, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyIdAndBedroomAndUnitId,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypeDetail
	for rows.Next() {
		var i UnitTypeDetail
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyIdAndBedroomForAgriculture = `-- name: GetAllUnitTypeByPropertyIdAndBedroomForAgriculture :many
SELECT agricultural_unit_types.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, agricultural_unit_types.created_at, agricultural_unit_types.updated_at, title, bedrooms, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, status, unit_types, icon FROM agricultural_unit_types
INNER JOIN property_types On agricultural_unit_types.property_types_id = property_types.id
WHERE property = $1 AND properties_id = $2 AND  bedrooms ILIKE  $3 AND property_types.id = $4
`

type GetAllUnitTypeByPropertyIdAndBedroomForAgricultureParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
	ID           int64       `json:"id"`
}

type GetAllUnitTypeByPropertyIdAndBedroomForAgricultureRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status              int64       `json:"status"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllUnitTypeByPropertyIdAndBedroomForAgriculture(ctx context.Context, arg GetAllUnitTypeByPropertyIdAndBedroomForAgricultureParams) ([]GetAllUnitTypeByPropertyIdAndBedroomForAgricultureRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyIdAndBedroomForAgriculture,
		arg.Property,
		arg.PropertiesID,
		arg.Bedrooms,
		arg.ID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypeByPropertyIdAndBedroomForAgricultureRow
	for rows.Next() {
		var i GetAllUnitTypeByPropertyIdAndBedroomForAgricultureRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyIdByUnitTypeAndBedroom = `-- name: GetAllUnitTypeByPropertyIdByUnitTypeAndBedroom :many
SELECT id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no FROM unit_type_detail 
WHERE property = $1 AND properties_id = $2 AND id = $3 AND bedrooms = $4
`

type GetAllUnitTypeByPropertyIdByUnitTypeAndBedroomParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	ID           int64       `json:"id"`
	Bedrooms     pgtype.Text `json:"bedrooms"`
}

func (q *Queries) GetAllUnitTypeByPropertyIdByUnitTypeAndBedroom(ctx context.Context, arg GetAllUnitTypeByPropertyIdByUnitTypeAndBedroomParams) ([]UnitTypeDetail, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyIdByUnitTypeAndBedroom,
		arg.Property,
		arg.PropertiesID,
		arg.ID,
		arg.Bedrooms,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UnitTypeDetail
	for rows.Next() {
		var i UnitTypeDetail
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUnitTypeByPropertyIdWithPagination = `-- name: GetAllUnitTypeByPropertyIdWithPagination :many
SELECT unit_type_detail.id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, unit_type_detail.created_at, unit_type_detail.updated_at, title, bedrooms, description_ar, unit_type_detail.status, ref_no, property_types.id, type, code, is_residential, is_commercial, property_types.created_at, property_types.updated_at, property_type_facts_id, category, property_types.status, unit_types, icon FROM unit_type_detail 
INNER JOIN property_types ON unit_type_detail.property_types_id = property_types.id
WHERE 
   ( $5 = '%%'
    OR unit_type_detail.title % $5
     OR property_types."type" ILIKE $5
     OR unit_type_detail.bedrooms::TEXT ILIKE $5
     OR unit_type_detail.max_area::TEXT ILIKE $5
     OR unit_type_detail.min_area::TEXT ILIKE $5
     OR unit_type_detail.min_price::TEXT ILIKE $5
     OR unit_type_detail.max_price::TEXT ILIKE $5)
     
  AND property = $3 AND properties_id = $4 AND (unit_type_detail.status != 5 AND unit_type_detail.status != 6) 
ORDER BY unit_type_detail.created_at DESC 
LIMIT $1 OFFSET $2
`

type GetAllUnitTypeByPropertyIdWithPaginationParams struct {
	Limit        int32       `json:"limit"`
	Offset       int32       `json:"offset"`
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Search       interface{} `json:"search"`
}

type GetAllUnitTypeByPropertyIdWithPaginationRow struct {
	ID                  int64       `json:"id"`
	Description         pgtype.Text `json:"description"`
	ImageUrl            []string    `json:"image_url"`
	MinArea             float64     `json:"min_area"`
	MaxArea             float64     `json:"max_area"`
	MinPrice            float64     `json:"min_price"`
	MaxPrice            float64     `json:"max_price"`
	Parking             int64       `json:"parking"`
	Balcony             int64       `json:"balcony"`
	PropertiesID        int64       `json:"properties_id"`
	Property            int64       `json:"property"`
	PropertyTypesID     int64       `json:"property_types_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	Title               string      `json:"title"`
	Bedrooms            pgtype.Text `json:"bedrooms"`
	DescriptionAr       pgtype.Text `json:"description_ar"`
	Status              int64       `json:"status"`
	RefNo               string      `json:"ref_no"`
	ID_2                int64       `json:"id_2"`
	Type                string      `json:"type"`
	Code                string      `json:"code"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	CreatedAt_2         time.Time   `json:"created_at_2"`
	UpdatedAt_2         time.Time   `json:"updated_at_2"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
	Category            string      `json:"category"`
	Status_2            int64       `json:"status_2"`
	UnitTypes           []int64     `json:"unit_types"`
	Icon                pgtype.Text `json:"icon"`
}

func (q *Queries) GetAllUnitTypeByPropertyIdWithPagination(ctx context.Context, arg GetAllUnitTypeByPropertyIdWithPaginationParams) ([]GetAllUnitTypeByPropertyIdWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllUnitTypeByPropertyIdWithPagination,
		arg.Limit,
		arg.Offset,
		arg.Property,
		arg.PropertiesID,
		arg.Search,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUnitTypeByPropertyIdWithPaginationRow
	for rows.Next() {
		var i GetAllUnitTypeByPropertyIdWithPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ImageUrl,
			&i.MinArea,
			&i.MaxArea,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Parking,
			&i.Balcony,
			&i.PropertiesID,
			&i.Property,
			&i.PropertyTypesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Bedrooms,
			&i.DescriptionAr,
			&i.Status,
			&i.RefNo,
			&i.ID_2,
			&i.Type,
			&i.Code,
			&i.IsResidential,
			&i.IsCommercial,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.PropertyTypeFactsID,
			&i.Category,
			&i.Status_2,
			&i.UnitTypes,
			&i.Icon,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllProjectPropertyUnitTypesByStatus = `-- name: GetCountAllProjectPropertyUnitTypesByStatus :one
SELECT
	COUNT(*)
FROM unit_type_detail
INNER JOIN property_types ON property_types.id = unit_type_detail.property_types_id
INNER JOIN project_properties ON project_properties.id = unit_type_detail.properties_id
LEFT JOIN addresses ON addresses.id = project_properties.addresses_id
LEFT JOIN countries ON countries.id = addresses.countries_id
LEFT JOIN states ON states.id = addresses.states_id
LEFT JOIN cities ON cities.id = addresses.cities_id
LEFT JOIN communities ON communities.id = addresses.communities_id
LEFT JOIN sub_communities ON sub_communities.id = addresses.sub_communities_id
WHERE 
 (
      $2 = '%%'
      OR unit_type_detail.ref_no ILIKE $2      
      OR unit_type_detail.title ILIKE $2
      OR property_types."type" ILIKE $2
      OR  project_properties.property_name ILIKE $2            
   )
  AND unit_type_detail.status = $1 AND unit_type_detail.property = 1
`

type GetCountAllProjectPropertyUnitTypesByStatusParams struct {
	Status int64       `json:"status"`
	Search interface{} `json:"search"`
}

func (q *Queries) GetCountAllProjectPropertyUnitTypesByStatus(ctx context.Context, arg GetCountAllProjectPropertyUnitTypesByStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectPropertyUnitTypesByStatus, arg.Status, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountUnitTypeByPropertyId = `-- name: GetCountUnitTypeByPropertyId :one


SELECT COUNT(*) FROM unit_type_detail 
INNER JOIN property_types ON unit_type_detail.property_types_id = property_types.id
WHERE 
   ( $3 = '%%'
    OR unit_type_detail.title % $3
     OR property_types."type" ILIKE $3
     OR unit_type_detail.bedrooms::TEXT ILIKE $3
     OR unit_type_detail.max_area::TEXT ILIKE $3
     OR unit_type_detail.min_area::TEXT ILIKE $3
     OR unit_type_detail.min_price::TEXT ILIKE $3
     OR unit_type_detail.max_price::TEXT ILIKE $3)
  AND property = $1 AND properties_id = $2 AND (unit_type_detail.status != 5 AND unit_type_detail.status != 6)
`

type GetCountUnitTypeByPropertyIdParams struct {
	Property     int64       `json:"property"`
	PropertiesID int64       `json:"properties_id"`
	Search       interface{} `json:"search"`
}

// SELECT * FROM unit_type_detail
// WHERE property = $3 AND properties_id = $4 AND (status != 5 AND status != 6)
// ORDER BY created_at DESC
// LIMIT $1 OFFSET $2;
func (q *Queries) GetCountUnitTypeByPropertyId(ctx context.Context, arg GetCountUnitTypeByPropertyIdParams) (int64, error) {
	row := q.db.QueryRow(ctx, getCountUnitTypeByPropertyId, arg.Property, arg.PropertiesID, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUnitType = `-- name: GetUnitType :one
SELECT unit_type_detail.id, unit_type_detail.description, unit_type_detail.image_url, unit_type_detail.min_area, unit_type_detail.max_area, unit_type_detail.min_price, unit_type_detail.max_price, unit_type_detail.parking, unit_type_detail.balcony, unit_type_detail.properties_id, unit_type_detail.property, unit_type_detail.property_types_id, unit_type_detail.created_at, unit_type_detail.updated_at, unit_type_detail.title, unit_type_detail.bedrooms, unit_type_detail.description_ar, unit_type_detail.status, unit_type_detail.ref_no, property_types.type AS property_type FROM unit_type_detail 
INNER JOIN property_types ON property_types.id = unit_type_detail.property_types_id
WHERE unit_type_detail.id = $1 LIMIT 1
`

type GetUnitTypeRow struct {
	ID              int64       `json:"id"`
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	CreatedAt       time.Time   `json:"created_at"`
	UpdatedAt       time.Time   `json:"updated_at"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	RefNo           string      `json:"ref_no"`
	PropertyType    string      `json:"property_type"`
}

func (q *Queries) GetUnitType(ctx context.Context, id int64) (GetUnitTypeRow, error) {
	row := q.db.QueryRow(ctx, getUnitType, id)
	var i GetUnitTypeRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
		&i.PropertyType,
	)
	return i, err
}

const getUnitTypesByPropertiesIdAndProperty = `-- name: GetUnitTypesByPropertiesIdAndProperty :many


SELECT property_types.id AS property_type_id, 
property_types."type" AS property_type,is_residential,
is_commercial,property_types.property_type_facts_id 
FROM unit_type_detail 
LEFT JOIN property_types ON unit_type_detail.property_types_id = property_types.id 
WHERE properties_id =$1 AND property = $2
`

type GetUnitTypesByPropertiesIdAndPropertyParams struct {
	PropertiesID int64 `json:"properties_id"`
	Property     int64 `json:"property"`
}

type GetUnitTypesByPropertiesIdAndPropertyRow struct {
	PropertyTypeID      pgtype.Int8 `json:"property_type_id"`
	PropertyType        pgtype.Text `json:"property_type"`
	IsResidential       pgtype.Bool `json:"is_residential"`
	IsCommercial        pgtype.Bool `json:"is_commercial"`
	PropertyTypeFactsID []int64     `json:"property_type_facts_id"`
}

// SELECT COUNT(*) FROM unit_type_detail
// WHERE property = $1 AND properties_id = $2;
func (q *Queries) GetUnitTypesByPropertiesIdAndProperty(ctx context.Context, arg GetUnitTypesByPropertiesIdAndPropertyParams) ([]GetUnitTypesByPropertiesIdAndPropertyRow, error) {
	rows, err := q.db.Query(ctx, getUnitTypesByPropertiesIdAndProperty, arg.PropertiesID, arg.Property)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnitTypesByPropertiesIdAndPropertyRow
	for rows.Next() {
		var i GetUnitTypesByPropertiesIdAndPropertyRow
		if err := rows.Scan(
			&i.PropertyTypeID,
			&i.PropertyType,
			&i.IsResidential,
			&i.IsCommercial,
			&i.PropertyTypeFactsID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitTypesNamesByPropertiesIdAndPropertyType = `-- name: GetUnitTypesNamesByPropertiesIdAndPropertyType :many
SELECT
	unit_type_detail.id,
	title,
	bedrooms
FROM
	unit_type_detail
	LEFT JOIN property_types ON property_types.id = unit_type_detail.property_types_id
WHERE
	properties_id = $1
	AND property = $2
	AND property_types_id = $3
`

type GetUnitTypesNamesByPropertiesIdAndPropertyTypeParams struct {
	PropertiesID    int64 `json:"properties_id"`
	Property        int64 `json:"property"`
	PropertyTypesID int64 `json:"property_types_id"`
}

type GetUnitTypesNamesByPropertiesIdAndPropertyTypeRow struct {
	ID       int64       `json:"id"`
	Title    string      `json:"title"`
	Bedrooms pgtype.Text `json:"bedrooms"`
}

func (q *Queries) GetUnitTypesNamesByPropertiesIdAndPropertyType(ctx context.Context, arg GetUnitTypesNamesByPropertiesIdAndPropertyTypeParams) ([]GetUnitTypesNamesByPropertiesIdAndPropertyTypeRow, error) {
	rows, err := q.db.Query(ctx, getUnitTypesNamesByPropertiesIdAndPropertyType, arg.PropertiesID, arg.Property, arg.PropertyTypesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnitTypesNamesByPropertiesIdAndPropertyTypeRow
	for rows.Next() {
		var i GetUnitTypesNamesByPropertiesIdAndPropertyTypeRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Bedrooms); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnitType = `-- name: UpdateUnitType :one
UPDATE unit_type_detail
SET   
  description = $2,
 image_url = $3,
 min_area = $4,
 max_area = $5,
 min_price = $6,
 max_price = $7,
  parking = $8,
 balcony = $9,
 properties_id  = $10,
 property = $11,
 property_types_id = $12,
 title = $13,
 bedrooms = $14,
 description_ar = $15,
  status = $16,
  ref_no = $17
Where id = $1
RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no
`

type UpdateUnitTypeParams struct {
	ID              int64       `json:"id"`
	Description     pgtype.Text `json:"description"`
	ImageUrl        []string    `json:"image_url"`
	MinArea         float64     `json:"min_area"`
	MaxArea         float64     `json:"max_area"`
	MinPrice        float64     `json:"min_price"`
	MaxPrice        float64     `json:"max_price"`
	Parking         int64       `json:"parking"`
	Balcony         int64       `json:"balcony"`
	PropertiesID    int64       `json:"properties_id"`
	Property        int64       `json:"property"`
	PropertyTypesID int64       `json:"property_types_id"`
	Title           string      `json:"title"`
	Bedrooms        pgtype.Text `json:"bedrooms"`
	DescriptionAr   pgtype.Text `json:"description_ar"`
	Status          int64       `json:"status"`
	RefNo           string      `json:"ref_no"`
}

func (q *Queries) UpdateUnitType(ctx context.Context, arg UpdateUnitTypeParams) (UnitTypeDetail, error) {
	row := q.db.QueryRow(ctx, updateUnitType,
		arg.ID,
		arg.Description,
		arg.ImageUrl,
		arg.MinArea,
		arg.MaxArea,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Parking,
		arg.Balcony,
		arg.PropertiesID,
		arg.Property,
		arg.PropertyTypesID,
		arg.Title,
		arg.Bedrooms,
		arg.DescriptionAr,
		arg.Status,
		arg.RefNo,
	)
	var i UnitTypeDetail
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}

const updateUnitTypeByStatus = `-- name: UpdateUnitTypeByStatus :one
UPDATE unit_type_detail SET status = $2 WHERE id = $1 RETURNING id, description, image_url, min_area, max_area, min_price, max_price, parking, balcony, properties_id, property, property_types_id, created_at, updated_at, title, bedrooms, description_ar, status, ref_no
`

type UpdateUnitTypeByStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateUnitTypeByStatus(ctx context.Context, arg UpdateUnitTypeByStatusParams) (UnitTypeDetail, error) {
	row := q.db.QueryRow(ctx, updateUnitTypeByStatus, arg.ID, arg.Status)
	var i UnitTypeDetail
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ImageUrl,
		&i.MinArea,
		&i.MaxArea,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Parking,
		&i.Balcony,
		&i.PropertiesID,
		&i.Property,
		&i.PropertyTypesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Bedrooms,
		&i.DescriptionAr,
		&i.Status,
		&i.RefNo,
	)
	return i, err
}
