// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_document.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteContactDocument = `-- name: DeleteContactDocument :exec
DELETE FROM contacts_document WHERE id = $1
`

func (q *Queries) DeleteContactDocument(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteContactDocument, id)
	return err
}

const getAllContactsDocumentCategories = `-- name: GetAllContactsDocumentCategories :many
SELECT id, title,title_ar FROM document_categories where parent_category_id is null
`

type GetAllContactsDocumentCategoriesRow struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) GetAllContactsDocumentCategories(ctx context.Context) ([]GetAllContactsDocumentCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getAllContactsDocumentCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllContactsDocumentCategoriesRow
	for rows.Next() {
		var i GetAllContactsDocumentCategoriesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllContactsDocumentSubCategories = `-- name: GetAllContactsDocumentSubCategories :many
select id, title,title_ar from document_categories where parent_category_id = $1
`

type GetAllContactsDocumentSubCategoriesRow struct {
	ID      int64  `json:"id"`
	Title   string `json:"title"`
	TitleAr string `json:"title_ar"`
}

func (q *Queries) GetAllContactsDocumentSubCategories(ctx context.Context, parentCategoryID int64) ([]GetAllContactsDocumentSubCategoriesRow, error) {
	rows, err := q.db.Query(ctx, getAllContactsDocumentSubCategories, parentCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllContactsDocumentSubCategoriesRow
	for rows.Next() {
		var i GetAllContactsDocumentSubCategoriesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.TitleAr); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDocumentsByContactsID = `-- name: GetAllDocumentsByContactsID :many
select id, contacts_id ,document_category_id,title,expiry_date,
    is_private,
    document_url,
    created_at
from contacts_document where contacts_id = $1
`

type GetAllDocumentsByContactsIDRow struct {
	ID                 int64       `json:"id"`
	ContactsID         pgtype.Int8 `json:"contacts_id"`
	DocumentCategoryID int64       `json:"document_category_id"`
	Title              string      `json:"title"`
	ExpiryDate         time.Time   `json:"expiry_date"`
	IsPrivate          bool        `json:"is_private"`
	DocumentUrl        string      `json:"document_url"`
	CreatedAt          time.Time   `json:"created_at"`
}

func (q *Queries) GetAllDocumentsByContactsID(ctx context.Context, contactsID pgtype.Int8) ([]GetAllDocumentsByContactsIDRow, error) {
	rows, err := q.db.Query(ctx, getAllDocumentsByContactsID, contactsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDocumentsByContactsIDRow
	for rows.Next() {
		var i GetAllDocumentsByContactsIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ContactsID,
			&i.DocumentCategoryID,
			&i.Title,
			&i.ExpiryDate,
			&i.IsPrivate,
			&i.DocumentUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConctactsOtherContactByContactsID = `-- name: GetConctactsOtherContactByContactsID :many
select id, contacts_id, relationship,other_contacts_id,date_added
from contacts_other_contact where contacts_id = $1
`

func (q *Queries) GetConctactsOtherContactByContactsID(ctx context.Context, contactsID int64) ([]ContactsOtherContact, error) {
	rows, err := q.db.Query(ctx, getConctactsOtherContactByContactsID, contactsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactsOtherContact
	for rows.Next() {
		var i ContactsOtherContact
		if err := rows.Scan(
			&i.ID,
			&i.ContactsID,
			&i.Relationship,
			&i.OtherContactsID,
			&i.DateAdded,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllContactsDocuments = `-- name: GetCountAllContactsDocuments :one
SELECT COUNT(*) FROM contacts_document WHERE contacts_id = $1
`

func (q *Queries) GetCountAllContactsDocuments(ctx context.Context, contactsID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllContactsDocuments, contactsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSingleDocument = `-- name: GetSingleDocument :one
SELECT id, contacts_id, document_category_id,title,expiry_date,is_private,document_url, created_at 
FROM contacts_document WHERE contacts_id = $1
`

type GetSingleDocumentRow struct {
	ID                 int64       `json:"id"`
	ContactsID         pgtype.Int8 `json:"contacts_id"`
	DocumentCategoryID int64       `json:"document_category_id"`
	Title              string      `json:"title"`
	ExpiryDate         time.Time   `json:"expiry_date"`
	IsPrivate          bool        `json:"is_private"`
	DocumentUrl        string      `json:"document_url"`
	CreatedAt          time.Time   `json:"created_at"`
}

func (q *Queries) GetSingleDocument(ctx context.Context, contactsID pgtype.Int8) (GetSingleDocumentRow, error) {
	row := q.db.QueryRow(ctx, getSingleDocument, contactsID)
	var i GetSingleDocumentRow
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.DocumentCategoryID,
		&i.Title,
		&i.ExpiryDate,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateMultipleContactDocumentConactID = `-- name: UpdateMultipleContactDocumentConactID :one
UPDATE contacts_document SET contacts_id = $1 WHERE id = ANY($2::bigint[]) RETURNING id, contacts_id, document_category_id, expiry_date, is_private, document_url, created_at, created_by, description, updated_at, title
`

type UpdateMultipleContactDocumentConactIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	Column2    []int64     `json:"column_2"`
}

func (q *Queries) UpdateMultipleContactDocumentConactID(ctx context.Context, arg UpdateMultipleContactDocumentConactIDParams) (ContactsDocument, error) {
	row := q.db.QueryRow(ctx, updateMultipleContactDocumentConactID, arg.ContactsID, arg.Column2)
	var i ContactsDocument
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.DocumentCategoryID,
		&i.ExpiryDate,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Description,
		&i.UpdatedAt,
		&i.Title,
	)
	return i, err
}

const updateSingleContactDocumentContactID = `-- name: UpdateSingleContactDocumentContactID :one
UPDATE contacts_document SET contacts_id = $1 WHERE id = $2 RETURNING id, contacts_id, document_category_id, expiry_date, is_private, document_url, created_at, created_by, description, updated_at, title
`

type UpdateSingleContactDocumentContactIDParams struct {
	ContactsID pgtype.Int8 `json:"contacts_id"`
	ID         int64       `json:"id"`
}

func (q *Queries) UpdateSingleContactDocumentContactID(ctx context.Context, arg UpdateSingleContactDocumentContactIDParams) (ContactsDocument, error) {
	row := q.db.QueryRow(ctx, updateSingleContactDocumentContactID, arg.ContactsID, arg.ID)
	var i ContactsDocument
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.DocumentCategoryID,
		&i.ExpiryDate,
		&i.IsPrivate,
		&i.DocumentUrl,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.Description,
		&i.UpdatedAt,
		&i.Title,
	)
	return i, err
}
