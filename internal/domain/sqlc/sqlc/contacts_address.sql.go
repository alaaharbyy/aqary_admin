// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts_address.sql

package sqlc

import (
	"context"
)

const getContactAddressByAddressType = `-- name: GetContactAddressByAddressType :one
SELECT id, contacts_id, address_type_id, address1, address2, countries_id, states_id, cities_id, community_id, sub_community_id, postal_code FROM contacts_address
WHERE contacts_id = $1 AND address_type_id = $2 LIMIT 1
`

type GetContactAddressByAddressTypeParams struct {
	ContactsID    int64 `json:"contacts_id"`
	AddressTypeID int64 `json:"address_type_id"`
}

func (q *Queries) GetContactAddressByAddressType(ctx context.Context, arg GetContactAddressByAddressTypeParams) (ContactsAddress, error) {
	row := q.db.QueryRow(ctx, getContactAddressByAddressType, arg.ContactsID, arg.AddressTypeID)
	var i ContactsAddress
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AddressTypeID,
		&i.Address1,
		&i.Address2,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.PostalCode,
	)
	return i, err
}

const getContactAddressByContactID = `-- name: GetContactAddressByContactID :one
SELECT id, contacts_id, address_type_id, address1, address2, countries_id, states_id, cities_id, community_id, sub_community_id, postal_code FROM contacts_address WHERE contacts_id = $1 LIMIT 1
`

func (q *Queries) GetContactAddressByContactID(ctx context.Context, contactsID int64) (ContactsAddress, error) {
	row := q.db.QueryRow(ctx, getContactAddressByContactID, contactsID)
	var i ContactsAddress
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AddressTypeID,
		&i.Address1,
		&i.Address2,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.PostalCode,
	)
	return i, err
}

const getContactAddressByID = `-- name: GetContactAddressByID :one
SELECT id, contacts_id, address_type_id, address1, address2, countries_id, states_id, cities_id, community_id, sub_community_id, postal_code FROM contacts_address WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContactAddressByID(ctx context.Context, id int64) (ContactsAddress, error) {
	row := q.db.QueryRow(ctx, getContactAddressByID, id)
	var i ContactsAddress
	err := row.Scan(
		&i.ID,
		&i.ContactsID,
		&i.AddressTypeID,
		&i.Address1,
		&i.Address2,
		&i.CountriesID,
		&i.StatesID,
		&i.CitiesID,
		&i.CommunityID,
		&i.SubCommunityID,
		&i.PostalCode,
	)
	return i, err
}
