// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: agricultural_freelancer_properties_documents.sql

package sqlc

import (
	"context"
	"time"
)

const createAgriculturalFreelancerPropertyDoc = `-- name: CreateAgriculturalFreelancerPropertyDoc :one
INSERT INTO agricultural_freelancer_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    agricultural_freelancer_properties_id,
    status
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_freelancer_properties_id, status
`

type CreateAgriculturalFreelancerPropertyDocParams struct {
	DocumentsCategoryID                int64     `json:"documents_category_id"`
	DocumentsSubcategoryID             int64     `json:"documents_subcategory_id"`
	FileUrl                            []string  `json:"file_url"`
	CreatedAt                          time.Time `json:"created_at"`
	UpdatedAt                          time.Time `json:"updated_at"`
	AgriculturalFreelancerPropertiesID int64     `json:"agricultural_freelancer_properties_id"`
	Status                             int64     `json:"status"`
}

func (q *Queries) CreateAgriculturalFreelancerPropertyDoc(ctx context.Context, arg CreateAgriculturalFreelancerPropertyDocParams) (AgriculturalFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createAgriculturalFreelancerPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalFreelancerPropertiesID,
		arg.Status,
	)
	var i AgriculturalFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const deleteAgriculturalFreelancerPropertyDoc = `-- name: DeleteAgriculturalFreelancerPropertyDoc :exec
DELETE FROM agricultural_freelancer_properties_documents
Where id = $1
`

func (q *Queries) DeleteAgriculturalFreelancerPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAgriculturalFreelancerPropertyDoc, id)
	return err
}

const getAgriculturalFreelancerPropertyDoc = `-- name: GetAgriculturalFreelancerPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_freelancer_properties_id, status FROM agricultural_freelancer_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetAgriculturalFreelancerPropertyDoc(ctx context.Context, limit int32) (AgriculturalFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getAgriculturalFreelancerPropertyDoc, limit)
	var i AgriculturalFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}

const getAllAgriculturalFreelancerPropertyDoc = `-- name: GetAllAgriculturalFreelancerPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_freelancer_properties_id, status FROM agricultural_freelancer_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllAgriculturalFreelancerPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllAgriculturalFreelancerPropertyDoc(ctx context.Context, arg GetAllAgriculturalFreelancerPropertyDocParams) ([]AgriculturalFreelancerPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllAgriculturalFreelancerPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AgriculturalFreelancerPropertiesDocument
	for rows.Next() {
		var i AgriculturalFreelancerPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AgriculturalFreelancerPropertiesID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgriculturalFreelancerPropertyDoc = `-- name: UpdateAgriculturalFreelancerPropertyDoc :one
UPDATE agricultural_freelancer_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    agricultural_freelancer_properties_id = $7,
    status = $8
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, agricultural_freelancer_properties_id, status
`

type UpdateAgriculturalFreelancerPropertyDocParams struct {
	ID                                 int64     `json:"id"`
	DocumentsCategoryID                int64     `json:"documents_category_id"`
	DocumentsSubcategoryID             int64     `json:"documents_subcategory_id"`
	FileUrl                            []string  `json:"file_url"`
	CreatedAt                          time.Time `json:"created_at"`
	UpdatedAt                          time.Time `json:"updated_at"`
	AgriculturalFreelancerPropertiesID int64     `json:"agricultural_freelancer_properties_id"`
	Status                             int64     `json:"status"`
}

func (q *Queries) UpdateAgriculturalFreelancerPropertyDoc(ctx context.Context, arg UpdateAgriculturalFreelancerPropertyDocParams) (AgriculturalFreelancerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateAgriculturalFreelancerPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AgriculturalFreelancerPropertiesID,
		arg.Status,
	)
	var i AgriculturalFreelancerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AgriculturalFreelancerPropertiesID,
		&i.Status,
	)
	return i, err
}
