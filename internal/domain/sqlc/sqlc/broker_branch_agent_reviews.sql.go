// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: broker_branch_agent_reviews.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrokerBranchAgentReviews = `-- name: CreateBrokerBranchAgentReviews :one
INSERT INTO broker_branch_agent_reviews (
    rating,
    review,
    profiles_id,
    localknowledge_rating,
    processexpertise_rating,
    responsiveness_rating,
    negotiationskills_rating,
    services_id,
    status,
    broker_company_branches_agents_id,
    created_at,
    updated_at,
    users_id
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13 
) RETURNING id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_branches_agents_id, created_at, updated_at, users_id
`

type CreateBrokerBranchAgentReviewsParams struct {
	Rating                        string    `json:"rating"`
	Review                        string    `json:"review"`
	ProfilesID                    int64     `json:"profiles_id"`
	LocalknowledgeRating          string    `json:"localknowledge_rating"`
	ProcessexpertiseRating        string    `json:"processexpertise_rating"`
	ResponsivenessRating          string    `json:"responsiveness_rating"`
	NegotiationskillsRating       string    `json:"negotiationskills_rating"`
	ServicesID                    int64     `json:"services_id"`
	Status                        int64     `json:"status"`
	BrokerCompanyBranchesAgentsID int64     `json:"broker_company_branches_agents_id"`
	CreatedAt                     time.Time `json:"created_at"`
	UpdatedAt                     time.Time `json:"updated_at"`
	UsersID                       int64     `json:"users_id"`
}

func (q *Queries) CreateBrokerBranchAgentReviews(ctx context.Context, arg CreateBrokerBranchAgentReviewsParams) (BrokerBranchAgentReview, error) {
	row := q.db.QueryRow(ctx, createBrokerBranchAgentReviews,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.LocalknowledgeRating,
		arg.ProcessexpertiseRating,
		arg.ResponsivenessRating,
		arg.NegotiationskillsRating,
		arg.ServicesID,
		arg.Status,
		arg.BrokerCompanyBranchesAgentsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerBranchAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyBranchesAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const deleteBrokerBranchAgentReviews = `-- name: DeleteBrokerBranchAgentReviews :exec
DELETE FROM broker_branch_agent_reviews
Where id = $1
`

func (q *Queries) DeleteBrokerBranchAgentReviews(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBrokerBranchAgentReviews, id)
	return err
}

const getAllBrokerBranchAgentReviews = `-- name: GetAllBrokerBranchAgentReviews :many
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_branches_agents_id, created_at, updated_at, users_id FROM broker_branch_agent_reviews
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllBrokerBranchAgentReviewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllBrokerBranchAgentReviews(ctx context.Context, arg GetAllBrokerBranchAgentReviewsParams) ([]BrokerBranchAgentReview, error) {
	rows, err := q.db.Query(ctx, getAllBrokerBranchAgentReviews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerBranchAgentReview
	for rows.Next() {
		var i BrokerBranchAgentReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.LocalknowledgeRating,
			&i.ProcessexpertiseRating,
			&i.ResponsivenessRating,
			&i.NegotiationskillsRating,
			&i.ServicesID,
			&i.Status,
			&i.BrokerCompanyBranchesAgentsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAvgBrokerBranchAgentReviews = `-- name: GetAvgBrokerBranchAgentReviews :one
SELECT AVG(rating::NUMERIC)::NUMERIC(2,1) FROM broker_branch_agent_reviews WHERE broker_company_branches_agents_id = $1
`

func (q *Queries) GetAvgBrokerBranchAgentReviews(ctx context.Context, brokerCompanyBranchesAgentsID int64) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getAvgBrokerBranchAgentReviews, brokerCompanyBranchesAgentsID)
	var column_1 pgtype.Numeric
	err := row.Scan(&column_1)
	return column_1, err
}

const getBrokerBranchAgentReviews = `-- name: GetBrokerBranchAgentReviews :one
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_branches_agents_id, created_at, updated_at, users_id FROM broker_branch_agent_reviews 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetBrokerBranchAgentReviews(ctx context.Context, limit int32) (BrokerBranchAgentReview, error) {
	row := q.db.QueryRow(ctx, getBrokerBranchAgentReviews, limit)
	var i BrokerBranchAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyBranchesAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}

const getBrokerBranchAgentReviewsByCompanyId = `-- name: GetBrokerBranchAgentReviewsByCompanyId :many
SELECT id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_branches_agents_id, created_at, updated_at, users_id FROM broker_branch_agent_reviews 
WHERE  broker_company_branches_agents_id = $3 LIMIT $1 OFFSET $2
`

type GetBrokerBranchAgentReviewsByCompanyIdParams struct {
	Limit                         int32 `json:"limit"`
	Offset                        int32 `json:"offset"`
	BrokerCompanyBranchesAgentsID int64 `json:"broker_company_branches_agents_id"`
}

func (q *Queries) GetBrokerBranchAgentReviewsByCompanyId(ctx context.Context, arg GetBrokerBranchAgentReviewsByCompanyIdParams) ([]BrokerBranchAgentReview, error) {
	rows, err := q.db.Query(ctx, getBrokerBranchAgentReviewsByCompanyId, arg.Limit, arg.Offset, arg.BrokerCompanyBranchesAgentsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BrokerBranchAgentReview
	for rows.Next() {
		var i BrokerBranchAgentReview
		if err := rows.Scan(
			&i.ID,
			&i.Rating,
			&i.Review,
			&i.ProfilesID,
			&i.LocalknowledgeRating,
			&i.ProcessexpertiseRating,
			&i.ResponsivenessRating,
			&i.NegotiationskillsRating,
			&i.ServicesID,
			&i.Status,
			&i.BrokerCompanyBranchesAgentsID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsersID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrokerBranchAgentReviews = `-- name: UpdateBrokerBranchAgentReviews :one
UPDATE broker_branch_agent_reviews
SET   
rating = $2,
    review = $3,
    profiles_id = $4,
    localknowledge_rating = $5,
    processexpertise_rating = $6,
    responsiveness_rating = $7,
    negotiationskills_rating = $8,
    services_id = $9,
    status = $10,
    broker_company_branches_agents_id = $11,
    created_at = $12,
    updated_at = $13,
    users_id = $14
Where id = $1
RETURNING id, rating, review, profiles_id, localknowledge_rating, processexpertise_rating, responsiveness_rating, negotiationskills_rating, services_id, status, broker_company_branches_agents_id, created_at, updated_at, users_id
`

type UpdateBrokerBranchAgentReviewsParams struct {
	ID                            int64     `json:"id"`
	Rating                        string    `json:"rating"`
	Review                        string    `json:"review"`
	ProfilesID                    int64     `json:"profiles_id"`
	LocalknowledgeRating          string    `json:"localknowledge_rating"`
	ProcessexpertiseRating        string    `json:"processexpertise_rating"`
	ResponsivenessRating          string    `json:"responsiveness_rating"`
	NegotiationskillsRating       string    `json:"negotiationskills_rating"`
	ServicesID                    int64     `json:"services_id"`
	Status                        int64     `json:"status"`
	BrokerCompanyBranchesAgentsID int64     `json:"broker_company_branches_agents_id"`
	CreatedAt                     time.Time `json:"created_at"`
	UpdatedAt                     time.Time `json:"updated_at"`
	UsersID                       int64     `json:"users_id"`
}

func (q *Queries) UpdateBrokerBranchAgentReviews(ctx context.Context, arg UpdateBrokerBranchAgentReviewsParams) (BrokerBranchAgentReview, error) {
	row := q.db.QueryRow(ctx, updateBrokerBranchAgentReviews,
		arg.ID,
		arg.Rating,
		arg.Review,
		arg.ProfilesID,
		arg.LocalknowledgeRating,
		arg.ProcessexpertiseRating,
		arg.ResponsivenessRating,
		arg.NegotiationskillsRating,
		arg.ServicesID,
		arg.Status,
		arg.BrokerCompanyBranchesAgentsID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UsersID,
	)
	var i BrokerBranchAgentReview
	err := row.Scan(
		&i.ID,
		&i.Rating,
		&i.Review,
		&i.ProfilesID,
		&i.LocalknowledgeRating,
		&i.ProcessexpertiseRating,
		&i.ResponsivenessRating,
		&i.NegotiationskillsRating,
		&i.ServicesID,
		&i.Status,
		&i.BrokerCompanyBranchesAgentsID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UsersID,
	)
	return i, err
}
