// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: industrial_owner_properties_documents.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createIndustrialOwnerPropertyDoc = `-- name: CreateIndustrialOwnerPropertyDoc :one
INSERT INTO industrial_owner_properties_documents (
    documents_category_id,
    documents_subcategory_id,
    file_url,
    created_at,
    updated_at,
    industrial_owner_properties_id,
    status,
    is_branch
)VALUES (
    $1 ,$2, $3, $4, $5, $6, $7 , $8
) RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_owner_properties_id, status, is_branch
`

type CreateIndustrialOwnerPropertyDocParams struct {
	DocumentsCategoryID         int64       `json:"documents_category_id"`
	DocumentsSubcategoryID      int64       `json:"documents_subcategory_id"`
	FileUrl                     []string    `json:"file_url"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	Status                      int64       `json:"status"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) CreateIndustrialOwnerPropertyDoc(ctx context.Context, arg CreateIndustrialOwnerPropertyDocParams) (IndustrialOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, createIndustrialOwnerPropertyDoc,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialOwnerPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const deleteIndustrialOwnerPropertyDoc = `-- name: DeleteIndustrialOwnerPropertyDoc :exec
DELETE FROM industrial_owner_properties_documents
Where id = $1
`

func (q *Queries) DeleteIndustrialOwnerPropertyDoc(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteIndustrialOwnerPropertyDoc, id)
	return err
}

const getAllIndustrialOwnerPropertyDoc = `-- name: GetAllIndustrialOwnerPropertyDoc :many
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_owner_properties_id, status, is_branch FROM industrial_owner_properties_documents
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllIndustrialOwnerPropertyDocParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllIndustrialOwnerPropertyDoc(ctx context.Context, arg GetAllIndustrialOwnerPropertyDocParams) ([]IndustrialOwnerPropertiesDocument, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialOwnerPropertyDoc, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IndustrialOwnerPropertiesDocument
	for rows.Next() {
		var i IndustrialOwnerPropertiesDocument
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialOwnerPropertiesID,
			&i.Status,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIndustrialOwnerPropertyDocsByOwnerPropertyId = `-- name: GetAllIndustrialOwnerPropertyDocsByOwnerPropertyId :many
SELECT
industrial_owner_properties_documents.id, industrial_owner_properties_documents.documents_category_id, industrial_owner_properties_documents.documents_subcategory_id, industrial_owner_properties_documents.file_url, industrial_owner_properties_documents.created_at, industrial_owner_properties_documents.updated_at, industrial_owner_properties_documents.industrial_owner_properties_id, industrial_owner_properties_documents.status, industrial_owner_properties_documents.is_branch,
documents_category.category,
documents_subcategory.sub_category
FROM
industrial_owner_properties_documents
LEFT JOIN documents_category ON documents_category.id = industrial_owner_properties_documents.documents_category_id
LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_owner_properties_documents.documents_subcategory_id
WHERE
industrial_owner_properties_documents.industrial_owner_properties_id = $3
ORDER BY
industrial_owner_properties_documents.id OFFSET $2
LIMIT $1
`

type GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdParams struct {
	Limit                       int32 `json:"limit"`
	Offset                      int32 `json:"offset"`
	IndustrialOwnerPropertiesID int64 `json:"industrial_owner_properties_id"`
}

type GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdRow struct {
	ID                          int64       `json:"id"`
	DocumentsCategoryID         int64       `json:"documents_category_id"`
	DocumentsSubcategoryID      int64       `json:"documents_subcategory_id"`
	FileUrl                     []string    `json:"file_url"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	Status                      int64       `json:"status"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
	Category                    pgtype.Text `json:"category"`
	SubCategory                 pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetAllIndustrialOwnerPropertyDocsByOwnerPropertyId(ctx context.Context, arg GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdParams) ([]GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdRow, error) {
	rows, err := q.db.Query(ctx, getAllIndustrialOwnerPropertyDocsByOwnerPropertyId, arg.Limit, arg.Offset, arg.IndustrialOwnerPropertiesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdRow
	for rows.Next() {
		var i GetAllIndustrialOwnerPropertyDocsByOwnerPropertyIdRow
		if err := rows.Scan(
			&i.ID,
			&i.DocumentsCategoryID,
			&i.DocumentsSubcategoryID,
			&i.FileUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IndustrialOwnerPropertiesID,
			&i.Status,
			&i.IsBranch,
			&i.Category,
			&i.SubCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountIndustrialOwnerPropertyDocsByOwnerPropertyId = `-- name: GetCountIndustrialOwnerPropertyDocsByOwnerPropertyId :one
 SELECT count(*) FROM industrial_owner_properties_documents
  WHERE industrial_owner_properties_id = $1
`

func (q *Queries) GetCountIndustrialOwnerPropertyDocsByOwnerPropertyId(ctx context.Context, industrialOwnerPropertiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountIndustrialOwnerPropertyDocsByOwnerPropertyId, industrialOwnerPropertiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getIndustrialOwnerPropertyDoc = `-- name: GetIndustrialOwnerPropertyDoc :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_owner_properties_id, status, is_branch FROM industrial_owner_properties_documents 
WHERE id = $1 LIMIT $1
`

func (q *Queries) GetIndustrialOwnerPropertyDoc(ctx context.Context, limit int32) (IndustrialOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialOwnerPropertyDoc, limit)
	var i IndustrialOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const getIndustrialOwnerPropertyDocById = `-- name: GetIndustrialOwnerPropertyDocById :one
SELECT
 industrial_owner_properties_documents.id, industrial_owner_properties_documents.documents_category_id, industrial_owner_properties_documents.documents_subcategory_id, industrial_owner_properties_documents.file_url, industrial_owner_properties_documents.created_at, industrial_owner_properties_documents.updated_at, industrial_owner_properties_documents.industrial_owner_properties_id, industrial_owner_properties_documents.status, industrial_owner_properties_documents.is_branch,
 documents_category.category,
 documents_subcategory.sub_category
 FROM
 industrial_owner_properties_documents
 LEFT JOIN documents_category ON documents_category.id = industrial_owner_properties_documents.documents_category_id 
 LEFT JOIN documents_subcategory ON documents_subcategory.id = industrial_owner_properties_documents.documents_subcategory_id
WHERE industrial_owner_properties_documents.id = $1
`

type GetIndustrialOwnerPropertyDocByIdRow struct {
	ID                          int64       `json:"id"`
	DocumentsCategoryID         int64       `json:"documents_category_id"`
	DocumentsSubcategoryID      int64       `json:"documents_subcategory_id"`
	FileUrl                     []string    `json:"file_url"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	Status                      int64       `json:"status"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
	Category                    pgtype.Text `json:"category"`
	SubCategory                 pgtype.Text `json:"sub_category"`
}

func (q *Queries) GetIndustrialOwnerPropertyDocById(ctx context.Context, id int64) (GetIndustrialOwnerPropertyDocByIdRow, error) {
	row := q.db.QueryRow(ctx, getIndustrialOwnerPropertyDocById, id)
	var i GetIndustrialOwnerPropertyDocByIdRow
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
		&i.Category,
		&i.SubCategory,
	)
	return i, err
}

const getIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId = `-- name: GetIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId :one
SELECT id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_owner_properties_id, status, is_branch FROM industrial_owner_properties_documents
WHERE  industrial_owner_properties_id = $1
 AND
  documents_category_id = $2
  AND
  documents_subcategory_id = $3
`

type GetIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams struct {
	IndustrialOwnerPropertiesID int64 `json:"industrial_owner_properties_id"`
	DocumentsCategoryID         int64 `json:"documents_category_id"`
	DocumentsSubcategoryID      int64 `json:"documents_subcategory_id"`
}

func (q *Queries) GetIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId(ctx context.Context, arg GetIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatIdParams) (IndustrialOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, getIndustrialOwnerPropertyDocByOwnerPropertyIdAndDocCatIdAndSubDocCatId, arg.IndustrialOwnerPropertiesID, arg.DocumentsCategoryID, arg.DocumentsSubcategoryID)
	var i IndustrialOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}

const updateIndustrialOwnerPropertyDoc = `-- name: UpdateIndustrialOwnerPropertyDoc :one
UPDATE industrial_owner_properties_documents
SET documents_category_id = $2,
    documents_subcategory_id = $3,
    file_url = $4,
    created_at = $5,
    updated_at = $6,
    industrial_owner_properties_id = $7,
    status = $8,
    is_branch = $9
Where id = $1
RETURNING id, documents_category_id, documents_subcategory_id, file_url, created_at, updated_at, industrial_owner_properties_id, status, is_branch
`

type UpdateIndustrialOwnerPropertyDocParams struct {
	ID                          int64       `json:"id"`
	DocumentsCategoryID         int64       `json:"documents_category_id"`
	DocumentsSubcategoryID      int64       `json:"documents_subcategory_id"`
	FileUrl                     []string    `json:"file_url"`
	CreatedAt                   time.Time   `json:"created_at"`
	UpdatedAt                   time.Time   `json:"updated_at"`
	IndustrialOwnerPropertiesID int64       `json:"industrial_owner_properties_id"`
	Status                      int64       `json:"status"`
	IsBranch                    pgtype.Bool `json:"is_branch"`
}

func (q *Queries) UpdateIndustrialOwnerPropertyDoc(ctx context.Context, arg UpdateIndustrialOwnerPropertyDocParams) (IndustrialOwnerPropertiesDocument, error) {
	row := q.db.QueryRow(ctx, updateIndustrialOwnerPropertyDoc,
		arg.ID,
		arg.DocumentsCategoryID,
		arg.DocumentsSubcategoryID,
		arg.FileUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.IndustrialOwnerPropertiesID,
		arg.Status,
		arg.IsBranch,
	)
	var i IndustrialOwnerPropertiesDocument
	err := row.Scan(
		&i.ID,
		&i.DocumentsCategoryID,
		&i.DocumentsSubcategoryID,
		&i.FileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IndustrialOwnerPropertiesID,
		&i.Status,
		&i.IsBranch,
	)
	return i, err
}
