// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: companies_products.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCompanyProduct = `-- name: CreateCompanyProduct :one
INSERT INTO companies_products (
    product_code,
    model_number,
    serial_number,
    companies_id,
    products_categories_id,
    product_name,
    description,
    price,
    created_at,
    is_branch
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, product_code, model_number, serial_number, companies_id, products_categories_id, product_name, description, price, created_at, is_branch
`

type CreateCompanyProductParams struct {
	ProductCode          string         `json:"product_code"`
	ModelNumber          string         `json:"model_number"`
	SerialNumber         string         `json:"serial_number"`
	CompaniesID          int64          `json:"companies_id"`
	ProductsCategoriesID int64          `json:"products_categories_id"`
	ProductName          string         `json:"product_name"`
	Description          string         `json:"description"`
	Price                pgtype.Numeric `json:"price"`
	CreatedAt            time.Time      `json:"created_at"`
	IsBranch             pgtype.Bool    `json:"is_branch"`
}

func (q *Queries) CreateCompanyProduct(ctx context.Context, arg CreateCompanyProductParams) (CompaniesProduct, error) {
	row := q.db.QueryRow(ctx, createCompanyProduct,
		arg.ProductCode,
		arg.ModelNumber,
		arg.SerialNumber,
		arg.CompaniesID,
		arg.ProductsCategoriesID,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
		arg.IsBranch,
	)
	var i CompaniesProduct
	err := row.Scan(
		&i.ID,
		&i.ProductCode,
		&i.ModelNumber,
		&i.SerialNumber,
		&i.CompaniesID,
		&i.ProductsCategoriesID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.IsBranch,
	)
	return i, err
}

const deleteCompanyProduct = `-- name: DeleteCompanyProduct :exec
DELETE FROM companies_products
WHERE id = $1
`

func (q *Queries) DeleteCompanyProduct(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCompanyProduct, id)
	return err
}

const getAllCompanyProducts = `-- name: GetAllCompanyProducts :many
SELECT id, product_code, model_number, serial_number, companies_id, products_categories_id, product_name, description, price, created_at, is_branch FROM companies_products
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetAllCompanyProductsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllCompanyProducts(ctx context.Context, arg GetAllCompanyProductsParams) ([]CompaniesProduct, error) {
	rows, err := q.db.Query(ctx, getAllCompanyProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompaniesProduct
	for rows.Next() {
		var i CompaniesProduct
		if err := rows.Scan(
			&i.ID,
			&i.ProductCode,
			&i.ModelNumber,
			&i.SerialNumber,
			&i.CompaniesID,
			&i.ProductsCategoriesID,
			&i.ProductName,
			&i.Description,
			&i.Price,
			&i.CreatedAt,
			&i.IsBranch,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProductsByCompanyID = `-- name: GetAllProductsByCompanyID :many
SELECT cu.serial_number, cu.product_name, cu.description, 
AVG(pr.review_quality + pr.review_price + pr.customer_service + pr.order_experience) AS "rating"
FROM companies_products cu
LEFT JOIN product_reviews pr ON cu.id = pr.companies_products_id
WHERE cu.companies_id = $1
GROUP BY cu.serial_number, cu.product_name, cu.description LIMIT $2 OFFSET $3
`

type GetAllProductsByCompanyIDParams struct {
	CompaniesID int64 `json:"companies_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type GetAllProductsByCompanyIDRow struct {
	SerialNumber string  `json:"serial_number"`
	ProductName  string  `json:"product_name"`
	Description  string  `json:"description"`
	Rating       float64 `json:"rating"`
}

func (q *Queries) GetAllProductsByCompanyID(ctx context.Context, arg GetAllProductsByCompanyIDParams) ([]GetAllProductsByCompanyIDRow, error) {
	rows, err := q.db.Query(ctx, getAllProductsByCompanyID, arg.CompaniesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProductsByCompanyIDRow
	for rows.Next() {
		var i GetAllProductsByCompanyIDRow
		if err := rows.Scan(
			&i.SerialNumber,
			&i.ProductName,
			&i.Description,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyProductByID = `-- name: GetCompanyProductByID :one
SELECT id, product_code, model_number, serial_number, companies_id, products_categories_id, product_name, description, price, created_at, is_branch FROM companies_products 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCompanyProductByID(ctx context.Context, id int64) (CompaniesProduct, error) {
	row := q.db.QueryRow(ctx, getCompanyProductByID, id)
	var i CompaniesProduct
	err := row.Scan(
		&i.ID,
		&i.ProductCode,
		&i.ModelNumber,
		&i.SerialNumber,
		&i.CompaniesID,
		&i.ProductsCategoriesID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.IsBranch,
	)
	return i, err
}

const getCountAllProductsByCompanyID = `-- name: GetCountAllProductsByCompanyID :one
SELECT COUNT(*)
FROM companies_products cu
WHERE cu.companies_id = $1
`

func (q *Queries) GetCountAllProductsByCompanyID(ctx context.Context, companiesID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProductsByCompanyID, companiesID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCountCompanyProducts = `-- name: GetCountCompanyProducts :one
SELECT COUNT(*) FROM companies_products
`

func (q *Queries) GetCountCompanyProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCountCompanyProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateCompanyProduct = `-- name: UpdateCompanyProduct :one
UPDATE companies_products
SET  
    product_code = $2,
    model_number = $3,
    serial_number = $4,
    companies_id = $5,
    products_categories_id = $6,
    product_name = $7,
    description = $8,
    price = $9,
    created_at = $10,
    is_branch = $11
WHERE id = $1
RETURNING id, product_code, model_number, serial_number, companies_id, products_categories_id, product_name, description, price, created_at, is_branch
`

type UpdateCompanyProductParams struct {
	ID                   int64          `json:"id"`
	ProductCode          string         `json:"product_code"`
	ModelNumber          string         `json:"model_number"`
	SerialNumber         string         `json:"serial_number"`
	CompaniesID          int64          `json:"companies_id"`
	ProductsCategoriesID int64          `json:"products_categories_id"`
	ProductName          string         `json:"product_name"`
	Description          string         `json:"description"`
	Price                pgtype.Numeric `json:"price"`
	CreatedAt            time.Time      `json:"created_at"`
	IsBranch             pgtype.Bool    `json:"is_branch"`
}

func (q *Queries) UpdateCompanyProduct(ctx context.Context, arg UpdateCompanyProductParams) (CompaniesProduct, error) {
	row := q.db.QueryRow(ctx, updateCompanyProduct,
		arg.ID,
		arg.ProductCode,
		arg.ModelNumber,
		arg.SerialNumber,
		arg.CompaniesID,
		arg.ProductsCategoriesID,
		arg.ProductName,
		arg.Description,
		arg.Price,
		arg.CreatedAt,
		arg.IsBranch,
	)
	var i CompaniesProduct
	err := row.Scan(
		&i.ID,
		&i.ProductCode,
		&i.ModelNumber,
		&i.SerialNumber,
		&i.CompaniesID,
		&i.ProductsCategoriesID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.CreatedAt,
		&i.IsBranch,
	)
	return i, err
}
