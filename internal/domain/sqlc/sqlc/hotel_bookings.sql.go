// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: hotel_bookings.sql

package sqlc

import (
	"context"
	"time"
)

const createHotelBooking = `-- name: CreateHotelBooking :one
INSERT INTO hotel_bookings(ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id,status)
VALUES($1, $2, $3, $4, $5, $6, $7,$8) RETURNING id, ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id, status, customer_name
`

type CreateHotelBookingParams struct {
	RefNo                 string    `json:"ref_no"`
	BookingRefNo          string    `json:"booking_ref_no"`
	HotelRoomsID          int64     `json:"hotel_rooms_id"`
	BookDate              time.Time `json:"book_date"`
	CheckIn               time.Time `json:"check_in"`
	CheckOut              time.Time `json:"check_out"`
	HotelBookingPortalsID int64     `json:"hotel_booking_portals_id"`
	Status                int64     `json:"status"`
}

func (q *Queries) CreateHotelBooking(ctx context.Context, arg CreateHotelBookingParams) (HotelBooking, error) {
	row := q.db.QueryRow(ctx, createHotelBooking,
		arg.RefNo,
		arg.BookingRefNo,
		arg.HotelRoomsID,
		arg.BookDate,
		arg.CheckIn,
		arg.CheckOut,
		arg.HotelBookingPortalsID,
		arg.Status,
	)
	var i HotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.BookingRefNo,
		&i.HotelRoomsID,
		&i.BookDate,
		&i.CheckIn,
		&i.CheckOut,
		&i.HotelBookingPortalsID,
		&i.Status,
		&i.CustomerName,
	)
	return i, err
}

const getAllHotelBookings = `-- name: GetAllHotelBookings :many
SELECT id, ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id, status, customer_name FROM hotel_bookings LIMIT $1 OFFSET $2
`

type GetAllHotelBookingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllHotelBookings(ctx context.Context, arg GetAllHotelBookingsParams) ([]HotelBooking, error) {
	rows, err := q.db.Query(ctx, getAllHotelBookings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HotelBooking
	for rows.Next() {
		var i HotelBooking
		if err := rows.Scan(
			&i.ID,
			&i.RefNo,
			&i.BookingRefNo,
			&i.HotelRoomsID,
			&i.BookDate,
			&i.CheckIn,
			&i.CheckOut,
			&i.HotelBookingPortalsID,
			&i.Status,
			&i.CustomerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHotelBookingByID = `-- name: GetHotelBookingByID :one
SELECT id, ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id, status, customer_name FROM hotel_bookings WHERE id=$1
`

func (q *Queries) GetHotelBookingByID(ctx context.Context, id int64) (HotelBooking, error) {
	row := q.db.QueryRow(ctx, getHotelBookingByID, id)
	var i HotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.BookingRefNo,
		&i.HotelRoomsID,
		&i.BookDate,
		&i.CheckIn,
		&i.CheckOut,
		&i.HotelBookingPortalsID,
		&i.Status,
		&i.CustomerName,
	)
	return i, err
}

const updateHotelBooking = `-- name: UpdateHotelBooking :one
UPDATE hotel_bookings
SET ref_no = $2,
    booking_ref_no = $3,
    hotel_rooms_id = $4,
    book_date = $5,
    check_in = $6,
    check_out = $7,
    hotel_booking_portals_id = $8,
    status = $9
WHERE id = $1 RETURNING id, ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id, status, customer_name
`

type UpdateHotelBookingParams struct {
	ID                    int64     `json:"id"`
	RefNo                 string    `json:"ref_no"`
	BookingRefNo          string    `json:"booking_ref_no"`
	HotelRoomsID          int64     `json:"hotel_rooms_id"`
	BookDate              time.Time `json:"book_date"`
	CheckIn               time.Time `json:"check_in"`
	CheckOut              time.Time `json:"check_out"`
	HotelBookingPortalsID int64     `json:"hotel_booking_portals_id"`
	Status                int64     `json:"status"`
}

func (q *Queries) UpdateHotelBooking(ctx context.Context, arg UpdateHotelBookingParams) (HotelBooking, error) {
	row := q.db.QueryRow(ctx, updateHotelBooking,
		arg.ID,
		arg.RefNo,
		arg.BookingRefNo,
		arg.HotelRoomsID,
		arg.BookDate,
		arg.CheckIn,
		arg.CheckOut,
		arg.HotelBookingPortalsID,
		arg.Status,
	)
	var i HotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.BookingRefNo,
		&i.HotelRoomsID,
		&i.BookDate,
		&i.CheckIn,
		&i.CheckOut,
		&i.HotelBookingPortalsID,
		&i.Status,
		&i.CustomerName,
	)
	return i, err
}

const updateHotelBookingStatus = `-- name: UpdateHotelBookingStatus :one
UPDATE hotel_bookings
SET status = $2
WHERE id = $1 RETURNING id, ref_no, booking_ref_no, hotel_rooms_id, book_date, check_in, check_out, hotel_booking_portals_id, status, customer_name
`

type UpdateHotelBookingStatusParams struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) UpdateHotelBookingStatus(ctx context.Context, arg UpdateHotelBookingStatusParams) (HotelBooking, error) {
	row := q.db.QueryRow(ctx, updateHotelBookingStatus, arg.ID, arg.Status)
	var i HotelBooking
	err := row.Scan(
		&i.ID,
		&i.RefNo,
		&i.BookingRefNo,
		&i.HotelRoomsID,
		&i.BookDate,
		&i.CheckIn,
		&i.CheckOut,
		&i.HotelBookingPortalsID,
		&i.Status,
		&i.CustomerName,
	)
	return i, err
}
