// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: entity_types.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkExistingEntity = `-- name: CheckExistingEntity :one
SELECT id, status 
FROM projects 
WHERE id = $1::BIGINT AND $2::BIGINT = $3::BIGINT

UNION ALL

SELECT id, status 
FROM phases 
WHERE id = $1::BIGINT AND $2::BIGINT = $4::BIGINT

UNION ALL

SELECT id, status 
FROM property 
WHERE id = $1::BIGINT AND $2::BIGINT = $5::BIGINT

UNION ALL

SELECT id, status 
FROM units 
WHERE id = $1::BIGINT AND $2::BIGINT = $6::BIGINT

UNION ALL

SELECT id, status 
FROM company_profiles_projects 
WHERE id = $1::BIGINT AND $2::BIGINT = $7::BIGINT

UNION ALL

SELECT id, status 
FROM company_profiles_phases 
WHERE id = $1::BIGINT AND $2::BIGINT =  $8::BIGINT
`

type CheckExistingEntityParams struct {
	EntityID                     int64 `json:"entity_id"`
	EntityType                   int64 `json:"entity_type"`
	ProjectEntityType            int64 `json:"project_entity_type"`
	PhaseEntityType              int64 `json:"phase_entity_type"`
	PropertyEntityType           int64 `json:"property_entity_type"`
	UnitEntityType               int64 `json:"unit_entity_type"`
	CompanyProfilesProjectEntity int64 `json:"company_profiles_project_entity"`
	CompanyProfilesPhaseEntity   int64 `json:"company_profiles_phase_entity"`
}

type CheckExistingEntityRow struct {
	ID     int64 `json:"id"`
	Status int64 `json:"status"`
}

func (q *Queries) CheckExistingEntity(ctx context.Context, arg CheckExistingEntityParams) (CheckExistingEntityRow, error) {
	row := q.db.QueryRow(ctx, checkExistingEntity,
		arg.EntityID,
		arg.EntityType,
		arg.ProjectEntityType,
		arg.PhaseEntityType,
		arg.PropertyEntityType,
		arg.UnitEntityType,
		arg.CompanyProfilesProjectEntity,
		arg.CompanyProfilesPhaseEntity,
	)
	var i CheckExistingEntityRow
	err := row.Scan(&i.ID, &i.Status)
	return i, err
}

const updateProjectsStatus = `-- name: UpdateProjectsStatus :exec
UPDATE projects 
SET 
    status=$1,
    updated_at=$2,
    deleted_at=$3
WHERE id=ANY($4::BIGINT[])
`

type UpdateProjectsStatusParams struct {
	Status     int64              `json:"status"`
	UpdatedAt  time.Time          `json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `json:"deleted_at"`
	ProjectIds []int64            `json:"project_ids"`
}

func (q *Queries) UpdateProjectsStatus(ctx context.Context, arg UpdateProjectsStatusParams) error {
	_, err := q.db.Exec(ctx, updateProjectsStatus,
		arg.Status,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.ProjectIds,
	)
	return err
}
