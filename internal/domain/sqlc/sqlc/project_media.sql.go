// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_media.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPhasesMedia = `-- name: CreatePhasesMedia :one
INSERT INTO project_media (
    file_urls,
    gallery_type,
    media_type,
    phases_id,
    created_at
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at
`

type CreatePhasesMediaParams struct {
	FileUrls    []string    `json:"file_urls"`
	GalleryType string      `json:"gallery_type"`
	MediaType   int64       `json:"media_type"`
	PhasesID    pgtype.Int8 `json:"phases_id"`
	CreatedAt   time.Time   `json:"created_at"`
}

func (q *Queries) CreatePhasesMedia(ctx context.Context, arg CreatePhasesMediaParams) (ProjectMedium, error) {
	row := q.db.QueryRow(ctx, createPhasesMedia,
		arg.FileUrls,
		arg.GalleryType,
		arg.MediaType,
		arg.PhasesID,
		arg.CreatedAt,
	)
	var i ProjectMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createProjectMedia = `-- name: CreateProjectMedia :one
INSERT INTO project_media (
    file_urls,
    gallery_type,
    media_type,
    projects_id,
    created_at
)VALUES ($1, $2, $3, $4, $5)
RETURNING id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at
`

type CreateProjectMediaParams struct {
	FileUrls    []string    `json:"file_urls"`
	GalleryType string      `json:"gallery_type"`
	MediaType   int64       `json:"media_type"`
	ProjectsID  pgtype.Int8 `json:"projects_id"`
	CreatedAt   time.Time   `json:"created_at"`
}

func (q *Queries) CreateProjectMedia(ctx context.Context, arg CreateProjectMediaParams) (ProjectMedium, error) {
	row := q.db.QueryRow(ctx, createProjectMedia,
		arg.FileUrls,
		arg.GalleryType,
		arg.MediaType,
		arg.ProjectsID,
		arg.CreatedAt,
	)
	var i ProjectMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePhasesMedia = `-- name: DeletePhasesMedia :exec
DELETE FROM project_media WHERE id = $1
`

func (q *Queries) DeletePhasesMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePhasesMedia, id)
	return err
}

const deleteProjectMedia = `-- name: DeleteProjectMedia :exec
DELETE FROM project_media WHERE id = $1
`

func (q *Queries) DeleteProjectMedia(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectMedia, id)
	return err
}

const getAllPhasesMediByWithoutPagination = `-- name: GetAllPhasesMediByWithoutPagination :many
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM  project_media WHERE phases_id = $1 ORDER BY id DESC
`

func (q *Queries) GetAllPhasesMediByWithoutPagination(ctx context.Context, phasesID pgtype.Int8) ([]ProjectMedium, error) {
	rows, err := q.db.Query(ctx, getAllPhasesMediByWithoutPagination, phasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMedium
	for rows.Next() {
		var i ProjectMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPhasesMediaWithPagination = `-- name: GetAllPhasesMediaWithPagination :many


SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at,COUNT(id) OVER() AS total_count FROM  project_media WHERE phases_id = $3
ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetAllPhasesMediaWithPaginationParams struct {
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
	PhasesID pgtype.Int8 `json:"phases_id"`
}

type GetAllPhasesMediaWithPaginationRow struct {
	ID                  int64       `json:"id"`
	FileUrls            []string    `json:"file_urls"`
	GalleryType         string      `json:"gallery_type"`
	MediaType           int64       `json:"media_type"`
	ProjectsID          pgtype.Int8 `json:"projects_id"`
	PhasesID            pgtype.Int8 `json:"phases_id"`
	ProjectPropertiesID pgtype.Int8 `json:"project_properties_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	TotalCount          int64       `json:"total_count"`
}

// -- name: GetAllPhasesMedia :many
// SELECT * FROM phases_media LIMIT $1 OFFSET $2;
func (q *Queries) GetAllPhasesMediaWithPagination(ctx context.Context, arg GetAllPhasesMediaWithPaginationParams) ([]GetAllPhasesMediaWithPaginationRow, error) {
	rows, err := q.db.Query(ctx, getAllPhasesMediaWithPagination, arg.Limit, arg.Offset, arg.PhasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPhasesMediaWithPaginationRow
	for rows.Next() {
		var i GetAllPhasesMediaWithPaginationRow
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectMedia = `-- name: GetAllProjectMedia :many
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM project_media LIMIT $1 OFFSET $2
`

type GetAllProjectMediaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllProjectMedia(ctx context.Context, arg GetAllProjectMediaParams) ([]ProjectMedium, error) {
	rows, err := q.db.Query(ctx, getAllProjectMedia, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMedium
	for rows.Next() {
		var i ProjectMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectMediaWithPagination = `-- name: GetAllProjectMediaWithPagination :many

SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM  project_media 
WHERE projects_id = $3 
LIMIT $1 OFFSET $2
`

type GetAllProjectMediaWithPaginationParams struct {
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
	ProjectsID pgtype.Int8 `json:"projects_id"`
}

// -- name: GetAllProjectMediaByProjectId :many
// SELECT * FROM project_media WHERE projects_id = $1;
func (q *Queries) GetAllProjectMediaWithPagination(ctx context.Context, arg GetAllProjectMediaWithPaginationParams) ([]ProjectMedium, error) {
	rows, err := q.db.Query(ctx, getAllProjectMediaWithPagination, arg.Limit, arg.Offset, arg.ProjectsID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMedium
	for rows.Next() {
		var i ProjectMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllProjectMediaWithoutPagination = `-- name: GetAllProjectMediaWithoutPagination :many
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM  project_media 
WHERE projects_id = $1
AND
CASE
    WHEN $2::Text = '' THEN true
    WHEN $2::Text != '' THEN project_media.gallery_type = $2::Text
END
AND
CASE
    WHEN $3::bigint = 0 THEN true
    WHEN $3::bigint > 0 THEN project_media.media_type = $3::bigint
END
`

type GetAllProjectMediaWithoutPaginationParams struct {
	ProjectsID  pgtype.Int8 `json:"projects_id"`
	Gallerytype string      `json:"gallerytype"`
	Mediatypeid int64       `json:"mediatypeid"`
}

func (q *Queries) GetAllProjectMediaWithoutPagination(ctx context.Context, arg GetAllProjectMediaWithoutPaginationParams) ([]ProjectMedium, error) {
	rows, err := q.db.Query(ctx, getAllProjectMediaWithoutPagination, arg.ProjectsID, arg.Gallerytype, arg.Mediatypeid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMedium
	for rows.Next() {
		var i ProjectMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountAllProjectMediaWithPagination = `-- name: GetCountAllProjectMediaWithPagination :one
SELECT COUNT(id) FROM project_media
WHERE projects_id = $1
`

func (q *Queries) GetCountAllProjectMediaWithPagination(ctx context.Context, projectsID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, getCountAllProjectMediaWithPagination, projectsID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPhaseMedia = `-- name: GetPhaseMedia :one
 
SELECT project_media.id, project_media.file_urls, project_media.gallery_type, project_media.media_type, project_media.projects_id, project_media.phases_id, project_media.project_properties_id, project_media.created_at, project_media.updated_at,phases.phase_name 
FROM project_media 
INNER JOIN phases ON phases.id = project_media.phases_id
WHERE project_media.id = $1
`

type GetPhaseMediaRow struct {
	ID                  int64       `json:"id"`
	FileUrls            []string    `json:"file_urls"`
	GalleryType         string      `json:"gallery_type"`
	MediaType           int64       `json:"media_type"`
	ProjectsID          pgtype.Int8 `json:"projects_id"`
	PhasesID            pgtype.Int8 `json:"phases_id"`
	ProjectPropertiesID pgtype.Int8 `json:"project_properties_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	PhaseName           string      `json:"phase_name"`
}

// -- name: GetCountAllPhasesMediByPhaseId :one
// WITH x AS(
// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND image_url IS NOT NULL
// UNION ALL
// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND image360_url IS NOT NULL
// UNION ALL
// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND video_url IS NOT NULL
// UNION ALL
// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,phases_id FROM  phases_media WHERE phases_media.phases_id = $1 AND panaroma_url IS NOT NULL
// ) SELECT COUNT(*) FROM x;
func (q *Queries) GetPhaseMedia(ctx context.Context, id int64) (GetPhaseMediaRow, error) {
	row := q.db.QueryRow(ctx, getPhaseMedia, id)
	var i GetPhaseMediaRow
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PhaseName,
	)
	return i, err
}

const getPhaseMediaByIdAndGalleryAndMediaType = `-- name: GetPhaseMediaByIdAndGalleryAndMediaType :one
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM project_media WHERE phases_id = $1 AND gallery_type = $2 AND media_type = $3
`

type GetPhaseMediaByIdAndGalleryAndMediaTypeParams struct {
	PhasesID    pgtype.Int8 `json:"phases_id"`
	GalleryType string      `json:"gallery_type"`
	MediaType   int64       `json:"media_type"`
}

func (q *Queries) GetPhaseMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetPhaseMediaByIdAndGalleryAndMediaTypeParams) (ProjectMedium, error) {
	row := q.db.QueryRow(ctx, getPhaseMediaByIdAndGalleryAndMediaType, arg.PhasesID, arg.GalleryType, arg.MediaType)
	var i ProjectMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectGalleryTypeByPhase = `-- name: GetProjectGalleryTypeByPhase :many
SELECT DISTINCT(gallery_type)
FROM project_media
INNER JOIN phases ON phases.projects_id = project_media.projects_id
WHERE phases.id = $1
`

func (q *Queries) GetProjectGalleryTypeByPhase(ctx context.Context, phasesID int64) ([]string, error) {
	rows, err := q.db.Query(ctx, getProjectGalleryTypeByPhase, phasesID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var gallery_type string
		if err := rows.Scan(&gallery_type); err != nil {
			return nil, err
		}
		items = append(items, gallery_type)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectMedia = `-- name: GetProjectMedia :one
SELECT project_media.id, project_media.file_urls, project_media.gallery_type, project_media.media_type, project_media.projects_id, project_media.phases_id, project_media.project_properties_id, project_media.created_at, project_media.updated_at,projects.project_name 
FROM project_media 
INNER JOIN projects ON project_media.projects_id = projects.id
WHERE project_media.id = $1
`

type GetProjectMediaRow struct {
	ID                  int64       `json:"id"`
	FileUrls            []string    `json:"file_urls"`
	GalleryType         string      `json:"gallery_type"`
	MediaType           int64       `json:"media_type"`
	ProjectsID          pgtype.Int8 `json:"projects_id"`
	PhasesID            pgtype.Int8 `json:"phases_id"`
	ProjectPropertiesID pgtype.Int8 `json:"project_properties_id"`
	CreatedAt           time.Time   `json:"created_at"`
	UpdatedAt           time.Time   `json:"updated_at"`
	ProjectName         string      `json:"project_name"`
}

func (q *Queries) GetProjectMedia(ctx context.Context, id int64) (GetProjectMediaRow, error) {
	row := q.db.QueryRow(ctx, getProjectMedia, id)
	var i GetProjectMediaRow
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProjectName,
	)
	return i, err
}

const getProjectMediaByIdAndGalleryAndMediaType = `-- name: GetProjectMediaByIdAndGalleryAndMediaType :one
SELECT id, file_urls, gallery_type, media_type, entity_id, entity_type_id, created_at, updated_at, gallery_type_ar FROM global_media WHERE entity_id = $1 AND gallery_type = $2 AND media_type = $3 AND entity_type_id = $4
`

type GetProjectMediaByIdAndGalleryAndMediaTypeParams struct {
	EntityID     int64  `json:"entity_id"`
	GalleryType  string `json:"gallery_type"`
	MediaType    int64  `json:"media_type"`
	EntityTypeID int64  `json:"entity_type_id"`
}

func (q *Queries) GetProjectMediaByIdAndGalleryAndMediaType(ctx context.Context, arg GetProjectMediaByIdAndGalleryAndMediaTypeParams) (GlobalMedium, error) {
	row := q.db.QueryRow(ctx, getProjectMediaByIdAndGalleryAndMediaType,
		arg.EntityID,
		arg.GalleryType,
		arg.MediaType,
		arg.EntityTypeID,
	)
	var i GlobalMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.EntityID,
		&i.EntityTypeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GalleryTypeAr,
	)
	return i, err
}

const getProjectMediaByIdAndGalleryType = `-- name: GetProjectMediaByIdAndGalleryType :many
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM project_media WHERE projects_id = $1 AND gallery_type = $2
`

type GetProjectMediaByIdAndGalleryTypeParams struct {
	ProjectsID  pgtype.Int8 `json:"projects_id"`
	GalleryType string      `json:"gallery_type"`
}

func (q *Queries) GetProjectMediaByIdAndGalleryType(ctx context.Context, arg GetProjectMediaByIdAndGalleryTypeParams) ([]ProjectMedium, error) {
	rows, err := q.db.Query(ctx, getProjectMediaByIdAndGalleryType, arg.ProjectsID, arg.GalleryType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectMedium
	for rows.Next() {
		var i ProjectMedium
		if err := rows.Scan(
			&i.ID,
			&i.FileUrls,
			&i.GalleryType,
			&i.MediaType,
			&i.ProjectsID,
			&i.PhasesID,
			&i.ProjectPropertiesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectPhaseMediaById = `-- name: GetProjectPhaseMediaById :one
SELECT id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at FROM project_media WHERE id = $1
`

func (q *Queries) GetProjectPhaseMediaById(ctx context.Context, id int64) (ProjectMedium, error) {
	row := q.db.QueryRow(ctx, getProjectPhaseMediaById, id)
	var i ProjectMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSumOfPhaseMediaById = `-- name: GetSumOfPhaseMediaById :one
SELECT
    COALESCE(SUM(array_length(pm.file_urls, 1)), 0) :: INTEGER AS media_sum
FROM
    project_media pm
JOIN
    project_media pm_ref
ON
    pm.phases_id = pm_ref.phases_id
WHERE
    pm_ref.id = $1
`

func (q *Queries) GetSumOfPhaseMediaById(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfPhaseMediaById, id)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const getSumOfPhasesMedia = `-- name: GetSumOfPhasesMedia :one

SELECT
	COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
FROM
    project_media
WHERE
    phases_id = $1
`

// -- name: UpdatePhaseMedia :one
// UPDATE phases_media
// SET
// image_url =  $1,
// image360_url =   $2,
// video_url =   $3,
// panaroma_url =  $4,
// main_media_section =   $5,
// phases_id = $6,
// updated_at = $7
// WHERE id =  $8
// RETURNING id, image_url, image360_url, video_url, panaroma_url, main_media_section, phases_id, created_at, updated_at;
func (q *Queries) GetSumOfPhasesMedia(ctx context.Context, phasesID pgtype.Int8) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfPhasesMedia, phasesID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const getSumOfProjectMedia = `-- name: GetSumOfProjectMedia :one



SELECT
	COALESCE(SUM(array_length(file_urls, 1)),0)::INTEGER AS media_sum
FROM
    project_media
WHERE
    projects_id = $1
`

// -- name: GetCountAllProjectMediaByProjectId :one
// WITH x AS(
// SELECT id,image_url AS url,1::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND image_url IS NOT NULL
// UNION ALL
// SELECT id,image360_url AS url,2::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND image360_url IS NOT NULL
// UNION ALL
// SELECT id,video_url AS url,3::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND video_url IS NOT NULL
// UNION ALL
// SELECT id,panaroma_url AS url,4::bigint AS media_type,main_media_section,projects_id FROM  project_media WHERE project_media.projects_id = $1 AND panaroma_url IS NOT NULL
// ) SELECT count(*) FROM x;
// -- name: GetAllProjectMediaByProjectIdAndMainMediaSection :many
// With x As (
//
//	SELECT  main_media_section FROM project_media
//	WHERE projects_id = $1
//
// ) SELECT * From x;
// -- name: GetAllProjectMediaByMainMediaSectionAndId :one
// with x As (
//
//	SELECT * FROM project_media
//	WHERE main_media_section = $2 AND projects_id = $1
//
// ) SELECT * From x;
func (q *Queries) GetSumOfProjectMedia(ctx context.Context, projectsID pgtype.Int8) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfProjectMedia, projectsID)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const getSumOfProjectMediaById = `-- name: GetSumOfProjectMediaById :one
SELECT
    COALESCE(SUM(array_length(pm.file_urls, 1)), 0) :: INTEGER AS media_sum
FROM
    project_media pm
JOIN
    project_media pm_ref
ON
    pm.projects_id = pm_ref.projects_id
WHERE
    pm_ref.id = $1
`

func (q *Queries) GetSumOfProjectMediaById(ctx context.Context, id int64) (int32, error) {
	row := q.db.QueryRow(ctx, getSumOfProjectMediaById, id)
	var media_sum int32
	err := row.Scan(&media_sum)
	return media_sum, err
}

const updateProjectPhaseMediaFiles = `-- name: UpdateProjectPhaseMediaFiles :one
UPDATE project_media
SET file_urls = $2,
    updated_at = $3
WHERE id = $1
RETURNING id, file_urls, gallery_type, media_type, projects_id, phases_id, project_properties_id, created_at, updated_at
`

type UpdateProjectPhaseMediaFilesParams struct {
	ID        int64     `json:"id"`
	FileUrls  []string  `json:"file_urls"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) UpdateProjectPhaseMediaFiles(ctx context.Context, arg UpdateProjectPhaseMediaFilesParams) (ProjectMedium, error) {
	row := q.db.QueryRow(ctx, updateProjectPhaseMediaFiles, arg.ID, arg.FileUrls, arg.UpdatedAt)
	var i ProjectMedium
	err := row.Scan(
		&i.ID,
		&i.FileUrls,
		&i.GalleryType,
		&i.MediaType,
		&i.ProjectsID,
		&i.PhasesID,
		&i.ProjectPropertiesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
