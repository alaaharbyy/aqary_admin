// Code generated by MockGen. DO NOT EDIT.
// Source: aqary_admin/pkg/db/user (interfaces: UserCompositeRepo)
//
// Generated by this command:
//
//	mockgen -package db -destination pkg/db/user/mock/mock_user_repo.go aqary_admin/pkg/db/user UserCompositeRepo
//

// Package db is a generated GoMock package.
package db

import (
	domain "aqary_admin/internal/domain/requests/user"
	sqlc "aqary_admin/internal/domain/sqlc/sqlc"
	exceptions "aqary_admin/pkg/utils/exceptions"
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserCompositeRepo is a mock of UserCompositeRepo interface.
type MockUserCompositeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserCompositeRepoMockRecorder
}

// MockUserCompositeRepoMockRecorder is the mock recorder for MockUserCompositeRepo.
type MockUserCompositeRepoMockRecorder struct {
	mock *MockUserCompositeRepo
}

// NewMockUserCompositeRepo creates a new mock instance.
func NewMockUserCompositeRepo(ctrl *gomock.Controller) *MockUserCompositeRepo {
	mock := &MockUserCompositeRepo{ctrl: ctrl}
	mock.recorder = &MockUserCompositeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCompositeRepo) EXPECT() *MockUserCompositeRepoMockRecorder {
	return m.recorder
}

// CountAllCompanyUsersByStatus mocks base method.
func (m *MockUserCompositeRepo) CountAllCompanyUsersByStatus(arg0 *gin.Context, arg1 sqlc.CountAllCompanyUsersByStatusParams) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllCompanyUsersByStatus", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CountAllCompanyUsersByStatus indicates an expected call of CountAllCompanyUsersByStatus.
func (mr *MockUserCompositeRepoMockRecorder) CountAllCompanyUsersByStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllCompanyUsersByStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).CountAllCompanyUsersByStatus), arg0, arg1)
}

// CountAllFreelanceUsers mocks base method.
func (m *MockUserCompositeRepo) CountAllFreelanceUsers(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllFreelanceUsers", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CountAllFreelanceUsers indicates an expected call of CountAllFreelanceUsers.
func (mr *MockUserCompositeRepoMockRecorder) CountAllFreelanceUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllFreelanceUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).CountAllFreelanceUsers), arg0, arg1)
}

// CountAllOwnerUsers mocks base method.
func (m *MockUserCompositeRepo) CountAllOwnerUsers(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllOwnerUsers", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CountAllOwnerUsers indicates an expected call of CountAllOwnerUsers.
func (mr *MockUserCompositeRepoMockRecorder) CountAllOwnerUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllOwnerUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).CountAllOwnerUsers), arg0, arg1)
}

// CountAllSubSection mocks base method.
func (m *MockUserCompositeRepo) CountAllSubSection(arg0 *gin.Context) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAllSubSection", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CountAllSubSection indicates an expected call of CountAllSubSection.
func (mr *MockUserCompositeRepoMockRecorder) CountAllSubSection(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAllSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).CountAllSubSection), arg0)
}

// CreateAddress mocks base method.
func (m *MockUserCompositeRepo) CreateAddress(arg0 *gin.Context, arg1 sqlc.CreateAddressParams, arg2 sqlc.Querier) (*sqlc.Address, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.Address)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockUserCompositeRepoMockRecorder) CreateAddress(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateAddress), arg0, arg1, arg2)
}

// CreateAgentSubscriptionQuota mocks base method.
func (m *MockUserCompositeRepo) CreateAgentSubscriptionQuota(arg0 *gin.Context, arg1 sqlc.CreateAgentSubscriptionQuotaParams, arg2 sqlc.Querier) (*sqlc.AgentSubscriptionQuotum, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentSubscriptionQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.AgentSubscriptionQuotum)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateAgentSubscriptionQuota indicates an expected call of CreateAgentSubscriptionQuota.
func (mr *MockUserCompositeRepoMockRecorder) CreateAgentSubscriptionQuota(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentSubscriptionQuota", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateAgentSubscriptionQuota), arg0, arg1, arg2)
}

// CreateAgentSubscriptionQuotaBranch mocks base method.
func (m *MockUserCompositeRepo) CreateAgentSubscriptionQuotaBranch(arg0 *gin.Context, arg1 sqlc.CreateAgentSubscriptionQuotaBranchParams, arg2 sqlc.Querier) (*sqlc.AgentSubscriptionQuotaBranch, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgentSubscriptionQuotaBranch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.AgentSubscriptionQuotaBranch)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateAgentSubscriptionQuotaBranch indicates an expected call of CreateAgentSubscriptionQuotaBranch.
func (mr *MockUserCompositeRepoMockRecorder) CreateAgentSubscriptionQuotaBranch(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentSubscriptionQuotaBranch", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateAgentSubscriptionQuotaBranch), arg0, arg1, arg2)
}

// CreateBrokerAgent mocks base method.
func (m *MockUserCompositeRepo) CreateBrokerAgent(arg0 *gin.Context, arg1 sqlc.CreateBrokerAgentParams, arg2 sqlc.Querier) (*sqlc.BrokerCompanyAgent, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrokerAgent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.BrokerCompanyAgent)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateBrokerAgent indicates an expected call of CreateBrokerAgent.
func (mr *MockUserCompositeRepoMockRecorder) CreateBrokerAgent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrokerAgent", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateBrokerAgent), arg0, arg1, arg2)
}

// CreateBrokerBranchAgent mocks base method.
func (m *MockUserCompositeRepo) CreateBrokerBranchAgent(arg0 *gin.Context, arg1 sqlc.CreateBrokerBranchAgentParams, arg2 sqlc.Querier) (*sqlc.BrokerCompanyBranchesAgent, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBrokerBranchAgent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.BrokerCompanyBranchesAgent)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateBrokerBranchAgent indicates an expected call of CreateBrokerBranchAgent.
func (mr *MockUserCompositeRepoMockRecorder) CreateBrokerBranchAgent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBrokerBranchAgent", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateBrokerBranchAgent), arg0, arg1, arg2)
}

// CreateCompanyUser mocks base method.
func (m *MockUserCompositeRepo) CreateCompanyUser(arg0 *gin.Context, arg1 sqlc.CreateCompanyUserParams, arg2 sqlc.Querier) (*sqlc.CompanyUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompanyUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.CompanyUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateCompanyUser indicates an expected call of CreateCompanyUser.
func (mr *MockUserCompositeRepoMockRecorder) CreateCompanyUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompanyUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateCompanyUser), arg0, arg1, arg2)
}

// CreateCountry mocks base method.
func (m *MockUserCompositeRepo) CreateCountry(arg0 *gin.Context, arg1 sqlc.CreateCountryParams, arg2 sqlc.Querier) (*sqlc.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockUserCompositeRepoMockRecorder) CreateCountry(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateCountry), arg0, arg1, arg2)
}

// CreateDepartment mocks base method.
func (m *MockUserCompositeRepo) CreateDepartment(arg0 *gin.Context, arg1 sqlc.CreateDepartmentParams) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDepartment", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateDepartment indicates an expected call of CreateDepartment.
func (mr *MockUserCompositeRepoMockRecorder) CreateDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateDepartment), arg0, arg1)
}

// CreateLanguage mocks base method.
func (m *MockUserCompositeRepo) CreateLanguage(arg0 *gin.Context, arg1 sqlc.CreateLanguageParams, arg2 sqlc.Querier) (*sqlc.AllLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLanguage", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.AllLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLanguage indicates an expected call of CreateLanguage.
func (mr *MockUserCompositeRepoMockRecorder) CreateLanguage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLanguage", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateLanguage), arg0, arg1, arg2)
}

// CreatePermission mocks base method.
func (m *MockUserCompositeRepo) CreatePermission(arg0 *gin.Context, arg1 sqlc.CreatePermissionParams, arg2 sqlc.Querier) (*sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockUserCompositeRepoMockRecorder) CreatePermission(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreatePermission), arg0, arg1, arg2)
}

// CreatePlatformUser mocks base method.
func (m *MockUserCompositeRepo) CreatePlatformUser(arg0 *gin.Context, arg1 sqlc.CreatePlatformUserParams, arg2 sqlc.Querier) (*sqlc.PlatformUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlatformUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.PlatformUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreatePlatformUser indicates an expected call of CreatePlatformUser.
func (mr *MockUserCompositeRepoMockRecorder) CreatePlatformUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlatformUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreatePlatformUser), arg0, arg1, arg2)
}

// CreateProfile mocks base method.
func (m *MockUserCompositeRepo) CreateProfile(arg0 *gin.Context, arg1 sqlc.CreateProfileParams, arg2 sqlc.Querier) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockUserCompositeRepoMockRecorder) CreateProfile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateProfile), arg0, arg1, arg2)
}

// CreateProfileNationalities mocks base method.
func (m *MockUserCompositeRepo) CreateProfileNationalities(arg0 *gin.Context, arg1 sqlc.CreateProfileNationalitiesParams, arg2 sqlc.Querier) (*sqlc.ProfileNationality, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfileNationalities", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.ProfileNationality)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateProfileNationalities indicates an expected call of CreateProfileNationalities.
func (mr *MockUserCompositeRepoMockRecorder) CreateProfileNationalities(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfileNationalities", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateProfileNationalities), arg0, arg1, arg2)
}

// CreateRole mocks base method.
func (m *MockUserCompositeRepo) CreateRole(arg0 *gin.Context, arg1 sqlc.CreateRoleParams) (sqlc.Role, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockUserCompositeRepoMockRecorder) CreateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateRole), arg0, arg1)
}

// CreateRolePermission mocks base method.
func (m *MockUserCompositeRepo) CreateRolePermission(arg0 *gin.Context, arg1 sqlc.CreateRolePermissionParams) (sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRolePermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateRolePermission indicates an expected call of CreateRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) CreateRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateRolePermission), arg0, arg1)
}

// CreateSectionPermission mocks base method.
func (m *MockUserCompositeRepo) CreateSectionPermission(arg0 *gin.Context, arg1 sqlc.CreateSectionPermissionParams, arg2 sqlc.Querier) (*sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSectionPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateSectionPermission indicates an expected call of CreateSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) CreateSectionPermission(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateSectionPermission), arg0, arg1, arg2)
}

// CreateSignUpUser mocks base method.
func (m *MockUserCompositeRepo) CreateSignUpUser(arg0 *gin.Context, arg1 sqlc.CreateSignUpUserParams, arg2 sqlc.Querier) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSignUpUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateSignUpUser indicates an expected call of CreateSignUpUser.
func (mr *MockUserCompositeRepoMockRecorder) CreateSignUpUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSignUpUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateSignUpUser), arg0, arg1, arg2)
}

// CreateSubSection mocks base method.
func (m *MockUserCompositeRepo) CreateSubSection(arg0 *gin.Context, arg1 sqlc.CreateSubSectionParams) (sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubSection", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateSubSection indicates an expected call of CreateSubSection.
func (mr *MockUserCompositeRepoMockRecorder) CreateSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateSubSection), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockUserCompositeRepo) CreateUser(arg0 *gin.Context, arg1 sqlc.CreateUserParams, arg2 sqlc.Querier) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserCompositeRepoMockRecorder) CreateUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateUser), arg0, arg1, arg2)
}

// CreateUserPermission mocks base method.
func (m *MockUserCompositeRepo) CreateUserPermission(arg0 *gin.Context, arg1 sqlc.CreateUserPermissionParams, arg2 sqlc.Querier) (sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUserPermission indicates an expected call of CreateUserPermission.
func (mr *MockUserCompositeRepoMockRecorder) CreateUserPermission(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateUserPermission), arg0, arg1, arg2)
}

// CreateUserPermissionTest mocks base method.
func (m *MockUserCompositeRepo) CreateUserPermissionTest(arg0 *gin.Context, arg1 sqlc.CreateUserPermissionTestParams, arg2 sqlc.Querier) (sqlc.UserCompanyPermissionsTest, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserPermissionTest", arg0, arg1, arg2)
	ret0, _ := ret[0].(sqlc.UserCompanyPermissionsTest)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUserPermissionTest indicates an expected call of CreateUserPermissionTest.
func (mr *MockUserCompositeRepoMockRecorder) CreateUserPermissionTest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserPermissionTest", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateUserPermissionTest), arg0, arg1, arg2)
}

// CreateUserType mocks base method.
func (m *MockUserCompositeRepo) CreateUserType(arg0 *gin.Context, arg1 string) (*sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserType", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// CreateUserType indicates an expected call of CreateUserType.
func (mr *MockUserCompositeRepoMockRecorder) CreateUserType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserType", reflect.TypeOf((*MockUserCompositeRepo)(nil).CreateUserType), arg0, arg1)
}

// DeleteAllSubSection mocks base method.
func (m *MockUserCompositeRepo) DeleteAllSubSection(arg0 *gin.Context, arg1 []int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllSubSection", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteAllSubSection indicates an expected call of DeleteAllSubSection.
func (mr *MockUserCompositeRepoMockRecorder) DeleteAllSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteAllSubSection), arg0, arg1)
}

// DeleteDepartment mocks base method.
func (m *MockUserCompositeRepo) DeleteDepartment(arg0 *gin.Context, arg1 sqlc.DeleteDepartmentParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDepartment", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteDepartment indicates an expected call of DeleteDepartment.
func (mr *MockUserCompositeRepoMockRecorder) DeleteDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteDepartment), arg0, arg1)
}

// DeleteOnePermissionInRole mocks base method.
func (m *MockUserCompositeRepo) DeleteOnePermissionInRole(arg0 *gin.Context, arg1 sqlc.DeleteOnePermissionInRoleParams) (sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOnePermissionInRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteOnePermissionInRole indicates an expected call of DeleteOnePermissionInRole.
func (mr *MockUserCompositeRepoMockRecorder) DeleteOnePermissionInRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOnePermissionInRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteOnePermissionInRole), arg0, arg1)
}

// DeletePermission mocks base method.
func (m *MockUserCompositeRepo) DeletePermission(arg0 *gin.Context, arg1 int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockUserCompositeRepoMockRecorder) DeletePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeletePermission), arg0, arg1)
}

// DeleteProfile mocks base method.
func (m *MockUserCompositeRepo) DeleteProfile(arg0 context.Context, arg1 int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockUserCompositeRepoMockRecorder) DeleteProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteProfile), arg0, arg1)
}

// DeleteRole mocks base method.
func (m *MockUserCompositeRepo) DeleteRole(arg0 *gin.Context, arg1 sqlc.DeleteRoleParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockUserCompositeRepoMockRecorder) DeleteRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteRole), arg0, arg1)
}

// DeleteRolePermission mocks base method.
func (m *MockUserCompositeRepo) DeleteRolePermission(arg0 *gin.Context, arg1 int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRolePermission", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteRolePermission indicates an expected call of DeleteRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) DeleteRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteRolePermission), arg0, arg1)
}

// DeleteSectionPermission mocks base method.
func (m *MockUserCompositeRepo) DeleteSectionPermission(arg0 *gin.Context, arg1 int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSectionPermission", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteSectionPermission indicates an expected call of DeleteSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) DeleteSectionPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteSectionPermission), arg0, arg1)
}

// DeleteSubSection mocks base method.
func (m *MockUserCompositeRepo) DeleteSubSection(arg0 *gin.Context, arg1 int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubSection", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// DeleteSubSection indicates an expected call of DeleteSubSection.
func (mr *MockUserCompositeRepoMockRecorder) DeleteSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteSubSection), arg0, arg1)
}

// DeleteUserType mocks base method.
func (m *MockUserCompositeRepo) DeleteUserType(arg0 *gin.Context, arg1 int64) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserType", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// DeleteUserType indicates an expected call of DeleteUserType.
func (mr *MockUserCompositeRepoMockRecorder) DeleteUserType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserType", reflect.TypeOf((*MockUserCompositeRepo)(nil).DeleteUserType), arg0, arg1)
}

// FilterAddressesForRole mocks base method.
func (m *MockUserCompositeRepo) FilterAddressesForRole(arg0 *gin.Context, arg1 sqlc.User) (bool, int64, int64, bool, int64, int64, int64, int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAddressesForRole", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(bool)
	ret4, _ := ret[4].(int64)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(int64)
	ret7, _ := ret[7].(int64)
	ret8, _ := ret[8].(int64)
	ret9, _ := ret[9].(int64)
	ret10, _ := ret[10].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6, ret7, ret8, ret9, ret10
}

// FilterAddressesForRole indicates an expected call of FilterAddressesForRole.
func (mr *MockUserCompositeRepoMockRecorder) FilterAddressesForRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAddressesForRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).FilterAddressesForRole), arg0, arg1)
}

// GetACompanyByUserID mocks base method.
func (m *MockUserCompositeRepo) GetACompanyByUserID(arg0 *gin.Context, arg1 int64) (sqlc.GetACompanyByUserIDRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACompanyByUserID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetACompanyByUserIDRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetACompanyByUserID indicates an expected call of GetACompanyByUserID.
func (mr *MockUserCompositeRepoMockRecorder) GetACompanyByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACompanyByUserID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetACompanyByUserID), arg0, arg1)
}

// GetActiveUsersByType mocks base method.
func (m *MockUserCompositeRepo) GetActiveUsersByType(arg0 *gin.Context, arg1 sqlc.GetActiveUsersByTypeParams) (*[]sqlc.GetActiveUsersByTypeRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveUsersByType", arg0, arg1)
	ret0, _ := ret[0].(*[]sqlc.GetActiveUsersByTypeRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetActiveUsersByType indicates an expected call of GetActiveUsersByType.
func (mr *MockUserCompositeRepoMockRecorder) GetActiveUsersByType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveUsersByType", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetActiveUsersByType), arg0, arg1)
}

// GetAddCompanyPermission mocks base method.
func (m *MockUserCompositeRepo) GetAddCompanyPermission(arg0 *gin.Context) (*sqlc.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddCompanyPermission", arg0)
	ret0, _ := ret[0].(*sqlc.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddCompanyPermission indicates an expected call of GetAddCompanyPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetAddCompanyPermission(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddCompanyPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAddCompanyPermission), arg0)
}

// GetAddress mocks base method.
func (m *MockUserCompositeRepo) GetAddress(arg0 *gin.Context, arg1 int32) (sqlc.Address, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Address)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockUserCompositeRepoMockRecorder) GetAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAddress), arg0, arg1)
}

// GetAllAqaryDeletedUser mocks base method.
func (m *MockUserCompositeRepo) GetAllAqaryDeletedUser(arg0 *gin.Context, arg1 sqlc.GetAllAqaryDeletedUserParams) ([]sqlc.GetAllAqaryDeletedUserRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryDeletedUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllAqaryDeletedUserRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllAqaryDeletedUser indicates an expected call of GetAllAqaryDeletedUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAllAqaryDeletedUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryDeletedUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllAqaryDeletedUser), arg0, arg1)
}

// GetAllAqaryDeletedUserWithoutPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllAqaryDeletedUserWithoutPagination(arg0 *gin.Context) ([]sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryDeletedUserWithoutPagination", arg0)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllAqaryDeletedUserWithoutPagination indicates an expected call of GetAllAqaryDeletedUserWithoutPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllAqaryDeletedUserWithoutPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryDeletedUserWithoutPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllAqaryDeletedUserWithoutPagination), arg0)
}

// GetAllAqaryUser mocks base method.
func (m *MockUserCompositeRepo) GetAllAqaryUser(arg0 *gin.Context, arg1 sqlc.GetAllAqaryUserParams) ([]sqlc.GetAllAqaryUserRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllAqaryUserRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllAqaryUser indicates an expected call of GetAllAqaryUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAllAqaryUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllAqaryUser), arg0, arg1)
}

// GetAllAqaryUsersByCountryId mocks base method.
func (m *MockUserCompositeRepo) GetAllAqaryUsersByCountryId(arg0 *gin.Context, arg1 sqlc.GetAllAqaryUsersByCountryIdParams) ([]sqlc.GetAllAqaryUsersByCountryIdRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAqaryUsersByCountryId", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllAqaryUsersByCountryIdRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllAqaryUsersByCountryId indicates an expected call of GetAllAqaryUsersByCountryId.
func (mr *MockUserCompositeRepoMockRecorder) GetAllAqaryUsersByCountryId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAqaryUsersByCountryId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllAqaryUsersByCountryId), arg0, arg1)
}

// GetAllCititesByIds mocks base method.
func (m *MockUserCompositeRepo) GetAllCititesByIds(arg0 *gin.Context, arg1 []int64) ([]sqlc.City, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCititesByIds", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.City)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllCititesByIds indicates an expected call of GetAllCititesByIds.
func (mr *MockUserCompositeRepoMockRecorder) GetAllCititesByIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCititesByIds", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllCititesByIds), arg0, arg1)
}

// GetAllCompanyPendingUser mocks base method.
func (m *MockUserCompositeRepo) GetAllCompanyPendingUser(arg0 context.Context, arg1 sqlc.GetAllCompanyPendingUserParams) ([]*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyPendingUser", arg0, arg1)
	ret0, _ := ret[0].([]*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllCompanyPendingUser indicates an expected call of GetAllCompanyPendingUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAllCompanyPendingUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyPendingUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllCompanyPendingUser), arg0, arg1)
}

// GetAllCompanyUsers mocks base method.
func (m *MockUserCompositeRepo) GetAllCompanyUsers(arg0 *gin.Context, arg1 sqlc.GetAllCompanyUsersParams) ([]sqlc.GetAllCompanyUsersRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllCompanyUsersRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllCompanyUsers indicates an expected call of GetAllCompanyUsers.
func (mr *MockUserCompositeRepoMockRecorder) GetAllCompanyUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllCompanyUsers), arg0, arg1)
}

// GetAllCompanyUsersByStatus mocks base method.
func (m *MockUserCompositeRepo) GetAllCompanyUsersByStatus(arg0 *gin.Context, arg1 sqlc.GetAllCompanyUsersByStatusParams) ([]sqlc.GetAllCompanyUsersByStatusRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanyUsersByStatus", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllCompanyUsersByStatusRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllCompanyUsersByStatus indicates an expected call of GetAllCompanyUsersByStatus.
func (mr *MockUserCompositeRepoMockRecorder) GetAllCompanyUsersByStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanyUsersByStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllCompanyUsersByStatus), arg0, arg1)
}

// GetAllDepartment mocks base method.
func (m *MockUserCompositeRepo) GetAllDepartment(arg0 *gin.Context, arg1 sqlc.GetAllDepartmentParams) ([]sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDepartment", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllDepartment indicates an expected call of GetAllDepartment.
func (mr *MockUserCompositeRepoMockRecorder) GetAllDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllDepartment), arg0, arg1)
}

// GetAllDepartmentWithoutPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllDepartmentWithoutPagination(arg0 *gin.Context) ([]sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDepartmentWithoutPagination", arg0)
	ret0, _ := ret[0].([]sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllDepartmentWithoutPagination indicates an expected call of GetAllDepartmentWithoutPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllDepartmentWithoutPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDepartmentWithoutPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllDepartmentWithoutPagination), arg0)
}

// GetAllForSuperUserPermissionBySectionPermissionId mocks base method.
func (m *MockUserCompositeRepo) GetAllForSuperUserPermissionBySectionPermissionId(arg0 *gin.Context, arg1 int64) ([]sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForSuperUserPermissionBySectionPermissionId", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllForSuperUserPermissionBySectionPermissionId indicates an expected call of GetAllForSuperUserPermissionBySectionPermissionId.
func (mr *MockUserCompositeRepoMockRecorder) GetAllForSuperUserPermissionBySectionPermissionId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForSuperUserPermissionBySectionPermissionId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllForSuperUserPermissionBySectionPermissionId), arg0, arg1)
}

// GetAllForSuperUserPermissionBySectionPermissionIdMV mocks base method.
func (m *MockUserCompositeRepo) GetAllForSuperUserPermissionBySectionPermissionIdMV(arg0 *gin.Context, arg1, arg2 int64, arg3 []int64) ([]sqlc.PermissionsMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForSuperUserPermissionBySectionPermissionIdMV", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]sqlc.PermissionsMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllForSuperUserPermissionBySectionPermissionIdMV indicates an expected call of GetAllForSuperUserPermissionBySectionPermissionIdMV.
func (mr *MockUserCompositeRepoMockRecorder) GetAllForSuperUserPermissionBySectionPermissionIdMV(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForSuperUserPermissionBySectionPermissionIdMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllForSuperUserPermissionBySectionPermissionIdMV), arg0, arg1, arg2, arg3)
}

// GetAllFreelanceUsers mocks base method.
func (m *MockUserCompositeRepo) GetAllFreelanceUsers(arg0 *gin.Context, arg1 sqlc.GetAllFreelanceUsersParams) ([]sqlc.GetAllFreelanceUsersRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFreelanceUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllFreelanceUsersRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllFreelanceUsers indicates an expected call of GetAllFreelanceUsers.
func (mr *MockUserCompositeRepoMockRecorder) GetAllFreelanceUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFreelanceUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllFreelanceUsers), arg0, arg1)
}

// GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination(arg0 *gin.Context) ([]sqlc.GetAllIDANDPermissionsFromSubSectionPermissionWithoutPaginationRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination", arg0)
	ret0, _ := ret[0].([]sqlc.GetAllIDANDPermissionsFromSubSectionPermissionWithoutPaginationRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination indicates an expected call of GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllIDANDPermissionsFromSubSectionPermissionWithoutPagination), arg0)
}

// GetAllLanguagesByIds mocks base method.
func (m *MockUserCompositeRepo) GetAllLanguagesByIds(arg0 *gin.Context, arg1 []int64) ([]sqlc.AllLanguage, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLanguagesByIds", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.AllLanguage)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllLanguagesByIds indicates an expected call of GetAllLanguagesByIds.
func (mr *MockUserCompositeRepoMockRecorder) GetAllLanguagesByIds(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLanguagesByIds", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllLanguagesByIds), arg0, arg1)
}

// GetAllNestedSubSectionPermissonByButtonID mocks base method.
func (m *MockUserCompositeRepo) GetAllNestedSubSectionPermissonByButtonID(arg0 *gin.Context, arg1 int64) ([]sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNestedSubSectionPermissonByButtonID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllNestedSubSectionPermissonByButtonID indicates an expected call of GetAllNestedSubSectionPermissonByButtonID.
func (mr *MockUserCompositeRepoMockRecorder) GetAllNestedSubSectionPermissonByButtonID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNestedSubSectionPermissonByButtonID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllNestedSubSectionPermissonByButtonID), arg0, arg1)
}

// GetAllOtherUser mocks base method.
func (m *MockUserCompositeRepo) GetAllOtherUser(arg0 context.Context, arg1 sqlc.GetAllOtherUserParams) ([]sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOtherUser", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllOtherUser indicates an expected call of GetAllOtherUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAllOtherUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOtherUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllOtherUser), arg0, arg1)
}

// GetAllOtherUsersByCountryId mocks base method.
func (m *MockUserCompositeRepo) GetAllOtherUsersByCountryId(arg0 context.Context, arg1 sqlc.GetAllOtherUsersByCountryIdParams) ([]sqlc.GetAllOtherUsersByCountryIdRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOtherUsersByCountryId", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllOtherUsersByCountryIdRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllOtherUsersByCountryId indicates an expected call of GetAllOtherUsersByCountryId.
func (mr *MockUserCompositeRepoMockRecorder) GetAllOtherUsersByCountryId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOtherUsersByCountryId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllOtherUsersByCountryId), arg0, arg1)
}

// GetAllOwnerUsers mocks base method.
func (m *MockUserCompositeRepo) GetAllOwnerUsers(arg0 *gin.Context, arg1 sqlc.GetAllOwnerUsersParams) ([]sqlc.GetAllOwnerUsersRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOwnerUsers", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllOwnerUsersRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllOwnerUsers indicates an expected call of GetAllOwnerUsers.
func (mr *MockUserCompositeRepoMockRecorder) GetAllOwnerUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOwnerUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllOwnerUsers), arg0, arg1)
}

// GetAllPermission mocks base method.
func (m *MockUserCompositeRepo) GetAllPermission(arg0 *gin.Context, arg1 sqlc.GetAllPermissionParams) ([]sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermission", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermission indicates an expected call of GetAllPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetAllPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllPermission), arg0, arg1)
}

// GetAllPermissionBySectionPermissionId mocks base method.
func (m *MockUserCompositeRepo) GetAllPermissionBySectionPermissionId(arg0 *gin.Context, arg1 int64) ([]sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionBySectionPermissionId", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermissionBySectionPermissionId indicates an expected call of GetAllPermissionBySectionPermissionId.
func (mr *MockUserCompositeRepoMockRecorder) GetAllPermissionBySectionPermissionId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionBySectionPermissionId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllPermissionBySectionPermissionId), arg0, arg1)
}

// GetAllPermissionFromUserByID mocks base method.
func (m *MockUserCompositeRepo) GetAllPermissionFromUserByID(arg0 *gin.Context, arg1 sqlc.GetUserPermissionsByIDParams) (*sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionFromUserByID", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermissionFromUserByID indicates an expected call of GetAllPermissionFromUserByID.
func (mr *MockUserCompositeRepoMockRecorder) GetAllPermissionFromUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionFromUserByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllPermissionFromUserByID), arg0, arg1)
}

// GetAllPermissionsNoPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllPermissionsNoPagination(arg0 context.Context) ([]sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissionsNoPagination", arg0)
	ret0, _ := ret[0].([]sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllPermissionsNoPagination indicates an expected call of GetAllPermissionsNoPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllPermissionsNoPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissionsNoPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllPermissionsNoPagination), arg0)
}

// GetAllProfile mocks base method.
func (m *MockUserCompositeRepo) GetAllProfile(arg0 context.Context) ([]*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProfile", arg0)
	ret0, _ := ret[0].([]*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllProfile indicates an expected call of GetAllProfile.
func (mr *MockUserCompositeRepoMockRecorder) GetAllProfile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProfile", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllProfile), arg0)
}

// GetAllRelatedIDFromSubSection mocks base method.
func (m *MockUserCompositeRepo) GetAllRelatedIDFromSubSection(arg0 *gin.Context, arg1 int64) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelatedIDFromSubSection", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRelatedIDFromSubSection indicates an expected call of GetAllRelatedIDFromSubSection.
func (mr *MockUserCompositeRepoMockRecorder) GetAllRelatedIDFromSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelatedIDFromSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllRelatedIDFromSubSection), arg0, arg1)
}

// GetAllRole mocks base method.
func (m *MockUserCompositeRepo) GetAllRole(arg0 *gin.Context, arg1 sqlc.GetAllRoleParams) ([]sqlc.Role, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRole", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Role)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRole indicates an expected call of GetAllRole.
func (mr *MockUserCompositeRepoMockRecorder) GetAllRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllRole), arg0, arg1)
}

// GetAllRolePermission mocks base method.
func (m *MockUserCompositeRepo) GetAllRolePermission(arg0 *gin.Context, arg1 sqlc.GetAllRolePermissionParams) ([]sqlc.GetAllRolePermissionRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolePermission", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetAllRolePermissionRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRolePermission indicates an expected call of GetAllRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) GetAllRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllRolePermission), arg0, arg1)
}

// GetAllRolePermissionWithoutPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllRolePermissionWithoutPagination(arg0 *gin.Context) ([]sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRolePermissionWithoutPagination", arg0)
	ret0, _ := ret[0].([]sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRolePermissionWithoutPagination indicates an expected call of GetAllRolePermissionWithoutPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllRolePermissionWithoutPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRolePermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllRolePermissionWithoutPagination), arg0)
}

// GetAllRoleWithRolePermissionChecked mocks base method.
func (m *MockUserCompositeRepo) GetAllRoleWithRolePermissionChecked(arg0 *gin.Context) ([]sqlc.GetAllRoleWithRolePermissionCheckedRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoleWithRolePermissionChecked", arg0)
	ret0, _ := ret[0].([]sqlc.GetAllRoleWithRolePermissionCheckedRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllRoleWithRolePermissionChecked indicates an expected call of GetAllRoleWithRolePermissionChecked.
func (mr *MockUserCompositeRepoMockRecorder) GetAllRoleWithRolePermissionChecked(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoleWithRolePermissionChecked", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllRoleWithRolePermissionChecked), arg0)
}

// GetAllSectionPermission mocks base method.
func (m *MockUserCompositeRepo) GetAllSectionPermission(arg0 *gin.Context, arg1 sqlc.GetAllSectionPermissionParams) ([]sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermission", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermission indicates an expected call of GetAllSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSectionPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSectionPermission), arg0, arg1)
}

// GetAllSectionPermissionFromPermissionIDs mocks base method.
func (m *MockUserCompositeRepo) GetAllSectionPermissionFromPermissionIDs(arg0 context.Context, arg1 int64, arg2 []int64) ([]sqlc.SectionPermissionMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermissionFromPermissionIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]sqlc.SectionPermissionMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermissionFromPermissionIDs indicates an expected call of GetAllSectionPermissionFromPermissionIDs.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSectionPermissionFromPermissionIDs(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermissionFromPermissionIDs", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSectionPermissionFromPermissionIDs), arg0, arg1, arg2)
}

// GetAllSectionPermissionMV mocks base method.
func (m *MockUserCompositeRepo) GetAllSectionPermissionMV(arg0 *gin.Context, arg1, arg2 int64, arg3 string) ([]sqlc.SectionPermissionMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermissionMV", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]sqlc.SectionPermissionMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermissionMV indicates an expected call of GetAllSectionPermissionMV.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSectionPermissionMV(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermissionMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSectionPermissionMV), arg0, arg1, arg2, arg3)
}

// GetAllSectionPermissionWithoutPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllSectionPermissionWithoutPagination(arg0 *gin.Context) ([]sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermissionWithoutPagination", arg0)
	ret0, _ := ret[0].([]sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermissionWithoutPagination indicates an expected call of GetAllSectionPermissionWithoutPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSectionPermissionWithoutPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermissionWithoutPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSectionPermissionWithoutPagination), arg0)
}

// GetAllSectionPermissionWithoutPaginationMV mocks base method.
func (m *MockUserCompositeRepo) GetAllSectionPermissionWithoutPaginationMV(arg0 *gin.Context, arg1 string) ([]sqlc.SectionPermissionMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSectionPermissionWithoutPaginationMV", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SectionPermissionMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSectionPermissionWithoutPaginationMV indicates an expected call of GetAllSectionPermissionWithoutPaginationMV.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSectionPermissionWithoutPaginationMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSectionPermissionWithoutPaginationMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSectionPermissionWithoutPaginationMV), arg0, arg1)
}

// GetAllSubSectionByPermissionID mocks base method.
func (m *MockUserCompositeRepo) GetAllSubSectionByPermissionID(arg0 *gin.Context, arg1 int64) ([]sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionByPermissionID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionByPermissionID indicates an expected call of GetAllSubSectionByPermissionID.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSubSectionByPermissionID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionByPermissionID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSubSectionByPermissionID), arg0, arg1)
}

// GetAllSubSectionByPermissionIDMV mocks base method.
func (m *MockUserCompositeRepo) GetAllSubSectionByPermissionIDMV(arg0 *gin.Context, arg1 sqlc.GetAllSubSectionByPermissionIDMVWithRelationParams) ([]sqlc.SubSectionMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionByPermissionIDMV", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SubSectionMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionByPermissionIDMV indicates an expected call of GetAllSubSectionByPermissionIDMV.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSubSectionByPermissionIDMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionByPermissionIDMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSubSectionByPermissionIDMV), arg0, arg1)
}

// GetAllSubSectionPermissionBySubSectionButtonID mocks base method.
func (m *MockUserCompositeRepo) GetAllSubSectionPermissionBySubSectionButtonID(arg0 *gin.Context, arg1 int64) ([]sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermissionBySubSectionButtonID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionPermissionBySubSectionButtonID indicates an expected call of GetAllSubSectionPermissionBySubSectionButtonID.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSubSectionPermissionBySubSectionButtonID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermissionBySubSectionButtonID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSubSectionPermissionBySubSectionButtonID), arg0, arg1)
}

// GetAllSubSectionPermissionBySubSectionButtonIDMV mocks base method.
func (m *MockUserCompositeRepo) GetAllSubSectionPermissionBySubSectionButtonIDMV(arg0 *gin.Context, arg1 sqlc.GetAllSubSectionPermissionBySubSectionButtonIDMVParams) ([]sqlc.SubSectionMv, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermissionBySubSectionButtonIDMV", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SubSectionMv)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionPermissionBySubSectionButtonIDMV indicates an expected call of GetAllSubSectionPermissionBySubSectionButtonIDMV.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSubSectionPermissionBySubSectionButtonIDMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermissionBySubSectionButtonIDMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSubSectionPermissionBySubSectionButtonIDMV), arg0, arg1)
}

// GetAllSubSectionPermissionsNoPagination mocks base method.
func (m *MockUserCompositeRepo) GetAllSubSectionPermissionsNoPagination(arg0 context.Context) ([]sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubSectionPermissionsNoPagination", arg0)
	ret0, _ := ret[0].([]sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllSubSectionPermissionsNoPagination indicates an expected call of GetAllSubSectionPermissionsNoPagination.
func (mr *MockUserCompositeRepoMockRecorder) GetAllSubSectionPermissionsNoPagination(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubSectionPermissionsNoPagination", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllSubSectionPermissionsNoPagination), arg0)
}

// GetAllUserType mocks base method.
func (m *MockUserCompositeRepo) GetAllUserType(arg0 *gin.Context) (*[]sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserType", arg0)
	ret0, _ := ret[0].(*[]sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllUserType indicates an expected call of GetAllUserType.
func (mr *MockUserCompositeRepoMockRecorder) GetAllUserType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserType", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllUserType), arg0)
}

// GetAllUserTypesForWeb mocks base method.
func (m *MockUserCompositeRepo) GetAllUserTypesForWeb(arg0 *gin.Context) (*[]sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserTypesForWeb", arg0)
	ret0, _ := ret[0].(*[]sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAllUserTypesForWeb indicates an expected call of GetAllUserTypesForWeb.
func (mr *MockUserCompositeRepoMockRecorder) GetAllUserTypesForWeb(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserTypesForWeb", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAllUserTypesForWeb), arg0)
}

// GetAqaryAdminPermissions mocks base method.
func (m *MockUserCompositeRepo) GetAqaryAdminPermissions(arg0 *gin.Context, arg1 int64) (sqlc.GetAqaryAdminPermissionsRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryAdminPermissions", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetAqaryAdminPermissionsRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryAdminPermissions indicates an expected call of GetAqaryAdminPermissions.
func (mr *MockUserCompositeRepoMockRecorder) GetAqaryAdminPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryAdminPermissions", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAqaryAdminPermissions), arg0, arg1)
}

// GetAqaryDeletedUser mocks base method.
func (m *MockUserCompositeRepo) GetAqaryDeletedUser(arg0 *gin.Context, arg1 int64) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryDeletedUser", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryDeletedUser indicates an expected call of GetAqaryDeletedUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAqaryDeletedUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryDeletedUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAqaryDeletedUser), arg0, arg1)
}

// GetAqaryUser mocks base method.
func (m *MockUserCompositeRepo) GetAqaryUser(arg0 *gin.Context, arg1 int64) (*sqlc.GetUserRegardlessOfStatusRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryUser", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.GetUserRegardlessOfStatusRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryUser indicates an expected call of GetAqaryUser.
func (mr *MockUserCompositeRepoMockRecorder) GetAqaryUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAqaryUser), arg0, arg1)
}

// GetAqaryUserPermissions mocks base method.
func (m *MockUserCompositeRepo) GetAqaryUserPermissions(arg0 *gin.Context, arg1 sqlc.GetAqaryUserPermissionsParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryUserPermissions", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryUserPermissions indicates an expected call of GetAqaryUserPermissions.
func (mr *MockUserCompositeRepoMockRecorder) GetAqaryUserPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryUserPermissions", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAqaryUserPermissions), arg0, arg1)
}

// GetAqaryUserSubSectionPermissions mocks base method.
func (m *MockUserCompositeRepo) GetAqaryUserSubSectionPermissions(arg0 *gin.Context, arg1 sqlc.GetAqaryUserSubSectionPermissionsParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAqaryUserSubSectionPermissions", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAqaryUserSubSectionPermissions indicates an expected call of GetAqaryUserSubSectionPermissions.
func (mr *MockUserCompositeRepoMockRecorder) GetAqaryUserSubSectionPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAqaryUserSubSectionPermissions", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAqaryUserSubSectionPermissions), arg0, arg1)
}

// GetAssociatedCompanies mocks base method.
func (m *MockUserCompositeRepo) GetAssociatedCompanies(arg0 *gin.Context, arg1 sqlc.GetAssociatedCompaniesParams) ([]byte, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssociatedCompanies", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetAssociatedCompanies indicates an expected call of GetAssociatedCompanies.
func (mr *MockUserCompositeRepoMockRecorder) GetAssociatedCompanies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssociatedCompanies", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetAssociatedCompanies), arg0, arg1)
}

// GetBrokerAgentByUserId mocks base method.
func (m *MockUserCompositeRepo) GetBrokerAgentByUserId(arg0 *gin.Context, arg1 int64) (sqlc.BrokerCompanyAgent, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerAgentByUserId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.BrokerCompanyAgent)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetBrokerAgentByUserId indicates an expected call of GetBrokerAgentByUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetBrokerAgentByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerAgentByUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetBrokerAgentByUserId), arg0, arg1)
}

// GetBrokerBranchAgentByUserId mocks base method.
func (m *MockUserCompositeRepo) GetBrokerBranchAgentByUserId(arg0 *gin.Context, arg1 int64) (sqlc.BrokerCompanyBranchesAgent, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBrokerBranchAgentByUserId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.BrokerCompanyBranchesAgent)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetBrokerBranchAgentByUserId indicates an expected call of GetBrokerBranchAgentByUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetBrokerBranchAgentByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBrokerBranchAgentByUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetBrokerBranchAgentByUserId), arg0, arg1)
}

// GetCity mocks base method.
func (m *MockUserCompositeRepo) GetCity(arg0 *gin.Context, arg1 int32) (sqlc.City, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCity", arg0, arg1)
	ret0, _ := ret[0].(sqlc.City)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCity indicates an expected call of GetCity.
func (mr *MockUserCompositeRepoMockRecorder) GetCity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCity", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCity), arg0, arg1)
}

// GetCommunity mocks base method.
func (m *MockUserCompositeRepo) GetCommunity(arg0 *gin.Context, arg1 int32) (sqlc.Community, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunity", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Community)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCommunity indicates an expected call of GetCommunity.
func (mr *MockUserCompositeRepoMockRecorder) GetCommunity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunity", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCommunity), arg0, arg1)
}

// GetCompanies mocks base method.
func (m *MockUserCompositeRepo) GetCompanies(arg0 *gin.Context, arg1 int64) (*sqlc.Company, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanies", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Company)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanies indicates an expected call of GetCompanies.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanies", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanies), arg0, arg1)
}

// GetCompany mocks base method.
func (m *MockUserCompositeRepo) GetCompany(arg0 *gin.Context, arg1 int32) (*sqlc.Company, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Company)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockUserCompositeRepoMockRecorder) GetCompany(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompany), arg0, arg1)
}

// GetCompanyAdmin mocks base method.
func (m *MockUserCompositeRepo) GetCompanyAdmin(arg0 *gin.Context, arg1 sqlc.GetCompanyAdminParams) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyAdmin", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyAdmin indicates an expected call of GetCompanyAdmin.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyAdmin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyAdmin", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyAdmin), arg0, arg1)
}

// GetCompanyAdminPermissions mocks base method.
func (m *MockUserCompositeRepo) GetCompanyAdminPermissions(arg0 *gin.Context, arg1 sqlc.GetCompanyAdminPermissionsParams) (sqlc.GetCompanyAdminPermissionsRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyAdminPermissions", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetCompanyAdminPermissionsRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyAdminPermissions indicates an expected call of GetCompanyAdminPermissions.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyAdminPermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyAdminPermissions", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyAdminPermissions), arg0, arg1)
}

// GetCompanySectionPermission mocks base method.
func (m *MockUserCompositeRepo) GetCompanySectionPermission(arg0 *gin.Context) (*sqlc.SectionPermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanySectionPermission", arg0)
	ret0, _ := ret[0].(*sqlc.SectionPermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanySectionPermission indicates an expected call of GetCompanySectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanySectionPermission(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanySectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanySectionPermission), arg0)
}

// GetCompanyUser mocks base method.
func (m *MockUserCompositeRepo) GetCompanyUser(arg0 *gin.Context, arg1 int32) (sqlc.CompanyUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUser", arg0, arg1)
	ret0, _ := ret[0].(sqlc.CompanyUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUser indicates an expected call of GetCompanyUser.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyUser), arg0, arg1)
}

// GetCompanyUserAgentAndQuotaByUserId mocks base method.
func (m *MockUserCompositeRepo) GetCompanyUserAgentAndQuotaByUserId(arg0 *gin.Context, arg1 int64) (sqlc.GetCompanyUserAgentAndQuotaByUserIdRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserAgentAndQuotaByUserId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetCompanyUserAgentAndQuotaByUserIdRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUserAgentAndQuotaByUserId indicates an expected call of GetCompanyUserAgentAndQuotaByUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyUserAgentAndQuotaByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserAgentAndQuotaByUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyUserAgentAndQuotaByUserId), arg0, arg1)
}

// GetCompanyUserBranchAgentAndQuotaByUserId mocks base method.
func (m *MockUserCompositeRepo) GetCompanyUserBranchAgentAndQuotaByUserId(arg0 *gin.Context, arg1 int64) (sqlc.GetCompanyUserBranchAgentAndQuotaByUserIdRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserBranchAgentAndQuotaByUserId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetCompanyUserBranchAgentAndQuotaByUserIdRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUserBranchAgentAndQuotaByUserId indicates an expected call of GetCompanyUserBranchAgentAndQuotaByUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyUserBranchAgentAndQuotaByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserBranchAgentAndQuotaByUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyUserBranchAgentAndQuotaByUserId), arg0, arg1)
}

// GetCompanyUserByCompanyUserId mocks base method.
func (m *MockUserCompositeRepo) GetCompanyUserByCompanyUserId(arg0 *gin.Context, arg1 int64) (sqlc.CompanyUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUserByCompanyUserId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.CompanyUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUserByCompanyUserId indicates an expected call of GetCompanyUserByCompanyUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyUserByCompanyUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUserByCompanyUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyUserByCompanyUserId), arg0, arg1)
}

// GetCompanyUsersByUsersID mocks base method.
func (m *MockUserCompositeRepo) GetCompanyUsersByUsersID(arg0 *gin.Context, arg1 int64) (sqlc.CompanyUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyUsersByUsersID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.CompanyUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCompanyUsersByUsersID indicates an expected call of GetCompanyUsersByUsersID.
func (mr *MockUserCompositeRepoMockRecorder) GetCompanyUsersByUsersID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyUsersByUsersID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCompanyUsersByUsersID), arg0, arg1)
}

// GetCountAllAqaryDeletedUser mocks base method.
func (m *MockUserCompositeRepo) GetCountAllAqaryDeletedUser(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllAqaryDeletedUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllAqaryDeletedUser indicates an expected call of GetCountAllAqaryDeletedUser.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllAqaryDeletedUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllAqaryDeletedUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllAqaryDeletedUser), arg0, arg1)
}

// GetCountAllAqaryUser mocks base method.
func (m *MockUserCompositeRepo) GetCountAllAqaryUser(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllAqaryUser", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllAqaryUser indicates an expected call of GetCountAllAqaryUser.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllAqaryUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllAqaryUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllAqaryUser), arg0, arg1)
}

// GetCountAllAqaryUserByCountry mocks base method.
func (m *MockUserCompositeRepo) GetCountAllAqaryUserByCountry(arg0 *gin.Context, arg1 int64) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllAqaryUserByCountry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllAqaryUserByCountry indicates an expected call of GetCountAllAqaryUserByCountry.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllAqaryUserByCountry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllAqaryUserByCountry", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllAqaryUserByCountry), arg0, arg1)
}

// GetCountAllCompanyUsers mocks base method.
func (m *MockUserCompositeRepo) GetCountAllCompanyUsers(arg0 *gin.Context, arg1 sqlc.GetCountAllCompanyUsersParams) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllCompanyUsers", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllCompanyUsers indicates an expected call of GetCountAllCompanyUsers.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllCompanyUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllCompanyUsers", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllCompanyUsers), arg0, arg1)
}

// GetCountAllDepartment mocks base method.
func (m *MockUserCompositeRepo) GetCountAllDepartment(arg0 *gin.Context, arg1 sqlc.GetCountAllDepartmentParams) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllDepartment", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllDepartment indicates an expected call of GetCountAllDepartment.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllDepartment), arg0, arg1)
}

// GetCountAllOtherUser mocks base method.
func (m *MockUserCompositeRepo) GetCountAllOtherUser(arg0 context.Context) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllOtherUser", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllOtherUser indicates an expected call of GetCountAllOtherUser.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllOtherUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllOtherUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllOtherUser), arg0)
}

// GetCountAllOtherUserByCountry mocks base method.
func (m *MockUserCompositeRepo) GetCountAllOtherUserByCountry(arg0 context.Context, arg1 int64) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllOtherUserByCountry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllOtherUserByCountry indicates an expected call of GetCountAllOtherUserByCountry.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllOtherUserByCountry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllOtherUserByCountry", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllOtherUserByCountry), arg0, arg1)
}

// GetCountAllPendingUser mocks base method.
func (m *MockUserCompositeRepo) GetCountAllPendingUser(arg0 context.Context) (*int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllPendingUser", arg0)
	ret0, _ := ret[0].(*int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllPendingUser indicates an expected call of GetCountAllPendingUser.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllPendingUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllPendingUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllPendingUser), arg0)
}

// GetCountAllPermissionSectionIds mocks base method.
func (m *MockUserCompositeRepo) GetCountAllPermissionSectionIds(arg0 *gin.Context) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllPermissionSectionIds", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllPermissionSectionIds indicates an expected call of GetCountAllPermissionSectionIds.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllPermissionSectionIds(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllPermissionSectionIds", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllPermissionSectionIds), arg0)
}

// GetCountAllRolePermission mocks base method.
func (m *MockUserCompositeRepo) GetCountAllRolePermission(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllRolePermission", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllRolePermission indicates an expected call of GetCountAllRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllRolePermission), arg0, arg1)
}

// GetCountAllRoles mocks base method.
func (m *MockUserCompositeRepo) GetCountAllRoles(arg0 *gin.Context, arg1 int64) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllRoles", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllRoles indicates an expected call of GetCountAllRoles.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllRoles(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllRoles", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllRoles), arg0, arg1)
}

// GetCountAllSectionPermission mocks base method.
func (m *MockUserCompositeRepo) GetCountAllSectionPermission(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllSectionPermission", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllSectionPermission indicates an expected call of GetCountAllSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllSectionPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllSectionPermission), arg0, arg1)
}

// GetCountAllSectionPermissionMV mocks base method.
func (m *MockUserCompositeRepo) GetCountAllSectionPermissionMV(arg0 *gin.Context, arg1 string) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAllSectionPermissionMV", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountAllSectionPermissionMV indicates an expected call of GetCountAllSectionPermissionMV.
func (mr *MockUserCompositeRepoMockRecorder) GetCountAllSectionPermissionMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAllSectionPermissionMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountAllSectionPermissionMV), arg0, arg1)
}

// GetCountCompanyUsersByStatuses mocks base method.
func (m *MockUserCompositeRepo) GetCountCompanyUsersByStatuses(arg0 *gin.Context, arg1 []int64) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountCompanyUsersByStatuses", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountCompanyUsersByStatuses indicates an expected call of GetCountCompanyUsersByStatuses.
func (mr *MockUserCompositeRepoMockRecorder) GetCountCompanyUsersByStatuses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountCompanyUsersByStatuses", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountCompanyUsersByStatuses), arg0, arg1)
}

// GetCountry mocks base method.
func (m *MockUserCompositeRepo) GetCountry(arg0 *gin.Context, arg1 int32) (sqlc.Country, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountry", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Country)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCountry indicates an expected call of GetCountry.
func (mr *MockUserCompositeRepoMockRecorder) GetCountry(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountry", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountry), arg0, arg1)
}

// GetCountryByName mocks base method.
func (m *MockUserCompositeRepo) GetCountryByName(arg0 *gin.Context, arg1 string) (*sqlc.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryByName", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryByName indicates an expected call of GetCountryByName.
func (mr *MockUserCompositeRepoMockRecorder) GetCountryByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryByName", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCountryByName), arg0, arg1)
}

// GetCurrentSubscriptionQuota mocks base method.
func (m *MockUserCompositeRepo) GetCurrentSubscriptionQuota(arg0 *gin.Context, arg1 int64) ([]sqlc.GetRemainingCompanyQuotaRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSubscriptionQuota", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetRemainingCompanyQuotaRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetCurrentSubscriptionQuota indicates an expected call of GetCurrentSubscriptionQuota.
func (mr *MockUserCompositeRepoMockRecorder) GetCurrentSubscriptionQuota(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSubscriptionQuota", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetCurrentSubscriptionQuota), arg0, arg1)
}

// GetDepartment mocks base method.
func (m *MockUserCompositeRepo) GetDepartment(arg0 *gin.Context, arg1 sqlc.GetDepartmentParams) (sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartment", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetDepartment indicates an expected call of GetDepartment.
func (mr *MockUserCompositeRepoMockRecorder) GetDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetDepartment), arg0, arg1)
}

// GetDepartmentByTitle mocks base method.
func (m *MockUserCompositeRepo) GetDepartmentByTitle(arg0 *gin.Context, arg1 sqlc.GetDepartmentByDepartmentParams) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepartmentByTitle", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetDepartmentByTitle indicates an expected call of GetDepartmentByTitle.
func (mr *MockUserCompositeRepoMockRecorder) GetDepartmentByTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepartmentByTitle", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetDepartmentByTitle), arg0, arg1)
}

// GetLanguageByLanguage mocks base method.
func (m *MockUserCompositeRepo) GetLanguageByLanguage(arg0 *gin.Context, arg1 string) (*sqlc.AllLanguage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageByLanguage", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.AllLanguage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageByLanguage indicates an expected call of GetLanguageByLanguage.
func (mr *MockUserCompositeRepoMockRecorder) GetLanguageByLanguage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageByLanguage", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetLanguageByLanguage), arg0, arg1)
}

// GetLocationByAddressID mocks base method.
func (m *MockUserCompositeRepo) GetLocationByAddressID(arg0 *gin.Context, arg1 int64) (*sqlc.GetLocationByAddressIDRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByAddressID", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.GetLocationByAddressIDRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetLocationByAddressID indicates an expected call of GetLocationByAddressID.
func (mr *MockUserCompositeRepoMockRecorder) GetLocationByAddressID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByAddressID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetLocationByAddressID), arg0, arg1)
}

// GetLocationByAddressId mocks base method.
func (m *MockUserCompositeRepo) GetLocationByAddressId(arg0 *gin.Context, arg1 int32) (*string, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationByAddressId", arg0, arg1)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetLocationByAddressId indicates an expected call of GetLocationByAddressId.
func (mr *MockUserCompositeRepoMockRecorder) GetLocationByAddressId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationByAddressId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetLocationByAddressId), arg0, arg1)
}

// GetPendingUser mocks base method.
func (m *MockUserCompositeRepo) GetPendingUser(arg0 context.Context, arg1 int64) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingUser", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPendingUser indicates an expected call of GetPendingUser.
func (mr *MockUserCompositeRepoMockRecorder) GetPendingUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPendingUser), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockUserCompositeRepo) GetPermission(arg0 *gin.Context, arg1 int64) (sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPermission), arg0, arg1)
}

// GetPermissionByIdAndSectionPermissionId mocks base method.
func (m *MockUserCompositeRepo) GetPermissionByIdAndSectionPermissionId(arg0 *gin.Context, arg1 sqlc.GetPermissionByIdAndSectionPermissionIdParams) (sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByIdAndSectionPermissionId", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPermissionByIdAndSectionPermissionId indicates an expected call of GetPermissionByIdAndSectionPermissionId.
func (mr *MockUserCompositeRepoMockRecorder) GetPermissionByIdAndSectionPermissionId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByIdAndSectionPermissionId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPermissionByIdAndSectionPermissionId), arg0, arg1)
}

// GetPermissionBySectionID mocks base method.
func (m *MockUserCompositeRepo) GetPermissionBySectionID(arg0 *gin.Context, arg1 int64) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionBySectionID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPermissionBySectionID indicates an expected call of GetPermissionBySectionID.
func (mr *MockUserCompositeRepoMockRecorder) GetPermissionBySectionID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionBySectionID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPermissionBySectionID), arg0, arg1)
}

// GetPermissionByTitle mocks base method.
func (m *MockUserCompositeRepo) GetPermissionByTitle(arg0 *gin.Context, arg1 string) (sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionByTitle", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPermissionByTitle indicates an expected call of GetPermissionByTitle.
func (mr *MockUserCompositeRepoMockRecorder) GetPermissionByTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionByTitle", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPermissionByTitle), arg0, arg1)
}

// GetPermissionMV mocks base method.
func (m *MockUserCompositeRepo) GetPermissionMV(arg0 *gin.Context, arg1 int64) (*sqlc.PermissionsMv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionMV", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.PermissionsMv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionMV indicates an expected call of GetPermissionMV.
func (mr *MockUserCompositeRepoMockRecorder) GetPermissionMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPermissionMV), arg0, arg1)
}

// GetPlatformUserByEmail mocks base method.
func (m *MockUserCompositeRepo) GetPlatformUserByEmail(arg0 *gin.Context, arg1 string) (sqlc.PlatformUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.PlatformUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPlatformUserByEmail indicates an expected call of GetPlatformUserByEmail.
func (mr *MockUserCompositeRepoMockRecorder) GetPlatformUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformUserByEmail", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPlatformUserByEmail), arg0, arg1)
}

// GetPlatformUserByEmailAndCompanyID mocks base method.
func (m *MockUserCompositeRepo) GetPlatformUserByEmailAndCompanyID(arg0 *gin.Context, arg1 sqlc.GetPlatformUserByEmailAndCompanyIDParams) (sqlc.PlatformUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformUserByEmailAndCompanyID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.PlatformUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetPlatformUserByEmailAndCompanyID indicates an expected call of GetPlatformUserByEmailAndCompanyID.
func (mr *MockUserCompositeRepoMockRecorder) GetPlatformUserByEmailAndCompanyID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformUserByEmailAndCompanyID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetPlatformUserByEmailAndCompanyID), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockUserCompositeRepo) GetProfile(arg0 context.Context, arg1 int64) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockUserCompositeRepoMockRecorder) GetProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetProfile), arg0, arg1)
}

// GetProfileByUserId mocks base method.
func (m *MockUserCompositeRepo) GetProfileByUserId(arg0 context.Context, arg1 int64) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileByUserId", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetProfileByUserId indicates an expected call of GetProfileByUserId.
func (mr *MockUserCompositeRepoMockRecorder) GetProfileByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileByUserId", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetProfileByUserId), arg0, arg1)
}

// GetRole mocks base method.
func (m *MockUserCompositeRepo) GetRole(arg0 *gin.Context, arg1 int64) (sqlc.Role, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockUserCompositeRepoMockRecorder) GetRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetRole), arg0, arg1)
}

// GetRoleByRole mocks base method.
func (m *MockUserCompositeRepo) GetRoleByRole(arg0 *gin.Context, arg1 sqlc.GetRoleByRoleParams) (sqlc.Role, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRoleByRole indicates an expected call of GetRoleByRole.
func (mr *MockUserCompositeRepoMockRecorder) GetRoleByRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetRoleByRole), arg0, arg1)
}

// GetRolePermission mocks base method.
func (m *MockUserCompositeRepo) GetRolePermission(arg0 *gin.Context, arg1 int64) (sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRolePermission indicates an expected call of GetRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) GetRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetRolePermission), arg0, arg1)
}

// GetRolePermissionByRole mocks base method.
func (m *MockUserCompositeRepo) GetRolePermissionByRole(arg0 *gin.Context, arg1 int64) (sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissionByRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRolePermissionByRole indicates an expected call of GetRolePermissionByRole.
func (mr *MockUserCompositeRepoMockRecorder) GetRolePermissionByRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissionByRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetRolePermissionByRole), arg0, arg1)
}

// GetRolePermissions mocks base method.
func (m *MockUserCompositeRepo) GetRolePermissions(arg0 *gin.Context, arg1 int64) (sqlc.GetRolePermissionsRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolePermissions", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetRolePermissionsRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetRolePermissions indicates an expected call of GetRolePermissions.
func (mr *MockUserCompositeRepoMockRecorder) GetRolePermissions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolePermissions", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetRolePermissions), arg0, arg1)
}

// GetSectionPermission mocks base method.
func (m *MockUserCompositeRepo) GetSectionPermission(arg0 *gin.Context, arg1 int64) (sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionPermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSectionPermission indicates an expected call of GetSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) GetSectionPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSectionPermission), arg0, arg1)
}

// GetSectionPermissionByTitle mocks base method.
func (m *MockUserCompositeRepo) GetSectionPermissionByTitle(arg0 *gin.Context, arg1 string) (sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionPermissionByTitle", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSectionPermissionByTitle indicates an expected call of GetSectionPermissionByTitle.
func (mr *MockUserCompositeRepoMockRecorder) GetSectionPermissionByTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionPermissionByTitle", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSectionPermissionByTitle), arg0, arg1)
}

// GetSectionPermissionMV mocks base method.
func (m *MockUserCompositeRepo) GetSectionPermissionMV(arg0 *gin.Context, arg1 int64) (*sqlc.SectionPermissionMv, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSectionPermissionMV", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.SectionPermissionMv)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSectionPermissionMV indicates an expected call of GetSectionPermissionMV.
func (mr *MockUserCompositeRepoMockRecorder) GetSectionPermissionMV(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSectionPermissionMV", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSectionPermissionMV), arg0, arg1)
}

// GetState mocks base method.
func (m *MockUserCompositeRepo) GetState(arg0 *gin.Context, arg1 int32) (sqlc.State, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0, arg1)
	ret0, _ := ret[0].(sqlc.State)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockUserCompositeRepoMockRecorder) GetState(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetState), arg0, arg1)
}

// GetSubCommunity mocks base method.
func (m *MockUserCompositeRepo) GetSubCommunity(arg0 *gin.Context, arg1 int32) (sqlc.SubCommunity, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubCommunity", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SubCommunity)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSubCommunity indicates an expected call of GetSubCommunity.
func (mr *MockUserCompositeRepoMockRecorder) GetSubCommunity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubCommunity", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSubCommunity), arg0, arg1)
}

// GetSubSection mocks base method.
func (m *MockUserCompositeRepo) GetSubSection(arg0 *gin.Context, arg1 int64) (*sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubSection", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSubSection indicates an expected call of GetSubSection.
func (mr *MockUserCompositeRepoMockRecorder) GetSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSubSection), arg0, arg1)
}

// GetSubscriptionOrderPackageDetailByUserID mocks base method.
func (m *MockUserCompositeRepo) GetSubscriptionOrderPackageDetailByUserID(arg0 *gin.Context, arg1 sqlc.GetSubscriptionOrderPackageDetailByUserIDParams) ([]sqlc.GetSubscriptionOrderPackageDetailByUserIDRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionOrderPackageDetailByUserID", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetSubscriptionOrderPackageDetailByUserIDRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetSubscriptionOrderPackageDetailByUserID indicates an expected call of GetSubscriptionOrderPackageDetailByUserID.
func (mr *MockUserCompositeRepoMockRecorder) GetSubscriptionOrderPackageDetailByUserID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionOrderPackageDetailByUserID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSubscriptionOrderPackageDetailByUserID), arg0, arg1)
}

// GetSuperUser mocks base method.
func (m *MockUserCompositeRepo) GetSuperUser(arg0 *gin.Context) (*sqlc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperUser", arg0)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperUser indicates an expected call of GetSuperUser.
func (mr *MockUserCompositeRepoMockRecorder) GetSuperUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetSuperUser), arg0)
}

// GetUser mocks base method.
func (m *MockUserCompositeRepo) GetUser(arg0 *gin.Context, arg1 int64) (*sqlc.GetUserRegardlessOfStatusRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.GetUserRegardlessOfStatusRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserCompositeRepoMockRecorder) GetUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUser), arg0, arg1)
}

// GetUserAssociatedCompanies mocks base method.
func (m *MockUserCompositeRepo) GetUserAssociatedCompanies(arg0 *gin.Context, arg1 int64) ([]sqlc.GetUserAssociatedCompaniesRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAssociatedCompanies", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.GetUserAssociatedCompaniesRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserAssociatedCompanies indicates an expected call of GetUserAssociatedCompanies.
func (mr *MockUserCompositeRepoMockRecorder) GetUserAssociatedCompanies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAssociatedCompanies", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserAssociatedCompanies), arg0, arg1)
}

// GetUserBankAccountDetails mocks base method.
func (m *MockUserCompositeRepo) GetUserBankAccountDetails(arg0 *gin.Context, arg1 int64) (*sqlc.BankAccountDetail, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBankAccountDetails", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.BankAccountDetail)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserBankAccountDetails indicates an expected call of GetUserBankAccountDetails.
func (mr *MockUserCompositeRepoMockRecorder) GetUserBankAccountDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBankAccountDetails", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserBankAccountDetails), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockUserCompositeRepo) GetUserByEmail(arg0 *gin.Context, arg1 string) (sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserCompositeRepoMockRecorder) GetUserByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByEmailRegardlessSuperAdmin mocks base method.
func (m *MockUserCompositeRepo) GetUserByEmailRegardlessSuperAdmin(arg0 *gin.Context, arg1 sqlc.GetUserByEmailRegardlessParams) (sqlc.PlatformUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmailRegardlessSuperAdmin", arg0, arg1)
	ret0, _ := ret[0].(sqlc.PlatformUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserByEmailRegardlessSuperAdmin indicates an expected call of GetUserByEmailRegardlessSuperAdmin.
func (mr *MockUserCompositeRepoMockRecorder) GetUserByEmailRegardlessSuperAdmin(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmailRegardlessSuperAdmin", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserByEmailRegardlessSuperAdmin), arg0, arg1)
}

// GetUserByName mocks base method.
func (m *MockUserCompositeRepo) GetUserByName(arg0 *gin.Context, arg1 string) (sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserCompositeRepoMockRecorder) GetUserByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserByName), arg0, arg1)
}

// GetUserByPhoneVerified mocks base method.
func (m *MockUserCompositeRepo) GetUserByPhoneVerified(arg0 *gin.Context, arg1 sqlc.GetUserByPhoneVerifiedParams) (sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhoneVerified", arg0, arg1)
	ret0, _ := ret[0].(sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserByPhoneVerified indicates an expected call of GetUserByPhoneVerified.
func (mr *MockUserCompositeRepoMockRecorder) GetUserByPhoneVerified(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhoneVerified", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserByPhoneVerified), arg0, arg1)
}

// GetUserCompanyPermissionByID mocks base method.
func (m *MockUserCompositeRepo) GetUserCompanyPermissionByID(arg0 *gin.Context, arg1 sqlc.GetUserCompanyPermissionsByIDParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompanyPermissionByID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserCompanyPermissionByID indicates an expected call of GetUserCompanyPermissionByID.
func (mr *MockUserCompositeRepoMockRecorder) GetUserCompanyPermissionByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompanyPermissionByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserCompanyPermissionByID), arg0, arg1)
}

// GetUserCompanySubSectionPermissionsByID mocks base method.
func (m *MockUserCompositeRepo) GetUserCompanySubSectionPermissionsByID(arg0 *gin.Context, arg1 sqlc.GetUserCompanySubSectionPermissionsByIDParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCompanySubSectionPermissionsByID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserCompanySubSectionPermissionsByID indicates an expected call of GetUserCompanySubSectionPermissionsByID.
func (mr *MockUserCompositeRepoMockRecorder) GetUserCompanySubSectionPermissionsByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCompanySubSectionPermissionsByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserCompanySubSectionPermissionsByID), arg0, arg1)
}

// GetUserDetailsByUserName mocks base method.
func (m *MockUserCompositeRepo) GetUserDetailsByUserName(arg0 *gin.Context, arg1 string) (sqlc.GetUserDetailsByUserNameRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetailsByUserName", arg0, arg1)
	ret0, _ := ret[0].(sqlc.GetUserDetailsByUserNameRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserDetailsByUserName indicates an expected call of GetUserDetailsByUserName.
func (mr *MockUserCompositeRepoMockRecorder) GetUserDetailsByUserName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetailsByUserName", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserDetailsByUserName), arg0, arg1)
}

// GetUserIDFromCompanies mocks base method.
func (m *MockUserCompositeRepo) GetUserIDFromCompanies(arg0 *gin.Context, arg1 sqlc.GetUserIDFromCompaniesParams) (int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDFromCompanies", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserIDFromCompanies indicates an expected call of GetUserIDFromCompanies.
func (mr *MockUserCompositeRepoMockRecorder) GetUserIDFromCompanies(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDFromCompanies", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserIDFromCompanies), arg0, arg1)
}

// GetUserLicenses mocks base method.
func (m *MockUserCompositeRepo) GetUserLicenses(arg0 *gin.Context, arg1 sqlc.GetLicensesByEntityAndEntityTypeIDWithoutStateParams) ([]sqlc.License, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLicenses", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.License)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserLicenses indicates an expected call of GetUserLicenses.
func (mr *MockUserCompositeRepoMockRecorder) GetUserLicenses(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLicenses", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserLicenses), arg0, arg1)
}

// GetUserPermissionByID mocks base method.
func (m *MockUserCompositeRepo) GetUserPermissionByID(arg0 *gin.Context, arg1 sqlc.GetUserPermissionsByIDParams) (sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissionByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserPermissionByID indicates an expected call of GetUserPermissionByID.
func (mr *MockUserCompositeRepoMockRecorder) GetUserPermissionByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissionByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserPermissionByID), arg0, arg1)
}

// GetUserPermissionsTestByID mocks base method.
func (m *MockUserCompositeRepo) GetUserPermissionsTestByID(arg0 *gin.Context, arg1 sqlc.GetUserPermissionsTestByIDParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPermissionsTestByID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserPermissionsTestByID indicates an expected call of GetUserPermissionsTestByID.
func (mr *MockUserCompositeRepoMockRecorder) GetUserPermissionsTestByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPermissionsTestByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserPermissionsTestByID), arg0, arg1)
}

// GetUserRegardlessOfStatus mocks base method.
func (m *MockUserCompositeRepo) GetUserRegardlessOfStatus(arg0 *gin.Context, arg1 int64) (*sqlc.GetUserRegardlessOfStatusRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRegardlessOfStatus", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.GetUserRegardlessOfStatusRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserRegardlessOfStatus indicates an expected call of GetUserRegardlessOfStatus.
func (mr *MockUserCompositeRepoMockRecorder) GetUserRegardlessOfStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRegardlessOfStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserRegardlessOfStatus), arg0, arg1)
}

// GetUserSubSectionPermissionsTestByID mocks base method.
func (m *MockUserCompositeRepo) GetUserSubSectionPermissionsTestByID(arg0 *gin.Context, arg1 sqlc.GetUserSubSectionPermissionsTestByIDParams) ([]int64, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSubSectionPermissionsTestByID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserSubSectionPermissionsTestByID indicates an expected call of GetUserSubSectionPermissionsTestByID.
func (mr *MockUserCompositeRepoMockRecorder) GetUserSubSectionPermissionsTestByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSubSectionPermissionsTestByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserSubSectionPermissionsTestByID), arg0, arg1)
}

// GetUserType mocks base method.
func (m *MockUserCompositeRepo) GetUserType(arg0 *gin.Context, arg1 int64) (*sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserType", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// GetUserType indicates an expected call of GetUserType.
func (mr *MockUserCompositeRepoMockRecorder) GetUserType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserType", reflect.TypeOf((*MockUserCompositeRepo)(nil).GetUserType), arg0, arg1)
}

// SearchAllAgent mocks base method.
func (m *MockUserCompositeRepo) SearchAllAgent(arg0 *gin.Context, arg1 string) ([]sqlc.SearchAllAgentRow, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAllAgent", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.SearchAllAgentRow)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// SearchAllAgent indicates an expected call of SearchAllAgent.
func (mr *MockUserCompositeRepoMockRecorder) SearchAllAgent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAllAgent", reflect.TypeOf((*MockUserCompositeRepo)(nil).SearchAllAgent), arg0, arg1)
}

// UpdateActiveCompany mocks base method.
func (m *MockUserCompositeRepo) UpdateActiveCompany(arg0 *gin.Context, arg1 sqlc.UpdateActiveCompanyParams, arg2 sqlc.Querier) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveCompany", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateActiveCompany indicates an expected call of UpdateActiveCompany.
func (mr *MockUserCompositeRepoMockRecorder) UpdateActiveCompany(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveCompany", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateActiveCompany), arg0, arg1, arg2)
}

// UpdateAddress mocks base method.
func (m *MockUserCompositeRepo) UpdateAddress(arg0 *gin.Context, arg1 sqlc.UpdateAddressParams) (*sqlc.Address, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Address)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserCompositeRepoMockRecorder) UpdateAddress(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateAddress), arg0, arg1)
}

// UpdateAgentSubscriptionQuota mocks base method.
func (m *MockUserCompositeRepo) UpdateAgentSubscriptionQuota(arg0 *gin.Context, arg1 sqlc.UpdateAgentSubscriptionQuotaParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentSubscriptionQuota", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateAgentSubscriptionQuota indicates an expected call of UpdateAgentSubscriptionQuota.
func (mr *MockUserCompositeRepoMockRecorder) UpdateAgentSubscriptionQuota(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentSubscriptionQuota", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateAgentSubscriptionQuota), arg0, arg1)
}

// UpdateAgentSubscriptionQuotaBranch mocks base method.
func (m *MockUserCompositeRepo) UpdateAgentSubscriptionQuotaBranch(arg0 *gin.Context, arg1 sqlc.UpdateAgentSubscriptionQuotaBranchParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgentSubscriptionQuotaBranch", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateAgentSubscriptionQuotaBranch indicates an expected call of UpdateAgentSubscriptionQuotaBranch.
func (mr *MockUserCompositeRepoMockRecorder) UpdateAgentSubscriptionQuotaBranch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentSubscriptionQuotaBranch", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateAgentSubscriptionQuotaBranch), arg0, arg1)
}

// UpdateBrokerAgent mocks base method.
func (m *MockUserCompositeRepo) UpdateBrokerAgent(arg0 *gin.Context, arg1 sqlc.UpdateBrokerAgentParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerAgent", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateBrokerAgent indicates an expected call of UpdateBrokerAgent.
func (mr *MockUserCompositeRepoMockRecorder) UpdateBrokerAgent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerAgent", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateBrokerAgent), arg0, arg1)
}

// UpdateBrokerAgentStatus mocks base method.
func (m *MockUserCompositeRepo) UpdateBrokerAgentStatus(arg0 *gin.Context, arg1, arg2 int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateBrokerAgentStatus indicates an expected call of UpdateBrokerAgentStatus.
func (mr *MockUserCompositeRepoMockRecorder) UpdateBrokerAgentStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerAgentStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateBrokerAgentStatus), arg0, arg1, arg2)
}

// UpdateBrokerBranchAgent mocks base method.
func (m *MockUserCompositeRepo) UpdateBrokerBranchAgent(arg0 *gin.Context, arg1 sqlc.UpdateBrokerBranchAgentParams) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerBranchAgent", arg0, arg1)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateBrokerBranchAgent indicates an expected call of UpdateBrokerBranchAgent.
func (mr *MockUserCompositeRepoMockRecorder) UpdateBrokerBranchAgent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerBranchAgent", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateBrokerBranchAgent), arg0, arg1)
}

// UpdateBrokerBranchAgentStatus mocks base method.
func (m *MockUserCompositeRepo) UpdateBrokerBranchAgentStatus(arg0 *gin.Context, arg1, arg2 int64) *exceptions.Exception {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBrokerBranchAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*exceptions.Exception)
	return ret0
}

// UpdateBrokerBranchAgentStatus indicates an expected call of UpdateBrokerBranchAgentStatus.
func (mr *MockUserCompositeRepoMockRecorder) UpdateBrokerBranchAgentStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBrokerBranchAgentStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateBrokerBranchAgentStatus), arg0, arg1, arg2)
}

// UpdateDepartment mocks base method.
func (m *MockUserCompositeRepo) UpdateDepartment(arg0 *gin.Context, arg1 sqlc.UpdateDepartmentParams) (*sqlc.Department, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDepartment", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Department)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateDepartment indicates an expected call of UpdateDepartment.
func (mr *MockUserCompositeRepoMockRecorder) UpdateDepartment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDepartment", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateDepartment), arg0, arg1)
}

// UpdatePermission mocks base method.
func (m *MockUserCompositeRepo) UpdatePermission(arg0 *gin.Context, arg1 sqlc.UpdatePermissionParams) (sqlc.Permission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Permission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockUserCompositeRepoMockRecorder) UpdatePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdatePermission), arg0, arg1)
}

// UpdatePlatformUserPassword mocks base method.
func (m *MockUserCompositeRepo) UpdatePlatformUserPassword(arg0 *gin.Context, arg1 sqlc.UpdatePlatformUserPasswordParams) (*sqlc.PlatformUser, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlatformUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.PlatformUser)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdatePlatformUserPassword indicates an expected call of UpdatePlatformUserPassword.
func (mr *MockUserCompositeRepoMockRecorder) UpdatePlatformUserPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlatformUserPassword", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdatePlatformUserPassword), arg0, arg1)
}

// UpdateProfile mocks base method.
func (m *MockUserCompositeRepo) UpdateProfile(arg0 context.Context, arg1 sqlc.UpdateProfileParams) (*sqlc.Profile, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.Profile)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockUserCompositeRepoMockRecorder) UpdateProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateProfile), arg0, arg1)
}

// UpdateRole mocks base method.
func (m *MockUserCompositeRepo) UpdateRole(arg0 *gin.Context, arg1 sqlc.UpdateRoleParams) (sqlc.Role, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Role)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockUserCompositeRepoMockRecorder) UpdateRole(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateRole), arg0, arg1)
}

// UpdateRolePermission mocks base method.
func (m *MockUserCompositeRepo) UpdateRolePermission(arg0 *gin.Context, arg1 sqlc.UpdateRolePermissionParams) (sqlc.RolesPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRolePermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.RolesPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateRolePermission indicates an expected call of UpdateRolePermission.
func (mr *MockUserCompositeRepoMockRecorder) UpdateRolePermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRolePermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateRolePermission), arg0, arg1)
}

// UpdateSectionPermission mocks base method.
func (m *MockUserCompositeRepo) UpdateSectionPermission(arg0 *gin.Context, arg1 sqlc.UpdateSectionPermissionParams) (sqlc.SectionPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSectionPermission", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SectionPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateSectionPermission indicates an expected call of UpdateSectionPermission.
func (mr *MockUserCompositeRepoMockRecorder) UpdateSectionPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSectionPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateSectionPermission), arg0, arg1)
}

// UpdateSubSection mocks base method.
func (m *MockUserCompositeRepo) UpdateSubSection(arg0 *gin.Context, arg1 sqlc.UpdateSubSectionParams) (sqlc.SubSection, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubSection", arg0, arg1)
	ret0, _ := ret[0].(sqlc.SubSection)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateSubSection indicates an expected call of UpdateSubSection.
func (mr *MockUserCompositeRepoMockRecorder) UpdateSubSection(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubSection", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateSubSection), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockUserCompositeRepo) UpdateUser(arg0 *gin.Context, arg1 sqlc.UpdateUserParams) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserPassword mocks base method.
func (m *MockUserCompositeRepo) UpdateUserPassword(arg0 *gin.Context, arg1 sqlc.UpdateUserPasswordParams) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserPassword(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserPassword), arg0, arg1)
}

// UpdateUserPermission mocks base method.
func (m *MockUserCompositeRepo) UpdateUserPermission(arg0 *gin.Context, arg1 sqlc.UpdateUserPermissionParams) (*sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermission", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserPermission indicates an expected call of UpdateUserPermission.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermission", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserPermission), arg0, arg1)
}

// UpdateUserPermissionByID mocks base method.
func (m *MockUserCompositeRepo) UpdateUserPermissionByID(arg0 *gin.Context, arg1 sqlc.UpdateUserPermissionsByIDParams) (sqlc.UserCompanyPermission, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPermissionByID", arg0, arg1)
	ret0, _ := ret[0].(sqlc.UserCompanyPermission)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserPermissionByID indicates an expected call of UpdateUserPermissionByID.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserPermissionByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPermissionByID", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserPermissionByID), arg0, arg1)
}

// UpdateUserStatus mocks base method.
func (m *MockUserCompositeRepo) UpdateUserStatus(arg0 context.Context, arg1 sqlc.UpdateUserStatusParams) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserStatus), arg0, arg1)
}

// UpdateUserStatusWithoutUpdateTime mocks base method.
func (m *MockUserCompositeRepo) UpdateUserStatusWithoutUpdateTime(arg0 *gin.Context, arg1 domain.UserUpdateStatusReq) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatusWithoutUpdateTime", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserStatusWithoutUpdateTime indicates an expected call of UpdateUserStatusWithoutUpdateTime.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserStatusWithoutUpdateTime(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatusWithoutUpdateTime", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserStatusWithoutUpdateTime), arg0, arg1)
}

// UpdateUserType mocks base method.
func (m *MockUserCompositeRepo) UpdateUserType(arg0 *gin.Context, arg1 sqlc.UpdateUserTypeParams) (*sqlc.UserType, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserType", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.UserType)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserType indicates an expected call of UpdateUserType.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserType(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserType", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserType), arg0, arg1)
}

// UpdateUserVerification mocks base method.
func (m *MockUserCompositeRepo) UpdateUserVerification(arg0 *gin.Context, arg1 sqlc.VerifyCompanyUserParams) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserVerification", arg0, arg1)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// UpdateUserVerification indicates an expected call of UpdateUserVerification.
func (mr *MockUserCompositeRepoMockRecorder) UpdateUserVerification(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserVerification", reflect.TypeOf((*MockUserCompositeRepo)(nil).UpdateUserVerification), arg0, arg1)
}

// VerifyAndAvailableUser mocks base method.
func (m *MockUserCompositeRepo) VerifyAndAvailableUser(arg0 context.Context, arg1 int64, arg2 sqlc.Querier) (*sqlc.User, *exceptions.Exception) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAndAvailableUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(*sqlc.User)
	ret1, _ := ret[1].(*exceptions.Exception)
	return ret0, ret1
}

// VerifyAndAvailableUser indicates an expected call of VerifyAndAvailableUser.
func (mr *MockUserCompositeRepoMockRecorder) VerifyAndAvailableUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAndAvailableUser", reflect.TypeOf((*MockUserCompositeRepo)(nil).VerifyAndAvailableUser), arg0, arg1, arg2)
}
